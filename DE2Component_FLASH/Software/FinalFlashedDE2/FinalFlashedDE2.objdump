
FinalFlashedDE2.elf:     file format elf32-littlenios2
FinalFlashedDE2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800000

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00014700 memsz 0x00014a38 flags rwx
    LOAD off    0x00016000 vaddr 0x01400000 paddr 0x01400000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00016020 vaddr 0x01904020 paddr 0x01904020 align 2**12
         filesz 0x00000198 memsz 0x00000198 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01400000  01400000  00016000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  01904020  01904020  00016020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011d4c  00800000  00800000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000c24  00811d4c  00811d4c  00012d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d90  00812970  00812970  00013970  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000338  00814700  00814700  00015700  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000161b8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000df0  00000000  00000000  000161e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000020d8  00000000  00000000  00016fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002bfb3  00000000  00000000  000190a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008b8f  00000000  00000000  0004505b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000179eb  00000000  00000000  0004dbea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000024e8  00000000  00000000  000655d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000025d5  00000000  00000000  00067ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d572  00000000  00000000  0006a095  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00077608  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009c0  00000000  00000000  00077648  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007c29a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0007c29d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007c2a9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007c2aa  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007c2ab  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007c2af  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007c2b3  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0007c2b7  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0007c2c2  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0007c2cd  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  0007c2d8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000047  00000000  00000000  0007c2e5  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00078445  00000000  00000000  0007c32c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01400000 l    d  .entry	00000000 .entry
01904020 l    d  .exceptions	00000000 .exceptions
00800000 l    d  .text	00000000 .text
00811d4c l    d  .rodata	00000000 .rodata
00812970 l    d  .rwdata	00000000 .rwdata
00814700 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00800034 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 CHAP_9.c
00000000 l    df *ABS*	00000000 HAL4D13.c
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 ISR.c
00000000 l    df *ABS*	00000000 MAINLOOP.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 usb_irq.c
00000000 l    df *ABS*	00000000 dp-bit.c
00804d1c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
008053f0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
00805e58 l     F .text	00000058 __sprint_r
00812516 l     O .rodata	00000010 blanks.3452
00812506 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
00812627 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00807ed4 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008098fc l     F .text	00000058 std
00809a08 l     F .text	00000008 __fp_lock
00809a10 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00812c2c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
008146cc l     O .rwdata	00000004 charset
008127cc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00812914 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0080ee70 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080eed0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080efd4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080f2b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0080f40c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0080f8d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008146f4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0080fbbc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
008135e8 l     O .rwdata	00001060 jtag_uart_0
00814648 l     O .rwdata	0000002c rs232_0
00814674 l     O .rwdata	00000034 usb_0
0080fcc4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080fefc l     F .text	0000022c altera_avalon_jtag_uart_irq
00810128 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008107a4 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00810f9c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00811158 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
008112a8 l     F .text	000000f8 alt_file_locked
0081152c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00811b34 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00811ce8 l     F .text	00000040 alt_sim_halt
00805a98 g     F .text	0000001c putchar
0080b6ec g     F .text	00000094 _mprec_log10
008020f8 g     F .text	00000054 Hal4D13_GetErrorCode
0080116c g     F .text	00000064 Chap9_StallEP0InControlRead
0080b7d8 g     F .text	00000088 __any_on
0080d2c8 g     F .text	00000070 _isatty_r
008128ec g     O .rodata	00000028 __mprec_tinytens
0080f46c g     F .text	0000006c alt_main
0080226c g     F .text	00000168 Hal4D13_RegAccess
0080205c g     F .text	0000005c Hal4D13_LockDevice
00805abc g     F .text	000000a0 _puts_r
008147a8 g     O .bss	00000100 alt_irq
0080d338 g     F .text	00000078 _lseek_r
00801cac g     F .text	00000070 Hal4D13_SetIntEnable
00801e9c g     F .text	00000040 Hal4D13_SetDMAConfig
00812970 g     O .rwdata	00000012 DeviceDescr
0080e710 g     F .text	00000088 __eqdf2
00812bec g     O .rwdata	00000040 _NAME_USB_VENDOR_REQUEST
00814a38 g       *ABS*	00000000 __alt_heap_start
00800728 g     F .text	0000023c Chap9_SetAddress
00801108 g     F .text	00000064 Chap9_StallEP0InControlWrite
00805a20 g     F .text	00000044 printf
00803614 g     F .text	00000038 ML_Reserved
0080cc34 g     F .text	00000068 __sseek
00809964 g     F .text	000000a4 __sinit
0080ce34 g     F .text	00000130 __swbuf_r
0080a670 g     F .text	00000084 _setlocale_r
00809a64 g     F .text	0000009c __sfmoreglue
00812a70 g     O .rwdata	0000001a strSerialNum
0080f4f8 g     F .text	00000020 __malloc_unlock
00810ad4 g     F .text	00000090 alt_up_rs232_read_fd
008046c0 g     F .text	00000174 largestPalmLeft
0080b168 g     F .text	000000e0 memmove
008049a8 g     F .text	00000174 largestPalmUp
00803468 g     F .text	000000f4 config_endpoints
00809a54 g     F .text	00000010 _cleanup
0080b860 g     F .text	000000bc _Balloc
0080e820 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00801f1c g     F .text	00000040 Hal4D13_SetDMACounter
00801f9c g     F .text	00000040 Hal4D13_GetDataFromChipRam
01400000 g     F .entry	00000000 __reset
00814704 g     O .bss	00000004 bD13flags
00804b1c g     F .text	0000016c orientation
0080d254 g     F .text	00000074 _fstat_r
00814740 g     O .bss	00000004 errno
0081474c g     O .bss	00000004 alt_argv
0081c6a8 g       *ABS*	00000000 _gp
0080364c g     F .text	000000c8 CHECK_CHIP_ID
0080fa68 g     F .text	00000030 usleep
00801840 g     F .text	000000fc Hal4D13_ReadBulkEndpoint
00813468 g     O .rwdata	00000180 alt_fd_list
00802608 g     F .text	00000030 HID_Set_Report
00805ab4 g     F .text	00000008 _putchar_r
008110c4 g     F .text	00000094 alt_find_dev
0080b0c8 g     F .text	000000a0 memcpy
00809a48 g     F .text	0000000c _cleanup_r
00805220 g     F .text	000000f8 __floatsidf
008026fc g     F .text	00000030 HID_Set_Protocol
00811230 g     F .text	00000078 alt_io_redirect
0080e930 g     F .text	00000088 __ltdf2
00804cd8 g     F .text	00000044 enable_irq
00811d4c g       *ABS*	00000000 __DTOR_END__
00810a60 g     F .text	00000074 alt_up_rs232_read_data
00805b5c g     F .text	00000014 puts
00804834 g     F .text	00000174 largestPalmRight
0080b63c g     F .text	000000b0 __ratio
00802208 g     F .text	0000001c Hal4D13_ConfigDevice
00810340 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00805a64 g     F .text	00000034 _printf_r
01904000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0080552c g     F .text	00000008 __udivsi3
0080f1f4 g     F .text	000000c4 isatty
00801edc g     F .text	00000040 Hal4D13_GetDMAConfig
008127fc g     O .rodata	000000c8 __mprec_tens
0080a64c g     F .text	00000008 __locale_charset
008002c8 g     F .text	00000238 Chap9_ClearFeature
00800964 g     F .text	000002a4 Chap9_GetDescriptor
00812a19 g     O .rwdata	0000002d REPORT_DESCRIPTOR
00814734 g     O .bss	00000004 __malloc_top_pad
00812b48 g     O .rwdata	00000010 _NAME_USB_REQUEST_TYPE
0080201c g     F .text	00000040 Hal4D13_ReadCurrentFrameNumber
00814700 g     O .bss	00000001 ALTERNATIVE_SETTING
008146c8 g     O .rwdata	00000004 __mb_cur_max
0080a654 g     F .text	0000000c _localeconv_r
0080bfc4 g     F .text	0000003c __i2b
0080a030 g     F .text	0000049c __sfvwrite_r
008035b8 g     F .text	0000005c ML_AcknowledgeSETUP
008021ec g     F .text	0000001c Hal4D13_UnconfigDevice
008011d0 g     F .text	0000009c Chap9_SingleTransmitEP0
0080cbbc g     F .text	00000070 _sbrk_r
0080d3b0 g     F .text	00000078 _read_r
00802508 g     F .text	000000a0 HID_Get_Report
0081302c g     O .rwdata	0000000c __lc_ctype
00801424 g     F .text	0000002c Hal4D13_ResetDevice
008146e8 g     O .rwdata	00000004 alt_max_fd
008109c8 g     F .text	00000050 alt_up_rs232_check_parity
008058d0 g     F .text	00000138 __unpack_d
0080d130 g     F .text	00000110 _fclose_r
008146ac g     O .rwdata	00000008 _NAME_USB_REQUEST_DIRECTION
008098c8 g     F .text	00000034 fflush
00814738 g     O .bss	00000004 __malloc_max_sbrked_mem
0080f034 g     F .text	000001c0 alt_irq_register
00800f78 g     F .text	00000100 Chap9_SetInterface
00801d1c g     F .text	00000070 Hal4D13_ReadInterruptRegister
00812acc g     O .rwdata	00000038 strManufacturer
008051ac g     F .text	00000074 __adddf3
0080b51c g     F .text	00000120 __b2d
00802638 g     F .text	000000c4 HID_Set_Idle
0080da94 g     F .text	00000660 __umoddi3
0080f318 g     F .text	000000f4 lseek
008146c4 g     O .rwdata	00000004 _global_impure_ptr
0080126c g     F .text	0000017c Chap9_BurstTransmitEP0
0080c558 g     F .text	000005f4 _realloc_r
00814a38 g       *ABS*	00000000 __bss_end
00814708 g     O .bss	00000008 new_report
00811624 g     F .text	0000010c alt_tick
00802f5c g     F .text	00000274 SetupToken_Handler
0080d428 g     F .text	0000066c __udivdi3
008128c4 g     O .rodata	00000028 __mprec_bigtens
0080c24c g     F .text	00000120 __s2b
0080e9b8 g     F .text	00000194 __floatunsidf
0080b43c g     F .text	00000060 __mcmp
00812b04 g     O .rwdata	00000034 StandardDeviceRequest
008146bc g     O .rwdata	00000004 __ctype_ptr
00812a8a g     O .rwdata	00000042 strProduct
00809a30 g     F .text	00000018 __fp_lock_all
0081158c g     F .text	00000098 alt_alarm_stop
00805e34 g     F .text	00000024 strtol
00814744 g     O .bss	00000004 alt_irq_active
008043c8 g     F .text	00000100 mapGestureToKeycodes
019040ec g     F .exceptions	000000cc alt_irq_handler
00813440 g     O .rwdata	00000028 alt_dev_null
00801744 g     F .text	000000fc Hal4D13_ReadEndpoint
00803588 g     F .text	00000030 change_suspend_state
0080b308 g     F .text	00000070 __hi0bits
00805318 g     F .text	000000d8 __fixdfsi
008146e0 g     O .rwdata	00000008 alt_dev_list
0080fa98 g     F .text	00000124 write
0080c470 g     F .text	000000e8 _putc_r
00801618 g     F .text	00000098 Hal4D13_SoftConnect
0080eefc g     F .text	000000d8 fstat
00810b64 g     F .text	00000094 alt_up_rs232_write_fd
00814710 g     O .bss	00000008 ioRequest
0080c12c g     F .text	00000120 __pow5mult
00814728 g     O .bss	00000004 __nlocale_changed
00805534 g     F .text	00000008 __umodsi3
008016dc g     F .text	00000034 Hal4D13_ClearBuffer
00814a38 g       *ABS*	00000000 end
00801c50 g     F .text	0000005c Hal4D13_GetIntEnable
00805a08 g     F .text	0000000c _atoi_r
00812a46 g     O .rwdata	00000018 strInterface
0080fe44 g     F .text	000000b8 altera_avalon_jtag_uart_init
00801510 g     F .text	0000004c Hal4D13_GetMode
00811d48 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00804324 g     F .text	000000a4 reportChanged
00810818 g     F .text	00000088 alt_avalon_timer_sc_init
0080553c g     F .text	00000080 __clzsi2
008029a0 g     F .text	00000030 Isr_SuspendChange
00810564 g     F .text	00000240 altera_avalon_jtag_uart_write
008044c8 g     F .text	00000084 noMovement
00809954 g     F .text	00000004 __sfp_lock_acquire
0080afe4 g     F .text	000000e4 memchr
00805eb0 g     F .text	00001ec4 ___vfprintf_internal_r
00809d1c g     F .text	00000314 _free_r
0080f518 g     F .text	00000258 alt_printf
00803294 g     F .text	0000012c help_devreq
00811b38 g     F .text	000001b0 __call_exitprocs
008025d8 g     F .text	00000030 HID_Get_Protocol
0081472c g     O .bss	00000004 __mlocale_changed
008033c0 g     F .text	00000040 disconnect_USB_controller
008146d4 g     O .rwdata	00000004 __malloc_sbrk_base
00800000 g     F .text	00000038 _start
00814754 g     O .bss	00000004 _alt_tick_rate
0080bc24 g     F .text	0000014c __lshift
00814758 g     O .bss	00000004 _alt_nticks
00801a38 g     F .text	00000128 Hal4D13_WriteEndpoint
0080f7b0 g     F .text	00000124 read
0080fc50 g     F .text	00000074 alt_sys_init
00802224 g     F .text	00000048 Hal4D13_SingleTransmitEP0
00811a00 g     F .text	00000134 __register_exitproc
00810988 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
008029d0 g     F .text	00000030 Isr_SHORT_PACKET
0080bd70 g     F .text	00000254 __multiply
00801e34 g     F .text	00000068 Hal4D13_SetEndpointStatus
008101d8 g     F .text	00000074 altera_avalon_jtag_uart_close
0080eb4c g     F .text	00000038 __mulsi3
008146b4 g     O .rwdata	00000004 VendorDeviceRequest
0081475c g     O .bss	00000028 __malloc_current_mallinfo
0080b91c g     F .text	0000017c __d2b
008146b8 g     O .rwdata	00000001 INT_Enabled
0080fcfc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00811870 g     F .text	000000d0 alt_get_fd
00802760 g     F .text	00000154 usb_isr
00810d8c g     F .text	0000015c alt_busy_sleep
0080eca8 g     F .text	000000c8 __fpcmp_parts_d
0080d0c0 g     F .text	00000070 _close_r
00802410 g     F .text	0000003c Hal4D13_StallEP0InControlRead
0081198c g     F .text	00000074 memcmp
0080fdac g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00814a38 g       *ABS*	00000000 __alt_stack_base
0080fdf4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00807d98 g     F .text	0000013c __swsetup_r
00812b38 g     O .rwdata	00000010 _NAME_USB_REQUEST_RECIPIENT
00802cec g     F .text	00000218 Isr_Ep00TxDone
0080e4b8 g     F .text	00000258 __divdf3
00809b00 g     F .text	000000f0 __sfp
00812bbc g     O .rwdata	00000030 _NAME_USB_CLASS_REQUEST
0080b780 g     F .text	00000058 __copybits
00813038 g     O .rwdata	00000408 __malloc_av_
00800500 g     F .text	00000228 Chap9_SetFeature
00809960 g     F .text	00000004 __sinit_lock_release
0080e0f4 g     F .text	000003c4 __muldf3
0080cd18 g     F .text	00000060 __sread
008108f4 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
00811750 g     F .text	00000120 alt_find_file
00810ee8 g     F .text	000000b4 alt_dev_llist_insert
0080f4d8 g     F .text	00000020 __malloc_lock
0080f9ac g     F .text	000000bc sbrk
00802ae8 g     F .text	00000204 Isr_Ep00RxDone
008028b4 g     F .text	000000ec Isr_BusReset
008096cc g     F .text	000001fc _fflush_r
0080cff8 g     F .text	000000c8 _calloc_r
008025a8 g     F .text	00000030 HID_Get_Idle
00801d8c g     F .text	00000054 Hal4D13_GetEndpointStatusWInteruptClear
00801078 g     F .text	00000090 Chap9_StallEP0
00814700 g       *ABS*	00000000 __bss_start
0080b248 g     F .text	00000098 memset
008014d0 g     F .text	00000040 Hal4D13_SetMode
00803714 g     F .text	00000c10 main
00814750 g     O .bss	00000004 alt_envp
0081473c g     O .bss	00000004 __malloc_max_total_mem
00814718 g     O .bss	00000008 hid_settings
0080fd54 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080cf64 g     F .text	0000001c __swbuf
0080cc2c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080214c g     F .text	00000054 Hal4D13_GetEndpointConfig
0080d240 g     F .text	00000014 fclose
00805be4 g     F .text	00000250 _strtol_r
008148a8 g     O .bss	00000190 _atexit0
00808118 g     F .text	000015b4 _dtoa_r
0080a8a4 g     F .text	00000740 _malloc_r
008146ec g     O .rwdata	00000004 alt_errno
0080155c g     F .text	0000004c Hal4D13_GetAddress
0080a594 g     F .text	000000b8 _fwalk
0080355c g     F .text	0000002c reconnect_USB_controller
0080c36c g     F .text	00000104 putc
0080546c g     F .text	00000060 __divsi3
00812390 g     O .rodata	00000014 __thenan_df
008023d4 g     F .text	0000003c Hal4D13_StallEP0InControlWrite
00809bf0 g     F .text	0000012c _malloc_trim_r
00811d4c g       *ABS*	00000000 __CTOR_END__
0080cd78 g     F .text	000000bc strcmp
00802a00 g     F .text	000000cc Isr_DmaEot
00811d4c g       *ABS*	00000000 __DTOR_LIST__
008024cc g     F .text	0000003c Read_HC_Config_Reg
00801710 g     F .text	00000034 Hal4D13_ValidBuffer
008020b8 g     F .text	00000040 Hal4D13_ReadChipID
00810bf8 g     F .text	00000040 alt_up_rs232_open_dev
008031d0 g     F .text	000000c4 DeviceRequest_Handler
00801b60 g     F .text	000000f0 Hal4D13_WriteBulkEndpoint
0080e798 g     F .text	00000088 __nedf2
01880000 g       *ABS*	00000000 __alt_mem_sram_0
0080fc1c g     F .text	00000034 alt_irq_init
0080f934 g     F .text	00000078 alt_release_fd
008123a4 g     O .rodata	00000100 __clz_tab
00814730 g     O .bss	00000004 _PathLocale
01400000 g       *ABS*	00000000 __alt_mem_generic_tristate_controller_0
00811940 g     F .text	00000014 atexit
00801490 g     F .text	00000040 Hal4D13_SetDevConfig
0080cf80 g     F .text	00000078 _write_r
00801450 g     F .text	00000040 Hal4D13_GetDevConfig
0080a6f4 g     F .text	0000001c setlocale
0080244c g     F .text	00000040 Hal4D13_IsSetupPktInvalid
00802f04 g     F .text	00000058 Isr_Ep01Done
00814784 g     O .bss	00000024 ControlData
008146c0 g     O .rwdata	00000004 _impure_ptr
00814748 g     O .bss	00000004 alt_argc
00811060 g     F .text	00000064 _do_dtors
008129ec g     O .rwdata	0000002d REPORT_DESCRIPTOR2
00800c08 g     F .text	000000c0 Chap9_GetConfiguration
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
01904020 g       .exceptions	00000000 alt_irq_entry
0080b49c g     F .text	00000080 __ulp
0080cb4c g     F .text	00000040 __isinfd
00809a18 g     F .text	00000018 __fp_unlock_all
008146d8 g     O .rwdata	00000008 alt_fs_list
008108a0 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
00812982 g     O .rwdata	00000022 ConfigDescr_a
00812a5e g     O .rwdata	00000012 strConfiguration
00810a18 g     F .text	00000048 alt_up_rs232_write_data
0080a660 g     F .text	00000010 localeconv
00812b58 g     O .rwdata	00000034 _NAME_USB_STANDARD_REQUEST
008021a0 g     F .text	0000004c Hal4D13_SetEndpointConfig
00814700 g       *ABS*	00000000 _edata
00814a38 g       *ABS*	00000000 _end
0081024c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080248c g     F .text	00000040 Write_HC_Config_Reg
008015a8 g     F .text	00000070 Hal4D13_SetAddressEnable
0080cc9c g     F .text	0000007c __swrite
00814720 g     O .bss	00000003 bUSBCheck_Device_State
008146d0 g     O .rwdata	00000004 __malloc_trim_threshold
00801fdc g     F .text	00000040 Hal4D13_SetDataToChipRam
00811730 g     F .text	00000020 altera_nios2_qsys_irq_init
00800ed4 g     F .text	000000a4 Chap9_GetInterface
00811954 g     F .text	00000038 exit
0080a4cc g     F .text	000000c8 _fwalk_reent
0080ba98 g     F .text	0000018c __mdiff
008054cc g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
01904020 g     F .exceptions	00000000 alt_exception
00809958 g     F .text	00000004 __sfp_lock_release
008016b0 g     F .text	0000002c Hal4D13_AcknowledgeSETUP
00805a14 g     F .text	0000000c atoi
00801f5c g     F .text	00000040 Hal4D13_GetDMACounter
00812526 g     O .rodata	00000101 _ctype_
00811d28 g     F .text	00000020 _exit
0080cb8c g     F .text	00000030 __isnand
00810c38 g     F .text	00000154 alt_alarm_start
00801de0 g     F .text	00000054 Hal4D13_GetEndpointStatusWOInteruptClear
0080eb84 g     F .text	00000124 __muldi3
0080a710 g     F .text	00000194 __smakebuf_r
00805b70 g     F .text	00000074 strlen
0080454c g     F .text	00000174 largest
008113a0 g     F .text	0000018c open
0080e8a8 g     F .text	00000088 __gedf2
0080f770 g     F .text	00000040 alt_putchar
00800038 g     F .text	00000290 Chap9_GetStatus
008146f0 g     O .rwdata	00000004 alt_priority_mask
008129a4 g     O .rwdata	00000048 ConfigDescr
00807d74 g     F .text	00000024 __vfprintf_internal
0080512c g     F .text	00000080 __subdf3
00803400 g     F .text	00000068 connect_USB_controller
0080b378 g     F .text	000000c4 __lo0bits
008146f8 g     O .rwdata	00000008 alt_alarm_list
00810ffc g     F .text	00000064 _do_ctors
00814724 g     O .bss	00000004 status
0080193c g     F .text	000000fc Hal4D13_ReadEndpointWOClearBuffer
00802acc g     F .text	0000001c Isr_SOF
0081094c g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
0080ed70 g     F .text	00000100 close
008013e8 g     F .text	0000003c Hal4D13_AcquireD13
00800cc8 g     F .text	0000020c Chap9_SetConfiguration
008055bc g     F .text	00000314 __pack_d
0080272c g     F .text	00000034 fn_usb_isr
008146a8 g     O .rwdata	00000004 strLanguage
00812b8c g     O .rwdata	00000030 ClassDeviceRequest
00804c88 g     F .text	00000050 disable_irq
00000000  w      *UND*	00000000 free
0080995c g     F .text	00000004 __sinit_lock_acquire
0080c000 g     F .text	0000012c __multadd
0080b2e0 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

01904020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1904020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1904024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1904028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 190402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1904030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1904034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1904038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 190403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1904040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1904044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1904048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 190404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1904050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1904054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1904058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 190405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1904060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1904064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1904068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 190406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1904070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1904074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1904078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 190407c:	10000326 	beq	r2,zero,190408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1904080:	20000226 	beq	r4,zero,190408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1904084:	19040ec0 	call	19040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1904088:	00000306 	br	1904098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 190408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1904090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1904094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1904098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 190409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 19040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 19040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 19040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 19040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 19040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 19040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 19040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 19040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 19040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 19040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 19040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 19040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 19040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 19040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 19040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 19040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 19040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 19040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 19040e8:	ef80083a 	eret

019040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 19040ec:	defff904 	addi	sp,sp,-28
 19040f0:	dfc00615 	stw	ra,24(sp)
 19040f4:	df000515 	stw	fp,20(sp)
 19040f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 19040fc:	0005313a 	rdctl	r2,ipending
 1904100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1904104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1904108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 190410c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1904110:	00800044 	movi	r2,1
 1904114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1904118:	e0ffff17 	ldw	r3,-4(fp)
 190411c:	e0bffe17 	ldw	r2,-8(fp)
 1904120:	1884703a 	and	r2,r3,r2
 1904124:	1005003a 	cmpeq	r2,r2,zero
 1904128:	1000171e 	bne	r2,zero,1904188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 190412c:	e0bffd17 	ldw	r2,-12(fp)
 1904130:	00c02074 	movhi	r3,129
 1904134:	18d1ea04 	addi	r3,r3,18344
 1904138:	100490fa 	slli	r2,r2,3
 190413c:	10c5883a 	add	r2,r2,r3
 1904140:	11800017 	ldw	r6,0(r2)
 1904144:	e0bffd17 	ldw	r2,-12(fp)
 1904148:	00c02074 	movhi	r3,129
 190414c:	18d1ea04 	addi	r3,r3,18344
 1904150:	100490fa 	slli	r2,r2,3
 1904154:	10c5883a 	add	r2,r2,r3
 1904158:	10800104 	addi	r2,r2,4
 190415c:	11000017 	ldw	r4,0(r2)
 1904160:	e17ffd17 	ldw	r5,-12(fp)
 1904164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1904168:	0005313a 	rdctl	r2,ipending
 190416c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1904170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1904174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1904178:	e0bfff17 	ldw	r2,-4(fp)
 190417c:	1004c03a 	cmpne	r2,r2,zero
 1904180:	103fe21e 	bne	r2,zero,190410c <alt_irq_handler+0x20>
 1904184:	00000706 	br	19041a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1904188:	e0bffe17 	ldw	r2,-8(fp)
 190418c:	1085883a 	add	r2,r2,r2
 1904190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1904194:	e0bffd17 	ldw	r2,-12(fp)
 1904198:	10800044 	addi	r2,r2,1
 190419c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19041a0:	003fdd06 	br	1904118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 19041a4:	e037883a 	mov	sp,fp
 19041a8:	dfc00117 	ldw	ra,4(sp)
 19041ac:	df000017 	ldw	fp,0(sp)
 19041b0:	dec00204 	addi	sp,sp,8
 19041b4:	f800283a 	ret

Disassembly of section .text:

00800000 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800000:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800004:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  800008:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  80000c:	d6b1aa14 	ori	gp,gp,50856
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800010:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800014:	1091c014 	ori	r2,r2,18176

    movhi r3, %hi(__bss_end)
  800018:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  80001c:	18d28e14 	ori	r3,r3,19000

    beq r2, r3, 1f
  800020:	10c00326 	beq	r2,r3,800030 <_start+0x30>

0:
    stw zero, (r2)
  800024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80002c:	10fffd36 	bltu	r2,r3,800024 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800030:	080f46c0 	call	80f46c <alt_main>

00800034 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800034:	003fff06 	br	800034 <alt_after_alt_main>

00800038 <Chap9_GetStatus>:
// *************************************************************************
// USB standard device requests
// *************************************************************************

void Chap9_GetStatus(void)
{
  800038:	defffa04 	addi	sp,sp,-24
  80003c:	dfc00515 	stw	ra,20(sp)
  800040:	df000415 	stw	fp,16(sp)
  800044:	df000404 	addi	fp,sp,16
    UCHAR   endp, txdat[2];
    UCHAR   c;
    UCHAR   bRecipient = ControlData.DeviceRequest.bmRequestType & USB_RECIPIENT;
  800048:	00802074 	movhi	r2,129
  80004c:	1091e104 	addi	r2,r2,18308
  800050:	10800083 	ldbu	r2,2(r2)
  800054:	108007cc 	andi	r2,r2,31
  800058:	e0bffc05 	stb	r2,-16(fp)


    if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
  80005c:	00802074 	movhi	r2,129
  800060:	1091c804 	addi	r2,r2,18208
  800064:	10800003 	ldbu	r2,0(r2)
  800068:	1080008c 	andi	r2,r2,2
  80006c:	10803fcc 	andi	r2,r2,255
  800070:	1005003a 	cmpeq	r2,r2,zero
  800074:	10003e1e 	bne	r2,zero,800170 <Chap9_GetStatus+0x138>
    {
    switch(bRecipient)
  800078:	e0bffc03 	ldbu	r2,-16(fp)
  80007c:	e0bfff15 	stw	r2,-4(fp)
  800080:	e0ffff17 	ldw	r3,-4(fp)
  800084:	18800060 	cmpeqi	r2,r3,1
  800088:	1000171e 	bne	r2,zero,8000e8 <Chap9_GetStatus+0xb0>
  80008c:	e0ffff17 	ldw	r3,-4(fp)
  800090:	188000a0 	cmpeqi	r2,r3,2
  800094:	1000161e 	bne	r2,zero,8000f0 <Chap9_GetStatus+0xb8>
  800098:	e0ffff17 	ldw	r3,-4(fp)
  80009c:	1805003a 	cmpeq	r2,r3,zero
  8000a0:	1000011e 	bne	r2,zero,8000a8 <Chap9_GetStatus+0x70>
  8000a4:	00003006 	br	800168 <Chap9_GetStatus+0x130>
            {
            case USB_RECIPIENT_DEVICE:
                    if(bD13flags.bits.remote_wakeup == 1)
  8000a8:	00802074 	movhi	r2,129
  8000ac:	1091c104 	addi	r2,r2,18180
  8000b0:	10800017 	ldw	r2,0(r2)
  8000b4:	1080040c 	andi	r2,r2,16
  8000b8:	1005003a 	cmpeq	r2,r2,zero
  8000bc:	1000031e 	bne	r2,zero,8000cc <Chap9_GetStatus+0x94>
                        txdat[0] = DEVSTS_SELFPOWERED|DEVSTS_REMOTEWAKEUP;   /* remote wakeup and Self-powered */
  8000c0:	008000c4 	movi	r2,3
  8000c4:	e0bffcc5 	stb	r2,-13(fp)
  8000c8:	00000206 	br	8000d4 <Chap9_GetStatus+0x9c>
                    else
                        txdat[0] = DEVSTS_SELFPOWERED;   /* Self-powered*/
  8000cc:	00800044 	movi	r2,1
  8000d0:	e0bffcc5 	stb	r2,-13(fp)
                    txdat[1]=0;
  8000d4:	e03ffd05 	stb	zero,-12(fp)

                    Chap9_SingleTransmitEP0(txdat, 2);
  8000d8:	e13ffcc4 	addi	r4,fp,-13
  8000dc:	01400084 	movi	r5,2
  8000e0:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
                    break;
  8000e4:	00007306 	br	8002b4 <Chap9_GetStatus+0x27c>

            case USB_RECIPIENT_INTERFACE:

                    Chap9_StallEP0InControlRead();
  8000e8:	080116c0 	call	80116c <Chap9_StallEP0InControlRead>
                    break;
  8000ec:	00007106 	br	8002b4 <Chap9_GetStatus+0x27c>

            case USB_RECIPIENT_ENDPOINT:

                    if( ControlData.DeviceRequest.wIndex == 0x00 )
  8000f0:	00802074 	movhi	r2,129
  8000f4:	1091e104 	addi	r2,r2,18308
  8000f8:	1080018b 	ldhu	r2,6(r2)
  8000fc:	10bfffcc 	andi	r2,r2,65535
  800100:	1004c03a 	cmpne	r2,r2,zero
  800104:	1000161e 	bne	r2,zero,800160 <Chap9_GetStatus+0x128>
                    {
                        endp = -1;
  800108:	00bfffc4 	movi	r2,-1
  80010c:	e0bffc85 	stb	r2,-14(fp)
                        c = Hal4D13_GetEndpointStatusWOInteruptClear(endp + 1);
  800110:	e0bffc83 	ldbu	r2,-14(fp)
  800114:	10800044 	addi	r2,r2,1
  800118:	11003fcc 	andi	r4,r2,255
  80011c:	0801de00 	call	801de0 <Hal4D13_GetEndpointStatusWOInteruptClear>
  800120:	e0bffc45 	stb	r2,-15(fp)
                        if(c & D13REG_EPSTS_STALL)
  800124:	e0bffc43 	ldbu	r2,-15(fp)
  800128:	10803fcc 	andi	r2,r2,255
  80012c:	1080201c 	xori	r2,r2,128
  800130:	10bfe004 	addi	r2,r2,-128
  800134:	1004403a 	cmpge	r2,r2,zero
  800138:	1000031e 	bne	r2,zero,800148 <Chap9_GetStatus+0x110>
                            txdat[0] = ENDPSTS_HALT;   /* Halt */
  80013c:	00800044 	movi	r2,1
  800140:	e0bffcc5 	stb	r2,-13(fp)
  800144:	00000106 	br	80014c <Chap9_GetStatus+0x114>
                        else
                            txdat[0] = 0;
  800148:	e03ffcc5 	stb	zero,-13(fp)

                        txdat[1] = 0;
  80014c:	e03ffd05 	stb	zero,-12(fp)

                        Chap9_SingleTransmitEP0(txdat, 2);
  800150:	e13ffcc4 	addi	r4,fp,-13
  800154:	01400084 	movi	r5,2
  800158:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
  80015c:	00005506 	br	8002b4 <Chap9_GetStatus+0x27c>
                    }
                    else
                        Chap9_StallEP0InControlRead();
  800160:	080116c0 	call	80116c <Chap9_StallEP0InControlRead>

                    break;
  800164:	00005306 	br	8002b4 <Chap9_GetStatus+0x27c>

            default:
                    Chap9_StallEP0InControlRead();
  800168:	080116c0 	call	80116c <Chap9_StallEP0InControlRead>
  80016c:	00005106 	br	8002b4 <Chap9_GetStatus+0x27c>
    }


    else
    {
        if(ControlData.DeviceRequest.wValue == 0 && ControlData.DeviceRequest.wLength == 2 )
  800170:	00802074 	movhi	r2,129
  800174:	1091e104 	addi	r2,r2,18308
  800178:	1080010b 	ldhu	r2,4(r2)
  80017c:	10bfffcc 	andi	r2,r2,65535
  800180:	1004c03a 	cmpne	r2,r2,zero
  800184:	10004b1e 	bne	r2,zero,8002b4 <Chap9_GetStatus+0x27c>
  800188:	00802074 	movhi	r2,129
  80018c:	1091e104 	addi	r2,r2,18308
  800190:	1080020b 	ldhu	r2,8(r2)
  800194:	10bfffcc 	andi	r2,r2,65535
  800198:	10800098 	cmpnei	r2,r2,2
  80019c:	1000451e 	bne	r2,zero,8002b4 <Chap9_GetStatus+0x27c>
        {
            switch(bRecipient)
  8001a0:	e0bffc03 	ldbu	r2,-16(fp)
  8001a4:	e0bffe15 	stw	r2,-8(fp)
  8001a8:	e0fffe17 	ldw	r3,-8(fp)
  8001ac:	18800060 	cmpeqi	r2,r3,1
  8001b0:	1000171e 	bne	r2,zero,800210 <Chap9_GetStatus+0x1d8>
  8001b4:	e0fffe17 	ldw	r3,-8(fp)
  8001b8:	188000a0 	cmpeqi	r2,r3,2
  8001bc:	10001a1e 	bne	r2,zero,800228 <Chap9_GetStatus+0x1f0>
  8001c0:	e0fffe17 	ldw	r3,-8(fp)
  8001c4:	1805003a 	cmpeq	r2,r3,zero
  8001c8:	1000011e 	bne	r2,zero,8001d0 <Chap9_GetStatus+0x198>
  8001cc:	00003806 	br	8002b0 <Chap9_GetStatus+0x278>
            {
            case USB_RECIPIENT_DEVICE:
                    if(bD13flags.bits.remote_wakeup == 1)
  8001d0:	00802074 	movhi	r2,129
  8001d4:	1091c104 	addi	r2,r2,18180
  8001d8:	10800017 	ldw	r2,0(r2)
  8001dc:	1080040c 	andi	r2,r2,16
  8001e0:	1005003a 	cmpeq	r2,r2,zero
  8001e4:	1000031e 	bne	r2,zero,8001f4 <Chap9_GetStatus+0x1bc>
                        txdat[0] = DEVSTS_SELFPOWERED|DEVSTS_REMOTEWAKEUP;   /* remote wakeup and Self-powered */
  8001e8:	008000c4 	movi	r2,3
  8001ec:	e0bffcc5 	stb	r2,-13(fp)
  8001f0:	00000206 	br	8001fc <Chap9_GetStatus+0x1c4>
                    else
                        txdat[0] = DEVSTS_SELFPOWERED;   /* Self-powered*/
  8001f4:	00800044 	movi	r2,1
  8001f8:	e0bffcc5 	stb	r2,-13(fp)
                    txdat[1]=0;
  8001fc:	e03ffd05 	stb	zero,-12(fp)

                    Chap9_SingleTransmitEP0(txdat, 2);
  800200:	e13ffcc4 	addi	r4,fp,-13
  800204:	01400084 	movi	r5,2
  800208:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
                    break;
  80020c:	00002906 	br	8002b4 <Chap9_GetStatus+0x27c>

            case USB_RECIPIENT_INTERFACE:
                    txdat[0]=0;
  800210:	e03ffcc5 	stb	zero,-13(fp)
                    txdat[1]=0;
  800214:	e03ffd05 	stb	zero,-12(fp)

                    Chap9_SingleTransmitEP0(txdat, 2);
  800218:	e13ffcc4 	addi	r4,fp,-13
  80021c:	01400084 	movi	r5,2
  800220:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
                    break;
  800224:	00002306 	br	8002b4 <Chap9_GetStatus+0x27c>

            case USB_RECIPIENT_ENDPOINT:

                    if( ControlData.DeviceRequest.wIndex == 0x00 )
  800228:	00802074 	movhi	r2,129
  80022c:	1091e104 	addi	r2,r2,18308
  800230:	1080018b 	ldhu	r2,6(r2)
  800234:	10bfffcc 	andi	r2,r2,65535
  800238:	1004c03a 	cmpne	r2,r2,zero
  80023c:	1000031e 	bne	r2,zero,80024c <Chap9_GetStatus+0x214>
                        endp = -1;
  800240:	00bfffc4 	movi	r2,-1
  800244:	e0bffc85 	stb	r2,-14(fp)
  800248:	00000506 	br	800260 <Chap9_GetStatus+0x228>
                    else
                        endp = (UCHAR)(ControlData.DeviceRequest.wIndex & MAX_ENDPOINTS);
  80024c:	00802074 	movhi	r2,129
  800250:	1091e104 	addi	r2,r2,18308
  800254:	1080018b 	ldhu	r2,6(r2)
  800258:	108003cc 	andi	r2,r2,15
  80025c:	e0bffc85 	stb	r2,-14(fp)

                    c = Hal4D13_GetEndpointStatusWOInteruptClear(endp + 1);
  800260:	e0bffc83 	ldbu	r2,-14(fp)
  800264:	10800044 	addi	r2,r2,1
  800268:	11003fcc 	andi	r4,r2,255
  80026c:	0801de00 	call	801de0 <Hal4D13_GetEndpointStatusWOInteruptClear>
  800270:	e0bffc45 	stb	r2,-15(fp)
                    if(c & D13REG_EPSTS_STALL)
  800274:	e0bffc43 	ldbu	r2,-15(fp)
  800278:	10803fcc 	andi	r2,r2,255
  80027c:	1080201c 	xori	r2,r2,128
  800280:	10bfe004 	addi	r2,r2,-128
  800284:	1004403a 	cmpge	r2,r2,zero
  800288:	1000031e 	bne	r2,zero,800298 <Chap9_GetStatus+0x260>
                        txdat[0] = ENDPSTS_HALT;   /* Halt */
  80028c:	00800044 	movi	r2,1
  800290:	e0bffcc5 	stb	r2,-13(fp)
  800294:	00000106 	br	80029c <Chap9_GetStatus+0x264>
                    else
                        txdat[0] = 0;
  800298:	e03ffcc5 	stb	zero,-13(fp)

                    txdat[1] = 0;
  80029c:	e03ffd05 	stb	zero,-12(fp)

                    Chap9_SingleTransmitEP0(txdat, 2);
  8002a0:	e13ffcc4 	addi	r4,fp,-13
  8002a4:	01400084 	movi	r5,2
  8002a8:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
                    break;
  8002ac:	00000106 	br	8002b4 <Chap9_GetStatus+0x27c>

            default:
                    Chap9_StallEP0InControlRead();
  8002b0:	080116c0 	call	80116c <Chap9_StallEP0InControlRead>
                    break;
            }
        }
    }

}
  8002b4:	e037883a 	mov	sp,fp
  8002b8:	dfc00117 	ldw	ra,4(sp)
  8002bc:	df000017 	ldw	fp,0(sp)
  8002c0:	dec00204 	addi	sp,sp,8
  8002c4:	f800283a 	ret

008002c8 <Chap9_ClearFeature>:

void Chap9_ClearFeature(void)
{
  8002c8:	defffb04 	addi	sp,sp,-20
  8002cc:	dfc00415 	stw	ra,16(sp)
  8002d0:	df000315 	stw	fp,12(sp)
  8002d4:	df000304 	addi	fp,sp,12
    UCHAR   endp;
    UCHAR   bRecipient = ControlData.DeviceRequest.bmRequestType & USB_RECIPIENT;
  8002d8:	00802074 	movhi	r2,129
  8002dc:	1091e104 	addi	r2,r2,18308
  8002e0:	10800083 	ldbu	r2,2(r2)
  8002e4:	108007cc 	andi	r2,r2,31
  8002e8:	e0bffd85 	stb	r2,-10(fp)
    USHORT  wFeature = ControlData.DeviceRequest.wValue;
  8002ec:	00802074 	movhi	r2,129
  8002f0:	1091e104 	addi	r2,r2,18308
  8002f4:	1080010b 	ldhu	r2,4(r2)
  8002f8:	e0bffd0d 	sth	r2,-12(fp)

    if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
  8002fc:	00802074 	movhi	r2,129
  800300:	1091c804 	addi	r2,r2,18208
  800304:	10800003 	ldbu	r2,0(r2)
  800308:	1080008c 	andi	r2,r2,2
  80030c:	10803fcc 	andi	r2,r2,255
  800310:	1005003a 	cmpeq	r2,r2,zero
  800314:	1000351e 	bne	r2,zero,8003ec <Chap9_ClearFeature+0x124>
    {
        if( ControlData.DeviceRequest.wLength == 0 )
  800318:	00802074 	movhi	r2,129
  80031c:	1091e104 	addi	r2,r2,18308
  800320:	1080020b 	ldhu	r2,8(r2)
  800324:	10bfffcc 	andi	r2,r2,65535
  800328:	1004c03a 	cmpne	r2,r2,zero
  80032c:	10006f1e 	bne	r2,zero,8004ec <Chap9_ClearFeature+0x224>
        {
            switch(bRecipient)
  800330:	e0bffd83 	ldbu	r2,-10(fp)
  800334:	e0bfff15 	stw	r2,-4(fp)
  800338:	e0ffff17 	ldw	r3,-4(fp)
  80033c:	1805003a 	cmpeq	r2,r3,zero
  800340:	1000041e 	bne	r2,zero,800354 <Chap9_ClearFeature+0x8c>
  800344:	e0ffff17 	ldw	r3,-4(fp)
  800348:	188000a0 	cmpeqi	r2,r3,2
  80034c:	1000101e 	bne	r2,zero,800390 <Chap9_ClearFeature+0xc8>
  800350:	00002406 	br	8003e4 <Chap9_ClearFeature+0x11c>
            {
            case USB_RECIPIENT_DEVICE:
                        if(wFeature == USB_FEATURE_REMOTE_WAKEUP)
  800354:	e0bffd0b 	ldhu	r2,-12(fp)
  800358:	10800058 	cmpnei	r2,r2,1
  80035c:	10000a1e 	bne	r2,zero,800388 <Chap9_ClearFeature+0xc0>
                        {
                        bD13flags.bits.remote_wakeup = 0;
  800360:	01002074 	movhi	r4,129
  800364:	2111c104 	addi	r4,r4,18180
  800368:	20c00017 	ldw	r3,0(r4)
  80036c:	00bffbc4 	movi	r2,-17
  800370:	1884703a 	and	r2,r3,r2
  800374:	20800015 	stw	r2,0(r4)
                        Chap9_SingleTransmitEP0(0, 0);
  800378:	0009883a 	mov	r4,zero
  80037c:	000b883a 	mov	r5,zero
  800380:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
  800384:	00005906 	br	8004ec <Chap9_ClearFeature+0x224>
                        }
                        else
                            Chap9_StallEP0InControlWrite();
  800388:	08011080 	call	801108 <Chap9_StallEP0InControlWrite>

                        break;
  80038c:	00005706 	br	8004ec <Chap9_ClearFeature+0x224>



            case USB_RECIPIENT_ENDPOINT:

                        if(wFeature == USB_FEATURE_ENDPOINT_STALL)
  800390:	e0bffd0b 	ldhu	r2,-12(fp)
  800394:	1004c03a 	cmpne	r2,r2,zero
  800398:	1000101e 	bne	r2,zero,8003dc <Chap9_ClearFeature+0x114>
                        {
                            if( ControlData.DeviceRequest.wIndex == 0x00 )
  80039c:	00802074 	movhi	r2,129
  8003a0:	1091e104 	addi	r2,r2,18308
  8003a4:	1080018b 	ldhu	r2,6(r2)
  8003a8:	10bfffcc 	andi	r2,r2,65535
  8003ac:	1004c03a 	cmpne	r2,r2,zero
  8003b0:	1000081e 	bne	r2,zero,8003d4 <Chap9_ClearFeature+0x10c>
                            {
                                endp = 0;
  8003b4:	e03ffdc5 	stb	zero,-9(fp)
                                Hal4D13_SetEndpointStatus(endp, 0);
  8003b8:	e13ffdc3 	ldbu	r4,-9(fp)
  8003bc:	000b883a 	mov	r5,zero
  8003c0:	0801e340 	call	801e34 <Hal4D13_SetEndpointStatus>

                                Chap9_SingleTransmitEP0(0, 0);
  8003c4:	0009883a 	mov	r4,zero
  8003c8:	000b883a 	mov	r5,zero
  8003cc:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
  8003d0:	00004606 	br	8004ec <Chap9_ClearFeature+0x224>
                            }
                            else
                            {
                                Chap9_StallEP0InControlWrite();
  8003d4:	08011080 	call	801108 <Chap9_StallEP0InControlWrite>
                                break;
  8003d8:	00004406 	br	8004ec <Chap9_ClearFeature+0x224>
                            }

                        }

                        else
                            Chap9_StallEP0InControlWrite();
  8003dc:	08011080 	call	801108 <Chap9_StallEP0InControlWrite>

                        break;
  8003e0:	00004206 	br	8004ec <Chap9_ClearFeature+0x224>


            default:
                        Chap9_StallEP0InControlWrite();
  8003e4:	08011080 	call	801108 <Chap9_StallEP0InControlWrite>
  8003e8:	00004006 	br	8004ec <Chap9_ClearFeature+0x224>
    }

    else
    {

        if( ControlData.DeviceRequest.wLength == 0 )
  8003ec:	00802074 	movhi	r2,129
  8003f0:	1091e104 	addi	r2,r2,18308
  8003f4:	1080020b 	ldhu	r2,8(r2)
  8003f8:	10bfffcc 	andi	r2,r2,65535
  8003fc:	1004c03a 	cmpne	r2,r2,zero
  800400:	10003a1e 	bne	r2,zero,8004ec <Chap9_ClearFeature+0x224>
        {
            switch(bRecipient)
  800404:	e0bffd83 	ldbu	r2,-10(fp)
  800408:	e0bffe15 	stw	r2,-8(fp)
  80040c:	e0fffe17 	ldw	r3,-8(fp)
  800410:	1805003a 	cmpeq	r2,r3,zero
  800414:	1000041e 	bne	r2,zero,800428 <Chap9_ClearFeature+0x160>
  800418:	e0fffe17 	ldw	r3,-8(fp)
  80041c:	188000a0 	cmpeqi	r2,r3,2
  800420:	1000101e 	bne	r2,zero,800464 <Chap9_ClearFeature+0x19c>
  800424:	00003006 	br	8004e8 <Chap9_ClearFeature+0x220>
            {
            case USB_RECIPIENT_DEVICE:
                if(wFeature == USB_FEATURE_REMOTE_WAKEUP)
  800428:	e0bffd0b 	ldhu	r2,-12(fp)
  80042c:	10800058 	cmpnei	r2,r2,1
  800430:	10000a1e 	bne	r2,zero,80045c <Chap9_ClearFeature+0x194>
                {
                    bD13flags.bits.remote_wakeup = 0;
  800434:	01002074 	movhi	r4,129
  800438:	2111c104 	addi	r4,r4,18180
  80043c:	20c00017 	ldw	r3,0(r4)
  800440:	00bffbc4 	movi	r2,-17
  800444:	1884703a 	and	r2,r3,r2
  800448:	20800015 	stw	r2,0(r4)
                    Chap9_SingleTransmitEP0(0, 0);
  80044c:	0009883a 	mov	r4,zero
  800450:	000b883a 	mov	r5,zero
  800454:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
  800458:	00002406 	br	8004ec <Chap9_ClearFeature+0x224>
                }
                else
                {
                    Chap9_StallEP0InControlWrite();
  80045c:	08011080 	call	801108 <Chap9_StallEP0InControlWrite>
                }

                break;
  800460:	00002206 	br	8004ec <Chap9_ClearFeature+0x224>

                case USB_RECIPIENT_ENDPOINT:

                if(wFeature == USB_FEATURE_ENDPOINT_STALL)
  800464:	e0bffd0b 	ldhu	r2,-12(fp)
  800468:	1004c03a 	cmpne	r2,r2,zero
  80046c:	10001c1e 	bne	r2,zero,8004e0 <Chap9_ClearFeature+0x218>
                {
                    if( ControlData.DeviceRequest.wIndex == 0x00 )
  800470:	00802074 	movhi	r2,129
  800474:	1091e104 	addi	r2,r2,18308
  800478:	1080018b 	ldhu	r2,6(r2)
  80047c:	10bfffcc 	andi	r2,r2,65535
  800480:	1004c03a 	cmpne	r2,r2,zero
  800484:	1000031e 	bne	r2,zero,800494 <Chap9_ClearFeature+0x1cc>
                            endp = -1;
  800488:	00bfffc4 	movi	r2,-1
  80048c:	e0bffdc5 	stb	r2,-9(fp)
  800490:	00000506 	br	8004a8 <Chap9_ClearFeature+0x1e0>
                    else
                        endp = (UCHAR)(ControlData.DeviceRequest.wIndex & MAX_ENDPOINTS);
  800494:	00802074 	movhi	r2,129
  800498:	1091e104 	addi	r2,r2,18308
  80049c:	1080018b 	ldhu	r2,6(r2)
  8004a0:	108003cc 	andi	r2,r2,15
  8004a4:	e0bffdc5 	stb	r2,-9(fp)

                    Hal4D13_SetEndpointStatus(endp+1, 0);
  8004a8:	e0bffdc3 	ldbu	r2,-9(fp)
  8004ac:	10800044 	addi	r2,r2,1
  8004b0:	11003fcc 	andi	r4,r2,255
  8004b4:	000b883a 	mov	r5,zero
  8004b8:	0801e340 	call	801e34 <Hal4D13_SetEndpointStatus>
                    Hal4D13_SetEndpointStatus(endp+1, 0);
  8004bc:	e0bffdc3 	ldbu	r2,-9(fp)
  8004c0:	10800044 	addi	r2,r2,1
  8004c4:	11003fcc 	andi	r4,r2,255
  8004c8:	000b883a 	mov	r5,zero
  8004cc:	0801e340 	call	801e34 <Hal4D13_SetEndpointStatus>

                    Chap9_SingleTransmitEP0(0, 0);
  8004d0:	0009883a 	mov	r4,zero
  8004d4:	000b883a 	mov	r5,zero
  8004d8:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
  8004dc:	00000306 	br	8004ec <Chap9_ClearFeature+0x224>
                }
                else
                {
                    Chap9_StallEP0InControlWrite();
  8004e0:	08011080 	call	801108 <Chap9_StallEP0InControlWrite>
                }
                break;
  8004e4:	00000106 	br	8004ec <Chap9_ClearFeature+0x224>

            default:
                    Chap9_StallEP0InControlWrite();
  8004e8:	08011080 	call	801108 <Chap9_StallEP0InControlWrite>
                    break;
            }
      }
    }

}
  8004ec:	e037883a 	mov	sp,fp
  8004f0:	dfc00117 	ldw	ra,4(sp)
  8004f4:	df000017 	ldw	fp,0(sp)
  8004f8:	dec00204 	addi	sp,sp,8
  8004fc:	f800283a 	ret

00800500 <Chap9_SetFeature>:

void Chap9_SetFeature(void)
{
  800500:	defffb04 	addi	sp,sp,-20
  800504:	dfc00415 	stw	ra,16(sp)
  800508:	df000315 	stw	fp,12(sp)
  80050c:	df000304 	addi	fp,sp,12
  UCHAR   endp = 0;
  800510:	e03ffdc5 	stb	zero,-9(fp)
    UCHAR   bRecipient = ControlData.DeviceRequest.bmRequestType & USB_RECIPIENT;
  800514:	00802074 	movhi	r2,129
  800518:	1091e104 	addi	r2,r2,18308
  80051c:	10800083 	ldbu	r2,2(r2)
  800520:	108007cc 	andi	r2,r2,31
  800524:	e0bffd85 	stb	r2,-10(fp)
    USHORT  wFeature = ControlData.DeviceRequest.wValue;
  800528:	00802074 	movhi	r2,129
  80052c:	1091e104 	addi	r2,r2,18308
  800530:	1080010b 	ldhu	r2,4(r2)
  800534:	e0bffd0d 	sth	r2,-12(fp)
  

    if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
  800538:	00802074 	movhi	r2,129
  80053c:	1091c804 	addi	r2,r2,18208
  800540:	10800003 	ldbu	r2,0(r2)
  800544:	1080008c 	andi	r2,r2,2
  800548:	10803fcc 	andi	r2,r2,255
  80054c:	1005003a 	cmpeq	r2,r2,zero
  800550:	10002f1e 	bne	r2,zero,800610 <Chap9_SetFeature+0x110>
    {
        switch(bRecipient)
  800554:	e0bffd83 	ldbu	r2,-10(fp)
  800558:	e0bfff15 	stw	r2,-4(fp)
  80055c:	e0ffff17 	ldw	r3,-4(fp)
  800560:	1805003a 	cmpeq	r2,r3,zero
  800564:	1000041e 	bne	r2,zero,800578 <Chap9_SetFeature+0x78>
  800568:	e0ffff17 	ldw	r3,-4(fp)
  80056c:	188000a0 	cmpeqi	r2,r3,2
  800570:	10000f1e 	bne	r2,zero,8005b0 <Chap9_SetFeature+0xb0>
  800574:	00002406 	br	800608 <Chap9_SetFeature+0x108>
        {
        case USB_RECIPIENT_DEVICE:
            if(wFeature == USB_FEATURE_REMOTE_WAKEUP)
  800578:	e0bffd0b 	ldhu	r2,-12(fp)
  80057c:	10800058 	cmpnei	r2,r2,1
  800580:	1000091e 	bne	r2,zero,8005a8 <Chap9_SetFeature+0xa8>
            {
                bD13flags.bits.remote_wakeup = 1;
  800584:	00802074 	movhi	r2,129
  800588:	1091c104 	addi	r2,r2,18180
  80058c:	10c00017 	ldw	r3,0(r2)
  800590:	18c00414 	ori	r3,r3,16
  800594:	10c00015 	stw	r3,0(r2)
                Chap9_SingleTransmitEP0(0, 0);
  800598:	0009883a 	mov	r4,zero
  80059c:	000b883a 	mov	r5,zero
  8005a0:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
  8005a4:	00005b06 	br	800714 <Chap9_SetFeature+0x214>
            }
            else
            {
                Chap9_StallEP0InControlWrite();
  8005a8:	08011080 	call	801108 <Chap9_StallEP0InControlWrite>
            }
            break;
  8005ac:	00005906 	br	800714 <Chap9_SetFeature+0x214>

        case USB_RECIPIENT_ENDPOINT:
            if( wFeature == USB_FEATURE_ENDPOINT_STALL)
  8005b0:	e0bffd0b 	ldhu	r2,-12(fp)
  8005b4:	1004c03a 	cmpne	r2,r2,zero
  8005b8:	1000111e 	bne	r2,zero,800600 <Chap9_SetFeature+0x100>
            {
                if( ControlData.DeviceRequest.wIndex == 0x00 )
  8005bc:	00802074 	movhi	r2,129
  8005c0:	1091e104 	addi	r2,r2,18308
  8005c4:	1080018b 	ldhu	r2,6(r2)
  8005c8:	10bfffcc 	andi	r2,r2,65535
  8005cc:	1004c03a 	cmpne	r2,r2,zero
  8005d0:	1000021e 	bne	r2,zero,8005dc <Chap9_SetFeature+0xdc>
                    endp = -1;
  8005d4:	00bfffc4 	movi	r2,-1
  8005d8:	e0bffdc5 	stb	r2,-9(fp)

                Hal4D13_SetEndpointStatus(endp+1, D13REG_EPSTS_STALL);
  8005dc:	e0bffdc3 	ldbu	r2,-9(fp)
  8005e0:	10800044 	addi	r2,r2,1
  8005e4:	11003fcc 	andi	r4,r2,255
  8005e8:	01402004 	movi	r5,128
  8005ec:	0801e340 	call	801e34 <Hal4D13_SetEndpointStatus>
                Chap9_SingleTransmitEP0(0, 0);
  8005f0:	0009883a 	mov	r4,zero
  8005f4:	000b883a 	mov	r5,zero
  8005f8:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
  8005fc:	00004506 	br	800714 <Chap9_SetFeature+0x214>

            }
            else
                Chap9_StallEP0InControlWrite();
  800600:	08011080 	call	801108 <Chap9_StallEP0InControlWrite>

            break;
  800604:	00004306 	br	800714 <Chap9_SetFeature+0x214>
        default:
            Chap9_StallEP0InControlWrite();
  800608:	08011080 	call	801108 <Chap9_StallEP0InControlWrite>
  80060c:	00004106 	br	800714 <Chap9_SetFeature+0x214>
    }


    else
    {
        if( ControlData.DeviceRequest.wLength == 0 )
  800610:	00802074 	movhi	r2,129
  800614:	1091e104 	addi	r2,r2,18308
  800618:	1080020b 	ldhu	r2,8(r2)
  80061c:	10bfffcc 	andi	r2,r2,65535
  800620:	1004c03a 	cmpne	r2,r2,zero
  800624:	10003b1e 	bne	r2,zero,800714 <Chap9_SetFeature+0x214>
        {
            switch(bRecipient)
  800628:	e0bffd83 	ldbu	r2,-10(fp)
  80062c:	e0bffe15 	stw	r2,-8(fp)
  800630:	e0fffe17 	ldw	r3,-8(fp)
  800634:	1805003a 	cmpeq	r2,r3,zero
  800638:	1000041e 	bne	r2,zero,80064c <Chap9_SetFeature+0x14c>
  80063c:	e0fffe17 	ldw	r3,-8(fp)
  800640:	188000a0 	cmpeqi	r2,r3,2
  800644:	10000f1e 	bne	r2,zero,800684 <Chap9_SetFeature+0x184>
  800648:	00003106 	br	800710 <Chap9_SetFeature+0x210>
            {
            case USB_RECIPIENT_DEVICE:
                if(wFeature == USB_FEATURE_REMOTE_WAKEUP)
  80064c:	e0bffd0b 	ldhu	r2,-12(fp)
  800650:	10800058 	cmpnei	r2,r2,1
  800654:	1000091e 	bne	r2,zero,80067c <Chap9_SetFeature+0x17c>
                {
                    bD13flags.bits.remote_wakeup = 1;
  800658:	00802074 	movhi	r2,129
  80065c:	1091c104 	addi	r2,r2,18180
  800660:	10c00017 	ldw	r3,0(r2)
  800664:	18c00414 	ori	r3,r3,16
  800668:	10c00015 	stw	r3,0(r2)
                    Chap9_SingleTransmitEP0(0, 0);
  80066c:	0009883a 	mov	r4,zero
  800670:	000b883a 	mov	r5,zero
  800674:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
  800678:	00002606 	br	800714 <Chap9_SetFeature+0x214>
                }
                else
                {
                    Chap9_StallEP0InControlWrite();
  80067c:	08011080 	call	801108 <Chap9_StallEP0InControlWrite>
                }
                break;
  800680:	00002406 	br	800714 <Chap9_SetFeature+0x214>
            case USB_RECIPIENT_ENDPOINT:
                if( wFeature == USB_FEATURE_ENDPOINT_STALL)
  800684:	e0bffd0b 	ldhu	r2,-12(fp)
  800688:	1004c03a 	cmpne	r2,r2,zero
  80068c:	1000171e 	bne	r2,zero,8006ec <Chap9_SetFeature+0x1ec>
                {
                    if( ControlData.DeviceRequest.wIndex == 0x00 )
  800690:	00802074 	movhi	r2,129
  800694:	1091e104 	addi	r2,r2,18308
  800698:	1080018b 	ldhu	r2,6(r2)
  80069c:	10bfffcc 	andi	r2,r2,65535
  8006a0:	1004c03a 	cmpne	r2,r2,zero
  8006a4:	1000031e 	bne	r2,zero,8006b4 <Chap9_SetFeature+0x1b4>
                        endp = -1;
  8006a8:	00bfffc4 	movi	r2,-1
  8006ac:	e0bffdc5 	stb	r2,-9(fp)
  8006b0:	00000506 	br	8006c8 <Chap9_SetFeature+0x1c8>
                    else
                        endp = (UCHAR)(ControlData.DeviceRequest.wIndex & MAX_ENDPOINTS);
  8006b4:	00802074 	movhi	r2,129
  8006b8:	1091e104 	addi	r2,r2,18308
  8006bc:	1080018b 	ldhu	r2,6(r2)
  8006c0:	108003cc 	andi	r2,r2,15
  8006c4:	e0bffdc5 	stb	r2,-9(fp)

                    Hal4D13_SetEndpointStatus(endp+1, D13REG_EPSTS_STALL);
  8006c8:	e0bffdc3 	ldbu	r2,-9(fp)
  8006cc:	10800044 	addi	r2,r2,1
  8006d0:	11003fcc 	andi	r4,r2,255
  8006d4:	01402004 	movi	r5,128
  8006d8:	0801e340 	call	801e34 <Hal4D13_SetEndpointStatus>

                    Chap9_SingleTransmitEP0(0, 0);
  8006dc:	0009883a 	mov	r4,zero
  8006e0:	000b883a 	mov	r5,zero
  8006e4:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
  8006e8:	00000a06 	br	800714 <Chap9_SetFeature+0x214>

                }
                else
                {
                    Hal4D13_SetEndpointStatus(endp+1, 0);
  8006ec:	e0bffdc3 	ldbu	r2,-9(fp)
  8006f0:	10800044 	addi	r2,r2,1
  8006f4:	11003fcc 	andi	r4,r2,255
  8006f8:	000b883a 	mov	r5,zero
  8006fc:	0801e340 	call	801e34 <Hal4D13_SetEndpointStatus>
                    Chap9_SingleTransmitEP0(0, 0);
  800700:	0009883a 	mov	r4,zero
  800704:	000b883a 	mov	r5,zero
  800708:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
                }
                break;
  80070c:	00000106 	br	800714 <Chap9_SetFeature+0x214>
            default:
                Chap9_StallEP0InControlWrite();
  800710:	08011080 	call	801108 <Chap9_StallEP0InControlWrite>
        }
    }



}
  800714:	e037883a 	mov	sp,fp
  800718:	dfc00117 	ldw	ra,4(sp)
  80071c:	df000017 	ldw	fp,0(sp)
  800720:	dec00204 	addi	sp,sp,8
  800724:	f800283a 	ret

00800728 <Chap9_SetAddress>:

void Chap9_SetAddress(void)
{
  800728:	defffd04 	addi	sp,sp,-12
  80072c:	dfc00215 	stw	ra,8(sp)
  800730:	df000115 	stw	fp,4(sp)
  800734:	df000104 	addi	fp,sp,4

    UCHAR   j;

    {
        disable_irq();
  800738:	0804c880 	call	804c88 <disable_irq>
        if(!ControlData.Abort)
  80073c:	00802074 	movhi	r2,129
  800740:	1091e104 	addi	r2,r2,18308
  800744:	10800003 	ldbu	r2,0(r2)
  800748:	10803fcc 	andi	r2,r2,255
  80074c:	1004c03a 	cmpne	r2,r2,zero
  800750:	1000791e 	bne	r2,zero,800938 <Chap9_SetAddress+0x210>
        {
            if(bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE)
  800754:	00802074 	movhi	r2,129
  800758:	1091c804 	addi	r2,r2,18208
  80075c:	10800003 	ldbu	r2,0(r2)
  800760:	1080004c 	andi	r2,r2,1
  800764:	10803fcc 	andi	r2,r2,255
  800768:	1005003a 	cmpeq	r2,r2,zero
  80076c:	1000231e 	bne	r2,zero,8007fc <Chap9_SetAddress+0xd4>
            {
                if((ControlData.DeviceRequest.wValue & DEVICE_ADDRESS_MASK) != 0 )
  800770:	00802074 	movhi	r2,129
  800774:	1091e104 	addi	r2,r2,18308
  800778:	1080010b 	ldhu	r2,4(r2)
  80077c:	10bfffcc 	andi	r2,r2,65535
  800780:	10801fcc 	andi	r2,r2,127
  800784:	1005003a 	cmpeq	r2,r2,zero
  800788:	1000161e 	bne	r2,zero,8007e4 <Chap9_SetAddress+0xbc>
                {
                    bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE = 0;
  80078c:	01002074 	movhi	r4,129
  800790:	2111c804 	addi	r4,r4,18208
  800794:	20c00003 	ldbu	r3,0(r4)
  800798:	00bfff84 	movi	r2,-2
  80079c:	1884703a 	and	r2,r3,r2
  8007a0:	20800005 	stb	r2,0(r4)
                    Hal4D13_SetAddressEnable((UCHAR)(ControlData.DeviceRequest.wValue &
  8007a4:	00802074 	movhi	r2,129
  8007a8:	1091e104 	addi	r2,r2,18308
  8007ac:	1080010b 	ldhu	r2,4(r2)
  8007b0:	10803fcc 	andi	r2,r2,255
  8007b4:	11001fcc 	andi	r4,r2,127
  8007b8:	01400044 	movi	r5,1
  8007bc:	08015a80 	call	8015a8 <Hal4D13_SetAddressEnable>
                                            DEVICE_ADDRESS_MASK), 1);
                    bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 1;
  8007c0:	00c02074 	movhi	r3,129
  8007c4:	18d1c804 	addi	r3,r3,18208
  8007c8:	18800003 	ldbu	r2,0(r3)
  8007cc:	10800094 	ori	r2,r2,2
  8007d0:	18800005 	stb	r2,0(r3)
                    Chap9_SingleTransmitEP0(0, 0);
  8007d4:	0009883a 	mov	r4,zero
  8007d8:	000b883a 	mov	r5,zero
  8007dc:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
  8007e0:	00005506 	br	800938 <Chap9_SetAddress+0x210>

                }

                else
                    bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE = 1;
  8007e4:	00c02074 	movhi	r3,129
  8007e8:	18d1c804 	addi	r3,r3,18208
  8007ec:	18800003 	ldbu	r2,0(r3)
  8007f0:	10800054 	ori	r2,r2,1
  8007f4:	18800005 	stb	r2,0(r3)
  8007f8:	00004f06 	br	800938 <Chap9_SetAddress+0x210>
            }

            else if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
  8007fc:	00802074 	movhi	r2,129
  800800:	1091c804 	addi	r2,r2,18208
  800804:	10800003 	ldbu	r2,0(r2)
  800808:	1080008c 	andi	r2,r2,2
  80080c:	10803fcc 	andi	r2,r2,255
  800810:	1005003a 	cmpeq	r2,r2,zero
  800814:	1000331e 	bne	r2,zero,8008e4 <Chap9_SetAddress+0x1bc>
            {
                if((ControlData.DeviceRequest.wValue & DEVICE_ADDRESS_MASK) == 0 )
  800818:	00802074 	movhi	r2,129
  80081c:	1091e104 	addi	r2,r2,18308
  800820:	1080010b 	ldhu	r2,4(r2)
  800824:	10bfffcc 	andi	r2,r2,65535
  800828:	10801fcc 	andi	r2,r2,127
  80082c:	1004c03a 	cmpne	r2,r2,zero
  800830:	1000161e 	bne	r2,zero,80088c <Chap9_SetAddress+0x164>
                {
                    Hal4D13_SetAddressEnable((UCHAR)(ControlData.DeviceRequest.wValue &
  800834:	00802074 	movhi	r2,129
  800838:	1091e104 	addi	r2,r2,18308
  80083c:	1080010b 	ldhu	r2,4(r2)
  800840:	10803fcc 	andi	r2,r2,255
  800844:	11001fcc 	andi	r4,r2,127
  800848:	01400044 	movi	r5,1
  80084c:	08015a80 	call	8015a8 <Hal4D13_SetAddressEnable>
                                            DEVICE_ADDRESS_MASK), 1);
                    bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE = 1;
  800850:	00c02074 	movhi	r3,129
  800854:	18d1c804 	addi	r3,r3,18208
  800858:	18800003 	ldbu	r2,0(r3)
  80085c:	10800054 	ori	r2,r2,1
  800860:	18800005 	stb	r2,0(r3)
                    bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 0;
  800864:	01002074 	movhi	r4,129
  800868:	2111c804 	addi	r4,r4,18208
  80086c:	20c00003 	ldbu	r3,0(r4)
  800870:	00bfff44 	movi	r2,-3
  800874:	1884703a 	and	r2,r3,r2
  800878:	20800005 	stb	r2,0(r4)
                    Chap9_SingleTransmitEP0(0, 0);
  80087c:	0009883a 	mov	r4,zero
  800880:	000b883a 	mov	r5,zero
  800884:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
  800888:	00002b06 	br	800938 <Chap9_SetAddress+0x210>

                }

                else
                {
                    bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE = 0;
  80088c:	01002074 	movhi	r4,129
  800890:	2111c804 	addi	r4,r4,18208
  800894:	20c00003 	ldbu	r3,0(r4)
  800898:	00bfff84 	movi	r2,-2
  80089c:	1884703a 	and	r2,r3,r2
  8008a0:	20800005 	stb	r2,0(r4)
                    Hal4D13_SetAddressEnable((UCHAR)(ControlData.DeviceRequest.wValue &
  8008a4:	00802074 	movhi	r2,129
  8008a8:	1091e104 	addi	r2,r2,18308
  8008ac:	1080010b 	ldhu	r2,4(r2)
  8008b0:	10803fcc 	andi	r2,r2,255
  8008b4:	11001fcc 	andi	r4,r2,127
  8008b8:	01400044 	movi	r5,1
  8008bc:	08015a80 	call	8015a8 <Hal4D13_SetAddressEnable>
                                            DEVICE_ADDRESS_MASK), 1);
                    bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 1;
  8008c0:	00c02074 	movhi	r3,129
  8008c4:	18d1c804 	addi	r3,r3,18208
  8008c8:	18800003 	ldbu	r2,0(r3)
  8008cc:	10800094 	ori	r2,r2,2
  8008d0:	18800005 	stb	r2,0(r3)
                    Chap9_SingleTransmitEP0(0, 0);
  8008d4:	0009883a 	mov	r4,zero
  8008d8:	000b883a 	mov	r5,zero
  8008dc:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
  8008e0:	00001506 	br	800938 <Chap9_SetAddress+0x210>
            }

            else
            {

                bUSBCheck_Device_State.State_bits.DEVICE_CONFIGURATION_STATE = 0;
  8008e4:	01002074 	movhi	r4,129
  8008e8:	2111c804 	addi	r4,r4,18208
  8008ec:	20c00003 	ldbu	r3,0(r4)
  8008f0:	00bffec4 	movi	r2,-5
  8008f4:	1884703a 	and	r2,r3,r2
  8008f8:	20800005 	stb	r2,0(r4)
                bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 0;
  8008fc:	01002074 	movhi	r4,129
  800900:	2111c804 	addi	r4,r4,18208
  800904:	20c00003 	ldbu	r3,0(r4)
  800908:	00bfff44 	movi	r2,-3
  80090c:	1884703a 	and	r2,r3,r2
  800910:	20800005 	stb	r2,0(r4)
                bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE = 1;
  800914:	00c02074 	movhi	r3,129
  800918:	18d1c804 	addi	r3,r3,18208
  80091c:	18800003 	ldbu	r2,0(r3)
  800920:	10800054 	ori	r2,r2,1
  800924:	18800005 	stb	r2,0(r3)
                j = DEV_BEHAVIOUR_NOT_SPECIFIED;
  800928:	e03fff05 	stb	zero,-4(fp)
                Chap9_SingleTransmitEP0(&j, 0);
  80092c:	e13fff04 	addi	r4,fp,-4
  800930:	000b883a 	mov	r5,zero
  800934:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
            }

        }
        enable_irq();
  800938:	0804cd80 	call	804cd8 <enable_irq>

    }
    printf("Addr %x\n",Hal4D13_GetAddress());
  80093c:	080155c0 	call	80155c <Hal4D13_GetAddress>
  800940:	11403fcc 	andi	r5,r2,255
  800944:	01002074 	movhi	r4,129
  800948:	21075304 	addi	r4,r4,7500
  80094c:	0805a200 	call	805a20 <printf>
}
  800950:	e037883a 	mov	sp,fp
  800954:	dfc00117 	ldw	ra,4(sp)
  800958:	df000017 	ldw	fp,0(sp)
  80095c:	dec00204 	addi	sp,sp,8
  800960:	f800283a 	ret

00800964 <Chap9_GetDescriptor>:


void Chap9_GetDescriptor(void)
{
  800964:	defffb04 	addi	sp,sp,-20
  800968:	dfc00415 	stw	ra,16(sp)
  80096c:	df000315 	stw	fp,12(sp)
  800970:	df000304 	addi	fp,sp,12
    UCHAR   bDescriptor =      MSB(ControlData.DeviceRequest.wValue);
  800974:	00802074 	movhi	r2,129
  800978:	1091e104 	addi	r2,r2,18308
  80097c:	1080010b 	ldhu	r2,4(r2)
  800980:	10bfffcc 	andi	r2,r2,65535
  800984:	1004d23a 	srli	r2,r2,8
  800988:	1007883a 	mov	r3,r2
  80098c:	00bfffc4 	movi	r2,-1
  800990:	1884703a 	and	r2,r3,r2
  800994:	e0bffd85 	stb	r2,-10(fp)
    UCHAR   bDescriptorIndex = LSB(ControlData.DeviceRequest.wValue);
  800998:	00802074 	movhi	r2,129
  80099c:	1091e104 	addi	r2,r2,18308
  8009a0:	1080010b 	ldhu	r2,4(r2)
  8009a4:	1007883a 	mov	r3,r2
  8009a8:	00bfffc4 	movi	r2,-1
  8009ac:	1884703a 	and	r2,r3,r2
  8009b0:	e0bffd45 	stb	r2,-11(fp)
    UCHAR	bmRequestType = ControlData.DeviceRequest.bmRequestType;
  8009b4:	00802074 	movhi	r2,129
  8009b8:	1091e104 	addi	r2,r2,18308
  8009bc:	10800083 	ldbu	r2,2(r2)
  8009c0:	e0bffd05 	stb	r2,-12(fp)

    switch(bDescriptor)
  8009c4:	e0bffd83 	ldbu	r2,-10(fp)
  8009c8:	e0bfff15 	stw	r2,-4(fp)
  8009cc:	e0ffff17 	ldw	r3,-4(fp)
  8009d0:	188008e8 	cmpgeui	r2,r3,35
  8009d4:	1000861e 	bne	r2,zero,800bf0 <Chap9_GetDescriptor+0x28c>
  8009d8:	e13fff17 	ldw	r4,-4(fp)
  8009dc:	e13fff17 	ldw	r4,-4(fp)
  8009e0:	2105883a 	add	r2,r4,r4
  8009e4:	1087883a 	add	r3,r2,r2
  8009e8:	00802034 	movhi	r2,128
  8009ec:	10827f04 	addi	r2,r2,2556
  8009f0:	1885883a 	add	r2,r3,r2
  8009f4:	10800017 	ldw	r2,0(r2)
  8009f8:	1000683a 	jmp	r2
  8009fc:	00800bf0 	cmpltui	r2,zero,47
  800a00:	00800a88 	cmpgei	r2,zero,42
  800a04:	00800a9c 	xori	r2,zero,42
  800a08:	00800ab0 	cmpltui	r2,zero,42
  800a0c:	00800bd0 	cmplti	r2,zero,47
  800a10:	00800bd0 	cmplti	r2,zero,47
  800a14:	00800bd0 	cmplti	r2,zero,47
  800a18:	00800bf0 	cmpltui	r2,zero,47
  800a1c:	00800bf0 	cmpltui	r2,zero,47
  800a20:	00800bf0 	cmpltui	r2,zero,47
  800a24:	00800bf0 	cmpltui	r2,zero,47
  800a28:	00800bf0 	cmpltui	r2,zero,47
  800a2c:	00800bf0 	cmpltui	r2,zero,47
  800a30:	00800bf0 	cmpltui	r2,zero,47
  800a34:	00800bf0 	cmpltui	r2,zero,47
  800a38:	00800bf0 	cmpltui	r2,zero,47
  800a3c:	00800bf0 	cmpltui	r2,zero,47
  800a40:	00800bf0 	cmpltui	r2,zero,47
  800a44:	00800bf0 	cmpltui	r2,zero,47
  800a48:	00800bf0 	cmpltui	r2,zero,47
  800a4c:	00800bf0 	cmpltui	r2,zero,47
  800a50:	00800bf0 	cmpltui	r2,zero,47
  800a54:	00800bf0 	cmpltui	r2,zero,47
  800a58:	00800bf0 	cmpltui	r2,zero,47
  800a5c:	00800bf0 	cmpltui	r2,zero,47
  800a60:	00800bf0 	cmpltui	r2,zero,47
  800a64:	00800bf0 	cmpltui	r2,zero,47
  800a68:	00800bf0 	cmpltui	r2,zero,47
  800a6c:	00800bf0 	cmpltui	r2,zero,47
  800a70:	00800bf0 	cmpltui	r2,zero,47
  800a74:	00800bf0 	cmpltui	r2,zero,47
  800a78:	00800bf0 	cmpltui	r2,zero,47
  800a7c:	00800bf0 	cmpltui	r2,zero,47
  800a80:	00800bf0 	cmpltui	r2,zero,47
  800a84:	00800bd0 	cmplti	r2,zero,47
    {
    	case USB_DEVICE_DESCRIPTOR_TYPE:{//1

			Chap9_BurstTransmitEP0( (PUCHAR)&DeviceDescr , sizeof(USB_DEVICE_DESCRIPTOR));
  800a88:	01002074 	movhi	r4,129
  800a8c:	210a5c04 	addi	r4,r4,10608
  800a90:	01400484 	movi	r5,18
  800a94:	080126c0 	call	80126c <Chap9_BurstTransmitEP0>
			break;}
  800a98:	00005606 	br	800bf4 <Chap9_GetDescriptor+0x290>
		case USB_CONFIGURATION_DESCRIPTOR_TYPE:{//2
			Chap9_BurstTransmitEP0((PUCHAR)&ConfigDescr_a, sizeof(USB_CONFIGURATION_DESCRIPTOR_a));
  800a9c:	01002074 	movhi	r4,129
  800aa0:	210a6084 	addi	r4,r4,10626
  800aa4:	01400884 	movi	r5,34
  800aa8:	080126c0 	call	80126c <Chap9_BurstTransmitEP0>
			break;}
  800aac:	00005106 	br	800bf4 <Chap9_GetDescriptor+0x290>
		case USB_STRING_DESCRIPTOR_TYPE://3
			switch(bDescriptorIndex)
  800ab0:	e0bffd43 	ldbu	r2,-11(fp)
  800ab4:	e0bffe15 	stw	r2,-8(fp)
  800ab8:	e0fffe17 	ldw	r3,-8(fp)
  800abc:	188001a8 	cmpgeui	r2,r3,6
  800ac0:	10003e1e 	bne	r2,zero,800bbc <Chap9_GetDescriptor+0x258>
  800ac4:	e13ffe17 	ldw	r4,-8(fp)
  800ac8:	e13ffe17 	ldw	r4,-8(fp)
  800acc:	2105883a 	add	r2,r4,r4
  800ad0:	1087883a 	add	r3,r2,r2
  800ad4:	00802034 	movhi	r2,128
  800ad8:	1082ba04 	addi	r2,r2,2792
  800adc:	1885883a 	add	r2,r3,r2
  800ae0:	10800017 	ldw	r2,0(r2)
  800ae4:	1000683a 	jmp	r2
  800ae8:	00800b00 	call	800b0 <__alt_mem_sdram_0-0x77ff50>
  800aec:	00800b1c 	xori	r2,zero,44
  800af0:	00800b3c 	xorhi	r2,zero,44
  800af4:	00800b5c 	xori	r2,zero,45
  800af8:	00800b7c 	xorhi	r2,zero,45
  800afc:	00800b9c 	xori	r2,zero,46
			{
				case STR_INDEX_LANGUAGE:
					printf("\n str1     \n");
  800b00:	01002074 	movhi	r4,129
  800b04:	21075604 	addi	r4,r4,7512
  800b08:	0805b5c0 	call	805b5c <puts>
					Chap9_BurstTransmitEP0((PUCHAR)&strLanguage, sizeof(USB_STRING_LANGUAGE_DESCRIPTOR));
  800b0c:	d1200004 	addi	r4,gp,-32768
  800b10:	01400104 	movi	r5,4
  800b14:	080126c0 	call	80126c <Chap9_BurstTransmitEP0>
					break;
  800b18:	00003606 	br	800bf4 <Chap9_GetDescriptor+0x290>
				case STR_INDEX_MANUFACTURER:
					printf("\n str2     \n");
  800b1c:	01002074 	movhi	r4,129
  800b20:	21075904 	addi	r4,r4,7524
  800b24:	0805b5c0 	call	805b5c <puts>
					Chap9_BurstTransmitEP0((PUCHAR)&strManufacturer, sizeof(USB_STRING_MANUFACTURER_DESCRIPTOR));
  800b28:	01002074 	movhi	r4,129
  800b2c:	210ab304 	addi	r4,r4,10956
  800b30:	01400e04 	movi	r5,56
  800b34:	080126c0 	call	80126c <Chap9_BurstTransmitEP0>
					break;
  800b38:	00002e06 	br	800bf4 <Chap9_GetDescriptor+0x290>
				case STR_INDEX_PRODUCT:
					printf("\n str3     \n");
  800b3c:	01002074 	movhi	r4,129
  800b40:	21075c04 	addi	r4,r4,7536
  800b44:	0805b5c0 	call	805b5c <puts>
					Chap9_BurstTransmitEP0((PUCHAR)&strProduct, sizeof(USB_STRING_PRODUCT_DESCRIPTOR));
  800b48:	01002074 	movhi	r4,129
  800b4c:	210aa284 	addi	r4,r4,10890
  800b50:	01401084 	movi	r5,66
  800b54:	080126c0 	call	80126c <Chap9_BurstTransmitEP0>
					break;
  800b58:	00002606 	br	800bf4 <Chap9_GetDescriptor+0x290>
				case STR_INDEX_SERIALNUMBER:
					printf("\n str4     \n");
  800b5c:	01002074 	movhi	r4,129
  800b60:	21075f04 	addi	r4,r4,7548
  800b64:	0805b5c0 	call	805b5c <puts>
					Chap9_BurstTransmitEP0((PUCHAR)&strSerialNum, sizeof(USB_STRING_SERIALNUMBER_DESCRIPTOR));
  800b68:	01002074 	movhi	r4,129
  800b6c:	210a9c04 	addi	r4,r4,10864
  800b70:	01400684 	movi	r5,26
  800b74:	080126c0 	call	80126c <Chap9_BurstTransmitEP0>
					break;
  800b78:	00001e06 	br	800bf4 <Chap9_GetDescriptor+0x290>
				case STR_INDEX_CONFIGURATION:
					printf("\n str5     \n");
  800b7c:	01002074 	movhi	r4,129
  800b80:	21076204 	addi	r4,r4,7560
  800b84:	0805b5c0 	call	805b5c <puts>
					Chap9_BurstTransmitEP0((PUCHAR)&strConfiguration, sizeof(USB_STRING_CONFIGURATION_DESCRIPTOR) );
  800b88:	01002074 	movhi	r4,129
  800b8c:	210a9784 	addi	r4,r4,10846
  800b90:	01400484 	movi	r5,18
  800b94:	080126c0 	call	80126c <Chap9_BurstTransmitEP0>
					break;
  800b98:	00001606 	br	800bf4 <Chap9_GetDescriptor+0x290>
				case STR_INDEX_INTERFACE:
					printf("\n str6     \n");
  800b9c:	01002074 	movhi	r4,129
  800ba0:	21076504 	addi	r4,r4,7572
  800ba4:	0805b5c0 	call	805b5c <puts>
					Chap9_BurstTransmitEP0((PUCHAR)&strInterface, sizeof(USB_STRING_INTERFACE_DESCRIPTOR) );
  800ba8:	01002074 	movhi	r4,129
  800bac:	210a9184 	addi	r4,r4,10822
  800bb0:	01400604 	movi	r5,24
  800bb4:	080126c0 	call	80126c <Chap9_BurstTransmitEP0>
					break;
  800bb8:	00000e06 	br	800bf4 <Chap9_GetDescriptor+0x290>
				default:
					printf("\n Unknown String \n");
  800bbc:	01002074 	movhi	r4,129
  800bc0:	21076804 	addi	r4,r4,7584
  800bc4:	0805b5c0 	call	805b5c <puts>
					Chap9_StallEP0InControlRead();
  800bc8:	080116c0 	call	80116c <Chap9_StallEP0InControlRead>
					break;
			}
			break;
  800bcc:	00000906 	br	800bf4 <Chap9_GetDescriptor+0x290>
		case USB_ENDPOINT_DESCRIPTOR_TYPE:
		case USB_POWER_DESCRIPTOR_TYPE:
		case USB_HID_DESCRIPTOR_TYPE:
			//bmRequestType will be 0x81 for HID related descriptor requests.
			//For some reason this is not characterized as a class request
			if(bmRequestType == 0x81){
  800bd0:	e0bffd03 	ldbu	r2,-12(fp)
  800bd4:	10802058 	cmpnei	r2,r2,129
  800bd8:	1000061e 	bne	r2,zero,800bf4 <Chap9_GetDescriptor+0x290>
				Chap9_BurstTransmitEP0((PUCHAR)&REPORT_DESCRIPTOR2, sizeof(REPORT_DESCRIPTOR2) );
  800bdc:	01002074 	movhi	r4,129
  800be0:	210a7b04 	addi	r4,r4,10732
  800be4:	01400b44 	movi	r5,45
  800be8:	080126c0 	call	80126c <Chap9_BurstTransmitEP0>
			}
			break;
  800bec:	00000106 	br	800bf4 <Chap9_GetDescriptor+0x290>
		default:
			Chap9_StallEP0InControlRead();
  800bf0:	080116c0 	call	80116c <Chap9_StallEP0InControlRead>
			break;
		}
}
  800bf4:	e037883a 	mov	sp,fp
  800bf8:	dfc00117 	ldw	ra,4(sp)
  800bfc:	df000017 	ldw	fp,0(sp)
  800c00:	dec00204 	addi	sp,sp,8
  800c04:	f800283a 	ret

00800c08 <Chap9_GetConfiguration>:

void Chap9_GetConfiguration(void)
{
  800c08:	defffd04 	addi	sp,sp,-12
  800c0c:	dfc00215 	stw	ra,8(sp)
  800c10:	df000115 	stw	fp,4(sp)
  800c14:	df000104 	addi	fp,sp,4
    UCHAR   c = bD13flags.bits.configuration;
  800c18:	00802074 	movhi	r2,129
  800c1c:	1091c104 	addi	r2,r2,18180
  800c20:	10800017 	ldw	r2,0(r2)
  800c24:	1004d0fa 	srli	r2,r2,3
  800c28:	1080004c 	andi	r2,r2,1
  800c2c:	e0bfff05 	stb	r2,-4(fp)
    UCHAR   j;

    if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
  800c30:	00802074 	movhi	r2,129
  800c34:	1091c804 	addi	r2,r2,18208
  800c38:	10800003 	ldbu	r2,0(r2)
  800c3c:	1080008c 	andi	r2,r2,2
  800c40:	10803fcc 	andi	r2,r2,255
  800c44:	1005003a 	cmpeq	r2,r2,zero
  800c48:	1000051e 	bne	r2,zero,800c60 <Chap9_GetConfiguration+0x58>
    {
        j = 0;
  800c4c:	e03fff45 	stb	zero,-3(fp)
        Chap9_SingleTransmitEP0(&j, 1);
  800c50:	e13fff44 	addi	r4,fp,-3
  800c54:	01400044 	movi	r5,1
  800c58:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
  800c5c:	00001506 	br	800cb4 <Chap9_GetConfiguration+0xac>
    }

    else
    {
        if (ControlData.DeviceRequest.wValue == 0 && ControlData.DeviceRequest.wIndex == 0 && ControlData.DeviceRequest.wLength == 1)
  800c60:	00802074 	movhi	r2,129
  800c64:	1091e104 	addi	r2,r2,18308
  800c68:	1080010b 	ldhu	r2,4(r2)
  800c6c:	10bfffcc 	andi	r2,r2,65535
  800c70:	1004c03a 	cmpne	r2,r2,zero
  800c74:	10000f1e 	bne	r2,zero,800cb4 <Chap9_GetConfiguration+0xac>
  800c78:	00802074 	movhi	r2,129
  800c7c:	1091e104 	addi	r2,r2,18308
  800c80:	1080018b 	ldhu	r2,6(r2)
  800c84:	10bfffcc 	andi	r2,r2,65535
  800c88:	1004c03a 	cmpne	r2,r2,zero
  800c8c:	1000091e 	bne	r2,zero,800cb4 <Chap9_GetConfiguration+0xac>
  800c90:	00802074 	movhi	r2,129
  800c94:	1091e104 	addi	r2,r2,18308
  800c98:	1080020b 	ldhu	r2,8(r2)
  800c9c:	10bfffcc 	andi	r2,r2,65535
  800ca0:	10800058 	cmpnei	r2,r2,1
  800ca4:	1000031e 	bne	r2,zero,800cb4 <Chap9_GetConfiguration+0xac>
        {
        	Chap9_SingleTransmitEP0(&c, 1);
  800ca8:	e13fff04 	addi	r4,fp,-4
  800cac:	01400044 	movi	r5,1
  800cb0:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
        }
    }

}
  800cb4:	e037883a 	mov	sp,fp
  800cb8:	dfc00117 	ldw	ra,4(sp)
  800cbc:	df000017 	ldw	fp,0(sp)
  800cc0:	dec00204 	addi	sp,sp,8
  800cc4:	f800283a 	ret

00800cc8 <Chap9_SetConfiguration>:

void Chap9_SetConfiguration(void)
{
  800cc8:	defffe04 	addi	sp,sp,-8
  800ccc:	dfc00115 	stw	ra,4(sp)
  800cd0:	df000015 	stw	fp,0(sp)
  800cd4:	d839883a 	mov	fp,sp
  
    if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
  800cd8:	00802074 	movhi	r2,129
  800cdc:	1091c804 	addi	r2,r2,18208
  800ce0:	10800003 	ldbu	r2,0(r2)
  800ce4:	1080008c 	andi	r2,r2,2
  800ce8:	10803fcc 	andi	r2,r2,255
  800cec:	1005003a 	cmpeq	r2,r2,zero
  800cf0:	10003d1e 	bne	r2,zero,800de8 <Chap9_SetConfiguration+0x120>
    {
        if(ControlData.DeviceRequest.wIndex == 0 && ControlData.DeviceRequest.wLength == 0)
  800cf4:	00802074 	movhi	r2,129
  800cf8:	1091e104 	addi	r2,r2,18308
  800cfc:	1080018b 	ldhu	r2,6(r2)
  800d00:	10bfffcc 	andi	r2,r2,65535
  800d04:	1004c03a 	cmpne	r2,r2,zero
  800d08:	10006d1e 	bne	r2,zero,800ec0 <Chap9_SetConfiguration+0x1f8>
  800d0c:	00802074 	movhi	r2,129
  800d10:	1091e104 	addi	r2,r2,18308
  800d14:	1080020b 	ldhu	r2,8(r2)
  800d18:	10bfffcc 	andi	r2,r2,65535
  800d1c:	1004c03a 	cmpne	r2,r2,zero
  800d20:	1000671e 	bne	r2,zero,800ec0 <Chap9_SetConfiguration+0x1f8>
        {
            if (ControlData.DeviceRequest.wValue == 0)
  800d24:	00802074 	movhi	r2,129
  800d28:	1091e104 	addi	r2,r2,18308
  800d2c:	1080010b 	ldhu	r2,4(r2)
  800d30:	10bfffcc 	andi	r2,r2,65535
  800d34:	1004c03a 	cmpne	r2,r2,zero
  800d38:	10000f1e 	bne	r2,zero,800d78 <Chap9_SetConfiguration+0xb0>
            {
                /* put device in unconfigured state */
                bD13flags.bits.configuration = 0;
  800d3c:	01002074 	movhi	r4,129
  800d40:	2111c104 	addi	r4,r4,18180
  800d44:	20c00017 	ldw	r3,0(r4)
  800d48:	00bffdc4 	movi	r2,-9
  800d4c:	1884703a 	and	r2,r3,r2
  800d50:	20800015 	stw	r2,0(r4)
                bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 1;
  800d54:	00c02074 	movhi	r3,129
  800d58:	18d1c804 	addi	r3,r3,18208
  800d5c:	18800003 	ldbu	r2,0(r3)
  800d60:	10800094 	ori	r2,r2,2
  800d64:	18800005 	stb	r2,0(r3)
                Chap9_SingleTransmitEP0(0, 0);
  800d68:	0009883a 	mov	r4,zero
  800d6c:	000b883a 	mov	r5,zero
  800d70:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
  800d74:	00005206 	br	800ec0 <Chap9_SetConfiguration+0x1f8>
            }
            else if (ControlData.DeviceRequest.wValue == 1)
  800d78:	00802074 	movhi	r2,129
  800d7c:	1091e104 	addi	r2,r2,18308
  800d80:	1080010b 	ldhu	r2,4(r2)
  800d84:	10bfffcc 	andi	r2,r2,65535
  800d88:	10800058 	cmpnei	r2,r2,1
  800d8c:	1000141e 	bne	r2,zero,800de0 <Chap9_SetConfiguration+0x118>
            {
                /* Configure device */
                bD13flags.bits.configuration = 1;
  800d90:	00c02074 	movhi	r3,129
  800d94:	18d1c104 	addi	r3,r3,18180
  800d98:	18800017 	ldw	r2,0(r3)
  800d9c:	10800214 	ori	r2,r2,8
  800da0:	18800015 	stw	r2,0(r3)
                bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 0;
  800da4:	01002074 	movhi	r4,129
  800da8:	2111c804 	addi	r4,r4,18208
  800dac:	20c00003 	ldbu	r3,0(r4)
  800db0:	00bfff44 	movi	r2,-3
  800db4:	1884703a 	and	r2,r3,r2
  800db8:	20800005 	stb	r2,0(r4)
                bUSBCheck_Device_State.State_bits.DEVICE_CONFIGURATION_STATE = 1;
  800dbc:	00c02074 	movhi	r3,129
  800dc0:	18d1c804 	addi	r3,r3,18208
  800dc4:	18800003 	ldbu	r2,0(r3)
  800dc8:	10800114 	ori	r2,r2,4
  800dcc:	18800005 	stb	r2,0(r3)
                Chap9_SingleTransmitEP0(0, 0);
  800dd0:	0009883a 	mov	r4,zero
  800dd4:	000b883a 	mov	r5,zero
  800dd8:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
  800ddc:	00003806 	br	800ec0 <Chap9_SetConfiguration+0x1f8>
            }

            else
                Chap9_StallEP0InControlWrite();
  800de0:	08011080 	call	801108 <Chap9_StallEP0InControlWrite>
  800de4:	00003606 	br	800ec0 <Chap9_SetConfiguration+0x1f8>
        }
    }

    else
    {
        if (ControlData.DeviceRequest.wValue == 0)
  800de8:	00802074 	movhi	r2,129
  800dec:	1091e104 	addi	r2,r2,18308
  800df0:	1080010b 	ldhu	r2,4(r2)
  800df4:	10bfffcc 	andi	r2,r2,65535
  800df8:	1004c03a 	cmpne	r2,r2,zero
  800dfc:	1000151e 	bne	r2,zero,800e54 <Chap9_SetConfiguration+0x18c>
        {
            /* put device in unconfigured state */
            bD13flags.bits.configuration = 0;
  800e00:	01002074 	movhi	r4,129
  800e04:	2111c104 	addi	r4,r4,18180
  800e08:	20c00017 	ldw	r3,0(r4)
  800e0c:	00bffdc4 	movi	r2,-9
  800e10:	1884703a 	and	r2,r3,r2
  800e14:	20800015 	stw	r2,0(r4)
            bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 1;
  800e18:	00c02074 	movhi	r3,129
  800e1c:	18d1c804 	addi	r3,r3,18208
  800e20:	18800003 	ldbu	r2,0(r3)
  800e24:	10800094 	ori	r2,r2,2
  800e28:	18800005 	stb	r2,0(r3)
            bUSBCheck_Device_State.State_bits.DEVICE_CONFIGURATION_STATE = 0;
  800e2c:	01002074 	movhi	r4,129
  800e30:	2111c804 	addi	r4,r4,18208
  800e34:	20c00003 	ldbu	r3,0(r4)
  800e38:	00bffec4 	movi	r2,-5
  800e3c:	1884703a 	and	r2,r3,r2
  800e40:	20800005 	stb	r2,0(r4)
            Chap9_SingleTransmitEP0(0, 0);
  800e44:	0009883a 	mov	r4,zero
  800e48:	000b883a 	mov	r5,zero
  800e4c:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
  800e50:	00001b06 	br	800ec0 <Chap9_SetConfiguration+0x1f8>

        }

        else if (ControlData.DeviceRequest.wValue == 1)
  800e54:	00802074 	movhi	r2,129
  800e58:	1091e104 	addi	r2,r2,18308
  800e5c:	1080010b 	ldhu	r2,4(r2)
  800e60:	10bfffcc 	andi	r2,r2,65535
  800e64:	10800058 	cmpnei	r2,r2,1
  800e68:	1000141e 	bne	r2,zero,800ebc <Chap9_SetConfiguration+0x1f4>
        {
            /* Configure device */
            bD13flags.bits.configuration = 1;
  800e6c:	00c02074 	movhi	r3,129
  800e70:	18d1c104 	addi	r3,r3,18180
  800e74:	18800017 	ldw	r2,0(r3)
  800e78:	10800214 	ori	r2,r2,8
  800e7c:	18800015 	stw	r2,0(r3)
            bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 0;
  800e80:	01002074 	movhi	r4,129
  800e84:	2111c804 	addi	r4,r4,18208
  800e88:	20c00003 	ldbu	r3,0(r4)
  800e8c:	00bfff44 	movi	r2,-3
  800e90:	1884703a 	and	r2,r3,r2
  800e94:	20800005 	stb	r2,0(r4)
            bUSBCheck_Device_State.State_bits.DEVICE_CONFIGURATION_STATE = 1;
  800e98:	00c02074 	movhi	r3,129
  800e9c:	18d1c804 	addi	r3,r3,18208
  800ea0:	18800003 	ldbu	r2,0(r3)
  800ea4:	10800114 	ori	r2,r2,4
  800ea8:	18800005 	stb	r2,0(r3)
            Chap9_SingleTransmitEP0(0, 0);
  800eac:	0009883a 	mov	r4,zero
  800eb0:	000b883a 	mov	r5,zero
  800eb4:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
  800eb8:	00000106 	br	800ec0 <Chap9_SetConfiguration+0x1f8>
        }
        else
            Chap9_StallEP0InControlWrite();
  800ebc:	08011080 	call	801108 <Chap9_StallEP0InControlWrite>
    }

}
  800ec0:	e037883a 	mov	sp,fp
  800ec4:	dfc00117 	ldw	ra,4(sp)
  800ec8:	df000017 	ldw	fp,0(sp)
  800ecc:	dec00204 	addi	sp,sp,8
  800ed0:	f800283a 	ret

00800ed4 <Chap9_GetInterface>:

void Chap9_GetInterface(void)
{
  800ed4:	defffe04 	addi	sp,sp,-8
  800ed8:	dfc00115 	stw	ra,4(sp)
  800edc:	df000015 	stw	fp,0(sp)
  800ee0:	d839883a 	mov	fp,sp

    if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
  800ee4:	00802074 	movhi	r2,129
  800ee8:	1091c804 	addi	r2,r2,18208
  800eec:	10800003 	ldbu	r2,0(r2)
  800ef0:	1080008c 	andi	r2,r2,2
  800ef4:	10803fcc 	andi	r2,r2,255
  800ef8:	1005003a 	cmpeq	r2,r2,zero
  800efc:	1000021e 	bne	r2,zero,800f08 <Chap9_GetInterface+0x34>
        Chap9_StallEP0InControlRead();
  800f00:	080116c0 	call	80116c <Chap9_StallEP0InControlRead>
  800f04:	00001706 	br	800f64 <Chap9_GetInterface+0x90>

    else
    {

        if ((ControlData.DeviceRequest.wValue == 0 && ControlData.DeviceRequest.wIndex == 0 && ControlData.DeviceRequest.wLength == 1))
  800f08:	00802074 	movhi	r2,129
  800f0c:	1091e104 	addi	r2,r2,18308
  800f10:	1080010b 	ldhu	r2,4(r2)
  800f14:	10bfffcc 	andi	r2,r2,65535
  800f18:	1004c03a 	cmpne	r2,r2,zero
  800f1c:	1000101e 	bne	r2,zero,800f60 <Chap9_GetInterface+0x8c>
  800f20:	00802074 	movhi	r2,129
  800f24:	1091e104 	addi	r2,r2,18308
  800f28:	1080018b 	ldhu	r2,6(r2)
  800f2c:	10bfffcc 	andi	r2,r2,65535
  800f30:	1004c03a 	cmpne	r2,r2,zero
  800f34:	10000a1e 	bne	r2,zero,800f60 <Chap9_GetInterface+0x8c>
  800f38:	00802074 	movhi	r2,129
  800f3c:	1091e104 	addi	r2,r2,18308
  800f40:	1080020b 	ldhu	r2,8(r2)
  800f44:	10bfffcc 	andi	r2,r2,65535
  800f48:	10800058 	cmpnei	r2,r2,1
  800f4c:	1000041e 	bne	r2,zero,800f60 <Chap9_GetInterface+0x8c>
            Chap9_SingleTransmitEP0(&ALTERNATIVE_SETTING, 1);      //txdat
  800f50:	d1201604 	addi	r4,gp,-32680
  800f54:	01400044 	movi	r5,1
  800f58:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
        Chap9_StallEP0InControlRead();

    else
    {

        if ((ControlData.DeviceRequest.wValue == 0 && ControlData.DeviceRequest.wIndex == 0 && ControlData.DeviceRequest.wLength == 1))
  800f5c:	00000106 	br	800f64 <Chap9_GetInterface+0x90>
            Chap9_SingleTransmitEP0(&ALTERNATIVE_SETTING, 1);      //txdat
        else
            Chap9_StallEP0InControlRead();
  800f60:	080116c0 	call	80116c <Chap9_StallEP0InControlRead>
    }

}
  800f64:	e037883a 	mov	sp,fp
  800f68:	dfc00117 	ldw	ra,4(sp)
  800f6c:	df000017 	ldw	fp,0(sp)
  800f70:	dec00204 	addi	sp,sp,8
  800f74:	f800283a 	ret

00800f78 <Chap9_SetInterface>:

void Chap9_SetInterface(void)
{
  800f78:	defffd04 	addi	sp,sp,-12
  800f7c:	dfc00215 	stw	ra,8(sp)
  800f80:	df000115 	stw	fp,4(sp)
  800f84:	df000104 	addi	fp,sp,4
    UCHAR   dir = ControlData.DeviceRequest.bmRequestType & USB_REQUEST_DIR_MASK;
  800f88:	00802074 	movhi	r2,129
  800f8c:	1091e104 	addi	r2,r2,18308
  800f90:	10c00083 	ldbu	r3,2(r2)
  800f94:	00bfe004 	movi	r2,-128
  800f98:	1884703a 	and	r2,r3,r2
  800f9c:	e0bfff05 	stb	r2,-4(fp)

    if(dir)
  800fa0:	e0bfff03 	ldbu	r2,-4(fp)
  800fa4:	1005003a 	cmpeq	r2,r2,zero
  800fa8:	1000011e 	bne	r2,zero,800fb0 <Chap9_SetInterface+0x38>
        Chap9_StallEP0InControlRead();
  800fac:	080116c0 	call	80116c <Chap9_StallEP0InControlRead>


    if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
  800fb0:	00802074 	movhi	r2,129
  800fb4:	1091c804 	addi	r2,r2,18208
  800fb8:	10800003 	ldbu	r2,0(r2)
  800fbc:	1080008c 	andi	r2,r2,2
  800fc0:	10803fcc 	andi	r2,r2,255
  800fc4:	1005003a 	cmpeq	r2,r2,zero
  800fc8:	1000021e 	bne	r2,zero,800fd4 <Chap9_SetInterface+0x5c>
        Chap9_StallEP0InControlRead();
  800fcc:	080116c0 	call	80116c <Chap9_StallEP0InControlRead>
  800fd0:	00002406 	br	801064 <Chap9_SetInterface+0xec>


    else
    {

        if (ControlData.DeviceRequest.wValue == 0 && ControlData.DeviceRequest.wIndex == 0)
  800fd4:	00802074 	movhi	r2,129
  800fd8:	1091e104 	addi	r2,r2,18308
  800fdc:	1080010b 	ldhu	r2,4(r2)
  800fe0:	10bfffcc 	andi	r2,r2,65535
  800fe4:	1004c03a 	cmpne	r2,r2,zero
  800fe8:	10000b1e 	bne	r2,zero,801018 <Chap9_SetInterface+0xa0>
  800fec:	00802074 	movhi	r2,129
  800ff0:	1091e104 	addi	r2,r2,18308
  800ff4:	1080018b 	ldhu	r2,6(r2)
  800ff8:	10bfffcc 	andi	r2,r2,65535
  800ffc:	1004c03a 	cmpne	r2,r2,zero
  801000:	1000051e 	bne	r2,zero,801018 <Chap9_SetInterface+0xa0>
        {
            ALTERNATIVE_SETTING = 0;
  801004:	d0201605 	stb	zero,-32680(gp)
            Chap9_SingleTransmitEP0(0,0);
  801008:	0009883a 	mov	r4,zero
  80100c:	000b883a 	mov	r5,zero
  801010:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>


    else
    {

        if (ControlData.DeviceRequest.wValue == 0 && ControlData.DeviceRequest.wIndex == 0)
  801014:	00001306 	br	801064 <Chap9_SetInterface+0xec>
        {
            ALTERNATIVE_SETTING = 0;
            Chap9_SingleTransmitEP0(0,0);
        }

        else if (ControlData.DeviceRequest.wValue == 1 && ControlData.DeviceRequest.wIndex == 0)
  801018:	00802074 	movhi	r2,129
  80101c:	1091e104 	addi	r2,r2,18308
  801020:	1080010b 	ldhu	r2,4(r2)
  801024:	10bfffcc 	andi	r2,r2,65535
  801028:	10800058 	cmpnei	r2,r2,1
  80102c:	10000c1e 	bne	r2,zero,801060 <Chap9_SetInterface+0xe8>
  801030:	00802074 	movhi	r2,129
  801034:	1091e104 	addi	r2,r2,18308
  801038:	1080018b 	ldhu	r2,6(r2)
  80103c:	10bfffcc 	andi	r2,r2,65535
  801040:	1004c03a 	cmpne	r2,r2,zero
  801044:	1000061e 	bne	r2,zero,801060 <Chap9_SetInterface+0xe8>
        {
            ALTERNATIVE_SETTING = 1;
  801048:	00800044 	movi	r2,1
  80104c:	d0a01605 	stb	r2,-32680(gp)
            Chap9_SingleTransmitEP0(0,0);
  801050:	0009883a 	mov	r4,zero
  801054:	000b883a 	mov	r5,zero
  801058:	08011d00 	call	8011d0 <Chap9_SingleTransmitEP0>
        {
            ALTERNATIVE_SETTING = 0;
            Chap9_SingleTransmitEP0(0,0);
        }

        else if (ControlData.DeviceRequest.wValue == 1 && ControlData.DeviceRequest.wIndex == 0)
  80105c:	00000106 	br	801064 <Chap9_SetInterface+0xec>
            ALTERNATIVE_SETTING = 1;
            Chap9_SingleTransmitEP0(0,0);
        }
        else
        {
            Chap9_StallEP0InControlWrite();
  801060:	08011080 	call	801108 <Chap9_StallEP0InControlWrite>
        }
    }

}
  801064:	e037883a 	mov	sp,fp
  801068:	dfc00117 	ldw	ra,4(sp)
  80106c:	df000017 	ldw	fp,0(sp)
  801070:	dec00204 	addi	sp,sp,8
  801074:	f800283a 	ret

00801078 <Chap9_StallEP0>:
// *************************************************************************
// Chap9 support functions
// *************************************************************************

void Chap9_StallEP0(void)
{
  801078:	defffd04 	addi	sp,sp,-12
  80107c:	dfc00215 	stw	ra,8(sp)
  801080:	df000115 	stw	fp,4(sp)
  801084:	df000104 	addi	fp,sp,4
    UCHAR dir;
    dir = ControlData.DeviceRequest.bmRequestType & USB_REQUEST_DIR_MASK;
  801088:	00802074 	movhi	r2,129
  80108c:	1091e104 	addi	r2,r2,18308
  801090:	10c00083 	ldbu	r3,2(r2)
  801094:	00bfe004 	movi	r2,-128
  801098:	1884703a 	and	r2,r3,r2
  80109c:	e0bfff05 	stb	r2,-4(fp)
    if(dir)
  8010a0:	e0bfff03 	ldbu	r2,-4(fp)
  8010a4:	1005003a 	cmpeq	r2,r2,zero
  8010a8:	1000021e 	bne	r2,zero,8010b4 <Chap9_StallEP0+0x3c>
    {
        Hal4D13_StallEP0InControlRead();
  8010ac:	08024100 	call	802410 <Hal4D13_StallEP0InControlRead>
  8010b0:	00000106 	br	8010b8 <Chap9_StallEP0+0x40>
    }
    else
    {
        Hal4D13_StallEP0InControlWrite();
  8010b4:	08023d40 	call	8023d4 <Hal4D13_StallEP0InControlWrite>
    }

    RaiseIRQL();
  8010b8:	0804c880 	call	804c88 <disable_irq>
    if(!ControlData.Abort)
  8010bc:	00802074 	movhi	r2,129
  8010c0:	1091e104 	addi	r2,r2,18308
  8010c4:	10800003 	ldbu	r2,0(r2)
  8010c8:	10803fcc 	andi	r2,r2,255
  8010cc:	1004c03a 	cmpne	r2,r2,zero
  8010d0:	1000071e 	bne	r2,zero,8010f0 <Chap9_StallEP0+0x78>
    {
        bD13flags.bits.DCP_state = USBFSM4DCP_STALL;
  8010d4:	01002074 	movhi	r4,129
  8010d8:	2111c104 	addi	r4,r4,18180
  8010dc:	20c00017 	ldw	r3,0(r4)
  8010e0:	00bc3fc4 	movi	r2,-3841
  8010e4:	1884703a 	and	r2,r3,r2
  8010e8:	1081c014 	ori	r2,r2,1792
  8010ec:	20800015 	stw	r2,0(r4)

    }
    LowerIRQL();
  8010f0:	0804cd80 	call	804cd8 <enable_irq>
}
  8010f4:	e037883a 	mov	sp,fp
  8010f8:	dfc00117 	ldw	ra,4(sp)
  8010fc:	df000017 	ldw	fp,0(sp)
  801100:	dec00204 	addi	sp,sp,8
  801104:	f800283a 	ret

00801108 <Chap9_StallEP0InControlWrite>:
void Chap9_StallEP0InControlWrite(void)
{
  801108:	defffe04 	addi	sp,sp,-8
  80110c:	dfc00115 	stw	ra,4(sp)
  801110:	df000015 	stw	fp,0(sp)
  801114:	d839883a 	mov	fp,sp
    Hal4D13_StallEP0InControlWrite();
  801118:	08023d40 	call	8023d4 <Hal4D13_StallEP0InControlWrite>

    RaiseIRQL();
  80111c:	0804c880 	call	804c88 <disable_irq>
    if(!ControlData.Abort)
  801120:	00802074 	movhi	r2,129
  801124:	1091e104 	addi	r2,r2,18308
  801128:	10800003 	ldbu	r2,0(r2)
  80112c:	10803fcc 	andi	r2,r2,255
  801130:	1004c03a 	cmpne	r2,r2,zero
  801134:	1000071e 	bne	r2,zero,801154 <Chap9_StallEP0InControlWrite+0x4c>
    {
        bD13flags.bits.DCP_state = USBFSM4DCP_STALL;
  801138:	01002074 	movhi	r4,129
  80113c:	2111c104 	addi	r4,r4,18180
  801140:	20c00017 	ldw	r3,0(r4)
  801144:	00bc3fc4 	movi	r2,-3841
  801148:	1884703a 	and	r2,r3,r2
  80114c:	1081c014 	ori	r2,r2,1792
  801150:	20800015 	stw	r2,0(r4)

    }
    LowerIRQL();
  801154:	0804cd80 	call	804cd8 <enable_irq>
}
  801158:	e037883a 	mov	sp,fp
  80115c:	dfc00117 	ldw	ra,4(sp)
  801160:	df000017 	ldw	fp,0(sp)
  801164:	dec00204 	addi	sp,sp,8
  801168:	f800283a 	ret

0080116c <Chap9_StallEP0InControlRead>:

void Chap9_StallEP0InControlRead(void)
{
  80116c:	defffe04 	addi	sp,sp,-8
  801170:	dfc00115 	stw	ra,4(sp)
  801174:	df000015 	stw	fp,0(sp)
  801178:	d839883a 	mov	fp,sp
    Hal4D13_StallEP0InControlRead();
  80117c:	08024100 	call	802410 <Hal4D13_StallEP0InControlRead>
    RaiseIRQL();
  801180:	0804c880 	call	804c88 <disable_irq>
    if(!ControlData.Abort)
  801184:	00802074 	movhi	r2,129
  801188:	1091e104 	addi	r2,r2,18308
  80118c:	10800003 	ldbu	r2,0(r2)
  801190:	10803fcc 	andi	r2,r2,255
  801194:	1004c03a 	cmpne	r2,r2,zero
  801198:	1000071e 	bne	r2,zero,8011b8 <Chap9_StallEP0InControlRead+0x4c>
    {
        bD13flags.bits.DCP_state = USBFSM4DCP_STALL;
  80119c:	01002074 	movhi	r4,129
  8011a0:	2111c104 	addi	r4,r4,18180
  8011a4:	20c00017 	ldw	r3,0(r4)
  8011a8:	00bc3fc4 	movi	r2,-3841
  8011ac:	1884703a 	and	r2,r3,r2
  8011b0:	1081c014 	ori	r2,r2,1792
  8011b4:	20800015 	stw	r2,0(r4)

    }
    LowerIRQL();
  8011b8:	0804cd80 	call	804cd8 <enable_irq>
}
  8011bc:	e037883a 	mov	sp,fp
  8011c0:	dfc00117 	ldw	ra,4(sp)
  8011c4:	df000017 	ldw	fp,0(sp)
  8011c8:	dec00204 	addi	sp,sp,8
  8011cc:	f800283a 	ret

008011d0 <Chap9_SingleTransmitEP0>:

void Chap9_SingleTransmitEP0(PUCHAR buf, USHORT len)
{
  8011d0:	defffc04 	addi	sp,sp,-16
  8011d4:	dfc00315 	stw	ra,12(sp)
  8011d8:	df000215 	stw	fp,8(sp)
  8011dc:	df000204 	addi	fp,sp,8
  8011e0:	e13ffe15 	stw	r4,-8(fp)
  8011e4:	e17fff0d 	sth	r5,-4(fp)

    Hal4D13_SingleTransmitEP0(buf, len);
  8011e8:	e17fff0b 	ldhu	r5,-4(fp)
  8011ec:	e13ffe17 	ldw	r4,-8(fp)
  8011f0:	08022240 	call	802224 <Hal4D13_SingleTransmitEP0>

    RaiseIRQL();
  8011f4:	0804c880 	call	804c88 <disable_irq>
    if(!ControlData.Abort)
  8011f8:	00802074 	movhi	r2,129
  8011fc:	1091e104 	addi	r2,r2,18308
  801200:	10800003 	ldbu	r2,0(r2)
  801204:	10803fcc 	andi	r2,r2,255
  801208:	1004c03a 	cmpne	r2,r2,zero
  80120c:	1000111e 	bne	r2,zero,801254 <Chap9_SingleTransmitEP0+0x84>
    {
        ControlData.wLength = ControlData.wCount = len;
  801210:	00c02074 	movhi	r3,129
  801214:	18d1e104 	addi	r3,r3,18308
  801218:	e0bfff0b 	ldhu	r2,-4(fp)
  80121c:	1880030d 	sth	r2,12(r3)
  801220:	00802074 	movhi	r2,129
  801224:	1091e104 	addi	r2,r2,18308
  801228:	10c0030b 	ldhu	r3,12(r2)
  80122c:	00802074 	movhi	r2,129
  801230:	1091e104 	addi	r2,r2,18308
  801234:	10c0028d 	sth	r3,10(r2)
        bD13flags.bits.DCP_state = USBFSM4DCP_HANDSHAKE;
  801238:	01002074 	movhi	r4,129
  80123c:	2111c104 	addi	r4,r4,18180
  801240:	20c00017 	ldw	r3,0(r4)
  801244:	00bc3fc4 	movi	r2,-3841
  801248:	1884703a 	and	r2,r3,r2
  80124c:	10810014 	ori	r2,r2,1024
  801250:	20800015 	stw	r2,0(r4)

    }
    LowerIRQL();
  801254:	0804cd80 	call	804cd8 <enable_irq>
}
  801258:	e037883a 	mov	sp,fp
  80125c:	dfc00117 	ldw	ra,4(sp)
  801260:	df000017 	ldw	fp,0(sp)
  801264:	dec00204 	addi	sp,sp,8
  801268:	f800283a 	ret

0080126c <Chap9_BurstTransmitEP0>:

void Chap9_BurstTransmitEP0(PUCHAR pData, USHORT len)
{
  80126c:	defffc04 	addi	sp,sp,-16
  801270:	dfc00315 	stw	ra,12(sp)
  801274:	df000215 	stw	fp,8(sp)
  801278:	df000204 	addi	fp,sp,8
  80127c:	e13ffe15 	stw	r4,-8(fp)
  801280:	e17fff0d 	sth	r5,-4(fp)
    ControlData.wCount = 0;
  801284:	00802074 	movhi	r2,129
  801288:	1091e104 	addi	r2,r2,18308
  80128c:	1000030d 	sth	zero,12(r2)
    if(ControlData.wLength > len)
  801290:	00802074 	movhi	r2,129
  801294:	1091e104 	addi	r2,r2,18308
  801298:	1080028b 	ldhu	r2,10(r2)
  80129c:	10ffffcc 	andi	r3,r2,65535
  8012a0:	e0bfff0b 	ldhu	r2,-4(fp)
  8012a4:	10c0042e 	bgeu	r2,r3,8012b8 <Chap9_BurstTransmitEP0+0x4c>
        ControlData.wLength = len;
  8012a8:	00c02074 	movhi	r3,129
  8012ac:	18d1e104 	addi	r3,r3,18308
  8012b0:	e0bfff0b 	ldhu	r2,-4(fp)
  8012b4:	1880028d 	sth	r2,10(r3)

    ControlData.Addr.pData = pData;
  8012b8:	00c02074 	movhi	r3,129
  8012bc:	18d1e104 	addi	r3,r3,18308
  8012c0:	e0bffe17 	ldw	r2,-8(fp)
  8012c4:	18800415 	stw	r2,16(r3)

        if( ControlData.wLength >= EP0_PACKET_SIZE)
  8012c8:	00802074 	movhi	r2,129
  8012cc:	1091e104 	addi	r2,r2,18308
  8012d0:	1080028b 	ldhu	r2,10(r2)
  8012d4:	10bfffcc 	andi	r2,r2,65535
  8012d8:	10801030 	cmpltui	r2,r2,64
  8012dc:	10001c1e 	bne	r2,zero,801350 <Chap9_BurstTransmitEP0+0xe4>
        {
            Hal4D13_WriteEndpoint(EPINDEX4EP0_CONTROL_IN, pData, EP0_PACKET_SIZE);
  8012e0:	01000044 	movi	r4,1
  8012e4:	e17ffe17 	ldw	r5,-8(fp)
  8012e8:	01801004 	movi	r6,64
  8012ec:	0801a380 	call	801a38 <Hal4D13_WriteEndpoint>

            RaiseIRQL();
  8012f0:	0804c880 	call	804c88 <disable_irq>
            if(!ControlData.Abort)
  8012f4:	00802074 	movhi	r2,129
  8012f8:	1091e104 	addi	r2,r2,18308
  8012fc:	10800003 	ldbu	r2,0(r2)
  801300:	10803fcc 	andi	r2,r2,255
  801304:	1004c03a 	cmpne	r2,r2,zero
  801308:	10000f1e 	bne	r2,zero,801348 <Chap9_BurstTransmitEP0+0xdc>
            {
                ControlData.wCount += EP0_PACKET_SIZE;
  80130c:	00802074 	movhi	r2,129
  801310:	1091e104 	addi	r2,r2,18308
  801314:	1080030b 	ldhu	r2,12(r2)
  801318:	10801004 	addi	r2,r2,64
  80131c:	1007883a 	mov	r3,r2
  801320:	00802074 	movhi	r2,129
  801324:	1091e104 	addi	r2,r2,18308
  801328:	10c0030d 	sth	r3,12(r2)
                bD13flags.bits.DCP_state = USBFSM4DCP_DATAIN;
  80132c:	01002074 	movhi	r4,129
  801330:	2111c104 	addi	r4,r4,18180
  801334:	20c00017 	ldw	r3,0(r4)
  801338:	00bc3fc4 	movi	r2,-3841
  80133c:	1884703a 	and	r2,r3,r2
  801340:	10804014 	ori	r2,r2,256
  801344:	20800015 	stw	r2,0(r4)

            }
            LowerIRQL();
  801348:	0804cd80 	call	804cd8 <enable_irq>
  80134c:	00002106 	br	8013d4 <Chap9_BurstTransmitEP0+0x168>
        }
        else
        {
            Hal4D13_WriteEndpoint(EPINDEX4EP0_CONTROL_IN, pData, ControlData.wLength);
  801350:	00802074 	movhi	r2,129
  801354:	1091e104 	addi	r2,r2,18308
  801358:	1080028b 	ldhu	r2,10(r2)
  80135c:	11bfffcc 	andi	r6,r2,65535
  801360:	01000044 	movi	r4,1
  801364:	e17ffe17 	ldw	r5,-8(fp)
  801368:	0801a380 	call	801a38 <Hal4D13_WriteEndpoint>

            RaiseIRQL();
  80136c:	0804c880 	call	804c88 <disable_irq>
            if(!ControlData.Abort)
  801370:	00802074 	movhi	r2,129
  801374:	1091e104 	addi	r2,r2,18308
  801378:	10800003 	ldbu	r2,0(r2)
  80137c:	10803fcc 	andi	r2,r2,255
  801380:	1004c03a 	cmpne	r2,r2,zero
  801384:	1000121e 	bne	r2,zero,8013d0 <Chap9_BurstTransmitEP0+0x164>
            {
                ControlData.wCount += ControlData.wLength;
  801388:	00802074 	movhi	r2,129
  80138c:	1091e104 	addi	r2,r2,18308
  801390:	10c0030b 	ldhu	r3,12(r2)
  801394:	00802074 	movhi	r2,129
  801398:	1091e104 	addi	r2,r2,18308
  80139c:	1080028b 	ldhu	r2,10(r2)
  8013a0:	1885883a 	add	r2,r3,r2
  8013a4:	1007883a 	mov	r3,r2
  8013a8:	00802074 	movhi	r2,129
  8013ac:	1091e104 	addi	r2,r2,18308
  8013b0:	10c0030d 	sth	r3,12(r2)
                bD13flags.bits.DCP_state = USBFSM4DCP_HANDSHAKE;
  8013b4:	01002074 	movhi	r4,129
  8013b8:	2111c104 	addi	r4,r4,18180
  8013bc:	20c00017 	ldw	r3,0(r4)
  8013c0:	00bc3fc4 	movi	r2,-3841
  8013c4:	1884703a 	and	r2,r3,r2
  8013c8:	10810014 	ori	r2,r2,1024
  8013cc:	20800015 	stw	r2,0(r4)

            }
            LowerIRQL();
  8013d0:	0804cd80 	call	804cd8 <enable_irq>
        }
}
  8013d4:	e037883a 	mov	sp,fp
  8013d8:	dfc00117 	ldw	ra,4(sp)
  8013dc:	df000017 	ldw	fp,0(sp)
  8013e0:	dec00204 	addi	sp,sp,8
  8013e4:	f800283a 	ret

008013e8 <Hal4D13_AcquireD13>:
// Subroutines -- 1
// ************************************************************************
*/

void Hal4D13_AcquireD13(unsigned char g_host_IRQ_num, void *usb_isr)
{
  8013e8:	defffc04 	addi	sp,sp,-16
  8013ec:	dfc00315 	stw	ra,12(sp)
  8013f0:	df000215 	stw	fp,8(sp)
  8013f4:	df000204 	addi	fp,sp,8
  8013f8:	e17fff15 	stw	r5,-4(fp)
  8013fc:	e13ffe05 	stb	r4,-8(fp)
	alt_irq_register (USB_0_IRQ, NULL, usb_isr);
  801400:	e1bfff17 	ldw	r6,-4(fp)
  801404:	01000084 	movi	r4,2
  801408:	000b883a 	mov	r5,zero
  80140c:	080f0340 	call	80f034 <alt_irq_register>
}
  801410:	e037883a 	mov	sp,fp
  801414:	dfc00117 	ldw	ra,4(sp)
  801418:	df000017 	ldw	fp,0(sp)
  80141c:	dec00204 	addi	sp,sp,8
  801420:	f800283a 	ret

00801424 <Hal4D13_ResetDevice>:

void Hal4D13_ResetDevice(void)
{
  801424:	deffff04 	addi	sp,sp,-4
  801428:	df000015 	stw	fp,0(sp)
  80142c:	d839883a 	mov	fp,sp
  IOWR(USB_0_BASE,D13_COMMAND_PORT,D13CMD_DEV_RESET);
  801430:	00c06474 	movhi	r3,401
  801434:	18e40b04 	addi	r3,r3,-28628
  801438:	00803d84 	movi	r2,246
  80143c:	18800035 	stwio	r2,0(r3)
}
  801440:	e037883a 	mov	sp,fp
  801444:	df000017 	ldw	fp,0(sp)
  801448:	dec00104 	addi	sp,sp,4
  80144c:	f800283a 	ret

00801450 <Hal4D13_GetDevConfig>:

USHORT Hal4D13_GetDevConfig(void)
{
  801450:	defffe04 	addi	sp,sp,-8
  801454:	df000115 	stw	fp,4(sp)
  801458:	df000104 	addi	fp,sp,4
  USHORT i; 
  IOWR(USB_0_BASE,D13_COMMAND_PORT,D13CMD_DEV_RD_CNFG);
  80145c:	00c06474 	movhi	r3,401
  801460:	18e40b04 	addi	r3,r3,-28628
  801464:	00802ec4 	movi	r2,187
  801468:	18800035 	stwio	r2,0(r3)
  i = IORD(USB_0_BASE,D13_DATA_PORT);
  80146c:	00806474 	movhi	r2,401
  801470:	10a40a04 	addi	r2,r2,-28632
  801474:	10800037 	ldwio	r2,0(r2)
  801478:	e0bfff0d 	sth	r2,-4(fp)
  return i;
  80147c:	e0bfff0b 	ldhu	r2,-4(fp)
}
  801480:	e037883a 	mov	sp,fp
  801484:	df000017 	ldw	fp,0(sp)
  801488:	dec00104 	addi	sp,sp,4
  80148c:	f800283a 	ret

00801490 <Hal4D13_SetDevConfig>:

void Hal4D13_SetDevConfig(USHORT wDevCnfg)
{
  801490:	defffe04 	addi	sp,sp,-8
  801494:	df000115 	stw	fp,4(sp)
  801498:	df000104 	addi	fp,sp,4
  80149c:	e13fff0d 	sth	r4,-4(fp)
  IOWR(USB_0_BASE,D13_COMMAND_PORT,D13CMD_DEV_WR_CNFG);
  8014a0:	00c06474 	movhi	r3,401
  8014a4:	18e40b04 	addi	r3,r3,-28628
  8014a8:	00802e84 	movi	r2,186
  8014ac:	18800035 	stwio	r2,0(r3)
  IOWR(USB_0_BASE,D13_DATA_PORT, wDevCnfg);
  8014b0:	e0ffff0b 	ldhu	r3,-4(fp)
  8014b4:	00806474 	movhi	r2,401
  8014b8:	10a40a04 	addi	r2,r2,-28632
  8014bc:	10c00035 	stwio	r3,0(r2)
}
  8014c0:	e037883a 	mov	sp,fp
  8014c4:	df000017 	ldw	fp,0(sp)
  8014c8:	dec00104 	addi	sp,sp,4
  8014cc:	f800283a 	ret

008014d0 <Hal4D13_SetMode>:

void Hal4D13_SetMode(UCHAR bMode)
{
  8014d0:	defffe04 	addi	sp,sp,-8
  8014d4:	df000115 	stw	fp,4(sp)
  8014d8:	df000104 	addi	fp,sp,4
  8014dc:	e13fff05 	stb	r4,-4(fp)
  IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_DEV_WR_MODE);
  8014e0:	00c06474 	movhi	r3,401
  8014e4:	18e40b04 	addi	r3,r3,-28628
  8014e8:	00802e04 	movi	r2,184
  8014ec:	18800035 	stwio	r2,0(r3)
  IOWR(USB_0_BASE,D13_DATA_PORT, bMode);
  8014f0:	e0ffff03 	ldbu	r3,-4(fp)
  8014f4:	00806474 	movhi	r2,401
  8014f8:	10a40a04 	addi	r2,r2,-28632
  8014fc:	10c00035 	stwio	r3,0(r2)
}
  801500:	e037883a 	mov	sp,fp
  801504:	df000017 	ldw	fp,0(sp)
  801508:	dec00104 	addi	sp,sp,4
  80150c:	f800283a 	ret

00801510 <Hal4D13_GetMode>:

UCHAR Hal4D13_GetMode(void)
{
  801510:	defffe04 	addi	sp,sp,-8
  801514:	df000115 	stw	fp,4(sp)
  801518:	df000104 	addi	fp,sp,4
    UCHAR c;   
  IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_DEV_RD_MODE);
  80151c:	00c06474 	movhi	r3,401
  801520:	18e40b04 	addi	r3,r3,-28628
  801524:	00802e44 	movi	r2,185
  801528:	18800035 	stwio	r2,0(r3)
  c = (UCHAR)(IORD(USB_0_BASE,D13_DATA_PORT) & 0x0ff);
  80152c:	00806474 	movhi	r2,401
  801530:	10a40a04 	addi	r2,r2,-28632
  801534:	10800037 	ldwio	r2,0(r2)
  801538:	1007883a 	mov	r3,r2
  80153c:	00bfffc4 	movi	r2,-1
  801540:	1884703a 	and	r2,r3,r2
  801544:	e0bfff05 	stb	r2,-4(fp)
    return c;
  801548:	e0bfff03 	ldbu	r2,-4(fp)
}
  80154c:	e037883a 	mov	sp,fp
  801550:	df000017 	ldw	fp,0(sp)
  801554:	dec00104 	addi	sp,sp,4
  801558:	f800283a 	ret

0080155c <Hal4D13_GetAddress>:

UCHAR Hal4D13_GetAddress(void)
{
  80155c:	defffe04 	addi	sp,sp,-8
  801560:	df000115 	stw	fp,4(sp)
  801564:	df000104 	addi	fp,sp,4
    UCHAR c; 
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_DEV_RD_ADDR);
  801568:	00c06474 	movhi	r3,401
  80156c:	18e40b04 	addi	r3,r3,-28628
  801570:	00802dc4 	movi	r2,183
  801574:	18800035 	stwio	r2,0(r3)
    c = (UCHAR)(IORD(USB_0_BASE,D13_DATA_PORT) & 0x0ff);
  801578:	00806474 	movhi	r2,401
  80157c:	10a40a04 	addi	r2,r2,-28632
  801580:	10800037 	ldwio	r2,0(r2)
  801584:	1007883a 	mov	r3,r2
  801588:	00bfffc4 	movi	r2,-1
  80158c:	1884703a 	and	r2,r3,r2
  801590:	e0bfff05 	stb	r2,-4(fp)
    return c;
  801594:	e0bfff03 	ldbu	r2,-4(fp)
}
  801598:	e037883a 	mov	sp,fp
  80159c:	df000017 	ldw	fp,0(sp)
  8015a0:	dec00104 	addi	sp,sp,4
  8015a4:	f800283a 	ret

008015a8 <Hal4D13_SetAddressEnable>:

void Hal4D13_SetAddressEnable(UCHAR bAddress, UCHAR bEnable)
{
  8015a8:	defffd04 	addi	sp,sp,-12
  8015ac:	df000215 	stw	fp,8(sp)
  8015b0:	df000204 	addi	fp,sp,8
  8015b4:	e13ffe05 	stb	r4,-8(fp)
  8015b8:	e17fff05 	stb	r5,-4(fp)
  IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_DEV_WR_ADDR);
  8015bc:	00c06474 	movhi	r3,401
  8015c0:	18e40b04 	addi	r3,r3,-28628
  8015c4:	00802d84 	movi	r2,182
  8015c8:	18800035 	stwio	r2,0(r3)
  if(bEnable)
  8015cc:	e0bfff03 	ldbu	r2,-4(fp)
  8015d0:	1005003a 	cmpeq	r2,r2,zero
  8015d4:	1000051e 	bne	r2,zero,8015ec <Hal4D13_SetAddressEnable+0x44>
  bAddress |= D13REG_DEVADDR_EN;
  8015d8:	e0bffe03 	ldbu	r2,-8(fp)
  8015dc:	00ffe004 	movi	r3,-128
  8015e0:	10c4b03a 	or	r2,r2,r3
  8015e4:	e0bffe05 	stb	r2,-8(fp)
  8015e8:	00000306 	br	8015f8 <Hal4D13_SetAddressEnable+0x50>
  else
  bAddress &= D13REG_DEVADDR_MASK;
  8015ec:	e0bffe03 	ldbu	r2,-8(fp)
  8015f0:	10801fcc 	andi	r2,r2,127
  8015f4:	e0bffe05 	stb	r2,-8(fp)
  IOWR(USB_0_BASE,D13_DATA_PORT, bAddress);
  8015f8:	e0fffe03 	ldbu	r3,-8(fp)
  8015fc:	00806474 	movhi	r2,401
  801600:	10a40a04 	addi	r2,r2,-28632
  801604:	10c00035 	stwio	r3,0(r2)
}
  801608:	e037883a 	mov	sp,fp
  80160c:	df000017 	ldw	fp,0(sp)
  801610:	dec00104 	addi	sp,sp,4
  801614:	f800283a 	ret

00801618 <Hal4D13_SoftConnect>:

void Hal4D13_SoftConnect(UCHAR bEnable)
{
  801618:	defffd04 	addi	sp,sp,-12
  80161c:	df000215 	stw	fp,8(sp)
  801620:	df000204 	addi	fp,sp,8
  801624:	e13fff05 	stb	r4,-4(fp)
    UCHAR c;
  IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_DEV_RD_MODE);
  801628:	00c06474 	movhi	r3,401
  80162c:	18e40b04 	addi	r3,r3,-28628
  801630:	00802e44 	movi	r2,185
  801634:	18800035 	stwio	r2,0(r3)
  c = (UCHAR)(IORD(USB_0_BASE,D13_DATA_PORT) & 0x0ff);
  801638:	00806474 	movhi	r2,401
  80163c:	10a40a04 	addi	r2,r2,-28632
  801640:	10800037 	ldwio	r2,0(r2)
  801644:	1007883a 	mov	r3,r2
  801648:	00bfffc4 	movi	r2,-1
  80164c:	1884703a 	and	r2,r3,r2
  801650:	e0bffe05 	stb	r2,-8(fp)
  if(bEnable)
  801654:	e0bfff03 	ldbu	r2,-4(fp)
  801658:	1005003a 	cmpeq	r2,r2,zero
  80165c:	1000041e 	bne	r2,zero,801670 <Hal4D13_SoftConnect+0x58>
  c |= D13REG_MODE_SOFTCONNECT;
  801660:	e0bffe03 	ldbu	r2,-8(fp)
  801664:	10800054 	ori	r2,r2,1
  801668:	e0bffe05 	stb	r2,-8(fp)
  80166c:	00000406 	br	801680 <Hal4D13_SoftConnect+0x68>
  else
  c &= ~D13REG_MODE_SOFTCONNECT;  
  801670:	e0bffe03 	ldbu	r2,-8(fp)
  801674:	00ffff84 	movi	r3,-2
  801678:	10c4703a 	and	r2,r2,r3
  80167c:	e0bffe05 	stb	r2,-8(fp)
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_DEV_WR_MODE);
  801680:	00c06474 	movhi	r3,401
  801684:	18e40b04 	addi	r3,r3,-28628
  801688:	00802e04 	movi	r2,184
  80168c:	18800035 	stwio	r2,0(r3)
  IOWR(USB_0_BASE,D13_DATA_PORT, c);
  801690:	e0fffe03 	ldbu	r3,-8(fp)
  801694:	00806474 	movhi	r2,401
  801698:	10a40a04 	addi	r2,r2,-28632
  80169c:	10c00035 	stwio	r3,0(r2)
}
  8016a0:	e037883a 	mov	sp,fp
  8016a4:	df000017 	ldw	fp,0(sp)
  8016a8:	dec00104 	addi	sp,sp,4
  8016ac:	f800283a 	ret

008016b0 <Hal4D13_AcknowledgeSETUP>:

void Hal4D13_AcknowledgeSETUP(void)
{
  8016b0:	deffff04 	addi	sp,sp,-4
  8016b4:	df000015 	stw	fp,0(sp)
  8016b8:	d839883a 	mov	fp,sp
  IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_ACK_SETUP);
  8016bc:	00c06474 	movhi	r3,401
  8016c0:	18e40b04 	addi	r3,r3,-28628
  8016c4:	00803d04 	movi	r2,244
  8016c8:	18800035 	stwio	r2,0(r3)
}
  8016cc:	e037883a 	mov	sp,fp
  8016d0:	df000017 	ldw	fp,0(sp)
  8016d4:	dec00104 	addi	sp,sp,4
  8016d8:	f800283a 	ret

008016dc <Hal4D13_ClearBuffer>:

void Hal4D13_ClearBuffer(UCHAR bEPIndex)
{
  8016dc:	defffe04 	addi	sp,sp,-8
  8016e0:	df000115 	stw	fp,4(sp)
  8016e4:	df000104 	addi	fp,sp,4
  8016e8:	e13fff05 	stb	r4,-4(fp)
  /* Select Endpoint */
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_EP_CLEAR_BUF + bEPIndex);
  8016ec:	e0bfff03 	ldbu	r2,-4(fp)
  8016f0:	10c01c04 	addi	r3,r2,112
  8016f4:	00806474 	movhi	r2,401
  8016f8:	10a40b04 	addi	r2,r2,-28628
  8016fc:	10c00035 	stwio	r3,0(r2)
}
  801700:	e037883a 	mov	sp,fp
  801704:	df000017 	ldw	fp,0(sp)
  801708:	dec00104 	addi	sp,sp,4
  80170c:	f800283a 	ret

00801710 <Hal4D13_ValidBuffer>:

void Hal4D13_ValidBuffer(UCHAR bEPIndex)
{
  801710:	defffe04 	addi	sp,sp,-8
  801714:	df000115 	stw	fp,4(sp)
  801718:	df000104 	addi	fp,sp,4
  80171c:	e13fff05 	stb	r4,-4(fp)
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_EP_VALID_BUF + bEPIndex);
  801720:	e0bfff03 	ldbu	r2,-4(fp)
  801724:	10c01804 	addi	r3,r2,96
  801728:	00806474 	movhi	r2,401
  80172c:	10a40b04 	addi	r2,r2,-28628
  801730:	10c00035 	stwio	r3,0(r2)
}
  801734:	e037883a 	mov	sp,fp
  801738:	df000017 	ldw	fp,0(sp)
  80173c:	dec00104 	addi	sp,sp,4
  801740:	f800283a 	ret

00801744 <Hal4D13_ReadEndpoint>:

USHORT Hal4D13_ReadEndpoint(UCHAR bEPIndex, UCHAR *buf, USHORT len)
{
  801744:	defffa04 	addi	sp,sp,-24
  801748:	df000515 	stw	fp,20(sp)
  80174c:	df000504 	addi	fp,sp,20
  801750:	e17ffe15 	stw	r5,-8(fp)
  801754:	e13ffd05 	stb	r4,-12(fp)
  801758:	e1bfff0d 	sth	r6,-4(fp)
    USHORT i, j, c;
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_EP_RD_FIFO + bEPIndex);
  80175c:	e0bffd03 	ldbu	r2,-12(fp)
  801760:	10c00404 	addi	r3,r2,16
  801764:	00806474 	movhi	r2,401
  801768:	10a40b04 	addi	r2,r2,-28628
  80176c:	10c00035 	stwio	r3,0(r2)
    /* read Buffer */
    j = IORD(USB_0_BASE,D13_DATA_PORT);
  801770:	00806474 	movhi	r2,401
  801774:	10a40a04 	addi	r2,r2,-28632
  801778:	10800037 	ldwio	r2,0(r2)
  80177c:	e0bffb8d 	sth	r2,-18(fp)
    if(j > len)
  801780:	e0fffb8b 	ldhu	r3,-18(fp)
  801784:	e0bfff0b 	ldhu	r2,-4(fp)
  801788:	10c0022e 	bgeu	r2,r3,801794 <Hal4D13_ReadEndpoint+0x50>
        j = len;
  80178c:	e0bfff0b 	ldhu	r2,-4(fp)
  801790:	e0bffb8d 	sth	r2,-18(fp)
    i=0;
  801794:	e03ffc0d 	sth	zero,-16(fp)
    while (i<j)//<<
  801798:	00001c06 	br	80180c <Hal4D13_ReadEndpoint+0xc8>
    //for(i=0; i<j; i=i+2, buf++ )
    {
        c = IORD(USB_0_BASE,D13_DATA_PORT);
  80179c:	00806474 	movhi	r2,401
  8017a0:	10a40a04 	addi	r2,r2,-28632
  8017a4:	10800037 	ldwio	r2,0(r2)
  8017a8:	e0bffb0d 	sth	r2,-20(fp)
        *buf = (UCHAR)c;
  8017ac:	e0bffb0b 	ldhu	r2,-20(fp)
  8017b0:	1007883a 	mov	r3,r2
  8017b4:	e0bffe17 	ldw	r2,-8(fp)
  8017b8:	10c00005 	stb	r3,0(r2)
        i++;//<<
  8017bc:	e0bffc0b 	ldhu	r2,-16(fp)
  8017c0:	10800044 	addi	r2,r2,1
  8017c4:	e0bffc0d 	sth	r2,-16(fp)
        if (i >= j) break; //<<
  8017c8:	e0fffc0b 	ldhu	r3,-16(fp)
  8017cc:	e0bffb8b 	ldhu	r2,-18(fp)
  8017d0:	1880112e 	bgeu	r3,r2,801818 <Hal4D13_ReadEndpoint+0xd4>
        buf++;
  8017d4:	e0bffe17 	ldw	r2,-8(fp)
  8017d8:	10800044 	addi	r2,r2,1
  8017dc:	e0bffe15 	stw	r2,-8(fp)
        *buf = (UCHAR)(c>>8);
  8017e0:	e0bffb0b 	ldhu	r2,-20(fp)
  8017e4:	1004d23a 	srli	r2,r2,8
  8017e8:	1007883a 	mov	r3,r2
  8017ec:	e0bffe17 	ldw	r2,-8(fp)
  8017f0:	10c00005 	stb	r3,0(r2)
        i++;//<<
  8017f4:	e0bffc0b 	ldhu	r2,-16(fp)
  8017f8:	10800044 	addi	r2,r2,1
  8017fc:	e0bffc0d 	sth	r2,-16(fp)
         buf++;
  801800:	e0bffe17 	ldw	r2,-8(fp)
  801804:	10800044 	addi	r2,r2,1
  801808:	e0bffe15 	stw	r2,-8(fp)
    /* read Buffer */
    j = IORD(USB_0_BASE,D13_DATA_PORT);
    if(j > len)
        j = len;
    i=0;
    while (i<j)//<<
  80180c:	e0fffc0b 	ldhu	r3,-16(fp)
  801810:	e0bffb8b 	ldhu	r2,-18(fp)
  801814:	18bfe136 	bltu	r3,r2,80179c <Hal4D13_ReadEndpoint+0x58>
        *buf = (UCHAR)(c>>8);
        i++;//<<
         buf++;
    }
    /* Clear Buffer */
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_EP_CLEAR_BUF+bEPIndex);
  801818:	e0bffd03 	ldbu	r2,-12(fp)
  80181c:	10c01c04 	addi	r3,r2,112
  801820:	00806474 	movhi	r2,401
  801824:	10a40b04 	addi	r2,r2,-28628
  801828:	10c00035 	stwio	r3,0(r2)
    return j;
  80182c:	e0bffb8b 	ldhu	r2,-18(fp)

}
  801830:	e037883a 	mov	sp,fp
  801834:	df000017 	ldw	fp,0(sp)
  801838:	dec00104 	addi	sp,sp,4
  80183c:	f800283a 	ret

00801840 <Hal4D13_ReadBulkEndpoint>:

USHORT Hal4D13_ReadBulkEndpoint(UCHAR bEPIndex, UCHAR * buf, USHORT len)
{
  801840:	defffa04 	addi	sp,sp,-24
  801844:	df000515 	stw	fp,20(sp)
  801848:	df000504 	addi	fp,sp,20
  80184c:	e17ffe15 	stw	r5,-8(fp)
  801850:	e13ffd05 	stb	r4,-12(fp)
  801854:	e1bfff0d 	sth	r6,-4(fp)
    USHORT i, j, c;
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_EP_RD_FIFO + bEPIndex);
  801858:	e0bffd03 	ldbu	r2,-12(fp)
  80185c:	10c00404 	addi	r3,r2,16
  801860:	00806474 	movhi	r2,401
  801864:	10a40b04 	addi	r2,r2,-28628
  801868:	10c00035 	stwio	r3,0(r2)
    j = IORD(USB_0_BASE,D13_DATA_PORT);
  80186c:	00806474 	movhi	r2,401
  801870:	10a40a04 	addi	r2,r2,-28632
  801874:	10800037 	ldwio	r2,0(r2)
  801878:	e0bffb8d 	sth	r2,-18(fp)
    if(j > len)
  80187c:	e0fffb8b 	ldhu	r3,-18(fp)
  801880:	e0bfff0b 	ldhu	r2,-4(fp)
  801884:	10c0022e 	bgeu	r2,r3,801890 <Hal4D13_ReadBulkEndpoint+0x50>
        j = len;
  801888:	e0bfff0b 	ldhu	r2,-4(fp)
  80188c:	e0bffb8d 	sth	r2,-18(fp)
    i=0;
  801890:	e03ffc0d 	sth	zero,-16(fp)
    while (i<j) //<<
  801894:	00001c06 	br	801908 <Hal4D13_ReadBulkEndpoint+0xc8>
//  for(i=0; i<j; i=i+2, buf++ )
    {
        c = IORD(USB_0_BASE,D13_DATA_PORT);
  801898:	00806474 	movhi	r2,401
  80189c:	10a40a04 	addi	r2,r2,-28632
  8018a0:	10800037 	ldwio	r2,0(r2)
  8018a4:	e0bffb0d 	sth	r2,-20(fp)
        *buf = (UCHAR)c;
  8018a8:	e0bffb0b 	ldhu	r2,-20(fp)
  8018ac:	1007883a 	mov	r3,r2
  8018b0:	e0bffe17 	ldw	r2,-8(fp)
  8018b4:	10c00005 	stb	r3,0(r2)
        i++;//<<
  8018b8:	e0bffc0b 	ldhu	r2,-16(fp)
  8018bc:	10800044 	addi	r2,r2,1
  8018c0:	e0bffc0d 	sth	r2,-16(fp)
        if (i >= j) break; //<<
  8018c4:	e0fffc0b 	ldhu	r3,-16(fp)
  8018c8:	e0bffb8b 	ldhu	r2,-18(fp)
  8018cc:	1880112e 	bgeu	r3,r2,801914 <Hal4D13_ReadBulkEndpoint+0xd4>
        buf++;
  8018d0:	e0bffe17 	ldw	r2,-8(fp)
  8018d4:	10800044 	addi	r2,r2,1
  8018d8:	e0bffe15 	stw	r2,-8(fp)
        *buf = (UCHAR)(c>>8);
  8018dc:	e0bffb0b 	ldhu	r2,-20(fp)
  8018e0:	1004d23a 	srli	r2,r2,8
  8018e4:	1007883a 	mov	r3,r2
  8018e8:	e0bffe17 	ldw	r2,-8(fp)
  8018ec:	10c00005 	stb	r3,0(r2)
    
        i++;//<<
  8018f0:	e0bffc0b 	ldhu	r2,-16(fp)
  8018f4:	10800044 	addi	r2,r2,1
  8018f8:	e0bffc0d 	sth	r2,-16(fp)
    buf++;
  8018fc:	e0bffe17 	ldw	r2,-8(fp)
  801900:	10800044 	addi	r2,r2,1
  801904:	e0bffe15 	stw	r2,-8(fp)
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_EP_RD_FIFO + bEPIndex);
    j = IORD(USB_0_BASE,D13_DATA_PORT);
    if(j > len)
        j = len;
    i=0;
    while (i<j) //<<
  801908:	e0fffc0b 	ldhu	r3,-16(fp)
  80190c:	e0bffb8b 	ldhu	r2,-18(fp)
  801910:	18bfe136 	bltu	r3,r2,801898 <Hal4D13_ReadBulkEndpoint+0x58>
    
        i++;//<<
    buf++;
    }
    /* Clear Buffer */
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_EP_CLEAR_BUF+bEPIndex);
  801914:	e0bffd03 	ldbu	r2,-12(fp)
  801918:	10c01c04 	addi	r3,r2,112
  80191c:	00806474 	movhi	r2,401
  801920:	10a40b04 	addi	r2,r2,-28628
  801924:	10c00035 	stwio	r3,0(r2)

    return j;
  801928:	e0bffb8b 	ldhu	r2,-18(fp)
}
  80192c:	e037883a 	mov	sp,fp
  801930:	df000017 	ldw	fp,0(sp)
  801934:	dec00104 	addi	sp,sp,4
  801938:	f800283a 	ret

0080193c <Hal4D13_ReadEndpointWOClearBuffer>:

USHORT Hal4D13_ReadEndpointWOClearBuffer(UCHAR bEPIndex, UCHAR * buf, USHORT len)
{
  80193c:	defffa04 	addi	sp,sp,-24
  801940:	df000515 	stw	fp,20(sp)
  801944:	df000504 	addi	fp,sp,20
  801948:	e17ffe15 	stw	r5,-8(fp)
  80194c:	e13ffd05 	stb	r4,-12(fp)
  801950:	e1bfff0d 	sth	r6,-4(fp)
    USHORT i, j,c;
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_EP_RD_FIFO + bEPIndex);
  801954:	e0bffd03 	ldbu	r2,-12(fp)
  801958:	10c00404 	addi	r3,r2,16
  80195c:	00806474 	movhi	r2,401
  801960:	10a40b04 	addi	r2,r2,-28628
  801964:	10c00035 	stwio	r3,0(r2)
    /* read Buffer */
    j = IORD(USB_0_BASE,D13_DATA_PORT);
  801968:	00806474 	movhi	r2,401
  80196c:	10a40a04 	addi	r2,r2,-28632
  801970:	10800037 	ldwio	r2,0(r2)
  801974:	e0bffb8d 	sth	r2,-18(fp)
    if(j > len)
  801978:	e0fffb8b 	ldhu	r3,-18(fp)
  80197c:	e0bfff0b 	ldhu	r2,-4(fp)
  801980:	10c0022e 	bgeu	r2,r3,80198c <Hal4D13_ReadEndpointWOClearBuffer+0x50>
        j = len;
  801984:	e0bfff0b 	ldhu	r2,-4(fp)
  801988:	e0bffb8d 	sth	r2,-18(fp)
    i=0;
  80198c:	e03ffc0d 	sth	zero,-16(fp)
    while (i<j) //<<    
  801990:	00001c06 	br	801a04 <Hal4D13_ReadEndpointWOClearBuffer+0xc8>
   //for(i<j; i=i+2, buf++ )
    {
         c = IORD(USB_0_BASE,D13_DATA_PORT);
  801994:	00806474 	movhi	r2,401
  801998:	10a40a04 	addi	r2,r2,-28632
  80199c:	10800037 	ldwio	r2,0(r2)
  8019a0:	e0bffb0d 	sth	r2,-20(fp)
         *buf = (UCHAR)c;//printf("WOC= %02X ",*buf);//<<        
  8019a4:	e0bffb0b 	ldhu	r2,-20(fp)
  8019a8:	1007883a 	mov	r3,r2
  8019ac:	e0bffe17 	ldw	r2,-8(fp)
  8019b0:	10c00005 	stb	r3,0(r2)
         i++;//<<
  8019b4:	e0bffc0b 	ldhu	r2,-16(fp)
  8019b8:	10800044 	addi	r2,r2,1
  8019bc:	e0bffc0d 	sth	r2,-16(fp)
         if (i >= j) break; //<<
  8019c0:	e0fffc0b 	ldhu	r3,-16(fp)
  8019c4:	e0bffb8b 	ldhu	r2,-18(fp)
  8019c8:	1880112e 	bgeu	r3,r2,801a10 <Hal4D13_ReadEndpointWOClearBuffer+0xd4>
         buf++;
  8019cc:	e0bffe17 	ldw	r2,-8(fp)
  8019d0:	10800044 	addi	r2,r2,1
  8019d4:	e0bffe15 	stw	r2,-8(fp)
         *buf = (UCHAR)(c>>8); //printf("WOC= %02X ",*buf);//<<
  8019d8:	e0bffb0b 	ldhu	r2,-20(fp)
  8019dc:	1004d23a 	srli	r2,r2,8
  8019e0:	1007883a 	mov	r3,r2
  8019e4:	e0bffe17 	ldw	r2,-8(fp)
  8019e8:	10c00005 	stb	r3,0(r2)
         i++;//<<
  8019ec:	e0bffc0b 	ldhu	r2,-16(fp)
  8019f0:	10800044 	addi	r2,r2,1
  8019f4:	e0bffc0d 	sth	r2,-16(fp)
     buf++;
  8019f8:	e0bffe17 	ldw	r2,-8(fp)
  8019fc:	10800044 	addi	r2,r2,1
  801a00:	e0bffe15 	stw	r2,-8(fp)
    /* read Buffer */
    j = IORD(USB_0_BASE,D13_DATA_PORT);
    if(j > len)
        j = len;
    i=0;
    while (i<j) //<<    
  801a04:	e0fffc0b 	ldhu	r3,-16(fp)
  801a08:	e0bffb8b 	ldhu	r2,-18(fp)
  801a0c:	18bfe136 	bltu	r3,r2,801994 <Hal4D13_ReadEndpointWOClearBuffer+0x58>
         i++;//<<
     buf++;
    }
   // printf("\n",c);
    /* Clear Buffer */
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_EP_CLEAR_BUF+bEPIndex);
  801a10:	e0bffd03 	ldbu	r2,-12(fp)
  801a14:	10c01c04 	addi	r3,r2,112
  801a18:	00806474 	movhi	r2,401
  801a1c:	10a40b04 	addi	r2,r2,-28628
  801a20:	10c00035 	stwio	r3,0(r2)

    return j;
  801a24:	e0bffb8b 	ldhu	r2,-18(fp)
}
  801a28:	e037883a 	mov	sp,fp
  801a2c:	df000017 	ldw	fp,0(sp)
  801a30:	dec00104 	addi	sp,sp,4
  801a34:	f800283a 	ret

00801a38 <Hal4D13_WriteEndpoint>:

USHORT Hal4D13_WriteEndpoint(UCHAR bEPIndex, UCHAR * buf, USHORT len)
{
  801a38:	defffb04 	addi	sp,sp,-20
  801a3c:	df000415 	stw	fp,16(sp)
  801a40:	df000404 	addi	fp,sp,16
  801a44:	e17ffe15 	stw	r5,-8(fp)
  801a48:	e13ffd05 	stb	r4,-12(fp)
  801a4c:	e1bfff0d 	sth	r6,-4(fp)
    USHORT i,c;
    /* Select Endpoint */
   
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_EP_WR_FIFO + bEPIndex);
  801a50:	e0fffd03 	ldbu	r3,-12(fp)
  801a54:	00806474 	movhi	r2,401
  801a58:	10a40b04 	addi	r2,r2,-28628
  801a5c:	10c00035 	stwio	r3,0(r2)
    IOWR(USB_0_BASE,D13_DATA_PORT, len);
  801a60:	e0ffff0b 	ldhu	r3,-4(fp)
  801a64:	00806474 	movhi	r2,401
  801a68:	10a40a04 	addi	r2,r2,-28632
  801a6c:	10c00035 	stwio	r3,0(r2)
    if (len==0) IOWR(USB_0_BASE,D13_DATA_PORT, 0);
  801a70:	e0bfff0b 	ldhu	r2,-4(fp)
  801a74:	1004c03a 	cmpne	r2,r2,zero
  801a78:	1000031e 	bne	r2,zero,801a88 <Hal4D13_WriteEndpoint+0x50>
  801a7c:	00806474 	movhi	r2,401
  801a80:	10a40a04 	addi	r2,r2,-28632
  801a84:	10000035 	stwio	zero,0(r2)
    /* Write Buffer */
  
    //for(i=0; i<len; i=i+2, buf++ )
  i=0;
  801a88:	e03ffc8d 	sth	zero,-14(fp)
  while (i < len)
  801a8c:	00002706 	br	801b2c <Hal4D13_WriteEndpoint+0xf4>
    {
        c = *buf;
  801a90:	e0bffe17 	ldw	r2,-8(fp)
  801a94:	10800003 	ldbu	r2,0(r2)
  801a98:	10803fcc 	andi	r2,r2,255
  801a9c:	e0bffc0d 	sth	r2,-16(fp)
        buf++;i++;
  801aa0:	e0bffe17 	ldw	r2,-8(fp)
  801aa4:	10800044 	addi	r2,r2,1
  801aa8:	e0bffe15 	stw	r2,-8(fp)
  801aac:	e0bffc8b 	ldhu	r2,-14(fp)
  801ab0:	10800044 	addi	r2,r2,1
  801ab4:	e0bffc8d 	sth	r2,-14(fp)
    if (i >=len) { IOWR(USB_0_BASE,D13_DATA_PORT, c); }//printf("w=%04x  ",c);break; }
  801ab8:	e0fffc8b 	ldhu	r3,-14(fp)
  801abc:	e0bfff0b 	ldhu	r2,-4(fp)
  801ac0:	18800436 	bltu	r3,r2,801ad4 <Hal4D13_WriteEndpoint+0x9c>
  801ac4:	e0fffc0b 	ldhu	r3,-16(fp)
  801ac8:	00806474 	movhi	r2,401
  801acc:	10a40a04 	addi	r2,r2,-28632
  801ad0:	10c00035 	stwio	r3,0(r2)
        c =(c & 0xff)+ (*buf<<8  & 0xff00);    
  801ad4:	e0bffc0b 	ldhu	r2,-16(fp)
  801ad8:	10803fcc 	andi	r2,r2,255
  801adc:	1009883a 	mov	r4,r2
  801ae0:	e0bffe17 	ldw	r2,-8(fp)
  801ae4:	10800003 	ldbu	r2,0(r2)
  801ae8:	10803fcc 	andi	r2,r2,255
  801aec:	1004923a 	slli	r2,r2,8
  801af0:	1007883a 	mov	r3,r2
  801af4:	00bfc004 	movi	r2,-256
  801af8:	1884703a 	and	r2,r3,r2
  801afc:	2085883a 	add	r2,r4,r2
  801b00:	e0bffc0d 	sth	r2,-16(fp)
    buf++;i++;      
  801b04:	e0bffe17 	ldw	r2,-8(fp)
  801b08:	10800044 	addi	r2,r2,1
  801b0c:	e0bffe15 	stw	r2,-8(fp)
  801b10:	e0bffc8b 	ldhu	r2,-14(fp)
  801b14:	10800044 	addi	r2,r2,1
  801b18:	e0bffc8d 	sth	r2,-14(fp)
        IOWR(USB_0_BASE,D13_DATA_PORT, c);
  801b1c:	e0fffc0b 	ldhu	r3,-16(fp)
  801b20:	00806474 	movhi	r2,401
  801b24:	10a40a04 	addi	r2,r2,-28632
  801b28:	10c00035 	stwio	r3,0(r2)
    if (len==0) IOWR(USB_0_BASE,D13_DATA_PORT, 0);
    /* Write Buffer */
  
    //for(i=0; i<len; i=i+2, buf++ )
  i=0;
  while (i < len)
  801b2c:	e0fffc8b 	ldhu	r3,-14(fp)
  801b30:	e0bfff0b 	ldhu	r2,-4(fp)
  801b34:	18bfd636 	bltu	r3,r2,801a90 <Hal4D13_WriteEndpoint+0x58>
//    printf("w=%04x  ",c);
    }
//  printf("\nlen=%d i=%d\n",len,i);
  
    /* Validate Buffer */
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_EP_VALID_BUF+bEPIndex);
  801b38:	e0bffd03 	ldbu	r2,-12(fp)
  801b3c:	10c01804 	addi	r3,r2,96
  801b40:	00806474 	movhi	r2,401
  801b44:	10a40b04 	addi	r2,r2,-28628
  801b48:	10c00035 	stwio	r3,0(r2)
 // printf("\n");
    return i;
  801b4c:	e0bffc8b 	ldhu	r2,-14(fp)
}
  801b50:	e037883a 	mov	sp,fp
  801b54:	df000017 	ldw	fp,0(sp)
  801b58:	dec00104 	addi	sp,sp,4
  801b5c:	f800283a 	ret

00801b60 <Hal4D13_WriteBulkEndpoint>:

USHORT Hal4D13_WriteBulkEndpoint(UCHAR bEPIndex, UCHAR * buf, USHORT len)
{
  801b60:	defffb04 	addi	sp,sp,-20
  801b64:	df000415 	stw	fp,16(sp)
  801b68:	df000404 	addi	fp,sp,16
  801b6c:	e17ffe15 	stw	r5,-8(fp)
  801b70:	e13ffd05 	stb	r4,-12(fp)
  801b74:	e1bfff0d 	sth	r6,-4(fp)
    USHORT i, c;
    /* Select Endpoint */
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_EP_WR_FIFO + bEPIndex);
  801b78:	e0fffd03 	ldbu	r3,-12(fp)
  801b7c:	00806474 	movhi	r2,401
  801b80:	10a40b04 	addi	r2,r2,-28628
  801b84:	10c00035 	stwio	r3,0(r2)
    IOWR(USB_0_BASE,D13_DATA_PORT, len);
  801b88:	e0ffff0b 	ldhu	r3,-4(fp)
  801b8c:	00806474 	movhi	r2,401
  801b90:	10a40a04 	addi	r2,r2,-28632
  801b94:	10c00035 	stwio	r3,0(r2)
    if (len==0) IOWR(USB_0_BASE,D13_DATA_PORT, 0);
  801b98:	e0bfff0b 	ldhu	r2,-4(fp)
  801b9c:	1004c03a 	cmpne	r2,r2,zero
  801ba0:	1000031e 	bne	r2,zero,801bb0 <Hal4D13_WriteBulkEndpoint+0x50>
  801ba4:	00806474 	movhi	r2,401
  801ba8:	10a40a04 	addi	r2,r2,-28632
  801bac:	10000035 	stwio	zero,0(r2)

    /* Write Buffer */
    for(i=0; i<len; i=i+2, buf++ )
  801bb0:	e03ffc8d 	sth	zero,-14(fp)
  801bb4:	00001906 	br	801c1c <Hal4D13_WriteBulkEndpoint+0xbc>
    {
        c = *buf;
  801bb8:	e0bffe17 	ldw	r2,-8(fp)
  801bbc:	10800003 	ldbu	r2,0(r2)
  801bc0:	10803fcc 	andi	r2,r2,255
  801bc4:	e0bffc0d 	sth	r2,-16(fp)
        buf++;
  801bc8:	e0bffe17 	ldw	r2,-8(fp)
  801bcc:	10800044 	addi	r2,r2,1
  801bd0:	e0bffe15 	stw	r2,-8(fp)
        c += (USHORT)(*buf << 8);
  801bd4:	e0bffe17 	ldw	r2,-8(fp)
  801bd8:	10800003 	ldbu	r2,0(r2)
  801bdc:	10803fcc 	andi	r2,r2,255
  801be0:	1004923a 	slli	r2,r2,8
  801be4:	1007883a 	mov	r3,r2
  801be8:	e0bffc0b 	ldhu	r2,-16(fp)
  801bec:	10c5883a 	add	r2,r2,r3
  801bf0:	e0bffc0d 	sth	r2,-16(fp)
        IOWR(USB_0_BASE,D13_DATA_PORT, c);
  801bf4:	e0fffc0b 	ldhu	r3,-16(fp)
  801bf8:	00806474 	movhi	r2,401
  801bfc:	10a40a04 	addi	r2,r2,-28632
  801c00:	10c00035 	stwio	r3,0(r2)
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_EP_WR_FIFO + bEPIndex);
    IOWR(USB_0_BASE,D13_DATA_PORT, len);
    if (len==0) IOWR(USB_0_BASE,D13_DATA_PORT, 0);

    /* Write Buffer */
    for(i=0; i<len; i=i+2, buf++ )
  801c04:	e0bffc8b 	ldhu	r2,-14(fp)
  801c08:	10800084 	addi	r2,r2,2
  801c0c:	e0bffc8d 	sth	r2,-14(fp)
  801c10:	e0bffe17 	ldw	r2,-8(fp)
  801c14:	10800044 	addi	r2,r2,1
  801c18:	e0bffe15 	stw	r2,-8(fp)
  801c1c:	e0fffc8b 	ldhu	r3,-14(fp)
  801c20:	e0bfff0b 	ldhu	r2,-4(fp)
  801c24:	18bfe436 	bltu	r3,r2,801bb8 <Hal4D13_WriteBulkEndpoint+0x58>
        buf++;
        c += (USHORT)(*buf << 8);
        IOWR(USB_0_BASE,D13_DATA_PORT, c);
    }
    /* Validate Buffer */
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_EP_VALID_BUF+bEPIndex);
  801c28:	e0bffd03 	ldbu	r2,-12(fp)
  801c2c:	10c01804 	addi	r3,r2,96
  801c30:	00806474 	movhi	r2,401
  801c34:	10a40b04 	addi	r2,r2,-28628
  801c38:	10c00035 	stwio	r3,0(r2)
    return len;
  801c3c:	e0bfff0b 	ldhu	r2,-4(fp)
}
  801c40:	e037883a 	mov	sp,fp
  801c44:	df000017 	ldw	fp,0(sp)
  801c48:	dec00104 	addi	sp,sp,4
  801c4c:	f800283a 	ret

00801c50 <Hal4D13_GetIntEnable>:

ULONG Hal4D13_GetIntEnable(void)
{
  801c50:	defffe04 	addi	sp,sp,-8
  801c54:	df000115 	stw	fp,4(sp)
  801c58:	df000104 	addi	fp,sp,4
    ULONG i;
    IOWR(USB_0_BASE,D13_COMMAND_PORT,D13CMD_DEV_RD_INTEN);
  801c5c:	00c06474 	movhi	r3,401
  801c60:	18e40b04 	addi	r3,r3,-28628
  801c64:	008030c4 	movi	r2,195
  801c68:	18800035 	stwio	r2,0(r3)
    i = IORD(USB_0_BASE,D13_DATA_PORT);
  801c6c:	00806474 	movhi	r2,401
  801c70:	10a40a04 	addi	r2,r2,-28632
  801c74:	10800037 	ldwio	r2,0(r2)
  801c78:	e0bfff15 	stw	r2,-4(fp)
    i += (((ULONG)IORD(USB_0_BASE,D13_DATA_PORT)) << 16);
  801c7c:	00806474 	movhi	r2,401
  801c80:	10a40a04 	addi	r2,r2,-28632
  801c84:	10800037 	ldwio	r2,0(r2)
  801c88:	1006943a 	slli	r3,r2,16
  801c8c:	e0bfff17 	ldw	r2,-4(fp)
  801c90:	10c5883a 	add	r2,r2,r3
  801c94:	e0bfff15 	stw	r2,-4(fp)
    return i;
  801c98:	e0bfff17 	ldw	r2,-4(fp)
}
  801c9c:	e037883a 	mov	sp,fp
  801ca0:	df000017 	ldw	fp,0(sp)
  801ca4:	dec00104 	addi	sp,sp,4
  801ca8:	f800283a 	ret

00801cac <Hal4D13_SetIntEnable>:

void Hal4D13_SetIntEnable(ULONG dIntEn)
{
  801cac:	defffe04 	addi	sp,sp,-8
  801cb0:	df000115 	stw	fp,4(sp)
  801cb4:	df000104 	addi	fp,sp,4
  801cb8:	e13fff15 	stw	r4,-4(fp)
    IOWR(USB_0_BASE,D13_COMMAND_PORT,D13CMD_DEV_WR_INTEN);
  801cbc:	00c06474 	movhi	r3,401
  801cc0:	18e40b04 	addi	r3,r3,-28628
  801cc4:	00803084 	movi	r2,194
  801cc8:	18800035 	stwio	r2,0(r3)
    dIntEn = (dIntEn & 0x0FFFFFF);
  801ccc:	e0ffff17 	ldw	r3,-4(fp)
  801cd0:	00804034 	movhi	r2,256
  801cd4:	10bfffc4 	addi	r2,r2,-1
  801cd8:	1884703a 	and	r2,r3,r2
  801cdc:	e0bfff15 	stw	r2,-4(fp)
    IOWR(USB_0_BASE,D13_DATA_PORT,(USHORT)dIntEn);
  801ce0:	e0bfff17 	ldw	r2,-4(fp)
  801ce4:	10ffffcc 	andi	r3,r2,65535
  801ce8:	00806474 	movhi	r2,401
  801cec:	10a40a04 	addi	r2,r2,-28632
  801cf0:	10c00035 	stwio	r3,0(r2)
    IOWR(USB_0_BASE,D13_DATA_PORT,(USHORT)(dIntEn >> 16));
  801cf4:	e0bfff17 	ldw	r2,-4(fp)
  801cf8:	1004d43a 	srli	r2,r2,16
  801cfc:	10ffffcc 	andi	r3,r2,65535
  801d00:	00806474 	movhi	r2,401
  801d04:	10a40a04 	addi	r2,r2,-28632
  801d08:	10c00035 	stwio	r3,0(r2)
}
  801d0c:	e037883a 	mov	sp,fp
  801d10:	df000017 	ldw	fp,0(sp)
  801d14:	dec00104 	addi	sp,sp,4
  801d18:	f800283a 	ret

00801d1c <Hal4D13_ReadInterruptRegister>:

ULONG Hal4D13_ReadInterruptRegister(void)
{
  801d1c:	defffd04 	addi	sp,sp,-12
  801d20:	df000215 	stw	fp,8(sp)
  801d24:	df000204 	addi	fp,sp,8
    ULONG j,i = 0;
  801d28:	e03ffe15 	stw	zero,-8(fp)
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_DEV_INT_SRC);
  801d2c:	00c06474 	movhi	r3,401
  801d30:	18e40b04 	addi	r3,r3,-28628
  801d34:	00803004 	movi	r2,192
  801d38:	18800035 	stwio	r2,0(r3)
    i = IORD(USB_0_BASE,D13_DATA_PORT);
  801d3c:	00806474 	movhi	r2,401
  801d40:	10a40a04 	addi	r2,r2,-28632
  801d44:	10800037 	ldwio	r2,0(r2)
  801d48:	e0bffe15 	stw	r2,-8(fp)
    j = IORD(USB_0_BASE,D13_DATA_PORT);
  801d4c:	00806474 	movhi	r2,401
  801d50:	10a40a04 	addi	r2,r2,-28632
  801d54:	10800037 	ldwio	r2,0(r2)
  801d58:	e0bfff15 	stw	r2,-4(fp)
    j = ((j<<16) & 0xffff0000 ) + (i & 0xffff);
  801d5c:	e0bfff17 	ldw	r2,-4(fp)
  801d60:	1004943a 	slli	r2,r2,16
  801d64:	10ffffec 	andhi	r3,r2,65535
  801d68:	e0bffe17 	ldw	r2,-8(fp)
  801d6c:	10bfffcc 	andi	r2,r2,65535
  801d70:	1885883a 	add	r2,r3,r2
  801d74:	e0bfff15 	stw	r2,-4(fp)
    return i;
  801d78:	e0bffe17 	ldw	r2,-8(fp)
}
  801d7c:	e037883a 	mov	sp,fp
  801d80:	df000017 	ldw	fp,0(sp)
  801d84:	dec00104 	addi	sp,sp,4
  801d88:	f800283a 	ret

00801d8c <Hal4D13_GetEndpointStatusWInteruptClear>:

UCHAR Hal4D13_GetEndpointStatusWInteruptClear(UCHAR bEPIndex)
{
  801d8c:	defffd04 	addi	sp,sp,-12
  801d90:	df000215 	stw	fp,8(sp)
  801d94:	df000204 	addi	fp,sp,8
  801d98:	e13fff05 	stb	r4,-4(fp)
    UCHAR c;
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_EP_RDSTS_CLRINT + bEPIndex);
  801d9c:	e0bfff03 	ldbu	r2,-4(fp)
  801da0:	10c01404 	addi	r3,r2,80
  801da4:	00806474 	movhi	r2,401
  801da8:	10a40b04 	addi	r2,r2,-28628
  801dac:	10c00035 	stwio	r3,0(r2)
    c = (UCHAR)(IORD(USB_0_BASE,D13_DATA_PORT) & 0x0ff);
  801db0:	00806474 	movhi	r2,401
  801db4:	10a40a04 	addi	r2,r2,-28632
  801db8:	10800037 	ldwio	r2,0(r2)
  801dbc:	1007883a 	mov	r3,r2
  801dc0:	00bfffc4 	movi	r2,-1
  801dc4:	1884703a 	and	r2,r3,r2
  801dc8:	e0bffe05 	stb	r2,-8(fp)
    return c;
  801dcc:	e0bffe03 	ldbu	r2,-8(fp)
}
  801dd0:	e037883a 	mov	sp,fp
  801dd4:	df000017 	ldw	fp,0(sp)
  801dd8:	dec00104 	addi	sp,sp,4
  801ddc:	f800283a 	ret

00801de0 <Hal4D13_GetEndpointStatusWOInteruptClear>:

UCHAR Hal4D13_GetEndpointStatusWOInteruptClear(UCHAR bEPIndex)
{
  801de0:	defffd04 	addi	sp,sp,-12
  801de4:	df000215 	stw	fp,8(sp)
  801de8:	df000204 	addi	fp,sp,8
  801dec:	e13fff05 	stb	r4,-4(fp)
    UCHAR c;
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_EP_RDSTS + bEPIndex);
  801df0:	e0bfff03 	ldbu	r2,-4(fp)
  801df4:	10c03404 	addi	r3,r2,208
  801df8:	00806474 	movhi	r2,401
  801dfc:	10a40b04 	addi	r2,r2,-28628
  801e00:	10c00035 	stwio	r3,0(r2)
    c = (UCHAR)(IORD(USB_0_BASE,D13_DATA_PORT) &0x0ff);
  801e04:	00806474 	movhi	r2,401
  801e08:	10a40a04 	addi	r2,r2,-28632
  801e0c:	10800037 	ldwio	r2,0(r2)
  801e10:	1007883a 	mov	r3,r2
  801e14:	00bfffc4 	movi	r2,-1
  801e18:	1884703a 	and	r2,r3,r2
  801e1c:	e0bffe05 	stb	r2,-8(fp)
    return c;
  801e20:	e0bffe03 	ldbu	r2,-8(fp)
}
  801e24:	e037883a 	mov	sp,fp
  801e28:	df000017 	ldw	fp,0(sp)
  801e2c:	dec00104 	addi	sp,sp,4
  801e30:	f800283a 	ret

00801e34 <Hal4D13_SetEndpointStatus>:

void Hal4D13_SetEndpointStatus(UCHAR bEPIndex, UCHAR bStalled)
{
  801e34:	defffd04 	addi	sp,sp,-12
  801e38:	df000215 	stw	fp,8(sp)
  801e3c:	df000204 	addi	fp,sp,8
  801e40:	e13ffe05 	stb	r4,-8(fp)
  801e44:	e17fff05 	stb	r5,-4(fp)
    if(bStalled & 0x80)
  801e48:	e0bfff03 	ldbu	r2,-4(fp)
  801e4c:	10803fcc 	andi	r2,r2,255
  801e50:	1080201c 	xori	r2,r2,128
  801e54:	10bfe004 	addi	r2,r2,-128
  801e58:	1004403a 	cmpge	r2,r2,zero
  801e5c:	1000061e 	bne	r2,zero,801e78 <Hal4D13_SetEndpointStatus+0x44>
    {
        IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_EP_WR_STS + bEPIndex);
  801e60:	e0bffe03 	ldbu	r2,-8(fp)
  801e64:	10c01004 	addi	r3,r2,64
  801e68:	00806474 	movhi	r2,401
  801e6c:	10a40b04 	addi	r2,r2,-28628
  801e70:	10c00035 	stwio	r3,0(r2)
  801e74:	00000506 	br	801e8c <Hal4D13_SetEndpointStatus+0x58>
    }
    else
    {
    // clear endpoint stall.
        IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_EP_CLR_STALL + bEPIndex);
  801e78:	e0bffe03 	ldbu	r2,-8(fp)
  801e7c:	10c02004 	addi	r3,r2,128
  801e80:	00806474 	movhi	r2,401
  801e84:	10a40b04 	addi	r2,r2,-28628
  801e88:	10c00035 	stwio	r3,0(r2)
    }
}
  801e8c:	e037883a 	mov	sp,fp
  801e90:	df000017 	ldw	fp,0(sp)
  801e94:	dec00104 	addi	sp,sp,4
  801e98:	f800283a 	ret

00801e9c <Hal4D13_SetDMAConfig>:

void Hal4D13_SetDMAConfig(USHORT wDMACnfg)
{
  801e9c:	defffe04 	addi	sp,sp,-8
  801ea0:	df000115 	stw	fp,4(sp)
  801ea4:	df000104 	addi	fp,sp,4
  801ea8:	e13fff0d 	sth	r4,-4(fp)
    IOWR(USB_0_BASE,D13_COMMAND_PORT,D13CMD_DMA_WR_CNFG);
  801eac:	00c06474 	movhi	r3,401
  801eb0:	18e40b04 	addi	r3,r3,-28628
  801eb4:	00803c04 	movi	r2,240
  801eb8:	18800035 	stwio	r2,0(r3)
    IOWR(USB_0_BASE,D13_DATA_PORT, wDMACnfg);
  801ebc:	e0ffff0b 	ldhu	r3,-4(fp)
  801ec0:	00806474 	movhi	r2,401
  801ec4:	10a40a04 	addi	r2,r2,-28632
  801ec8:	10c00035 	stwio	r3,0(r2)
}
  801ecc:	e037883a 	mov	sp,fp
  801ed0:	df000017 	ldw	fp,0(sp)
  801ed4:	dec00104 	addi	sp,sp,4
  801ed8:	f800283a 	ret

00801edc <Hal4D13_GetDMAConfig>:

USHORT Hal4D13_GetDMAConfig(void)
{
  801edc:	defffe04 	addi	sp,sp,-8
  801ee0:	df000115 	stw	fp,4(sp)
  801ee4:	df000104 	addi	fp,sp,4
    USHORT i;
    IOWR(USB_0_BASE,D13_COMMAND_PORT,D13CMD_DMA_RD_CNFG);
  801ee8:	00c06474 	movhi	r3,401
  801eec:	18e40b04 	addi	r3,r3,-28628
  801ef0:	00803c44 	movi	r2,241
  801ef4:	18800035 	stwio	r2,0(r3)
    i = IORD(USB_0_BASE,D13_DATA_PORT);
  801ef8:	00806474 	movhi	r2,401
  801efc:	10a40a04 	addi	r2,r2,-28632
  801f00:	10800037 	ldwio	r2,0(r2)
  801f04:	e0bfff0d 	sth	r2,-4(fp)
    return i;
  801f08:	e0bfff0b 	ldhu	r2,-4(fp)
}
  801f0c:	e037883a 	mov	sp,fp
  801f10:	df000017 	ldw	fp,0(sp)
  801f14:	dec00104 	addi	sp,sp,4
  801f18:	f800283a 	ret

00801f1c <Hal4D13_SetDMACounter>:

void Hal4D13_SetDMACounter(USHORT wDMACounter)
{
  801f1c:	defffe04 	addi	sp,sp,-8
  801f20:	df000115 	stw	fp,4(sp)
  801f24:	df000104 	addi	fp,sp,4
  801f28:	e13fff0d 	sth	r4,-4(fp)
    IOWR(USB_0_BASE,D13_COMMAND_PORT,D13CMD_DMA_WR_COUNT);
  801f2c:	00c06474 	movhi	r3,401
  801f30:	18e40b04 	addi	r3,r3,-28628
  801f34:	00803c84 	movi	r2,242
  801f38:	18800035 	stwio	r2,0(r3)
    IOWR(USB_0_BASE,D13_DATA_PORT, wDMACounter);
  801f3c:	e0ffff0b 	ldhu	r3,-4(fp)
  801f40:	00806474 	movhi	r2,401
  801f44:	10a40a04 	addi	r2,r2,-28632
  801f48:	10c00035 	stwio	r3,0(r2)
}
  801f4c:	e037883a 	mov	sp,fp
  801f50:	df000017 	ldw	fp,0(sp)
  801f54:	dec00104 	addi	sp,sp,4
  801f58:	f800283a 	ret

00801f5c <Hal4D13_GetDMACounter>:

USHORT Hal4D13_GetDMACounter(void)
{
  801f5c:	defffe04 	addi	sp,sp,-8
  801f60:	df000115 	stw	fp,4(sp)
  801f64:	df000104 	addi	fp,sp,4
    USHORT i;
    IOWR(USB_0_BASE,D13_COMMAND_PORT,D13CMD_DMA_RD_COUNT);
  801f68:	00c06474 	movhi	r3,401
  801f6c:	18e40b04 	addi	r3,r3,-28628
  801f70:	00803cc4 	movi	r2,243
  801f74:	18800035 	stwio	r2,0(r3)
    i = IORD(USB_0_BASE,D13_DATA_PORT);
  801f78:	00806474 	movhi	r2,401
  801f7c:	10a40a04 	addi	r2,r2,-28632
  801f80:	10800037 	ldwio	r2,0(r2)
  801f84:	e0bfff0d 	sth	r2,-4(fp)
    return i;
  801f88:	e0bfff0b 	ldhu	r2,-4(fp)
}
  801f8c:	e037883a 	mov	sp,fp
  801f90:	df000017 	ldw	fp,0(sp)
  801f94:	dec00104 	addi	sp,sp,4
  801f98:	f800283a 	ret

00801f9c <Hal4D13_GetDataFromChipRam>:

USHORT Hal4D13_GetDataFromChipRam(void)
{
  801f9c:	defffe04 	addi	sp,sp,-8
  801fa0:	df000115 	stw	fp,4(sp)
  801fa4:	df000104 	addi	fp,sp,4
    USHORT i;
    IOWR(USB_0_BASE,D13_COMMAND_PORT,D13CMD_DEV_RD_RAM);
  801fa8:	00c06474 	movhi	r3,401
  801fac:	18e40b04 	addi	r3,r3,-28628
  801fb0:	00802cc4 	movi	r2,179
  801fb4:	18800035 	stwio	r2,0(r3)
    i = IORD(USB_0_BASE,D13_DATA_PORT);
  801fb8:	00806474 	movhi	r2,401
  801fbc:	10a40a04 	addi	r2,r2,-28632
  801fc0:	10800037 	ldwio	r2,0(r2)
  801fc4:	e0bfff0d 	sth	r2,-4(fp)
    return i;
  801fc8:	e0bfff0b 	ldhu	r2,-4(fp)
}
  801fcc:	e037883a 	mov	sp,fp
  801fd0:	df000017 	ldw	fp,0(sp)
  801fd4:	dec00104 	addi	sp,sp,4
  801fd8:	f800283a 	ret

00801fdc <Hal4D13_SetDataToChipRam>:

void Hal4D13_SetDataToChipRam(USHORT wData)
{
  801fdc:	defffe04 	addi	sp,sp,-8
  801fe0:	df000115 	stw	fp,4(sp)
  801fe4:	df000104 	addi	fp,sp,4
  801fe8:	e13fff0d 	sth	r4,-4(fp)
    IOWR(USB_0_BASE,D13_COMMAND_PORT,D13CMD_DEV_WR_RAM);
  801fec:	00c06474 	movhi	r3,401
  801ff0:	18e40b04 	addi	r3,r3,-28628
  801ff4:	00802c84 	movi	r2,178
  801ff8:	18800035 	stwio	r2,0(r3)
    IOWR(USB_0_BASE,D13_DATA_PORT, wData);
  801ffc:	e0ffff0b 	ldhu	r3,-4(fp)
  802000:	00806474 	movhi	r2,401
  802004:	10a40a04 	addi	r2,r2,-28632
  802008:	10c00035 	stwio	r3,0(r2)
}
  80200c:	e037883a 	mov	sp,fp
  802010:	df000017 	ldw	fp,0(sp)
  802014:	dec00104 	addi	sp,sp,4
  802018:	f800283a 	ret

0080201c <Hal4D13_ReadCurrentFrameNumber>:

USHORT Hal4D13_ReadCurrentFrameNumber(void)
{
  80201c:	defffe04 	addi	sp,sp,-8
  802020:	df000115 	stw	fp,4(sp)
  802024:	df000104 	addi	fp,sp,4
    USHORT i;
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_RD_FRMNUM);
  802028:	00c06474 	movhi	r3,401
  80202c:	18e40b04 	addi	r3,r3,-28628
  802030:	00802d04 	movi	r2,180
  802034:	18800035 	stwio	r2,0(r3)
    i= IORD(USB_0_BASE,D13_DATA_PORT);
  802038:	00806474 	movhi	r2,401
  80203c:	10a40a04 	addi	r2,r2,-28632
  802040:	10800037 	ldwio	r2,0(r2)
  802044:	e0bfff0d 	sth	r2,-4(fp)
    return i;
  802048:	e0bfff0b 	ldhu	r2,-4(fp)
}
  80204c:	e037883a 	mov	sp,fp
  802050:	df000017 	ldw	fp,0(sp)
  802054:	dec00104 	addi	sp,sp,4
  802058:	f800283a 	ret

0080205c <Hal4D13_LockDevice>:

void Hal4D13_LockDevice(UCHAR bTrue)
{
  80205c:	defffd04 	addi	sp,sp,-12
  802060:	df000215 	stw	fp,8(sp)
  802064:	df000204 	addi	fp,sp,8
  802068:	e13fff05 	stb	r4,-4(fp)
    USHORT c;
    if(bTrue)
  80206c:	e0bfff03 	ldbu	r2,-4(fp)
  802070:	1005003a 	cmpeq	r2,r2,zero
  802074:	1000021e 	bne	r2,zero,802080 <Hal4D13_LockDevice+0x24>
        c = 0;
  802078:	e03ffe0d 	sth	zero,-8(fp)
  80207c:	00000206 	br	802088 <Hal4D13_LockDevice+0x2c>
    else
        c = 0xAA37;
  802080:	00aa8dc4 	movi	r2,-21961
  802084:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(USB_0_BASE,D13_COMMAND_PORT,D13CMD_DEV_LOCK );
  802088:	00c06474 	movhi	r3,401
  80208c:	18e40b04 	addi	r3,r3,-28628
  802090:	00802c04 	movi	r2,176
  802094:	18800035 	stwio	r2,0(r3)
    IOWR(USB_0_BASE,D13_DATA_PORT,c);
  802098:	e0fffe0b 	ldhu	r3,-8(fp)
  80209c:	00806474 	movhi	r2,401
  8020a0:	10a40a04 	addi	r2,r2,-28632
  8020a4:	10c00035 	stwio	r3,0(r2)
}
  8020a8:	e037883a 	mov	sp,fp
  8020ac:	df000017 	ldw	fp,0(sp)
  8020b0:	dec00104 	addi	sp,sp,4
  8020b4:	f800283a 	ret

008020b8 <Hal4D13_ReadChipID>:

USHORT Hal4D13_ReadChipID(void)
{
  8020b8:	defffe04 	addi	sp,sp,-8
  8020bc:	df000115 	stw	fp,4(sp)
  8020c0:	df000104 	addi	fp,sp,4
    USHORT i;
    IOWR(USB_0_BASE, D13_COMMAND_PORT, D13CMD_DEV_RD_CHIPID);
  8020c4:	00c06474 	movhi	r3,401
  8020c8:	18e40b04 	addi	r3,r3,-28628
  8020cc:	00802d44 	movi	r2,181
  8020d0:	18800035 	stwio	r2,0(r3)
    i=IORD(USB_0_BASE, D13_DATA_PORT);
  8020d4:	00806474 	movhi	r2,401
  8020d8:	10a40a04 	addi	r2,r2,-28632
  8020dc:	10800037 	ldwio	r2,0(r2)
  8020e0:	e0bfff0d 	sth	r2,-4(fp)
    return i;
  8020e4:	e0bfff0b 	ldhu	r2,-4(fp)
}
  8020e8:	e037883a 	mov	sp,fp
  8020ec:	df000017 	ldw	fp,0(sp)
  8020f0:	dec00104 	addi	sp,sp,4
  8020f4:	f800283a 	ret

008020f8 <Hal4D13_GetErrorCode>:

UCHAR Hal4D13_GetErrorCode(UCHAR bEPIndex)
{
  8020f8:	defffd04 	addi	sp,sp,-12
  8020fc:	df000215 	stw	fp,8(sp)
  802100:	df000204 	addi	fp,sp,8
  802104:	e13fff05 	stb	r4,-4(fp)
    UCHAR   c;
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_EP_RD_ERR+bEPIndex);
  802108:	e0bfff03 	ldbu	r2,-4(fp)
  80210c:	10c02804 	addi	r3,r2,160
  802110:	00806474 	movhi	r2,401
  802114:	10a40b04 	addi	r2,r2,-28628
  802118:	10c00035 	stwio	r3,0(r2)
    c = (UCHAR)(IORD(USB_0_BASE,D13_DATA_PORT)&0x0ff);
  80211c:	00806474 	movhi	r2,401
  802120:	10a40a04 	addi	r2,r2,-28632
  802124:	10800037 	ldwio	r2,0(r2)
  802128:	1007883a 	mov	r3,r2
  80212c:	00bfffc4 	movi	r2,-1
  802130:	1884703a 	and	r2,r3,r2
  802134:	e0bffe05 	stb	r2,-8(fp)
    return c;
  802138:	e0bffe03 	ldbu	r2,-8(fp)
}
  80213c:	e037883a 	mov	sp,fp
  802140:	df000017 	ldw	fp,0(sp)
  802144:	dec00104 	addi	sp,sp,4
  802148:	f800283a 	ret

0080214c <Hal4D13_GetEndpointConfig>:

UCHAR Hal4D13_GetEndpointConfig(UCHAR bEPIndex)
{
  80214c:	defffd04 	addi	sp,sp,-12
  802150:	df000215 	stw	fp,8(sp)
  802154:	df000204 	addi	fp,sp,8
  802158:	e13fff05 	stb	r4,-4(fp)
    UCHAR   c;
    IOWR(USB_0_BASE,D13_COMMAND_PORT, D13CMD_EP_RD_CNFG+bEPIndex);
  80215c:	e0bfff03 	ldbu	r2,-4(fp)
  802160:	10c00c04 	addi	r3,r2,48
  802164:	00806474 	movhi	r2,401
  802168:	10a40b04 	addi	r2,r2,-28628
  80216c:	10c00035 	stwio	r3,0(r2)
    c = (UCHAR)(IORD(USB_0_BASE,D13_DATA_PORT) & 0x0ff);
  802170:	00806474 	movhi	r2,401
  802174:	10a40a04 	addi	r2,r2,-28632
  802178:	10800037 	ldwio	r2,0(r2)
  80217c:	1007883a 	mov	r3,r2
  802180:	00bfffc4 	movi	r2,-1
  802184:	1884703a 	and	r2,r3,r2
  802188:	e0bffe05 	stb	r2,-8(fp)
    return c;
  80218c:	e0bffe03 	ldbu	r2,-8(fp)
}
  802190:	e037883a 	mov	sp,fp
  802194:	df000017 	ldw	fp,0(sp)
  802198:	dec00104 	addi	sp,sp,4
  80219c:	f800283a 	ret

008021a0 <Hal4D13_SetEndpointConfig>:

void Hal4D13_SetEndpointConfig(UCHAR bEPConfig, UCHAR bEPIndex)
{
  8021a0:	defffd04 	addi	sp,sp,-12
  8021a4:	df000215 	stw	fp,8(sp)
  8021a8:	df000204 	addi	fp,sp,8
  8021ac:	e13ffe05 	stb	r4,-8(fp)
  8021b0:	e17fff05 	stb	r5,-4(fp)
    IOWR(USB_0_BASE,D13_COMMAND_PORT, (USHORT)(D13CMD_EP_WR_CNFG+bEPIndex));
  8021b4:	e0bfff03 	ldbu	r2,-4(fp)
  8021b8:	10800804 	addi	r2,r2,32
  8021bc:	10ffffcc 	andi	r3,r2,65535
  8021c0:	00806474 	movhi	r2,401
  8021c4:	10a40b04 	addi	r2,r2,-28628
  8021c8:	10c00035 	stwio	r3,0(r2)
    IOWR(USB_0_BASE,D13_DATA_PORT,(USHORT)bEPConfig);
  8021cc:	e0fffe03 	ldbu	r3,-8(fp)
  8021d0:	00806474 	movhi	r2,401
  8021d4:	10a40a04 	addi	r2,r2,-28632
  8021d8:	10c00035 	stwio	r3,0(r2)
}
  8021dc:	e037883a 	mov	sp,fp
  8021e0:	df000017 	ldw	fp,0(sp)
  8021e4:	dec00104 	addi	sp,sp,4
  8021e8:	f800283a 	ret

008021ec <Hal4D13_UnconfigDevice>:
// ************************************************************************
// Subroutines -- 3
// ************************************************************************
*/
void Hal4D13_UnconfigDevice(void)
{
  8021ec:	deffff04 	addi	sp,sp,-4
  8021f0:	df000015 	stw	fp,0(sp)
  8021f4:	d839883a 	mov	fp,sp
}
  8021f8:	e037883a 	mov	sp,fp
  8021fc:	df000017 	ldw	fp,0(sp)
  802200:	dec00104 	addi	sp,sp,4
  802204:	f800283a 	ret

00802208 <Hal4D13_ConfigDevice>:

void Hal4D13_ConfigDevice(void)
{
  802208:	deffff04 	addi	sp,sp,-4
  80220c:	df000015 	stw	fp,0(sp)
  802210:	d839883a 	mov	fp,sp
}
  802214:	e037883a 	mov	sp,fp
  802218:	df000017 	ldw	fp,0(sp)
  80221c:	dec00104 	addi	sp,sp,4
  802220:	f800283a 	ret

00802224 <Hal4D13_SingleTransmitEP0>:


void Hal4D13_SingleTransmitEP0(UCHAR * buf, USHORT len)
{
  802224:	defffc04 	addi	sp,sp,-16
  802228:	dfc00315 	stw	ra,12(sp)
  80222c:	df000215 	stw	fp,8(sp)
  802230:	df000204 	addi	fp,sp,8
  802234:	e13ffe15 	stw	r4,-8(fp)
  802238:	e17fff0d 	sth	r5,-4(fp)
    if( len <= EP0_PACKET_SIZE) {
  80223c:	e0bfff0b 	ldhu	r2,-4(fp)
  802240:	10801068 	cmpgeui	r2,r2,65
  802244:	1000041e 	bne	r2,zero,802258 <Hal4D13_SingleTransmitEP0+0x34>
        Hal4D13_WriteEndpoint(EPINDEX4EP0_CONTROL_IN, buf, len);
  802248:	e1bfff0b 	ldhu	r6,-4(fp)
  80224c:	01000044 	movi	r4,1
  802250:	e17ffe17 	ldw	r5,-8(fp)
  802254:	0801a380 	call	801a38 <Hal4D13_WriteEndpoint>
    }
}
  802258:	e037883a 	mov	sp,fp
  80225c:	dfc00117 	ldw	ra,4(sp)
  802260:	df000017 	ldw	fp,0(sp)
  802264:	dec00204 	addi	sp,sp,8
  802268:	f800283a 	ret

0080226c <Hal4D13_RegAccess>:

void Hal4D13_RegAccess(void)
{
  80226c:	defffc04 	addi	sp,sp,-16
  802270:	dfc00315 	stw	ra,12(sp)
  802274:	df000215 	stw	fp,8(sp)
  802278:	df000204 	addi	fp,sp,8
    USHORT   c;
    USHORT  i;
    ULONG   l;

    Hal4D13_ResetDevice();
  80227c:	08014240 	call	801424 <Hal4D13_ResetDevice>
    printf("Reseting\n");
  802280:	01002074 	movhi	r4,129
  802284:	21076d04 	addi	r4,r4,7604
  802288:	0805b5c0 	call	805b5c <puts>

    i = Hal4D13_ReadChipID();
  80228c:	08020b80 	call	8020b8 <Hal4D13_ReadChipID>
  802290:	e0bfff0d 	sth	r2,-4(fp)
    printf(" ChipId = %hx\n",i);
  802294:	e17fff0b 	ldhu	r5,-4(fp)
  802298:	01002074 	movhi	r4,129
  80229c:	21077004 	addi	r4,r4,7616
  8022a0:	0805a200 	call	805a20 <printf>

    i = Hal4D13_GetDataFromChipRam();
  8022a4:	0801f9c0 	call	801f9c <Hal4D13_GetDataFromChipRam>
  8022a8:	e0bfff0d 	sth	r2,-4(fp)
    printf(" Chip RAM = %hx\n",i);
  8022ac:	e17fff0b 	ldhu	r5,-4(fp)
  8022b0:	01002074 	movhi	r4,129
  8022b4:	21077404 	addi	r4,r4,7632
  8022b8:	0805a200 	call	805a20 <printf>

    printf("Writing 0x55AA,");
  8022bc:	01002074 	movhi	r4,129
  8022c0:	21077904 	addi	r4,r4,7652
  8022c4:	0805a200 	call	805a20 <printf>
    Hal4D13_SetDataToChipRam(0x55AA);
  8022c8:	01156a84 	movi	r4,21930
  8022cc:	0801fdc0 	call	801fdc <Hal4D13_SetDataToChipRam>
    i = Hal4D13_GetDataFromChipRam();
  8022d0:	0801f9c0 	call	801f9c <Hal4D13_GetDataFromChipRam>
  8022d4:	e0bfff0d 	sth	r2,-4(fp)
    printf(" Chip RAM = %hx\n",i);
  8022d8:	e17fff0b 	ldhu	r5,-4(fp)
  8022dc:	01002074 	movhi	r4,129
  8022e0:	21077404 	addi	r4,r4,7632
  8022e4:	0805a200 	call	805a20 <printf>

    l = Hal4D13_GetIntEnable();
  8022e8:	0801c500 	call	801c50 <Hal4D13_GetIntEnable>
  8022ec:	e0bffe15 	stw	r2,-8(fp)
    printf("Hal4D13_GetIntEnable = %lx\n",l);
  8022f0:	01002074 	movhi	r4,129
  8022f4:	21077d04 	addi	r4,r4,7668
  8022f8:	e17ffe17 	ldw	r5,-8(fp)
  8022fc:	0805a200 	call	805a20 <printf>

    l = Hal4D13_ReadInterruptRegister();
  802300:	0801d1c0 	call	801d1c <Hal4D13_ReadInterruptRegister>
  802304:	e0bffe15 	stw	r2,-8(fp)
    printf("Hal4D13_ReadInterruptRegister = %lx\n",l);
  802308:	01002074 	movhi	r4,129
  80230c:	21078404 	addi	r4,r4,7696
  802310:	e17ffe17 	ldw	r5,-8(fp)
  802314:	0805a200 	call	805a20 <printf>

    i = Hal4D13_GetDevConfig();
  802318:	08014500 	call	801450 <Hal4D13_GetDevConfig>
  80231c:	e0bfff0d 	sth	r2,-4(fp)
    printf("Hal4D13_GetDevConfig = %hx\n",i);
  802320:	e17fff0b 	ldhu	r5,-4(fp)
  802324:	01002074 	movhi	r4,129
  802328:	21078e04 	addi	r4,r4,7736
  80232c:	0805a200 	call	805a20 <printf>

    i = Hal4D13_GetDMAConfig();
  802330:	0801edc0 	call	801edc <Hal4D13_GetDMAConfig>
  802334:	e0bfff0d 	sth	r2,-4(fp)
    printf("Hal4D13_GetDMAConfig = %hx\n",i);
  802338:	e17fff0b 	ldhu	r5,-4(fp)
  80233c:	01002074 	movhi	r4,129
  802340:	21079504 	addi	r4,r4,7764
  802344:	0805a200 	call	805a20 <printf>

    i = Hal4D13_GetDMACounter();
  802348:	0801f5c0 	call	801f5c <Hal4D13_GetDMACounter>
  80234c:	e0bfff0d 	sth	r2,-4(fp)
    printf("Hal4D13_GetDMACounter = %hx\n",i);
  802350:	e17fff0b 	ldhu	r5,-4(fp)
  802354:	01002074 	movhi	r4,129
  802358:	21079c04 	addi	r4,r4,7792
  80235c:	0805a200 	call	805a20 <printf>

    i = Hal4D13_ReadCurrentFrameNumber();
  802360:	080201c0 	call	80201c <Hal4D13_ReadCurrentFrameNumber>
  802364:	e0bfff0d 	sth	r2,-4(fp)
    printf("Hal4D13_ReadCurrentFrameNumber = %hx\n",i);
  802368:	e17fff0b 	ldhu	r5,-4(fp)
  80236c:	01002074 	movhi	r4,129
  802370:	2107a404 	addi	r4,r4,7824
  802374:	0805a200 	call	805a20 <printf>

    c = Hal4D13_GetMode();
  802378:	08015100 	call	801510 <Hal4D13_GetMode>
  80237c:	10803fcc 	andi	r2,r2,255
  802380:	e0bfff8d 	sth	r2,-2(fp)
    printf("Hal4D13_GetMode = %x\n",c);
  802384:	e17fff8b 	ldhu	r5,-2(fp)
  802388:	01002074 	movhi	r4,129
  80238c:	2107ae04 	addi	r4,r4,7864
  802390:	0805a200 	call	805a20 <printf>

    c = Hal4D13_GetEndpointStatusWOInteruptClear(EPINDEX4EP0_CONTROL_OUT);
  802394:	0009883a 	mov	r4,zero
  802398:	0801de00 	call	801de0 <Hal4D13_GetEndpointStatusWOInteruptClear>
  80239c:	10803fcc 	andi	r2,r2,255
  8023a0:	e0bfff8d 	sth	r2,-2(fp)
    printf("Hal4D13_GetEndpointStatus EP0 = %x\n",c);
  8023a4:	e17fff8b 	ldhu	r5,-2(fp)
  8023a8:	01002074 	movhi	r4,129
  8023ac:	2107b404 	addi	r4,r4,7888
  8023b0:	0805a200 	call	805a20 <printf>

    c = Hal4D13_GetAddress();
  8023b4:	080155c0 	call	80155c <Hal4D13_GetAddress>
  8023b8:	10803fcc 	andi	r2,r2,255
  8023bc:	e0bfff8d 	sth	r2,-2(fp)
//  printf("Hal4D13_GetAddress = %x\n",c);
}
  8023c0:	e037883a 	mov	sp,fp
  8023c4:	dfc00117 	ldw	ra,4(sp)
  8023c8:	df000017 	ldw	fp,0(sp)
  8023cc:	dec00204 	addi	sp,sp,8
  8023d0:	f800283a 	ret

008023d4 <Hal4D13_StallEP0InControlWrite>:

void Hal4D13_StallEP0InControlWrite(void)
{
  8023d4:	defffe04 	addi	sp,sp,-8
  8023d8:	dfc00115 	stw	ra,4(sp)
  8023dc:	df000015 	stw	fp,0(sp)
  8023e0:	d839883a 	mov	fp,sp
    Hal4D13_SetEndpointStatus(EPINDEX4EP0_CONTROL_IN, D13REG_EPSTS_STALL);
  8023e4:	01000044 	movi	r4,1
  8023e8:	01402004 	movi	r5,128
  8023ec:	0801e340 	call	801e34 <Hal4D13_SetEndpointStatus>
    Hal4D13_SetEndpointStatus(EPINDEX4EP0_CONTROL_OUT, D13REG_EPSTS_STALL);
  8023f0:	0009883a 	mov	r4,zero
  8023f4:	01402004 	movi	r5,128
  8023f8:	0801e340 	call	801e34 <Hal4D13_SetEndpointStatus>
}
  8023fc:	e037883a 	mov	sp,fp
  802400:	dfc00117 	ldw	ra,4(sp)
  802404:	df000017 	ldw	fp,0(sp)
  802408:	dec00204 	addi	sp,sp,8
  80240c:	f800283a 	ret

00802410 <Hal4D13_StallEP0InControlRead>:

void Hal4D13_StallEP0InControlRead(void)
{
  802410:	defffe04 	addi	sp,sp,-8
  802414:	dfc00115 	stw	ra,4(sp)
  802418:	df000015 	stw	fp,0(sp)
  80241c:	d839883a 	mov	fp,sp
    Hal4D13_SetEndpointStatus(EPINDEX4EP0_CONTROL_OUT, D13REG_EPSTS_STALL);
  802420:	0009883a 	mov	r4,zero
  802424:	01402004 	movi	r5,128
  802428:	0801e340 	call	801e34 <Hal4D13_SetEndpointStatus>
    Hal4D13_SetEndpointStatus(EPINDEX4EP0_CONTROL_IN, D13REG_EPSTS_STALL);
  80242c:	01000044 	movi	r4,1
  802430:	01402004 	movi	r5,128
  802434:	0801e340 	call	801e34 <Hal4D13_SetEndpointStatus>
}
  802438:	e037883a 	mov	sp,fp
  80243c:	dfc00117 	ldw	ra,4(sp)
  802440:	df000017 	ldw	fp,0(sp)
  802444:	dec00204 	addi	sp,sp,8
  802448:	f800283a 	ret

0080244c <Hal4D13_IsSetupPktInvalid>:

BOOLEAN Hal4D13_IsSetupPktInvalid(void)
{
  80244c:	defffd04 	addi	sp,sp,-12
  802450:	dfc00215 	stw	ra,8(sp)
  802454:	df000115 	stw	fp,4(sp)
  802458:	df000104 	addi	fp,sp,4
    USHORT SetupPacketInvalid;
    SetupPacketInvalid = Hal4D13_GetEndpointStatusWOInteruptClear(EPINDEX4EP0_CONTROL_OUT)&D13REG_EPSTS_OVWR;
  80245c:	0009883a 	mov	r4,zero
  802460:	0801de00 	call	801de0 <Hal4D13_GetEndpointStatusWOInteruptClear>
  802464:	10803fcc 	andi	r2,r2,255
  802468:	1080020c 	andi	r2,r2,8
  80246c:	e0bfff0d 	sth	r2,-4(fp)
    return SetupPacketInvalid;
  802470:	e0bfff0b 	ldhu	r2,-4(fp)
  802474:	10803fcc 	andi	r2,r2,255
}
  802478:	e037883a 	mov	sp,fp
  80247c:	dfc00117 	ldw	ra,4(sp)
  802480:	df000017 	ldw	fp,0(sp)
  802484:	dec00204 	addi	sp,sp,8
  802488:	f800283a 	ret

0080248c <Write_HC_Config_Reg>:

void Write_HC_Config_Reg(unsigned short Config)
{
  80248c:	defffe04 	addi	sp,sp,-8
  802490:	df000115 	stw	fp,4(sp)
  802494:	df000104 	addi	fp,sp,4
  802498:	e13fff0d 	sth	r4,-4(fp)
    IOWR(USB_0_BASE,HC_COMMAND_PORT , HCCMD_WR_CNFG_REG );
  80249c:	00c06474 	movhi	r3,401
  8024a0:	18e40904 	addi	r3,r3,-28636
  8024a4:	00802804 	movi	r2,160
  8024a8:	18800035 	stwio	r2,0(r3)
    IOWR(USB_0_BASE,HC_DATA_PORT , Config);
  8024ac:	e0ffff0b 	ldhu	r3,-4(fp)
  8024b0:	00806474 	movhi	r2,401
  8024b4:	10a40804 	addi	r2,r2,-28640
  8024b8:	10c00035 	stwio	r3,0(r2)
}
  8024bc:	e037883a 	mov	sp,fp
  8024c0:	df000017 	ldw	fp,0(sp)
  8024c4:	dec00104 	addi	sp,sp,4
  8024c8:	f800283a 	ret

008024cc <Read_HC_Config_Reg>:

unsigned short Read_HC_Config_Reg(void)
{
  8024cc:	deffff04 	addi	sp,sp,-4
  8024d0:	df000015 	stw	fp,0(sp)
  8024d4:	d839883a 	mov	fp,sp
    IOWR(USB_0_BASE,HC_COMMAND_PORT , HCCMD_RD_CNFG_REG );
  8024d8:	00c06474 	movhi	r3,401
  8024dc:	18e40904 	addi	r3,r3,-28636
  8024e0:	00800804 	movi	r2,32
  8024e4:	18800035 	stwio	r2,0(r3)
    return IORD(USB_0_BASE,HC_DATA_PORT);
  8024e8:	00806474 	movhi	r2,401
  8024ec:	10a40804 	addi	r2,r2,-28640
  8024f0:	10800037 	ldwio	r2,0(r2)
  8024f4:	10bfffcc 	andi	r2,r2,65535
}
  8024f8:	e037883a 	mov	sp,fp
  8024fc:	df000017 	ldw	fp,0(sp)
  802500:	dec00104 	addi	sp,sp,4
  802504:	f800283a 	ret

00802508 <HID_Get_Report>:
/* Required global variables */
extern CONTROL_XFER ControlData; // Holds data from reveived packets
extern HID_KEYS_REPORT new_report;
extern HID_SETTINGS hid_settings;

void HID_Get_Report() {
  802508:	defffd04 	addi	sp,sp,-12
  80250c:	dfc00215 	stw	ra,8(sp)
  802510:	df000115 	stw	fp,4(sp)
  802514:	df000104 	addi	fp,sp,4
   UCHAR   bDescriptor =      MSB(ControlData.DeviceRequest.wValue);
  802518:	00802074 	movhi	r2,129
  80251c:	1091e104 	addi	r2,r2,18308
  802520:	1080010b 	ldhu	r2,4(r2)
  802524:	10bfffcc 	andi	r2,r2,65535
  802528:	1004d23a 	srli	r2,r2,8
  80252c:	1007883a 	mov	r3,r2
  802530:	00bfffc4 	movi	r2,-1
  802534:	1884703a 	and	r2,r3,r2
  802538:	e0bfffc5 	stb	r2,-1(fp)
   UCHAR   bDescriptorIndex = LSB(ControlData.DeviceRequest.wValue);
  80253c:	00802074 	movhi	r2,129
  802540:	1091e104 	addi	r2,r2,18308
  802544:	1080010b 	ldhu	r2,4(r2)
  802548:	1007883a 	mov	r3,r2
  80254c:	00bfffc4 	movi	r2,-1
  802550:	1884703a 	and	r2,r3,r2
  802554:	e0bfff85 	stb	r2,-2(fp)
   USHORT  bLen = ControlData.DeviceRequest.wLength;
  802558:	00802074 	movhi	r2,129
  80255c:	1091e104 	addi	r2,r2,18308
  802560:	1080020b 	ldhu	r2,8(r2)
  802564:	e0bfff0d 	sth	r2,-4(fp)

   if(sizeof(new_report) <= bLen){
  802568:	e0bfff0b 	ldhu	r2,-4(fp)
  80256c:	10800230 	cmpltui	r2,r2,8
  802570:	1000041e 	bne	r2,zero,802584 <HID_Get_Report+0x7c>
      Chap9_BurstTransmitEP0((PUCHAR)&new_report, sizeof(new_report));
  802574:	01002074 	movhi	r4,129
  802578:	2111c204 	addi	r4,r4,18184
  80257c:	01400204 	movi	r5,8
  802580:	080126c0 	call	80126c <Chap9_BurstTransmitEP0>
   }
   hid_settings.state = connected;
  802584:	00c02074 	movhi	r3,129
  802588:	18d1c604 	addi	r3,r3,18200
  80258c:	00800044 	movi	r2,1
  802590:	18800115 	stw	r2,4(r3)
}
  802594:	e037883a 	mov	sp,fp
  802598:	dfc00117 	ldw	ra,4(sp)
  80259c:	df000017 	ldw	fp,0(sp)
  8025a0:	dec00204 	addi	sp,sp,8
  8025a4:	f800283a 	ret

008025a8 <HID_Get_Idle>:

void HID_Get_Idle() {
  8025a8:	defffe04 	addi	sp,sp,-8
  8025ac:	dfc00115 	stw	ra,4(sp)
  8025b0:	df000015 	stw	fp,0(sp)
  8025b4:	d839883a 	mov	fp,sp
   printf("Get Idle\n");
  8025b8:	01002074 	movhi	r4,129
  8025bc:	2107bd04 	addi	r4,r4,7924
  8025c0:	0805b5c0 	call	805b5c <puts>
}
  8025c4:	e037883a 	mov	sp,fp
  8025c8:	dfc00117 	ldw	ra,4(sp)
  8025cc:	df000017 	ldw	fp,0(sp)
  8025d0:	dec00204 	addi	sp,sp,8
  8025d4:	f800283a 	ret

008025d8 <HID_Get_Protocol>:

void HID_Get_Protocol() {
  8025d8:	defffe04 	addi	sp,sp,-8
  8025dc:	dfc00115 	stw	ra,4(sp)
  8025e0:	df000015 	stw	fp,0(sp)
  8025e4:	d839883a 	mov	fp,sp
   printf("Get Protocol\n");
  8025e8:	01002074 	movhi	r4,129
  8025ec:	2107c004 	addi	r4,r4,7936
  8025f0:	0805b5c0 	call	805b5c <puts>
}
  8025f4:	e037883a 	mov	sp,fp
  8025f8:	dfc00117 	ldw	ra,4(sp)
  8025fc:	df000017 	ldw	fp,0(sp)
  802600:	dec00204 	addi	sp,sp,8
  802604:	f800283a 	ret

00802608 <HID_Set_Report>:

void HID_Set_Report() {
  802608:	defffe04 	addi	sp,sp,-8
  80260c:	dfc00115 	stw	ra,4(sp)
  802610:	df000015 	stw	fp,0(sp)
  802614:	d839883a 	mov	fp,sp
   printf("Set Report\n");
  802618:	01002074 	movhi	r4,129
  80261c:	2107c404 	addi	r4,r4,7952
  802620:	0805b5c0 	call	805b5c <puts>
}
  802624:	e037883a 	mov	sp,fp
  802628:	dfc00117 	ldw	ra,4(sp)
  80262c:	df000017 	ldw	fp,0(sp)
  802630:	dec00204 	addi	sp,sp,8
  802634:	f800283a 	ret

00802638 <HID_Set_Idle>:

void HID_Set_Idle() {
  802638:	defffd04 	addi	sp,sp,-12
  80263c:	dfc00215 	stw	ra,8(sp)
  802640:	df000115 	stw	fp,4(sp)
  802644:	df000104 	addi	fp,sp,4

   UCHAR duration = MSB(ControlData.DeviceRequest.wValue);
  802648:	00802074 	movhi	r2,129
  80264c:	1091e104 	addi	r2,r2,18308
  802650:	1080010b 	ldhu	r2,4(r2)
  802654:	10bfffcc 	andi	r2,r2,65535
  802658:	1004d23a 	srli	r2,r2,8
  80265c:	1007883a 	mov	r3,r2
  802660:	00bfffc4 	movi	r2,-1
  802664:	1884703a 	and	r2,r3,r2
  802668:	e0bfff45 	stb	r2,-3(fp)
   UCHAR reportID = LSB(ControlData.DeviceRequest.wValue);
  80266c:	00802074 	movhi	r2,129
  802670:	1091e104 	addi	r2,r2,18308
  802674:	1080010b 	ldhu	r2,4(r2)
  802678:	1007883a 	mov	r3,r2
  80267c:	00bfffc4 	movi	r2,-1
  802680:	1884703a 	and	r2,r3,r2
  802684:	e0bfff05 	stb	r2,-4(fp)

   //printf("Duration: %x, ReportID: %x\n", duration, reportID);

   hid_settings.idle_time = 0;
  802688:	00802074 	movhi	r2,129
  80268c:	1091c604 	addi	r2,r2,18200
  802690:	10000015 	stw	zero,0(r2)
   if(duration != 0) {
  802694:	e0bfff43 	ldbu	r2,-3(fp)
  802698:	1005003a 	cmpeq	r2,r2,zero
  80269c:	1000071e 	bne	r2,zero,8026bc <HID_Set_Idle+0x84>
	   hid_settings.idle_time = duration * 4; //wait time in milliseconds
  8026a0:	e0bfff43 	ldbu	r2,-3(fp)
  8026a4:	1085883a 	add	r2,r2,r2
  8026a8:	1085883a 	add	r2,r2,r2
  8026ac:	1007883a 	mov	r3,r2
  8026b0:	00802074 	movhi	r2,129
  8026b4:	1091c604 	addi	r2,r2,18200
  8026b8:	10c00015 	stw	r3,0(r2)
   }
   if(reportID != 0) {
  8026bc:	e0bfff03 	ldbu	r2,-4(fp)
  8026c0:	1005003a 	cmpeq	r2,r2,zero
  8026c4:	1000041e 	bne	r2,zero,8026d8 <HID_Set_Idle+0xa0>
      printf("ReportID = %ud\n", reportID);
  8026c8:	e17fff03 	ldbu	r5,-4(fp)
  8026cc:	01002074 	movhi	r4,129
  8026d0:	2107c704 	addi	r4,r4,7964
  8026d4:	0805a200 	call	805a20 <printf>
   }
   hid_settings.state = connected;
  8026d8:	00c02074 	movhi	r3,129
  8026dc:	18d1c604 	addi	r3,r3,18200
  8026e0:	00800044 	movi	r2,1
  8026e4:	18800115 	stw	r2,4(r3)
}
  8026e8:	e037883a 	mov	sp,fp
  8026ec:	dfc00117 	ldw	ra,4(sp)
  8026f0:	df000017 	ldw	fp,0(sp)
  8026f4:	dec00204 	addi	sp,sp,8
  8026f8:	f800283a 	ret

008026fc <HID_Set_Protocol>:

void HID_Set_Protocol() {
  8026fc:	defffe04 	addi	sp,sp,-8
  802700:	dfc00115 	stw	ra,4(sp)
  802704:	df000015 	stw	fp,0(sp)
  802708:	d839883a 	mov	fp,sp
   printf("Set Protocol\n");
  80270c:	01002074 	movhi	r4,129
  802710:	2107cb04 	addi	r4,r4,7980
  802714:	0805b5c0 	call	805b5c <puts>
}
  802718:	e037883a 	mov	sp,fp
  80271c:	dfc00117 	ldw	ra,4(sp)
  802720:	df000017 	ldw	fp,0(sp)
  802724:	dec00204 	addi	sp,sp,8
  802728:	f800283a 	ret

0080272c <fn_usb_isr>:

// ************************************************************************
//  ISR Subroutine
// ************************************************************************
void fn_usb_isr(void)
{
  80272c:	defffe04 	addi	sp,sp,-8
  802730:	dfc00115 	stw	ra,4(sp)
  802734:	df000015 	stw	fp,0(sp)
  802738:	d839883a 	mov	fp,sp
    disable_irq();
  80273c:	0804c880 	call	804c88 <disable_irq>
    Hal4D13_LockDevice(0);
  802740:	0009883a 	mov	r4,zero
  802744:	080205c0 	call	80205c <Hal4D13_LockDevice>
    enable_irq();
  802748:	0804cd80 	call	804cd8 <enable_irq>
}
  80274c:	e037883a 	mov	sp,fp
  802750:	dfc00117 	ldw	ra,4(sp)
  802754:	df000017 	ldw	fp,0(sp)
  802758:	dec00204 	addi	sp,sp,8
  80275c:	f800283a 	ret

00802760 <usb_isr>:

void usb_isr(void)
{
  802760:	defffd04 	addi	sp,sp,-12
  802764:	dfc00215 	stw	ra,8(sp)
  802768:	df000115 	stw	fp,4(sp)
  80276c:	df000104 	addi	fp,sp,4
    ULONG   i_st;
    disable_irq();
  802770:	0804c880 	call	804c88 <disable_irq>
    Hal4D13_LockDevice(0); //Unlock ISP1362 buffers to read/write
  802774:	0009883a 	mov	r4,zero
  802778:	080205c0 	call	80205c <Hal4D13_LockDevice>
    bD13flags.bits.At_IRQL1 = 1;
  80277c:	00c02074 	movhi	r3,129
  802780:	18d1c104 	addi	r3,r3,18180
  802784:	18800017 	ldw	r2,0(r3)
  802788:	10800114 	ori	r2,r2,4
  80278c:	18800015 	stw	r2,0(r3)
    i_st = Hal4D13_ReadInterruptRegister();
  802790:	0801d1c0 	call	801d1c <Hal4D13_ReadInterruptRegister>
  802794:	e0bfff15 	stw	r2,-4(fp)
    if(i_st != 0) 
  802798:	e0bfff17 	ldw	r2,-4(fp)
  80279c:	1005003a 	cmpeq	r2,r2,zero
  8027a0:	1000381e 	bne	r2,zero,802884 <usb_isr+0x124>
    {
        if(i_st & D13REG_INTSRC_BUSRESET)
  8027a4:	e0bfff17 	ldw	r2,-4(fp)
  8027a8:	1080004c 	andi	r2,r2,1
  8027ac:	10803fcc 	andi	r2,r2,255
  8027b0:	1005003a 	cmpeq	r2,r2,zero
  8027b4:	1000021e 	bne	r2,zero,8027c0 <usb_isr+0x60>
            Isr_BusReset();
  8027b8:	08028b40 	call	8028b4 <Isr_BusReset>
  8027bc:	00003106 	br	802884 <usb_isr+0x124>
        else if(i_st & D13REG_INTSRC_SUSPEND)
  8027c0:	e0bfff17 	ldw	r2,-4(fp)
  8027c4:	1080010c 	andi	r2,r2,4
  8027c8:	1005003a 	cmpeq	r2,r2,zero
  8027cc:	1000021e 	bne	r2,zero,8027d8 <usb_isr+0x78>
            Isr_SuspendChange();
  8027d0:	08029a00 	call	8029a0 <Isr_SuspendChange>
  8027d4:	00002b06 	br	802884 <usb_isr+0x124>
        else if(i_st & D13REG_INTSRC_EOT)
  8027d8:	e0bfff17 	ldw	r2,-4(fp)
  8027dc:	1080020c 	andi	r2,r2,8
  8027e0:	1005003a 	cmpeq	r2,r2,zero
  8027e4:	1000021e 	bne	r2,zero,8027f0 <usb_isr+0x90>
            Isr_DmaEot();
  8027e8:	0802a000 	call	802a00 <Isr_DmaEot>
  8027ec:	00002506 	br	802884 <usb_isr+0x124>
        else if(i_st & (D13REG_INTSRC_SOF|D13REG_INTSRC_PSEUDO_SOF))
  8027f0:	e0bfff17 	ldw	r2,-4(fp)
  8027f4:	10800c0c 	andi	r2,r2,48
  8027f8:	1005003a 	cmpeq	r2,r2,zero
  8027fc:	1000021e 	bne	r2,zero,802808 <usb_isr+0xa8>
            Isr_SOF();
  802800:	0802acc0 	call	802acc <Isr_SOF>
  802804:	00001f06 	br	802884 <usb_isr+0x124>
        else if(i_st & D13REG_INTSRC_SHORT_PACKET)
  802808:	e0bfff17 	ldw	r2,-4(fp)
  80280c:	1080100c 	andi	r2,r2,64
  802810:	1005003a 	cmpeq	r2,r2,zero
  802814:	1000021e 	bne	r2,zero,802820 <usb_isr+0xc0>
            Isr_SHORT_PACKET();
  802818:	08029d00 	call	8029d0 <Isr_SHORT_PACKET>
  80281c:	00001906 	br	802884 <usb_isr+0x124>
        else if(i_st & D13REG_INTSRC_RESUME)
  802820:	e0bfff17 	ldw	r2,-4(fp)
  802824:	1080008c 	andi	r2,r2,2
  802828:	1005003a 	cmpeq	r2,r2,zero
  80282c:	1000061e 	bne	r2,zero,802848 <usb_isr+0xe8>
        {
            printf("RESUME\n");
  802830:	01002074 	movhi	r4,129
  802834:	2107cf04 	addi	r4,r4,7996
  802838:	0805b5c0 	call	805b5c <puts>
            Hal4D13_LockDevice(0);
  80283c:	0009883a 	mov	r4,zero
  802840:	080205c0 	call	80205c <Hal4D13_LockDevice>
  802844:	00000f06 	br	802884 <usb_isr+0x124>
        }
        else 
        {
            if(i_st & D13REG_INTSRC_EP0OUT)  
  802848:	e0bfff17 	ldw	r2,-4(fp)
  80284c:	1080400c 	andi	r2,r2,256
  802850:	1005003a 	cmpeq	r2,r2,zero
  802854:	1000011e 	bne	r2,zero,80285c <usb_isr+0xfc>
                Isr_Ep00RxDone();
  802858:	0802ae80 	call	802ae8 <Isr_Ep00RxDone>
            if(i_st & D13REG_INTSRC_EP0IN)
  80285c:	e0bfff17 	ldw	r2,-4(fp)
  802860:	1080800c 	andi	r2,r2,512
  802864:	1005003a 	cmpeq	r2,r2,zero
  802868:	1000011e 	bne	r2,zero,802870 <usb_isr+0x110>
                Isr_Ep00TxDone();
  80286c:	0802cec0 	call	802cec <Isr_Ep00TxDone>
            if(i_st & D13REG_INTSRC_EP01)
  802870:	e0bfff17 	ldw	r2,-4(fp)
  802874:	1081000c 	andi	r2,r2,1024
  802878:	1005003a 	cmpeq	r2,r2,zero
  80287c:	1000011e 	bne	r2,zero,802884 <usb_isr+0x124>
            	Isr_Ep01Done();
  802880:	0802f040 	call	802f04 <Isr_Ep01Done>
        }
    }
    enable_irq();
  802884:	0804cd80 	call	804cd8 <enable_irq>
	bD13flags.bits.At_IRQL1 = 0;
  802888:	01002074 	movhi	r4,129
  80288c:	2111c104 	addi	r4,r4,18180
  802890:	20c00017 	ldw	r3,0(r4)
  802894:	00bffec4 	movi	r2,-5
  802898:	1884703a 	and	r2,r3,r2
  80289c:	20800015 	stw	r2,0(r4)
}
  8028a0:	e037883a 	mov	sp,fp
  8028a4:	dfc00117 	ldw	ra,4(sp)
  8028a8:	df000017 	ldw	fp,0(sp)
  8028ac:	dec00204 	addi	sp,sp,8
  8028b0:	f800283a 	ret

008028b4 <Isr_BusReset>:

void Isr_BusReset(void)
{
  8028b4:	defffe04 	addi	sp,sp,-8
  8028b8:	dfc00115 	stw	ra,4(sp)
  8028bc:	df000015 	stw	fp,0(sp)
  8028c0:	d839883a 	mov	fp,sp
    printf("BUS RESET\n");
  8028c4:	01002074 	movhi	r4,129
  8028c8:	2107d104 	addi	r4,r4,8004
  8028cc:	0805b5c0 	call	805b5c <puts>
    reconnect_USB_controller();
  8028d0:	080355c0 	call	80355c <reconnect_USB_controller>
    bD13flags.bits.DCP_state = 0x00;
  8028d4:	01002074 	movhi	r4,129
  8028d8:	2111c104 	addi	r4,r4,18180
  8028dc:	20c00017 	ldw	r3,0(r4)
  8028e0:	00bc3fc4 	movi	r2,-3841
  8028e4:	1884703a 	and	r2,r3,r2
  8028e8:	20800015 	stw	r2,0(r4)
    bD13flags.bits.dma_disable=0x00;
  8028ec:	01002074 	movhi	r4,129
  8028f0:	2111c104 	addi	r4,r4,18180
  8028f4:	20c00017 	ldw	r3,0(r4)
  8028f8:	00bfff34 	movhi	r2,65532
  8028fc:	10bfffc4 	addi	r2,r2,-1
  802900:	1884703a 	and	r2,r3,r2
  802904:	20800015 	stw	r2,0(r4)
    hid_settings.state = reset;
  802908:	00802074 	movhi	r2,129
  80290c:	1091c604 	addi	r2,r2,18200
  802910:	10000115 	stw	zero,4(r2)
    bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE = 1;
  802914:	00c02074 	movhi	r3,129
  802918:	18d1c804 	addi	r3,r3,18208
  80291c:	18800003 	ldbu	r2,0(r3)
  802920:	10800054 	ori	r2,r2,1
  802924:	18800005 	stb	r2,0(r3)
    bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 0;
  802928:	01002074 	movhi	r4,129
  80292c:	2111c804 	addi	r4,r4,18208
  802930:	20c00003 	ldbu	r3,0(r4)
  802934:	00bfff44 	movi	r2,-3
  802938:	1884703a 	and	r2,r3,r2
  80293c:	20800005 	stb	r2,0(r4)
    bUSBCheck_Device_State.State_bits.DEVICE_CONFIGURATION_STATE = 0;
  802940:	01002074 	movhi	r4,129
  802944:	2111c804 	addi	r4,r4,18208
  802948:	20c00003 	ldbu	r3,0(r4)
  80294c:	00bffec4 	movi	r2,-5
  802950:	1884703a 	and	r2,r3,r2
  802954:	20800005 	stb	r2,0(r4)
    bUSBCheck_Device_State.State_bits.RESET_BITS = 0;
  802958:	00802074 	movhi	r2,129
  80295c:	1091c804 	addi	r2,r2,18208
  802960:	10000085 	stb	zero,2(r2)

	new_report.modifier = 0x00;
  802964:	00802074 	movhi	r2,129
  802968:	1091c204 	addi	r2,r2,18184
  80296c:	10000005 	stb	zero,0(r2)
	new_report.reserved = 0x00;
  802970:	00802074 	movhi	r2,129
  802974:	1091c204 	addi	r2,r2,18184
  802978:	10000045 	stb	zero,1(r2)
	new_report.keycode[0] = 0x00;
  80297c:	00802074 	movhi	r2,129
  802980:	1091c204 	addi	r2,r2,18184
  802984:	10000085 	stb	zero,2(r2)

    config_endpoints();
  802988:	08034680 	call	803468 <config_endpoints>
}
  80298c:	e037883a 	mov	sp,fp
  802990:	dfc00117 	ldw	ra,4(sp)
  802994:	df000017 	ldw	fp,0(sp)
  802998:	dec00204 	addi	sp,sp,8
  80299c:	f800283a 	ret

008029a0 <Isr_SuspendChange>:

void Isr_SuspendChange(void)
{
  8029a0:	deffff04 	addi	sp,sp,-4
  8029a4:	df000015 	stw	fp,0(sp)
  8029a8:	d839883a 	mov	fp,sp
    bD13flags.bits.suspend=1;
  8029ac:	00802074 	movhi	r2,129
  8029b0:	1091c104 	addi	r2,r2,18180
  8029b4:	10c00017 	ldw	r3,0(r2)
  8029b8:	18c00094 	ori	r3,r3,2
  8029bc:	10c00015 	stw	r3,0(r2)
}
  8029c0:	e037883a 	mov	sp,fp
  8029c4:	df000017 	ldw	fp,0(sp)
  8029c8:	dec00104 	addi	sp,sp,4
  8029cc:	f800283a 	ret

008029d0 <Isr_SHORT_PACKET>:

void Isr_SHORT_PACKET(void)
{
  8029d0:	defffe04 	addi	sp,sp,-8
  8029d4:	dfc00115 	stw	ra,4(sp)
  8029d8:	df000015 	stw	fp,0(sp)
  8029dc:	d839883a 	mov	fp,sp
    printf("SHORT PACKET INTERRUPT\n");
  8029e0:	01002074 	movhi	r4,129
  8029e4:	2107d404 	addi	r4,r4,8016
  8029e8:	0805b5c0 	call	805b5c <puts>
}
  8029ec:	e037883a 	mov	sp,fp
  8029f0:	dfc00117 	ldw	ra,4(sp)
  8029f4:	df000017 	ldw	fp,0(sp)
  8029f8:	dec00204 	addi	sp,sp,8
  8029fc:	f800283a 	ret

00802a00 <Isr_DmaEot>:

void Isr_DmaEot(void)
{
  802a00:	defffe04 	addi	sp,sp,-8
  802a04:	dfc00115 	stw	ra,4(sp)
  802a08:	df000015 	stw	fp,0(sp)
  802a0c:	d839883a 	mov	fp,sp
    bD13flags.bits.dma_disable =0;
  802a10:	01002074 	movhi	r4,129
  802a14:	2111c104 	addi	r4,r4,18180
  802a18:	20c00017 	ldw	r3,0(r4)
  802a1c:	00bfff34 	movhi	r2,65532
  802a20:	10bfffc4 	addi	r2,r2,-1
  802a24:	1884703a 	and	r2,r3,r2
  802a28:	20800015 	stw	r2,0(r4)

    if(bD13flags.bits.dma_state == DMA_PENDING)
  802a2c:	00802074 	movhi	r2,129
  802a30:	1091c104 	addi	r2,r2,18180
  802a34:	10800017 	ldw	r2,0(r2)
  802a38:	10c0062c 	andhi	r3,r2,24
  802a3c:	00800434 	movhi	r2,16
  802a40:	1880061e 	bne	r3,r2,802a5c <Isr_DmaEot+0x5c>
        bD13flags.bits.setup_dma = 1;
  802a44:	00802074 	movhi	r2,129
  802a48:	1091c104 	addi	r2,r2,18180
  802a4c:	10c00017 	ldw	r3,0(r2)
  802a50:	18c00074 	orhi	r3,r3,1
  802a54:	10c00015 	stw	r3,0(r2)
  802a58:	00000706 	br	802a78 <Isr_DmaEot+0x78>
    else
        bD13flags.bits.dma_state = DMA_IDLE;
  802a5c:	01002074 	movhi	r4,129
  802a60:	2111c104 	addi	r4,r4,18180
  802a64:	20c00017 	ldw	r3,0(r4)
  802a68:	00bffa34 	movhi	r2,65512
  802a6c:	10bfffc4 	addi	r2,r2,-1
  802a70:	1884703a 	and	r2,r3,r2
  802a74:	20800015 	stw	r2,0(r4)
    printf("EOT reached!!!\n");
  802a78:	01002074 	movhi	r4,129
  802a7c:	2107da04 	addi	r4,r4,8040
  802a80:	0805b5c0 	call	805b5c <puts>
    if(bD13flags.bits.verbose==1)
  802a84:	00802074 	movhi	r2,129
  802a88:	1091c104 	addi	r2,r2,18180
  802a8c:	10800017 	ldw	r2,0(r2)
  802a90:	1080402c 	andhi	r2,r2,256
  802a94:	1005003a 	cmpeq	r2,r2,zero
  802a98:	1000051e 	bne	r2,zero,802ab0 <Isr_DmaEot+0xb0>
        printf("dma_counter = %x\n", Hal4D13_GetDMACounter());
  802a9c:	0801f5c0 	call	801f5c <Hal4D13_GetDMACounter>
  802aa0:	117fffcc 	andi	r5,r2,65535
  802aa4:	01002074 	movhi	r4,129
  802aa8:	2107de04 	addi	r4,r4,8056
  802aac:	0805a200 	call	805a20 <printf>
    printf("\n");       
  802ab0:	01000284 	movi	r4,10
  802ab4:	0805a980 	call	805a98 <putchar>
}
  802ab8:	e037883a 	mov	sp,fp
  802abc:	dfc00117 	ldw	ra,4(sp)
  802ac0:	df000017 	ldw	fp,0(sp)
  802ac4:	dec00204 	addi	sp,sp,8
  802ac8:	f800283a 	ret

00802acc <Isr_SOF>:


void Isr_SOF(void)
{
  802acc:	deffff04 	addi	sp,sp,-4
  802ad0:	df000015 	stw	fp,0(sp)
  802ad4:	d839883a 	mov	fp,sp

}
  802ad8:	e037883a 	mov	sp,fp
  802adc:	df000017 	ldw	fp,0(sp)
  802ae0:	dec00104 	addi	sp,sp,4
  802ae4:	f800283a 	ret

00802ae8 <Isr_Ep00RxDone>:

void Isr_Ep00RxDone(void)
{
  802ae8:	defffc04 	addi	sp,sp,-16
  802aec:	dfc00315 	stw	ra,12(sp)
  802af0:	df000215 	stw	fp,8(sp)
  802af4:	df000204 	addi	fp,sp,8
    UCHAR       ep_last, i;
    //printf("RX %d\n", bUSBCheck_Device_State.State_bits.FOUR_RESERVED_BITS++);
    ep_last = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP0_CONTROL_OUT); /* Clear interrupt flag */
  802af8:	0009883a 	mov	r4,zero
  802afc:	0801d8c0 	call	801d8c <Hal4D13_GetEndpointStatusWInteruptClear>
  802b00:	e0bffe45 	stb	r2,-7(fp)


    if (ep_last & D13REG_EPSTS_SETUP)
  802b04:	e0bffe43 	ldbu	r2,-7(fp)
  802b08:	1080010c 	andi	r2,r2,4
  802b0c:	1005003a 	cmpeq	r2,r2,zero
  802b10:	10001a1e 	bne	r2,zero,802b7c <Isr_Ep00RxDone+0x94>
    {
        if(bD13flags.bits.DCP_state == USBFSM4DCP_REQUESTPROC)
  802b14:	00802074 	movhi	r2,129
  802b18:	1091c104 	addi	r2,r2,18180
  802b1c:	10800017 	ldw	r2,0(r2)
  802b20:	1083c00c 	andi	r2,r2,3840
  802b24:	1080c018 	cmpnei	r2,r2,768
  802b28:	10000c1e 	bne	r2,zero,802b5c <Isr_Ep00RxDone+0x74>
        {
            ControlData.Abort = 1;
  802b2c:	00c02074 	movhi	r3,129
  802b30:	18d1e104 	addi	r3,r3,18308
  802b34:	00800044 	movi	r2,1
  802b38:	18800005 	stb	r2,0(r3)
            bD13flags.bits.DCP_state = USBFSM4DCP_SETUPPROC;
  802b3c:	01002074 	movhi	r4,129
  802b40:	2111c104 	addi	r4,r4,18180
  802b44:	20c00017 	ldw	r3,0(r4)
  802b48:	00bc3fc4 	movi	r2,-3841
  802b4c:	1884703a 	and	r2,r3,r2
  802b50:	10814014 	ori	r2,r2,1280
  802b54:	20800015 	stw	r2,0(r4)
  802b58:	00005f06 	br	802cd8 <Isr_Ep00RxDone+0x1f0>
        }
        else
            bD13flags.bits.DCP_state = USBFSM4DCP_SETUPPROC;
  802b5c:	01002074 	movhi	r4,129
  802b60:	2111c104 	addi	r4,r4,18180
  802b64:	20c00017 	ldw	r3,0(r4)
  802b68:	00bc3fc4 	movi	r2,-3841
  802b6c:	1884703a 	and	r2,r3,r2
  802b70:	10814014 	ori	r2,r2,1280
  802b74:	20800015 	stw	r2,0(r4)
  802b78:	00005706 	br	802cd8 <Isr_Ep00RxDone+0x1f0>
    }
    else /* not a setup packet, just a Data Out Packet */
    {
        switch (bD13flags.bits.DCP_state)
  802b7c:	00802074 	movhi	r2,129
  802b80:	1091c104 	addi	r2,r2,18180
  802b84:	10800017 	ldw	r2,0(r2)
  802b88:	1004d23a 	srli	r2,r2,8
  802b8c:	108003cc 	andi	r2,r2,15
  802b90:	10803fcc 	andi	r2,r2,255
  802b94:	e0bfff15 	stw	r2,-4(fp)
  802b98:	e0ffff17 	ldw	r3,-4(fp)
  802b9c:	18800228 	cmpgeui	r2,r3,8
  802ba0:	1000411e 	bne	r2,zero,802ca8 <Isr_Ep00RxDone+0x1c0>
  802ba4:	e13fff17 	ldw	r4,-4(fp)
  802ba8:	e13fff17 	ldw	r4,-4(fp)
  802bac:	2105883a 	add	r2,r4,r4
  802bb0:	1087883a 	add	r3,r2,r2
  802bb4:	00802034 	movhi	r2,128
  802bb8:	108af204 	addi	r2,r2,11208
  802bbc:	1885883a 	add	r2,r3,r2
  802bc0:	10800017 	ldw	r2,0(r2)
  802bc4:	1000683a 	jmp	r2
  802bc8:	00802ca8 	cmpgeui	r2,zero,178
  802bcc:	00802cd8 	cmpnei	r2,zero,179
  802bd0:	00802be8 	cmpgeui	r2,zero,175
  802bd4:	00802cd8 	cmpnei	r2,zero,179
  802bd8:	00802c8c 	andi	r2,zero,178
  802bdc:	00802cd8 	cmpnei	r2,zero,179
  802be0:	00802ca8 	cmpgeui	r2,zero,178
  802be4:	00802cd8 	cmpnei	r2,zero,179
        {
        case USBFSM4DCP_DATAOUT:

            i = Hal4D13_ReadEndpoint(EPINDEX4EP0_CONTROL_OUT, ControlData.dataBuffer + ControlData.wCount,
  802be8:	00802074 	movhi	r2,129
  802bec:	1091e104 	addi	r2,r2,18308
  802bf0:	1080030b 	ldhu	r2,12(r2)
  802bf4:	10bfffcc 	andi	r2,r2,65535
  802bf8:	1007883a 	mov	r3,r2
  802bfc:	00802074 	movhi	r2,129
  802c00:	1091e604 	addi	r2,r2,18328
  802c04:	188b883a 	add	r5,r3,r2
  802c08:	0009883a 	mov	r4,zero
  802c0c:	01801004 	movi	r6,64
  802c10:	08017440 	call	801744 <Hal4D13_ReadEndpoint>
  802c14:	e0bffe05 	stb	r2,-8(fp)
                EP0_PACKET_SIZE);

            ControlData.wCount += i;
  802c18:	00802074 	movhi	r2,129
  802c1c:	1091e104 	addi	r2,r2,18308
  802c20:	10c0030b 	ldhu	r3,12(r2)
  802c24:	e0bffe03 	ldbu	r2,-8(fp)
  802c28:	1885883a 	add	r2,r3,r2
  802c2c:	1007883a 	mov	r3,r2
  802c30:	00802074 	movhi	r2,129
  802c34:	1091e104 	addi	r2,r2,18308
  802c38:	10c0030d 	sth	r3,12(r2)
            if( i != EP0_PACKET_SIZE || ControlData.wCount >= ControlData.wLength)
  802c3c:	e0bffe03 	ldbu	r2,-8(fp)
  802c40:	10801018 	cmpnei	r2,r2,64
  802c44:	1000091e 	bne	r2,zero,802c6c <Isr_Ep00RxDone+0x184>
  802c48:	00802074 	movhi	r2,129
  802c4c:	1091e104 	addi	r2,r2,18308
  802c50:	10c0030b 	ldhu	r3,12(r2)
  802c54:	00802074 	movhi	r2,129
  802c58:	1091e104 	addi	r2,r2,18308
  802c5c:	1080028b 	ldhu	r2,10(r2)
  802c60:	18ffffcc 	andi	r3,r3,65535
  802c64:	10bfffcc 	andi	r2,r2,65535
  802c68:	18801b36 	bltu	r3,r2,802cd8 <Isr_Ep00RxDone+0x1f0>
            {
                bD13flags.bits.DCP_state = USBFSM4DCP_REQUESTPROC;
  802c6c:	01002074 	movhi	r4,129
  802c70:	2111c104 	addi	r4,r4,18180
  802c74:	20c00017 	ldw	r3,0(r4)
  802c78:	00bc3fc4 	movi	r2,-3841
  802c7c:	1884703a 	and	r2,r3,r2
  802c80:	1080c014 	ori	r2,r2,768
  802c84:	20800015 	stw	r2,0(r4)

            }
            break;
  802c88:	00001306 	br	802cd8 <Isr_Ep00RxDone+0x1f0>
        case USBFSM4DCP_HANDSHAKE:
            bD13flags.bits.DCP_state = USBFSM4DCP_IDLE;
  802c8c:	01002074 	movhi	r4,129
  802c90:	2111c104 	addi	r4,r4,18180
  802c94:	20c00017 	ldw	r3,0(r4)
  802c98:	00bc3fc4 	movi	r2,-3841
  802c9c:	1884703a 	and	r2,r3,r2
  802ca0:	20800015 	stw	r2,0(r4)
            break;
  802ca4:	00000c06 	br	802cd8 <Isr_Ep00RxDone+0x1f0>
        case USBFSM4DCP_REQUESTPROC:break;

        case USBFSM4DCP_DATAIN:     break;

        default:
            printf("Fatal Error: Isr_Ep0RxDone ReadLastTranactionStatus=%x\n",ep_last);
  802ca8:	e17ffe43 	ldbu	r5,-7(fp)
  802cac:	01002074 	movhi	r4,129
  802cb0:	2107e304 	addi	r4,r4,8076
  802cb4:	0805a200 	call	805a20 <printf>
            bD13flags.bits.DCP_state = USBFSM4DCP_STALL;
  802cb8:	01002074 	movhi	r4,129
  802cbc:	2111c104 	addi	r4,r4,18180
  802cc0:	20c00017 	ldw	r3,0(r4)
  802cc4:	00bc3fc4 	movi	r2,-3841
  802cc8:	1884703a 	and	r2,r3,r2
  802ccc:	1081c014 	ori	r2,r2,1792
  802cd0:	20800015 	stw	r2,0(r4)
            Hal4D13_StallEP0InControlWrite();
  802cd4:	08023d40 	call	8023d4 <Hal4D13_StallEP0InControlWrite>
            break;
        }
    }
    return ;
}
  802cd8:	e037883a 	mov	sp,fp
  802cdc:	dfc00117 	ldw	ra,4(sp)
  802ce0:	df000017 	ldw	fp,0(sp)
  802ce4:	dec00204 	addi	sp,sp,8
  802ce8:	f800283a 	ret

00802cec <Isr_Ep00TxDone>:

void Isr_Ep00TxDone(void)
{
  802cec:	defffc04 	addi	sp,sp,-16
  802cf0:	dfc00315 	stw	ra,12(sp)
  802cf4:	df000215 	stw	fp,8(sp)
  802cf8:	df000204 	addi	fp,sp,8
	/* Control IN interrupt */
    short i = ControlData.wLength - ControlData.wCount;
  802cfc:	00802074 	movhi	r2,129
  802d00:	1091e104 	addi	r2,r2,18308
  802d04:	10c0028b 	ldhu	r3,10(r2)
  802d08:	00802074 	movhi	r2,129
  802d0c:	1091e104 	addi	r2,r2,18308
  802d10:	1080030b 	ldhu	r2,12(r2)
  802d14:	1885c83a 	sub	r2,r3,r2
  802d18:	e0bffe8d 	sth	r2,-6(fp)
    UCHAR ep_last;
    Hal4D13_ReadInterruptRegister();
  802d1c:	0801d1c0 	call	801d1c <Hal4D13_ReadInterruptRegister>
    ep_last = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP0_CONTROL_IN); /* Clear interrupt flag */
  802d20:	01000044 	movi	r4,1
  802d24:	0801d8c0 	call	801d8c <Hal4D13_GetEndpointStatusWInteruptClear>
  802d28:	e0bffe05 	stb	r2,-8(fp)

    switch (bD13flags.bits.DCP_state)
  802d2c:	00802074 	movhi	r2,129
  802d30:	1091c104 	addi	r2,r2,18180
  802d34:	10800017 	ldw	r2,0(r2)
  802d38:	1004d23a 	srli	r2,r2,8
  802d3c:	108003cc 	andi	r2,r2,15
  802d40:	10803fcc 	andi	r2,r2,255
  802d44:	e0bfff15 	stw	r2,-4(fp)
  802d48:	e0ffff17 	ldw	r3,-4(fp)
  802d4c:	18800228 	cmpgeui	r2,r3,8
  802d50:	1000561e 	bne	r2,zero,802eac <Isr_Ep00TxDone+0x1c0>
  802d54:	e13fff17 	ldw	r4,-4(fp)
  802d58:	e13fff17 	ldw	r4,-4(fp)
  802d5c:	2105883a 	add	r2,r4,r4
  802d60:	1087883a 	add	r3,r2,r2
  802d64:	00802034 	movhi	r2,128
  802d68:	108b5e04 	addi	r2,r2,11640
  802d6c:	1885883a 	add	r2,r3,r2
  802d70:	10800017 	ldw	r2,0(r2)
  802d74:	1000683a 	jmp	r2
  802d78:	00802ef0 	cmpltui	r2,zero,187
  802d7c:	00802d98 	cmpnei	r2,zero,182
  802d80:	00802ef0 	cmpltui	r2,zero,187
  802d84:	00802ef0 	cmpltui	r2,zero,187
  802d88:	00802ef0 	cmpltui	r2,zero,187
  802d8c:	00802ef0 	cmpltui	r2,zero,187
  802d90:	00802eac 	andhi	r2,zero,186
  802d94:	00802ef0 	cmpltui	r2,zero,187
    {
    	case USBFSM4DCP_HANDSHAKE:
    		break;
    	case USBFSM4DCP_DATAIN:
    		if( i >= EP0_PACKET_SIZE)
  802d98:	e0bffe8f 	ldh	r2,-6(fp)
  802d9c:	10801010 	cmplti	r2,r2,64
  802da0:	1000141e 	bne	r2,zero,802df4 <Isr_Ep00TxDone+0x108>
			{
				Hal4D13_WriteEndpoint(EPINDEX4EP0_CONTROL_IN,ControlData.Addr.pData + ControlData.wCount, EP0_PACKET_SIZE);
  802da4:	00802074 	movhi	r2,129
  802da8:	1091e104 	addi	r2,r2,18308
  802dac:	10c00417 	ldw	r3,16(r2)
  802db0:	00802074 	movhi	r2,129
  802db4:	1091e104 	addi	r2,r2,18308
  802db8:	1080030b 	ldhu	r2,12(r2)
  802dbc:	10bfffcc 	andi	r2,r2,65535
  802dc0:	188b883a 	add	r5,r3,r2
  802dc4:	01000044 	movi	r4,1
  802dc8:	01801004 	movi	r6,64
  802dcc:	0801a380 	call	801a38 <Hal4D13_WriteEndpoint>
				ControlData.wCount += EP0_PACKET_SIZE;
  802dd0:	00802074 	movhi	r2,129
  802dd4:	1091e104 	addi	r2,r2,18308
  802dd8:	1080030b 	ldhu	r2,12(r2)
  802ddc:	10801004 	addi	r2,r2,64
  802de0:	1007883a 	mov	r3,r2
  802de4:	00802074 	movhi	r2,129
  802de8:	1091e104 	addi	r2,r2,18308
  802dec:	10c0030d 	sth	r3,12(r2)
  802df0:	00003f06 	br	802ef0 <Isr_Ep00TxDone+0x204>
				// State remains at USBFSM4DCP_DATAIN
			}
			else if( i != 0)
  802df4:	e0bffe8f 	ldh	r2,-6(fp)
  802df8:	1005003a 	cmpeq	r2,r2,zero
  802dfc:	10001d1e 	bne	r2,zero,802e74 <Isr_Ep00TxDone+0x188>
			{
				Hal4D13_WriteEndpoint(1, ControlData.Addr.pData + ControlData.wCount, i);
  802e00:	00802074 	movhi	r2,129
  802e04:	1091e104 	addi	r2,r2,18308
  802e08:	10c00417 	ldw	r3,16(r2)
  802e0c:	00802074 	movhi	r2,129
  802e10:	1091e104 	addi	r2,r2,18308
  802e14:	1080030b 	ldhu	r2,12(r2)
  802e18:	10bfffcc 	andi	r2,r2,65535
  802e1c:	188b883a 	add	r5,r3,r2
  802e20:	e0bffe8b 	ldhu	r2,-6(fp)
  802e24:	11bfffcc 	andi	r6,r2,65535
  802e28:	01000044 	movi	r4,1
  802e2c:	0801a380 	call	801a38 <Hal4D13_WriteEndpoint>
				ControlData.wCount += i;
  802e30:	00802074 	movhi	r2,129
  802e34:	1091e104 	addi	r2,r2,18308
  802e38:	10c0030b 	ldhu	r3,12(r2)
  802e3c:	e0bffe8b 	ldhu	r2,-6(fp)
  802e40:	1885883a 	add	r2,r3,r2
  802e44:	1007883a 	mov	r3,r2
  802e48:	00802074 	movhi	r2,129
  802e4c:	1091e104 	addi	r2,r2,18308
  802e50:	10c0030d 	sth	r3,12(r2)
				bD13flags.bits.DCP_state = USBFSM4DCP_HANDSHAKE;
  802e54:	01002074 	movhi	r4,129
  802e58:	2111c104 	addi	r4,r4,18180
  802e5c:	20c00017 	ldw	r3,0(r4)
  802e60:	00bc3fc4 	movi	r2,-3841
  802e64:	1884703a 	and	r2,r3,r2
  802e68:	10810014 	ori	r2,r2,1024
  802e6c:	20800015 	stw	r2,0(r4)
  802e70:	00001f06 	br	802ef0 <Isr_Ep00TxDone+0x204>
			}
			else if (i == 0)
  802e74:	e0bffe8f 	ldh	r2,-6(fp)
  802e78:	1004c03a 	cmpne	r2,r2,zero
  802e7c:	10001c1e 	bne	r2,zero,802ef0 <Isr_Ep00TxDone+0x204>
			{
				bD13flags.bits.DCP_state = USBFSM4DCP_HANDSHAKE;
  802e80:	01002074 	movhi	r4,129
  802e84:	2111c104 	addi	r4,r4,18180
  802e88:	20c00017 	ldw	r3,0(r4)
  802e8c:	00bc3fc4 	movi	r2,-3841
  802e90:	1884703a 	and	r2,r3,r2
  802e94:	10810014 	ori	r2,r2,1024
  802e98:	20800015 	stw	r2,0(r4)
				Hal4D13_SingleTransmitEP0(0, 0);
  802e9c:	0009883a 	mov	r4,zero
  802ea0:	000b883a 	mov	r5,zero
  802ea4:	08022240 	call	802224 <Hal4D13_SingleTransmitEP0>
			}
			break;
  802ea8:	00001106 	br	802ef0 <Isr_Ep00TxDone+0x204>
		case USBFSM4DCP_IDLE:     	 break;
		case USBFSM4DCP_SETUPPROC:   break;
		case USBFSM4DCP_STALL:       break;
		case USBFSM4DCP_DATAOUT:     break;
		default:
			printf("Fatal Error: Isr_Ep0TxDone Unexpected FSMState=%x\n",bD13flags.bits.DCP_state);
  802eac:	00802074 	movhi	r2,129
  802eb0:	1091c104 	addi	r2,r2,18180
  802eb4:	10800017 	ldw	r2,0(r2)
  802eb8:	1004d23a 	srli	r2,r2,8
  802ebc:	108003cc 	andi	r2,r2,15
  802ec0:	11403fcc 	andi	r5,r2,255
  802ec4:	01002074 	movhi	r4,129
  802ec8:	2107f104 	addi	r4,r4,8132
  802ecc:	0805a200 	call	805a20 <printf>
			bD13flags.bits.DCP_state = USBFSM4DCP_STALL;
  802ed0:	01002074 	movhi	r4,129
  802ed4:	2111c104 	addi	r4,r4,18180
  802ed8:	20c00017 	ldw	r3,0(r4)
  802edc:	00bc3fc4 	movi	r2,-3841
  802ee0:	1884703a 	and	r2,r3,r2
  802ee4:	1081c014 	ori	r2,r2,1792
  802ee8:	20800015 	stw	r2,0(r4)
			Hal4D13_StallEP0InControlRead();
  802eec:	08024100 	call	802410 <Hal4D13_StallEP0InControlRead>
			break;
		}
}
  802ef0:	e037883a 	mov	sp,fp
  802ef4:	dfc00117 	ldw	ra,4(sp)
  802ef8:	df000017 	ldw	fp,0(sp)
  802efc:	dec00204 	addi	sp,sp,8
  802f00:	f800283a 	ret

00802f04 <Isr_Ep01Done>:

void Isr_Ep01Done(void) {
  802f04:	defffd04 	addi	sp,sp,-12
  802f08:	dfc00215 	stw	ra,8(sp)
  802f0c:	df000115 	stw	fp,4(sp)
  802f10:	df000104 	addi	fp,sp,4
	/* This gets called when the interrupt is determined to have came from
	 * endpoint 1. When this interrupt it fired it means the host has received
	 * a packet from this endpoint.
	 */
	bD13flags.bits.DCP_state = USBFSM4DCP_INTR1DONE;
  802f14:	01002074 	movhi	r4,129
  802f18:	2111c104 	addi	r4,r4,18180
  802f1c:	20c00017 	ldw	r3,0(r4)
  802f20:	00bc3fc4 	movi	r2,-3841
  802f24:	1884703a 	and	r2,r3,r2
  802f28:	1082c014 	ori	r2,r2,2816
  802f2c:	20800015 	stw	r2,0(r4)

	UCHAR err = Hal4D13_GetErrorCode(EPINDEX4EP01);
  802f30:	01000084 	movi	r4,2
  802f34:	08020f80 	call	8020f8 <Hal4D13_GetErrorCode>
  802f38:	e0bfff45 	stb	r2,-3(fp)
	UCHAR stat = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP01); //Interrupt Clear
  802f3c:	01000084 	movi	r4,2
  802f40:	0801d8c0 	call	801d8c <Hal4D13_GetEndpointStatusWInteruptClear>
  802f44:	e0bfff05 	stb	r2,-4(fp)
}
  802f48:	e037883a 	mov	sp,fp
  802f4c:	dfc00117 	ldw	ra,4(sp)
  802f50:	df000017 	ldw	fp,0(sp)
  802f54:	dec00204 	addi	sp,sp,8
  802f58:	f800283a 	ret

00802f5c <SetupToken_Handler>:
		{ "Iso mode enable", "Philips D13bus handler", "RESERVED", "RESERVED",
				"RESERVED", "RESERVED", "RESERVED", "RESERVED", "RESERVED",
				"RESERVED", "RESERVED", "RESERVED", "read Firmware version ",
				"RESERVED", "RESERVED", "RESERVED", };

void SetupToken_Handler(void) {
  802f5c:	defffd04 	addi	sp,sp,-12
  802f60:	dfc00215 	stw	ra,8(sp)
  802f64:	df000115 	stw	fp,4(sp)
  802f68:	df000104 	addi	fp,sp,4
	unsigned short j;
	RaiseIRQL();
  802f6c:	0804c880 	call	804c88 <disable_irq>
	bD13flags.bits.At_IRQL1 = 1;
  802f70:	00c02074 	movhi	r3,129
  802f74:	18d1c104 	addi	r3,r3,18180
  802f78:	18800017 	ldw	r2,0(r3)
  802f7c:	10800114 	ori	r2,r2,4
  802f80:	18800015 	stw	r2,0(r3)
	ControlData.Abort = FALSE;
  802f84:	00802074 	movhi	r2,129
  802f88:	1091e104 	addi	r2,r2,18308
  802f8c:	10000005 	stb	zero,0(r2)

	ControlData.wLength = 0;
  802f90:	00802074 	movhi	r2,129
  802f94:	1091e104 	addi	r2,r2,18308
  802f98:	1000028d 	sth	zero,10(r2)
	ControlData.wCount = 0;
  802f9c:	00802074 	movhi	r2,129
  802fa0:	1091e104 	addi	r2,r2,18308
  802fa4:	1000030d 	sth	zero,12(r2)

	j = Hal4D13_ReadEndpointWOClearBuffer(EPINDEX4EP0_CONTROL_OUT, &ControlData.DeviceRequest, sizeof(ControlData.DeviceRequest));
  802fa8:	01402074 	movhi	r5,129
  802fac:	2951e184 	addi	r5,r5,18310
  802fb0:	0009883a 	mov	r4,zero
  802fb4:	01800204 	movi	r6,8
  802fb8:	080193c0 	call	80193c <Hal4D13_ReadEndpointWOClearBuffer>
  802fbc:	e0bfff0d 	sth	r2,-4(fp)

	if (j == sizeof(DEVICE_REQUEST)) {
  802fc0:	e0bfff0b 	ldhu	r2,-4(fp)
  802fc4:	10800218 	cmpnei	r2,r2,8
  802fc8:	1000711e 	bne	r2,zero,803190 <SetupToken_Handler+0x234>
		 printf("ControlData.DeviceRequest.bRequest:0x%X\n",ControlData.DeviceRequest.bRequest);//1BYTE
		 printf("ControlData.DeviceRequest.wValue:0x%X\n",ControlData.DeviceRequest.wValue); //2BYTE
		 printf("ControlData.DeviceRequest.wIndex:0x%X\n",ControlData.DeviceRequest.wIndex); //2BYTE
		 printf("ControlData.DeviceRequest.wLength:0x%X\n",ControlData.DeviceRequest.wLength);//2BYTE
		 */
		bD13flags.bits.At_IRQL1 = 0;
  802fcc:	01002074 	movhi	r4,129
  802fd0:	2111c104 	addi	r4,r4,18180
  802fd4:	20c00017 	ldw	r3,0(r4)
  802fd8:	00bffec4 	movi	r2,-5
  802fdc:	1884703a 	and	r2,r3,r2
  802fe0:	20800015 	stw	r2,0(r4)
		LowerIRQL();
  802fe4:	0804cd80 	call	804cd8 <enable_irq>
		ControlData.wLength = ControlData.DeviceRequest.wLength;
  802fe8:	00802074 	movhi	r2,129
  802fec:	1091e104 	addi	r2,r2,18308
  802ff0:	10c0020b 	ldhu	r3,8(r2)
  802ff4:	00802074 	movhi	r2,129
  802ff8:	1091e104 	addi	r2,r2,18308
  802ffc:	10c0028d 	sth	r3,10(r2)
		ControlData.wCount = 0;
  803000:	00802074 	movhi	r2,129
  803004:	1091e104 	addi	r2,r2,18308
  803008:	1000030d 	sth	zero,12(r2)

		if (ControlData.DeviceRequest.bmRequestType
  80300c:	00802074 	movhi	r2,129
  803010:	1091e104 	addi	r2,r2,18308
  803014:	10800083 	ldbu	r2,2(r2)
  803018:	10803fcc 	andi	r2,r2,255
  80301c:	1080201c 	xori	r2,r2,128
  803020:	10bfe004 	addi	r2,r2,-128
  803024:	1004403a 	cmpge	r2,r2,zero
  803028:	1000221e 	bne	r2,zero,8030b4 <SetupToken_Handler+0x158>
				& (UCHAR) USB_ENDPOINT_DIRECTION_MASK) {
			/* get command */
			RaiseIRQL();
  80302c:	0804c880 	call	804c88 <disable_irq>
			ML_AcknowledgeSETUP();
  803030:	08035b80 	call	8035b8 <ML_AcknowledgeSETUP>
			if ((ControlData.DeviceRequest.bRequest == 0)
  803034:	00802074 	movhi	r2,129
  803038:	1091e104 	addi	r2,r2,18308
  80303c:	108000c3 	ldbu	r2,3(r2)
  803040:	10803fcc 	andi	r2,r2,255
  803044:	1005003a 	cmpeq	r2,r2,zero
  803048:	1007883a 	mov	r3,r2
  80304c:	00802074 	movhi	r2,129
  803050:	1091e104 	addi	r2,r2,18308
  803054:	10800083 	ldbu	r2,2(r2)
  803058:	10803fcc 	andi	r2,r2,255
  80305c:	10803020 	cmpeqi	r2,r2,192
  803060:	1884703a 	and	r2,r3,r2
  803064:	10803fcc 	andi	r2,r2,255
  803068:	1005003a 	cmpeq	r2,r2,zero
  80306c:	1000081e 	bne	r2,zero,803090 <SetupToken_Handler+0x134>
					& (ControlData.DeviceRequest.bmRequestType == 0xc0))
				bD13flags.bits.DCP_state = USBFSM4DCP_HANDSHAKE;
  803070:	01002074 	movhi	r4,129
  803074:	2111c104 	addi	r4,r4,18180
  803078:	20c00017 	ldw	r3,0(r4)
  80307c:	00bc3fc4 	movi	r2,-3841
  803080:	1884703a 	and	r2,r3,r2
  803084:	10810014 	ori	r2,r2,1024
  803088:	20800015 	stw	r2,0(r4)
  80308c:	00000706 	br	8030ac <SetupToken_Handler+0x150>
			else
				bD13flags.bits.DCP_state = USBFSM4DCP_REQUESTPROC;
  803090:	01002074 	movhi	r4,129
  803094:	2111c104 	addi	r4,r4,18180
  803098:	20c00017 	ldw	r3,0(r4)
  80309c:	00bc3fc4 	movi	r2,-3841
  8030a0:	1884703a 	and	r2,r3,r2
  8030a4:	1080c014 	ori	r2,r2,768
  8030a8:	20800015 	stw	r2,0(r4)

			LowerIRQL();
  8030ac:	0804cd80 	call	804cd8 <enable_irq>
  8030b0:	00004206 	br	8031bc <SetupToken_Handler+0x260>
		} else {
			/* set command */
			if (ControlData.DeviceRequest.wLength == 0) {
  8030b4:	00802074 	movhi	r2,129
  8030b8:	1091e104 	addi	r2,r2,18308
  8030bc:	1080020b 	ldhu	r2,8(r2)
  8030c0:	10bfffcc 	andi	r2,r2,65535
  8030c4:	1004c03a 	cmpne	r2,r2,zero
  8030c8:	10000b1e 	bne	r2,zero,8030f8 <SetupToken_Handler+0x19c>
				/* Set command  without Data stage*/
				RaiseIRQL();
  8030cc:	0804c880 	call	804c88 <disable_irq>
				ML_AcknowledgeSETUP();
  8030d0:	08035b80 	call	8035b8 <ML_AcknowledgeSETUP>
				bD13flags.bits.DCP_state = USBFSM4DCP_REQUESTPROC;
  8030d4:	01002074 	movhi	r4,129
  8030d8:	2111c104 	addi	r4,r4,18180
  8030dc:	20c00017 	ldw	r3,0(r4)
  8030e0:	00bc3fc4 	movi	r2,-3841
  8030e4:	1884703a 	and	r2,r3,r2
  8030e8:	1080c014 	ori	r2,r2,768
  8030ec:	20800015 	stw	r2,0(r4)
				LowerIRQL();
  8030f0:	0804cd80 	call	804cd8 <enable_irq>
  8030f4:	00003106 	br	8031bc <SetupToken_Handler+0x260>
			} else {
				/*
				 // Set command  with Data stage
				 // get Data Buffer
				 */
				if (ControlData.DeviceRequest.wLength <= MAX_CONTROLDATA_SIZE) {
  8030f8:	00802074 	movhi	r2,129
  8030fc:	1091e104 	addi	r2,r2,18308
  803100:	1080020b 	ldhu	r2,8(r2)
  803104:	10bfffcc 	andi	r2,r2,65535
  803108:	10800468 	cmpgeui	r2,r2,17
  80310c:	10000b1e 	bne	r2,zero,80313c <SetupToken_Handler+0x1e0>
					/* set command with OUT token */
					RaiseIRQL();
  803110:	0804c880 	call	804c88 <disable_irq>
					bD13flags.bits.DCP_state = USBFSM4DCP_DATAOUT;
  803114:	01002074 	movhi	r4,129
  803118:	2111c104 	addi	r4,r4,18180
  80311c:	20c00017 	ldw	r3,0(r4)
  803120:	00bc3fc4 	movi	r2,-3841
  803124:	1884703a 	and	r2,r3,r2
  803128:	10808014 	ori	r2,r2,512
  80312c:	20800015 	stw	r2,0(r4)
					LowerIRQL();
  803130:	0804cd80 	call	804cd8 <enable_irq>
					ML_AcknowledgeSETUP();
  803134:	08035b80 	call	8035b8 <ML_AcknowledgeSETUP>
  803138:	00002006 	br	8031bc <SetupToken_Handler+0x260>
				} else {
					RaiseIRQL();
  80313c:	0804c880 	call	804c88 <disable_irq>
					ML_AcknowledgeSETUP();
  803140:	08035b80 	call	8035b8 <ML_AcknowledgeSETUP>
					Hal4D13_StallEP0InControlWrite();
  803144:	08023d40 	call	8023d4 <Hal4D13_StallEP0InControlWrite>
					bD13flags.bits.DCP_state = USBFSM4DCP_STALL;
  803148:	01002074 	movhi	r4,129
  80314c:	2111c104 	addi	r4,r4,18180
  803150:	20c00017 	ldw	r3,0(r4)
  803154:	00bc3fc4 	movi	r2,-3841
  803158:	1884703a 	and	r2,r3,r2
  80315c:	1081c014 	ori	r2,r2,1792
  803160:	20800015 	stw	r2,0(r4)
					printf(
  803164:	00802074 	movhi	r2,129
  803168:	1091c104 	addi	r2,r2,18180
  80316c:	10800017 	ldw	r2,0(r2)
  803170:	1004d23a 	srli	r2,r2,8
  803174:	108003cc 	andi	r2,r2,15
  803178:	11403fcc 	andi	r5,r2,255
  80317c:	01002074 	movhi	r4,129
  803180:	21086e04 	addi	r4,r4,8632
  803184:	0805a200 	call	805a20 <printf>
							"bD13flags.bits.DCP_state = x%hx\n Unknow set up command\n",
							bD13flags.bits.DCP_state);
					LowerIRQL();
  803188:	0804cd80 	call	804cd8 <enable_irq>
  80318c:	00000b06 	br	8031bc <SetupToken_Handler+0x260>
				}
			}
		}
	} else {
		printf("wrong setup command\n");
  803190:	01002074 	movhi	r4,129
  803194:	21087c04 	addi	r4,r4,8688
  803198:	0805b5c0 	call	805b5c <puts>
		bD13flags.bits.At_IRQL1 = 0;
  80319c:	01002074 	movhi	r4,129
  8031a0:	2111c104 	addi	r4,r4,18180
  8031a4:	20c00017 	ldw	r3,0(r4)
  8031a8:	00bffec4 	movi	r2,-5
  8031ac:	1884703a 	and	r2,r3,r2
  8031b0:	20800015 	stw	r2,0(r4)
		LowerIRQL();
  8031b4:	0804cd80 	call	804cd8 <enable_irq>
		Chap9_StallEP0();
  8031b8:	08010780 	call	801078 <Chap9_StallEP0>
	}
}
  8031bc:	e037883a 	mov	sp,fp
  8031c0:	dfc00117 	ldw	ra,4(sp)
  8031c4:	df000017 	ldw	fp,0(sp)
  8031c8:	dec00204 	addi	sp,sp,8
  8031cc:	f800283a 	ret

008031d0 <DeviceRequest_Handler>:

void DeviceRequest_Handler(void) {
  8031d0:	defffd04 	addi	sp,sp,-12
  8031d4:	dfc00215 	stw	ra,8(sp)
  8031d8:	df000115 	stw	fp,4(sp)
  8031dc:	df000104 	addi	fp,sp,4
	UCHAR type, req;

	type = ControlData.DeviceRequest.bmRequestType & USB_REQUEST_TYPE_MASK;
  8031e0:	00802074 	movhi	r2,129
  8031e4:	1091e104 	addi	r2,r2,18308
  8031e8:	10800083 	ldbu	r2,2(r2)
  8031ec:	1080180c 	andi	r2,r2,96
  8031f0:	e0bfff45 	stb	r2,-3(fp)
	req = ControlData.DeviceRequest.bRequest & USB_REQUEST_MASK;
  8031f4:	00802074 	movhi	r2,129
  8031f8:	1091e104 	addi	r2,r2,18308
  8031fc:	108000c3 	ldbu	r2,3(r2)
  803200:	e0bfff05 	stb	r2,-4(fp)

	if ((type == USB_STANDARD_REQUEST) && (req < MAX_STANDARD_REQUEST)) {
  803204:	e0bfff43 	ldbu	r2,-3(fp)
  803208:	1004c03a 	cmpne	r2,r2,zero
  80320c:	10000c1e 	bne	r2,zero,803240 <DeviceRequest_Handler+0x70>
  803210:	e0bfff03 	ldbu	r2,-4(fp)
  803214:	10800368 	cmpgeui	r2,r2,13
  803218:	1000091e 	bne	r2,zero,803240 <DeviceRequest_Handler+0x70>
		(*StandardDeviceRequest[req])();
  80321c:	e0bfff03 	ldbu	r2,-4(fp)
  803220:	00c02074 	movhi	r3,129
  803224:	18cac104 	addi	r3,r3,11012
  803228:	1085883a 	add	r2,r2,r2
  80322c:	1085883a 	add	r2,r2,r2
  803230:	10c5883a 	add	r2,r2,r3
  803234:	10800017 	ldw	r2,0(r2)
  803238:	103ee83a 	callr	r2
	UCHAR type, req;

	type = ControlData.DeviceRequest.bmRequestType & USB_REQUEST_TYPE_MASK;
	req = ControlData.DeviceRequest.bRequest & USB_REQUEST_MASK;

	if ((type == USB_STANDARD_REQUEST) && (req < MAX_STANDARD_REQUEST)) {
  80323c:	00001006 	br	803280 <DeviceRequest_Handler+0xb0>
		(*StandardDeviceRequest[req])();
	} else if ((type == USB_CLASS_REQUEST) && (req < MAX_CLASS_REQUEST)) {
  803240:	e0bfff43 	ldbu	r2,-3(fp)
  803244:	10800818 	cmpnei	r2,r2,32
  803248:	10000c1e 	bne	r2,zero,80327c <DeviceRequest_Handler+0xac>
  80324c:	e0bfff03 	ldbu	r2,-4(fp)
  803250:	108002e8 	cmpgeui	r2,r2,11
  803254:	1000091e 	bne	r2,zero,80327c <DeviceRequest_Handler+0xac>
		(*ClassDeviceRequest[req])();
  803258:	e0bfff03 	ldbu	r2,-4(fp)
  80325c:	00c02074 	movhi	r3,129
  803260:	18cae304 	addi	r3,r3,11148
  803264:	1085883a 	add	r2,r2,r2
  803268:	1085883a 	add	r2,r2,r2
  80326c:	10c5883a 	add	r2,r2,r3
  803270:	10800017 	ldw	r2,0(r2)
  803274:	103ee83a 	callr	r2
	type = ControlData.DeviceRequest.bmRequestType & USB_REQUEST_TYPE_MASK;
	req = ControlData.DeviceRequest.bRequest & USB_REQUEST_MASK;

	if ((type == USB_STANDARD_REQUEST) && (req < MAX_STANDARD_REQUEST)) {
		(*StandardDeviceRequest[req])();
	} else if ((type == USB_CLASS_REQUEST) && (req < MAX_CLASS_REQUEST)) {
  803278:	00000106 	br	803280 <DeviceRequest_Handler+0xb0>
		(*ClassDeviceRequest[req])();
	} else if ((type == USB_VENDOR_REQUEST) && (req < MAX_VENDOR_REQUEST)) //Never used
		(*VendorDeviceRequest[req])();
	else {
		Chap9_StallEP0();
  80327c:	08010780 	call	801078 <Chap9_StallEP0>
	}
}
  803280:	e037883a 	mov	sp,fp
  803284:	dfc00117 	ldw	ra,4(sp)
  803288:	df000017 	ldw	fp,0(sp)
  80328c:	dec00204 	addi	sp,sp,8
  803290:	f800283a 	ret

00803294 <help_devreq>:

void help_devreq(UCHAR type, UCHAR req) {
  803294:	defffb04 	addi	sp,sp,-20
  803298:	dfc00415 	stw	ra,16(sp)
  80329c:	df000315 	stw	fp,12(sp)
  8032a0:	df000304 	addi	fp,sp,12
  8032a4:	e13ffe05 	stb	r4,-8(fp)
  8032a8:	e17fff05 	stb	r5,-4(fp)
	UCHAR typ = type;
  8032ac:	e0bffe03 	ldbu	r2,-8(fp)
  8032b0:	e0bffd05 	stb	r2,-12(fp)
	typ >>= 5;
  8032b4:	e0bffd03 	ldbu	r2,-12(fp)
  8032b8:	1004d17a 	srli	r2,r2,5
  8032bc:	e0bffd05 	stb	r2,-12(fp)

	if (type == USB_STANDARD_REQUEST) {
  8032c0:	e0bffe03 	ldbu	r2,-8(fp)
  8032c4:	1004c03a 	cmpne	r2,r2,zero
  8032c8:	1000121e 	bne	r2,zero,803314 <help_devreq+0x80>
		printf("Request Type = %s, Request = %s.\n",
  8032cc:	e0bffd03 	ldbu	r2,-12(fp)
  8032d0:	00c02074 	movhi	r3,129
  8032d4:	18cad204 	addi	r3,r3,11080
  8032d8:	1085883a 	add	r2,r2,r2
  8032dc:	1085883a 	add	r2,r2,r2
  8032e0:	10c5883a 	add	r2,r2,r3
  8032e4:	11400017 	ldw	r5,0(r2)
  8032e8:	e0bfff03 	ldbu	r2,-4(fp)
  8032ec:	00c02074 	movhi	r3,129
  8032f0:	18cad604 	addi	r3,r3,11096
  8032f4:	1085883a 	add	r2,r2,r2
  8032f8:	1085883a 	add	r2,r2,r2
  8032fc:	10c5883a 	add	r2,r2,r3
  803300:	11800017 	ldw	r6,0(r2)
  803304:	01002074 	movhi	r4,129
  803308:	21088104 	addi	r4,r4,8708
  80330c:	0805a200 	call	805a20 <printf>
  803310:	00002606 	br	8033ac <help_devreq+0x118>
				_NAME_USB_REQUEST_TYPE[typ], _NAME_USB_STANDARD_REQUEST[req]);
	} else if (type == USB_CLASS_REQUEST) {
  803314:	e0bffe03 	ldbu	r2,-8(fp)
  803318:	10800818 	cmpnei	r2,r2,32
  80331c:	1000121e 	bne	r2,zero,803368 <help_devreq+0xd4>
		printf("Request Type = %s, Request = %s.\n",
  803320:	e0bffd03 	ldbu	r2,-12(fp)
  803324:	00c02074 	movhi	r3,129
  803328:	18cad204 	addi	r3,r3,11080
  80332c:	1085883a 	add	r2,r2,r2
  803330:	1085883a 	add	r2,r2,r2
  803334:	10c5883a 	add	r2,r2,r3
  803338:	11400017 	ldw	r5,0(r2)
  80333c:	e0bfff03 	ldbu	r2,-4(fp)
  803340:	00c02074 	movhi	r3,129
  803344:	18caef04 	addi	r3,r3,11196
  803348:	1085883a 	add	r2,r2,r2
  80334c:	1085883a 	add	r2,r2,r2
  803350:	10c5883a 	add	r2,r2,r3
  803354:	11800017 	ldw	r6,0(r2)
  803358:	01002074 	movhi	r4,129
  80335c:	21088104 	addi	r4,r4,8708
  803360:	0805a200 	call	805a20 <printf>
  803364:	00001106 	br	8033ac <help_devreq+0x118>
				_NAME_USB_REQUEST_TYPE[typ], _NAME_USB_CLASS_REQUEST[req]);
	} else {
		if (bD13flags.bits.verbose)
  803368:	00802074 	movhi	r2,129
  80336c:	1091c104 	addi	r2,r2,18180
  803370:	10800017 	ldw	r2,0(r2)
  803374:	1080402c 	andhi	r2,r2,256
  803378:	1005003a 	cmpeq	r2,r2,zero
  80337c:	10000b1e 	bne	r2,zero,8033ac <help_devreq+0x118>
			printf("Request Type = %s, bRequest = 0x%x.\n",
  803380:	e0bffd03 	ldbu	r2,-12(fp)
  803384:	00c02074 	movhi	r3,129
  803388:	18cad204 	addi	r3,r3,11080
  80338c:	1085883a 	add	r2,r2,r2
  803390:	1085883a 	add	r2,r2,r2
  803394:	10c5883a 	add	r2,r2,r3
  803398:	11400017 	ldw	r5,0(r2)
  80339c:	e1bfff03 	ldbu	r6,-4(fp)
  8033a0:	01002074 	movhi	r4,129
  8033a4:	21088a04 	addi	r4,r4,8744
  8033a8:	0805a200 	call	805a20 <printf>
					_NAME_USB_REQUEST_TYPE[typ], req);
	}
}
  8033ac:	e037883a 	mov	sp,fp
  8033b0:	dfc00117 	ldw	ra,4(sp)
  8033b4:	df000017 	ldw	fp,0(sp)
  8033b8:	dec00204 	addi	sp,sp,8
  8033bc:	f800283a 	ret

008033c0 <disconnect_USB_controller>:

void disconnect_USB_controller(void) {
  8033c0:	defffe04 	addi	sp,sp,-8
  8033c4:	dfc00115 	stw	ra,4(sp)
  8033c8:	df000015 	stw	fp,0(sp)
  8033cc:	d839883a 	mov	fp,sp
	printf("disconnect\n");
  8033d0:	01002074 	movhi	r4,129
  8033d4:	21089404 	addi	r4,r4,8784
  8033d8:	0805b5c0 	call	805b5c <puts>
	Hal4D13_SetDevConfig(
  8033dc:	010c0104 	movi	r4,12292
  8033e0:	08014900 	call	801490 <Hal4D13_SetDevConfig>
			D13REG_DEVCNFG_NOLAZYCLOCK | D13REG_DEVCNFG_PWROFF
					| D13REG_DEVCNFG_CLOCKRUNNING);
	Hal4D13_SetMode(D13REG_MODE_INT_EN);
  8033e4:	01000204 	movi	r4,8
  8033e8:	08014d00 	call	8014d0 <Hal4D13_SetMode>
}
  8033ec:	e037883a 	mov	sp,fp
  8033f0:	dfc00117 	ldw	ra,4(sp)
  8033f4:	df000017 	ldw	fp,0(sp)
  8033f8:	dec00204 	addi	sp,sp,8
  8033fc:	f800283a 	ret

00803400 <connect_USB_controller>:

void connect_USB_controller(void) {
  803400:	defffe04 	addi	sp,sp,-8
  803404:	dfc00115 	stw	ra,4(sp)
  803408:	df000015 	stw	fp,0(sp)
  80340c:	d839883a 	mov	fp,sp
	RaiseIRQL(); //Disconnect irq
  803410:	0804c880 	call	804c88 <disable_irq>
	printf("connect_USB\n");
  803414:	01002074 	movhi	r4,129
  803418:	21089704 	addi	r4,r4,8796
  80341c:	0805b5c0 	call	805b5c <puts>
	bD13flags.value = 0; /* reset event flags*/
  803420:	00802074 	movhi	r2,129
  803424:	1091c104 	addi	r2,r2,18180
  803428:	10000015 	stw	zero,0(r2)
	bD13flags.bits.DCP_state = USBFSM4DCP_IDLE;
  80342c:	01002074 	movhi	r4,129
  803430:	2111c104 	addi	r4,r4,18180
  803434:	20c00017 	ldw	r3,0(r4)
  803438:	00bc3fc4 	movi	r2,-3841
  80343c:	1884703a 	and	r2,r3,r2
  803440:	20800015 	stw	r2,0(r4)
	config_endpoints();
  803444:	08034680 	call	803468 <config_endpoints>

	LowerIRQL();
  803448:	0804cd80 	call	804cd8 <enable_irq>

	Hal4D13_SetMode(D13REG_MODE_SOFTCONNECT
  80344c:	01002244 	movi	r4,137
  803450:	08014d00 	call	8014d0 <Hal4D13_SetMode>
				//| D13REG_MODE_OFFGOODLNK
				//| D13REG_MODE_DBG
				| D13REG_MODE_INT_EN
				//| D13REG_MODE_SUSPND
	);
}
  803454:	e037883a 	mov	sp,fp
  803458:	dfc00117 	ldw	ra,4(sp)
  80345c:	df000017 	ldw	fp,0(sp)
  803460:	dec00204 	addi	sp,sp,8
  803464:	f800283a 	ret

00803468 <config_endpoints>:

void config_endpoints(void) {
  803468:	defffe04 	addi	sp,sp,-8
  80346c:	dfc00115 	stw	ra,4(sp)
  803470:	df000015 	stw	fp,0(sp)
  803474:	d839883a 	mov	fp,sp
    /*Control Endpoint*/
	//printf("CONFIG\n");
    Hal4D13_SetEndpointConfig(D13REG_EPCNFG_FIFO_EN|D13REG_EPCNFG_NONISOSZ_64,EPINDEX4EP0_CONTROL_OUT);
  803478:	010020c4 	movi	r4,131
  80347c:	000b883a 	mov	r5,zero
  803480:	08021a00 	call	8021a0 <Hal4D13_SetEndpointConfig>
    Hal4D13_SetEndpointConfig(D13REG_EPCNFG_FIFO_EN|D13REG_EPCNFG_IN_EN|D13REG_EPCNFG_NONISOSZ_64,EPINDEX4EP0_CONTROL_IN);
  803484:	010030c4 	movi	r4,195
  803488:	01400044 	movi	r5,1
  80348c:	08021a00 	call	8021a0 <Hal4D13_SetEndpointConfig>

    // ENDP01 : HID Keyboard IN
    Hal4D13_SetEndpointConfig(D13REG_EPCNFG_FIFO_EN| ENDPOINT_DIR_IN | D13REG_EPCNFG_DBLBUF_EN | ENDPOINT_NOT_ISO | D13REG_EPCNFG_NONISOSZ_8, EPINDEX4EP01);
  803490:	01003804 	movi	r4,224
  803494:	01400084 	movi	r5,2
  803498:	08021a00 	call	8021a0 <Hal4D13_SetEndpointConfig>

    /*DISABLED*/
    Hal4D13_SetEndpointConfig(/*D13REG_EPCNFG_FIFO_EN| */ D13REG_EPCNFG_DBLBUF_EN| D13REG_EPCNFG_IN_EN|D13REG_EPCNFG_NONISOSZ_8,EPINDEX4EP02);
  80349c:	01001804 	movi	r4,96
  8034a0:	014000c4 	movi	r5,3
  8034a4:	08021a00 	call	8021a0 <Hal4D13_SetEndpointConfig>
    Hal4D13_SetEndpointConfig(/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_DBLBUF_EN|D13REG_EPCNFG_NONISOSZ_64,EPINDEX4EP03);
  8034a8:	010008c4 	movi	r4,35
  8034ac:	01400104 	movi	r5,4
  8034b0:	08021a00 	call	8021a0 <Hal4D13_SetEndpointConfig>
    Hal4D13_SetEndpointConfig(/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_DBLBUF_EN|D13REG_EPCNFG_IN_EN|D13REG_EPCNFG_NONISOSZ_64,EPINDEX4EP04);
  8034b4:	010018c4 	movi	r4,99
  8034b8:	01400144 	movi	r5,5
  8034bc:	08021a00 	call	8021a0 <Hal4D13_SetEndpointConfig>
    Hal4D13_SetEndpointConfig(/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_DBLBUF_EN|D13REG_EPCNFG_ISOSZ_512|D13REG_EPCNFG_ISO_EN,EPINDEX4EP05);
  8034c0:	01000ec4 	movi	r4,59
  8034c4:	01400184 	movi	r5,6
  8034c8:	08021a00 	call	8021a0 <Hal4D13_SetEndpointConfig>
    Hal4D13_SetEndpointConfig(/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_DBLBUF_EN|D13REG_EPCNFG_ISOSZ_512|D13REG_EPCNFG_ISO_EN|D13REG_EPCNFG_IN_EN,EPINDEX4EP06);
  8034cc:	01001ec4 	movi	r4,123
  8034d0:	014001c4 	movi	r5,7
  8034d4:	08021a00 	call	8021a0 <Hal4D13_SetEndpointConfig>
    Hal4D13_SetEndpointConfig(/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_DBLBUF_EN|D13REG_EPCNFG_ISOSZ_16|D13REG_EPCNFG_ISO_EN,EPINDEX4EP07);
  8034d8:	01000c04 	movi	r4,48
  8034dc:	01400204 	movi	r5,8
  8034e0:	08021a00 	call	8021a0 <Hal4D13_SetEndpointConfig>
    Hal4D13_SetEndpointConfig(/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_IN_EN|D13REG_EPCNFG_DBLBUF_EN|D13REG_EPCNFG_ISOSZ_16|D13REG_EPCNFG_ISO_EN,EPINDEX4EP08);
  8034e4:	01001c04 	movi	r4,112
  8034e8:	01400244 	movi	r5,9
  8034ec:	08021a00 	call	8021a0 <Hal4D13_SetEndpointConfig>
    Hal4D13_SetEndpointConfig(/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_DBLBUF_EN|D13REG_EPCNFG_ISOSZ_16|D13REG_EPCNFG_ISO_EN,EPINDEX4EP09);
  8034f0:	01000c04 	movi	r4,48
  8034f4:	01400284 	movi	r5,10
  8034f8:	08021a00 	call	8021a0 <Hal4D13_SetEndpointConfig>
    Hal4D13_SetEndpointConfig(/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_IN_EN|D13REG_EPCNFG_DBLBUF_EN|D13REG_EPCNFG_ISOSZ_16|D13REG_EPCNFG_ISO_EN,EPINDEX4EP0A);
  8034fc:	01001c04 	movi	r4,112
  803500:	014002c4 	movi	r5,11
  803504:	08021a00 	call	8021a0 <Hal4D13_SetEndpointConfig>
    Hal4D13_SetEndpointConfig(/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_DBLBUF_EN|D13REG_EPCNFG_ISOSZ_64|D13REG_EPCNFG_ISO_EN,EPINDEX4EP0B);
  803508:	01000cc4 	movi	r4,51
  80350c:	01400304 	movi	r5,12
  803510:	08021a00 	call	8021a0 <Hal4D13_SetEndpointConfig>
    Hal4D13_SetEndpointConfig(/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_IN_EN|D13REG_EPCNFG_DBLBUF_EN|D13REG_EPCNFG_ISOSZ_64|D13REG_EPCNFG_ISO_EN,EPINDEX4EP0C);
  803514:	01001cc4 	movi	r4,115
  803518:	01400344 	movi	r5,13
  80351c:	08021a00 	call	8021a0 <Hal4D13_SetEndpointConfig>
    Hal4D13_SetEndpointConfig(/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_DBLBUF_EN|D13REG_EPCNFG_ISOSZ_64|D13REG_EPCNFG_ISO_EN,EPINDEX4EP0D);
  803520:	01000cc4 	movi	r4,51
  803524:	01400384 	movi	r5,14
  803528:	08021a00 	call	8021a0 <Hal4D13_SetEndpointConfig>
    Hal4D13_SetEndpointConfig(/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_IN_EN|D13REG_EPCNFG_DBLBUF_EN|D13REG_EPCNFG_ISOSZ_64|D13REG_EPCNFG_ISO_EN,EPINDEX4EP0E);
  80352c:	01001cc4 	movi	r4,115
  803530:	014003c4 	movi	r5,15
  803534:	08021a00 	call	8021a0 <Hal4D13_SetEndpointConfig>
    /*DISABLED*/


    /*Set interrupt configuration*/
    Hal4D13_SetIntEnable(
  803538:	0101c1c4 	movi	r4,1799
  80353c:	0801cac0 	call	801cac <Hal4D13_SetIntEnable>
                        |D13REG_INTSRC_RESUME
                        |D13REG_INTSRC_BUSRESET
    );

    /*Set Hardware Configuration*/
    Hal4D13_SetDevConfig(D13REG_DEVCNFG_NOLAZYCLOCK
  803540:	0108d004 	movi	r4,9024
  803544:	08014900 	call	801490 <Hal4D13_SetDevConfig>
                        |D13REG_DEVCNFG_DMARQPOL
//            			|D13REG_DEVCNFG_EXPULLUP
);


}
  803548:	e037883a 	mov	sp,fp
  80354c:	dfc00117 	ldw	ra,4(sp)
  803550:	df000017 	ldw	fp,0(sp)
  803554:	dec00204 	addi	sp,sp,8
  803558:	f800283a 	ret

0080355c <reconnect_USB_controller>:

void reconnect_USB_controller(void) {
  80355c:	defffe04 	addi	sp,sp,-8
  803560:	dfc00115 	stw	ra,4(sp)
  803564:	df000015 	stw	fp,0(sp)
  803568:	d839883a 	mov	fp,sp
	disconnect_USB_controller();
  80356c:	08033c00 	call	8033c0 <disconnect_USB_controller>
	connect_USB_controller();
  803570:	08034000 	call	803400 <connect_USB_controller>
}
  803574:	e037883a 	mov	sp,fp
  803578:	dfc00117 	ldw	ra,4(sp)
  80357c:	df000017 	ldw	fp,0(sp)
  803580:	dec00204 	addi	sp,sp,8
  803584:	f800283a 	ret

00803588 <change_suspend_state>:

void change_suspend_state(void) {
  803588:	defffe04 	addi	sp,sp,-8
  80358c:	dfc00115 	stw	ra,4(sp)
  803590:	df000015 	stw	fp,0(sp)
  803594:	d839883a 	mov	fp,sp
	printf("SUSPEND CHANGE \n");
  803598:	01002074 	movhi	r4,129
  80359c:	21089a04 	addi	r4,r4,8808
  8035a0:	0805b5c0 	call	805b5c <puts>
}
  8035a4:	e037883a 	mov	sp,fp
  8035a8:	dfc00117 	ldw	ra,4(sp)
  8035ac:	df000017 	ldw	fp,0(sp)
  8035b0:	dec00204 	addi	sp,sp,8
  8035b4:	f800283a 	ret

008035b8 <ML_AcknowledgeSETUP>:

void ML_AcknowledgeSETUP(void) {
  8035b8:	defffe04 	addi	sp,sp,-8
  8035bc:	dfc00115 	stw	ra,4(sp)
  8035c0:	df000015 	stw	fp,0(sp)
  8035c4:	d839883a 	mov	fp,sp

	if (Hal4D13_IsSetupPktInvalid() || ControlData.Abort) {
  8035c8:	080244c0 	call	80244c <Hal4D13_IsSetupPktInvalid>
  8035cc:	10803fcc 	andi	r2,r2,255
  8035d0:	1004c03a 	cmpne	r2,r2,zero
  8035d4:	10000a1e 	bne	r2,zero,803600 <ML_AcknowledgeSETUP+0x48>
  8035d8:	00802074 	movhi	r2,129
  8035dc:	1091e104 	addi	r2,r2,18308
  8035e0:	10800003 	ldbu	r2,0(r2)
  8035e4:	10803fcc 	andi	r2,r2,255
  8035e8:	1005003a 	cmpeq	r2,r2,zero
  8035ec:	1000011e 	bne	r2,zero,8035f4 <ML_AcknowledgeSETUP+0x3c>
		return;
  8035f0:	00000306 	br	803600 <ML_AcknowledgeSETUP+0x48>
	}

	Hal4D13_AcknowledgeSETUP();
  8035f4:	08016b00 	call	8016b0 <Hal4D13_AcknowledgeSETUP>
	Hal4D13_ClearBuffer(EPINDEX4EP0_CONTROL_OUT);
  8035f8:	0009883a 	mov	r4,zero
  8035fc:	08016dc0 	call	8016dc <Hal4D13_ClearBuffer>
}
  803600:	e037883a 	mov	sp,fp
  803604:	dfc00117 	ldw	ra,4(sp)
  803608:	df000017 	ldw	fp,0(sp)
  80360c:	dec00204 	addi	sp,sp,8
  803610:	f800283a 	ret

00803614 <ML_Reserved>:

void ML_Reserved(void) {
  803614:	defffe04 	addi	sp,sp,-8
  803618:	dfc00115 	stw	ra,4(sp)
  80361c:	df000015 	stw	fp,0(sp)
  803620:	d839883a 	mov	fp,sp
	Hal4D13_ClearBuffer(EPINDEX4EP0_CONTROL_OUT);
  803624:	0009883a 	mov	r4,zero
  803628:	08016dc0 	call	8016dc <Hal4D13_ClearBuffer>
	printf("Reserved\n");
  80362c:	01002074 	movhi	r4,129
  803630:	21081704 	addi	r4,r4,8284
  803634:	0805b5c0 	call	805b5c <puts>
}
  803638:	e037883a 	mov	sp,fp
  80363c:	dfc00117 	ldw	ra,4(sp)
  803640:	df000017 	ldw	fp,0(sp)
  803644:	dec00204 	addi	sp,sp,8
  803648:	f800283a 	ret

0080364c <CHECK_CHIP_ID>:

unsigned short CHECK_CHIP_ID(void) {
  80364c:	defffb04 	addi	sp,sp,-20
  803650:	dfc00415 	stw	ra,16(sp)
  803654:	df000315 	stw	fp,12(sp)
  803658:	df000304 	addi	fp,sp,12
	unsigned short CHIP_ID;
	unsigned char LOW_ID, HIGH_ID;

	CHIP_ID = Hal4D13_ReadChipID();
  80365c:	08020b80 	call	8020b8 <Hal4D13_ReadChipID>
  803660:	e0bffd8d 	sth	r2,-10(fp)
	LOW_ID = (unsigned char) CHIP_ID;
  803664:	e0bffd8b 	ldhu	r2,-10(fp)
  803668:	e0bffd45 	stb	r2,-11(fp)
	HIGH_ID = (unsigned char) (CHIP_ID >> 8);
  80366c:	e0bffd8b 	ldhu	r2,-10(fp)
  803670:	1004d23a 	srli	r2,r2,8
  803674:	e0bffd05 	stb	r2,-12(fp)

	switch (HIGH_ID) {
  803678:	e0bffd03 	ldbu	r2,-12(fp)
  80367c:	e0bfff15 	stw	r2,-4(fp)
  803680:	e0ffff17 	ldw	r3,-4(fp)
  803684:	18800da0 	cmpeqi	r2,r3,54
  803688:	10000d1e 	bne	r2,zero,8036c0 <CHECK_CHIP_ID+0x74>
  80368c:	e0ffff17 	ldw	r3,-4(fp)
  803690:	18801860 	cmpeqi	r2,r3,97
  803694:	1000011e 	bne	r2,zero,80369c <CHECK_CHIP_ID+0x50>
  803698:	00001206 	br	8036e4 <CHECK_CHIP_ID+0x98>
	case 0x61: {

		printf("               CHIP ID =0x%04x\n\n", CHIP_ID);
  80369c:	e17ffd8b 	ldhu	r5,-10(fp)
  8036a0:	01002074 	movhi	r4,129
  8036a4:	21089e04 	addi	r4,r4,8824
  8036a8:	0805a200 	call	805a20 <printf>
		CHIP_ID = 0x1161;
  8036ac:	00845844 	movi	r2,4449
  8036b0:	e0bffd8d 	sth	r2,-10(fp)
		return CHIP_ID;
  8036b4:	e0bffd8b 	ldhu	r2,-10(fp)
  8036b8:	e0bffe15 	stw	r2,-8(fp)
  8036bc:	00000f06 	br	8036fc <CHECK_CHIP_ID+0xb0>
		break;
	}

	case 0x36: {
		printf("               CHIP ID =0x%04x\n\n", CHIP_ID);
  8036c0:	e17ffd8b 	ldhu	r5,-10(fp)
  8036c4:	01002074 	movhi	r4,129
  8036c8:	21089e04 	addi	r4,r4,8824
  8036cc:	0805a200 	call	805a20 <printf>
		CHIP_ID = 0x1362;
  8036d0:	0084d884 	movi	r2,4962
  8036d4:	e0bffd8d 	sth	r2,-10(fp)
		return CHIP_ID;
  8036d8:	e0fffd8b 	ldhu	r3,-10(fp)
  8036dc:	e0fffe15 	stw	r3,-8(fp)
  8036e0:	00000606 	br	8036fc <CHECK_CHIP_ID+0xb0>
		break;
	}

	default: {
		printf("               UNKNOWN CHIP ID =0x%04x\n\n", CHIP_ID);
  8036e4:	e17ffd8b 	ldhu	r5,-10(fp)
  8036e8:	01002074 	movhi	r4,129
  8036ec:	2108a704 	addi	r4,r4,8860
  8036f0:	0805a200 	call	805a20 <printf>
		return CHIP_ID;
  8036f4:	e0bffd8b 	ldhu	r2,-10(fp)
  8036f8:	e0bffe15 	stw	r2,-8(fp)
  8036fc:	e0bffe17 	ldw	r2,-8(fp)
		break;
	}

	}

}
  803700:	e037883a 	mov	sp,fp
  803704:	dfc00117 	ldw	ra,4(sp)
  803708:	df000017 	ldw	fp,0(sp)
  80370c:	dec00204 	addi	sp,sp,8
  803710:	f800283a 	ret

00803714 <main>:
IO_REQUEST idata ioRequest;
HID_SETTINGS hid_settings;
HID_KEYS_REPORT new_report;
//-------------------------------------------------------------------------

int main() {
  803714:	deff0904 	addi	sp,sp,-988
  803718:	dfc0f615 	stw	ra,984(sp)
  80371c:	df00f515 	stw	fp,980(sp)
  803720:	dc00f415 	stw	r16,976(sp)
  803724:	df00f404 	addi	fp,sp,976

	unsigned p_error;
	alt_up_rs232_dev* rs232_dev;

	// open the RS232 UART port
	rs232_dev = alt_up_rs232_open_dev("/dev/rs232_0");
  803728:	01002074 	movhi	r4,129
  80372c:	2108b204 	addi	r4,r4,8904
  803730:	0810bf80 	call	810bf8 <alt_up_rs232_open_dev>
  803734:	e0bf2715 	stw	r2,-868(fp)
	if (rs232_dev == NULL)
  803738:	e0bf2717 	ldw	r2,-868(fp)
  80373c:	1004c03a 	cmpne	r2,r2,zero
  803740:	1000041e 	bne	r2,zero,803754 <main+0x40>
		alt_printf("Error: could not open RS232 UART\n");
  803744:	01002074 	movhi	r4,129
  803748:	2108b604 	addi	r4,r4,8920
  80374c:	080f5180 	call	80f518 <alt_printf>
  803750:	00000306 	br	803760 <main+0x4c>
	else
		alt_printf("Opened RS232 UART device\n");
  803754:	01002074 	movhi	r4,129
  803758:	2108bf04 	addi	r4,r4,8956
  80375c:	080f5180 	call	80f518 <alt_printf>
	alt_up_rs232_enable_read_interrupt(rs232_dev);
  803760:	e13f2717 	ldw	r4,-868(fp)
  803764:	08108a00 	call	8108a0 <alt_up_rs232_enable_read_interrupt>

	//Variables for cycle control
	int streamStart = 0;
  803768:	e03f2615 	stw	zero,-872(fp)
	char buffer[8];
	int inc_i = 0;
  80376c:	e03f2515 	stw	zero,-876(fp)
	int clearCounter;
	int cycleCount = 0;
  803770:	e03f2315 	stw	zero,-884(fp)
	int count;
	int countStart = 0;
  803774:	e03f2115 	stw	zero,-892(fp)
	int counti = 0;
  803778:	e03f2015 	stw	zero,-896(fp)

	int initStart = 0;
  80377c:	e03f1f15 	stw	zero,-900(fp)
	int initCounter = 0;
  803780:	e03f1e15 	stw	zero,-904(fp)

	//Variables to hold velocity calculations
	double vOldx = 0;
  803784:	e03f1c15 	stw	zero,-912(fp)
  803788:	e03f1d15 	stw	zero,-908(fp)
	double vOldy = 0;
  80378c:	e03f1a15 	stw	zero,-920(fp)
  803790:	e03f1b15 	stw	zero,-916(fp)
	double vNewy = 0;
  803794:	e03f1815 	stw	zero,-928(fp)
  803798:	e03f1915 	stw	zero,-924(fp)
	double vOldz = 0;
  80379c:	e03f1615 	stw	zero,-936(fp)
  8037a0:	e03f1715 	stw	zero,-932(fp)
	double vNewz = 0;
  8037a4:	e03f1415 	stw	zero,-944(fp)
  8037a8:	e03f1515 	stw	zero,-940(fp)

	int VAveragex = 0;
  8037ac:	e03f1315 	stw	zero,-948(fp)
	int VAveragey = 0;
  8037b0:	e03f1215 	stw	zero,-952(fp)
	int VAveragez = 0;
  8037b4:	e03f1115 	stw	zero,-956(fp)

	//Variable to hold acceleration data
	int ay[100];
	int az[100];

	int initax = 0;
  8037b8:	e03f1015 	stw	zero,-960(fp)
	int initay = 0;
  8037bc:	e03f0f15 	stw	zero,-964(fp)
	int initaz = 0;
  8037c0:	e03f0e15 	stw	zero,-968(fp)

	//Variables that represent glove movement
	int gloveOrientation = 0;
  8037c4:	e03f0d15 	stw	zero,-972(fp)
	int movementDirection = 0;
  8037c8:	e03f0c15 	stw	zero,-976(fp)
	/* Code from demonstration project: Begin
	 * Function names changed for clarity.
	 */

	/* Configure ISP1362 chip */
	disable_irq();
  8037cc:	0804c880 	call	804c88 <disable_irq>
	disconnect_USB_controller();
  8037d0:	08033c00 	call	8033c0 <disconnect_USB_controller>
	usleep(1000000);
  8037d4:	010003f4 	movhi	r4,15
  8037d8:	21109004 	addi	r4,r4,16960
  8037dc:	080fa680 	call	80fa68 <usleep>
	Hal4D13_ResetDevice();
  8037e0:	08014240 	call	801424 <Hal4D13_ResetDevice>
	hid_settings.state = reset; // Not from example project.
  8037e4:	00802074 	movhi	r2,129
  8037e8:	1091c704 	addi	r2,r2,18204
  8037ec:	10000015 	stw	zero,0(r2)

	/* Set state machine to reset values */
	bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE = 1;
  8037f0:	d0a01e03 	ldbu	r2,-32648(gp)
  8037f4:	10800054 	ori	r2,r2,1
  8037f8:	d0a01e05 	stb	r2,-32648(gp)
	bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 0;
  8037fc:	d0e01e03 	ldbu	r3,-32648(gp)
  803800:	00bfff44 	movi	r2,-3
  803804:	1884703a 	and	r2,r3,r2
  803808:	d0a01e05 	stb	r2,-32648(gp)
	bUSBCheck_Device_State.State_bits.DEVICE_CONFIGURATION_STATE = 0;
  80380c:	d0e01e03 	ldbu	r3,-32648(gp)
  803810:	00bffec4 	movi	r2,-5
  803814:	1884703a 	and	r2,r3,r2
  803818:	d0a01e05 	stb	r2,-32648(gp)
	bUSBCheck_Device_State.State_bits.RESET_BITS = 0;
  80381c:	00802074 	movhi	r2,129
  803820:	1091c884 	addi	r2,r2,18210
  803824:	10000005 	stb	zero,0(r2)

	usleep(1000000);
  803828:	010003f4 	movhi	r4,15
  80382c:	21109004 	addi	r4,r4,16960
  803830:	080fa680 	call	80fa68 <usleep>
	reconnect_USB_controller();
  803834:	080355c0 	call	80355c <reconnect_USB_controller>
	CHECK_CHIP_ID(); //Checks chip ID and prints it to console.
  803838:	080364c0 	call	80364c <CHECK_CHIP_ID>
	Hal4D13_AcquireD13(USB_0_BASE, (void*) usb_isr); //Registers main ISR to USB component interrupt
  80383c:	01000804 	movi	r4,32
  803840:	01402034 	movhi	r5,128
  803844:	2949d804 	addi	r5,r5,10080
  803848:	08013e80 	call	8013e8 <Hal4D13_AcquireD13>
	enable_irq();
  80384c:	0804cd80 	call	804cd8 <enable_irq>

	/* Code from demonstration project: End */

	/* Initialise HID report structures to zero */
	new_report.modifier = 0x00;
  803850:	d0201805 	stb	zero,-32672(gp)
	new_report.reserved = 0x00;
  803854:	00802074 	movhi	r2,129
  803858:	1091c244 	addi	r2,r2,18185
  80385c:	10000005 	stb	zero,0(r2)
	for (i = 0; i < 6; i++) {
  803860:	e03f2a15 	stw	zero,-856(fp)
  803864:	00000806 	br	803888 <main+0x174>
		new_report.keycode[i] = 0x00;
  803868:	e0ff2a17 	ldw	r3,-856(fp)
  80386c:	00802074 	movhi	r2,129
  803870:	1091c284 	addi	r2,r2,18186
  803874:	10c5883a 	add	r2,r2,r3
  803878:	10000005 	stb	zero,0(r2)
	/* Code from demonstration project: End */

	/* Initialise HID report structures to zero */
	new_report.modifier = 0x00;
	new_report.reserved = 0x00;
	for (i = 0; i < 6; i++) {
  80387c:	e0bf2a17 	ldw	r2,-856(fp)
  803880:	10800044 	addi	r2,r2,1
  803884:	e0bf2a15 	stw	r2,-856(fp)
  803888:	e0bf2a17 	ldw	r2,-856(fp)
  80388c:	10800190 	cmplti	r2,r2,6
  803890:	103ff51e 	bne	r2,zero,803868 <main+0x154>
		new_report.keycode[i] = 0x00;
	}

	old_report.modifier = 0x00;
  803894:	e03f2bc5 	stb	zero,-849(fp)
	old_report.reserved = 0x00;
  803898:	e03f2c05 	stb	zero,-848(fp)
	for (i = 0; i < 6; i++) {
  80389c:	e03f2a15 	stw	zero,-856(fp)
  8038a0:	00000706 	br	8038c0 <main+0x1ac>
		old_report.keycode[i] = 0x00;
  8038a4:	e0ff2a17 	ldw	r3,-856(fp)
  8038a8:	e0bf2c44 	addi	r2,fp,-847
  8038ac:	10c5883a 	add	r2,r2,r3
  8038b0:	10000005 	stb	zero,0(r2)
		new_report.keycode[i] = 0x00;
	}

	old_report.modifier = 0x00;
	old_report.reserved = 0x00;
	for (i = 0; i < 6; i++) {
  8038b4:	e0bf2a17 	ldw	r2,-856(fp)
  8038b8:	10800044 	addi	r2,r2,1
  8038bc:	e0bf2a15 	stw	r2,-856(fp)
  8038c0:	e0bf2a17 	ldw	r2,-856(fp)
  8038c4:	10800190 	cmplti	r2,r2,6
  8038c8:	103ff61e 	bne	r2,zero,8038a4 <main+0x190>
		old_report.keycode[i] = 0x00;
	}

	gesture = GESTURE_NULL;
  8038cc:	e03f2b05 	stb	zero,-852(fp)
	bufferAvailable = TRUE;
  8038d0:	00800044 	movi	r2,1
  8038d4:	e0bf2b85 	stb	r2,-850(fp)
  8038d8:	00000006 	br	8038dc <main+0x1c8>

	while (1) {

		/* Interrupt service routines modify state bits, calls handler based on state */
		/* This code from Altera DE2 demonstration project */
		if (bUSBCheck_Device_State.State_bits.RESET_BITS == 1) {
  8038dc:	00802074 	movhi	r2,129
  8038e0:	1091c884 	addi	r2,r2,18210
  8038e4:	10800003 	ldbu	r2,0(r2)
  8038e8:	10803fcc 	andi	r2,r2,255
  8038ec:	10800058 	cmpnei	r2,r2,1
  8038f0:	1000041e 	bne	r2,zero,803904 <main+0x1f0>
			disable_irq();
  8038f4:	0804c880 	call	804c88 <disable_irq>
			bufferAvailable = TRUE;
		}

	} //While

	return 0;
  8038f8:	0005883a 	mov	r2,zero
  8038fc:	e0bffc15 	stw	r2,-16(fp)
  803900:	00028106 	br	804308 <main+0xbf4>
		/* This code from Altera DE2 demonstration project */
		if (bUSBCheck_Device_State.State_bits.RESET_BITS == 1) {
			disable_irq();
			break;
		}
		if (bD13flags.bits.suspend) {
  803904:	d0a01717 	ldw	r2,-32676(gp)
  803908:	1080008c 	andi	r2,r2,2
  80390c:	1005003a 	cmpeq	r2,r2,zero
  803910:	1000071e 	bne	r2,zero,803930 <main+0x21c>
			disable_irq();
  803914:	0804c880 	call	804c88 <disable_irq>
			bD13flags.bits.suspend = 0;
  803918:	d0a01717 	ldw	r2,-32676(gp)
  80391c:	00ffff44 	movi	r3,-3
  803920:	10c4703a 	and	r2,r2,r3
  803924:	d0a01715 	stw	r2,-32676(gp)
			enable_irq();
  803928:	0804cd80 	call	804cd8 <enable_irq>
			change_suspend_state();
  80392c:	08035880 	call	803588 <change_suspend_state>
		} // Suspend Change Handler
		if (bD13flags.bits.DCP_state == USBFSM4DCP_SETUPPROC) {
  803930:	d0a01717 	ldw	r2,-32676(gp)
  803934:	1083c00c 	andi	r2,r2,3840
  803938:	10814018 	cmpnei	r2,r2,1280
  80393c:	1000031e 	bne	r2,zero,80394c <main+0x238>
			disable_irq();
  803940:	0804c880 	call	804c88 <disable_irq>
			SetupToken_Handler();
  803944:	0802f5c0 	call	802f5c <SetupToken_Handler>
			enable_irq();
  803948:	0804cd80 	call	804cd8 <enable_irq>
		} // Setup Token Handler
		if ((bD13flags.bits.DCP_state == USBFSM4DCP_REQUESTPROC)
  80394c:	d0a01717 	ldw	r2,-32676(gp)
  803950:	1083c00c 	andi	r2,r2,3840
  803954:	1080c018 	cmpnei	r2,r2,768
  803958:	10000d1e 	bne	r2,zero,803990 <main+0x27c>
  80395c:	00802074 	movhi	r2,129
  803960:	1091e104 	addi	r2,r2,18308
  803964:	10800003 	ldbu	r2,0(r2)
  803968:	10803fcc 	andi	r2,r2,255
  80396c:	1004c03a 	cmpne	r2,r2,zero
  803970:	1000071e 	bne	r2,zero,803990 <main+0x27c>
				&& !ControlData.Abort) {
			disable_irq();
  803974:	0804c880 	call	804c88 <disable_irq>
			bD13flags.bits.DCP_state = 0x00;
  803978:	d0a01717 	ldw	r2,-32676(gp)
  80397c:	00fc3fc4 	movi	r3,-3841
  803980:	10c4703a 	and	r2,r2,r3
  803984:	d0a01715 	stw	r2,-32676(gp)
			DeviceRequest_Handler();
  803988:	08031d00 	call	8031d0 <DeviceRequest_Handler>
			enable_irq();
  80398c:	0804cd80 	call	804cd8 <enable_irq>
		} // Device Request Handler
		/* End of code from demonstration project */

		if (bD13flags.bits.DCP_state == USBFSM4DCP_INTR1DONE) {
  803990:	d0a01717 	ldw	r2,-32676(gp)
  803994:	1083c00c 	andi	r2,r2,3840
  803998:	1082c018 	cmpnei	r2,r2,2816
  80399c:	1000161e 	bne	r2,zero,8039f8 <main+0x2e4>
			bD13flags.bits.DCP_state = 0x00;
  8039a0:	d0e01717 	ldw	r3,-32676(gp)
  8039a4:	00bc3fc4 	movi	r2,-3841
  8039a8:	1884703a 	and	r2,r3,r2
  8039ac:	d0a01715 	stw	r2,-32676(gp)
			if (Hal4D13_GetErrorCode(EPINDEX4EP01) & TRANSMIT_SUCCESSFUL_MASK) {
  8039b0:	01000084 	movi	r4,2
  8039b4:	08020f80 	call	8020f8 <Hal4D13_GetErrorCode>
  8039b8:	10803fcc 	andi	r2,r2,255
  8039bc:	1080004c 	andi	r2,r2,1
  8039c0:	10803fcc 	andi	r2,r2,255
  8039c4:	1005003a 	cmpeq	r2,r2,zero
  8039c8:	10000b1e 	bne	r2,zero,8039f8 <main+0x2e4>
				if (old_report.modifier & ALT_MODIFIER_MASK) {
  8039cc:	e0bf2bc3 	ldbu	r2,-849(fp)
  8039d0:	10803fcc 	andi	r2,r2,255
  8039d4:	1080010c 	andi	r2,r2,4
  8039d8:	1005003a 	cmpeq	r2,r2,zero
  8039dc:	1000031e 	bne	r2,zero,8039ec <main+0x2d8>
					gesture = GESTURE_ALT;
  8039e0:	00800144 	movi	r2,5
  8039e4:	e0bf2b05 	stb	r2,-852(fp)
  8039e8:	00000106 	br	8039f0 <main+0x2dc>
				} else {
					gesture = GESTURE_NULL;
  8039ec:	e03f2b05 	stb	zero,-852(fp)
				}

				bufferAvailable = TRUE;
  8039f0:	00800044 	movi	r2,1
  8039f4:	e0bf2b85 	stb	r2,-850(fp)
			}
		}

		if (hid_settings.state == connected) {
  8039f8:	00802074 	movhi	r2,129
  8039fc:	1091c704 	addi	r2,r2,18204
  803a00:	10800017 	ldw	r2,0(r2)
  803a04:	10800058 	cmpnei	r2,r2,1
  803a08:	1002361e 	bne	r2,zero,8042e4 <main+0xbd0>

			//Read the number of elements in the FIFO
			read_FIFO_used = alt_up_rs232_get_used_space_in_read_FIFO(
  803a0c:	e13f2717 	ldw	r4,-868(fp)
  803a10:	081094c0 	call	81094c <alt_up_rs232_get_used_space_in_read_FIFO>
  803a14:	e0bf288d 	sth	r2,-862(fp)
					rs232_dev);

			//Read the characters if there are character in the FIFO
			if (read_FIFO_used > READ_FIFO_EMPTY) {
  803a18:	e0bf288b 	ldhu	r2,-862(fp)
  803a1c:	1005003a 	cmpeq	r2,r2,zero
  803a20:	1001a91e 	bne	r2,zero,8040c8 <main+0x9b4>
				//Read the data from the FIFO buffer
				alt_up_rs232_read_data(rs232_dev, &data_R8, &p_error);
  803a24:	e1bf3004 	addi	r6,fp,-832
  803a28:	e17f2fc4 	addi	r5,fp,-833
  803a2c:	e13f2717 	ldw	r4,-868(fp)
  803a30:	0810a600 	call	810a60 <alt_up_rs232_read_data>

				//If a C is read the and the stream has not started then start the stream
				//Set up next cycle to read the count of elements sent
				if (!streamStart && data_R8 == 'C') {
  803a34:	e0bf2617 	ldw	r2,-872(fp)
  803a38:	1004c03a 	cmpne	r2,r2,zero
  803a3c:	10000c1e 	bne	r2,zero,803a70 <main+0x35c>
  803a40:	e0bf2fc3 	ldbu	r2,-833(fp)
  803a44:	10803fcc 	andi	r2,r2,255
  803a48:	108010d8 	cmpnei	r2,r2,67
  803a4c:	1000081e 	bne	r2,zero,803a70 <main+0x35c>
					streamStart = 1;
  803a50:	00800044 	movi	r2,1
  803a54:	e0bf2615 	stw	r2,-872(fp)
					countStart = 1;
  803a58:	00800044 	movi	r2,1
  803a5c:	e0bf2115 	stw	r2,-892(fp)
					cycleCount = 0;
  803a60:	e03f2315 	stw	zero,-884(fp)
					counti = 0;
  803a64:	e03f2015 	stw	zero,-896(fp)
					inc_i = 0;
  803a68:	e03f2515 	stw	zero,-876(fp)
					continue;
  803a6c:	003f9b06 	br	8038dc <main+0x1c8>
				}

				//If the end of the count section has been reached.
				//Set up next three cycles to get the inital orientation data
				if (streamStart && countStart && !initStart
  803a70:	e0bf2617 	ldw	r2,-872(fp)
  803a74:	1005003a 	cmpeq	r2,r2,zero
  803a78:	1000231e 	bne	r2,zero,803b08 <main+0x3f4>
  803a7c:	e0bf2117 	ldw	r2,-892(fp)
  803a80:	1005003a 	cmpeq	r2,r2,zero
  803a84:	1000201e 	bne	r2,zero,803b08 <main+0x3f4>
  803a88:	e0bf1f17 	ldw	r2,-900(fp)
  803a8c:	1004c03a 	cmpne	r2,r2,zero
  803a90:	10001d1e 	bne	r2,zero,803b08 <main+0x3f4>
  803a94:	e0bf2fc3 	ldbu	r2,-833(fp)
  803a98:	10803fcc 	andi	r2,r2,255
  803a9c:	10800298 	cmpnei	r2,r2,10
  803aa0:	1000191e 	bne	r2,zero,803b08 <main+0x3f4>
						&& (data_R8 == '\n')) {
					streamStart = 1;
  803aa4:	00800044 	movi	r2,1
  803aa8:	e0bf2615 	stw	r2,-872(fp)
					countStart = 0;
  803aac:	e03f2115 	stw	zero,-892(fp)
					cycleCount = 0;
  803ab0:	e03f2315 	stw	zero,-884(fp)
					//Read the count of data points that will be sent
					count = atoi(buffer);
  803ab4:	e13f3104 	addi	r4,fp,-828
  803ab8:	0805a140 	call	805a14 <atoi>
  803abc:	e0bf2215 	stw	r2,-888(fp)
					counti = 0;
  803ac0:	e03f2015 	stw	zero,-896(fp)
					inc_i = 0;
  803ac4:	e03f2515 	stw	zero,-876(fp)

					initStart = 1;
  803ac8:	00800044 	movi	r2,1
  803acc:	e0bf1f15 	stw	r2,-900(fp)
					initCounter = 0;
  803ad0:	e03f1e15 	stw	zero,-904(fp)

					for (clearCounter = 0; clearCounter < 8; clearCounter++) {
  803ad4:	e03f2415 	stw	zero,-880(fp)
  803ad8:	00000706 	br	803af8 <main+0x3e4>
						buffer[clearCounter] = '\0';
  803adc:	e0ff2417 	ldw	r3,-880(fp)
  803ae0:	e0bf3104 	addi	r2,fp,-828
  803ae4:	10c5883a 	add	r2,r2,r3
  803ae8:	10000005 	stb	zero,0(r2)
					inc_i = 0;

					initStart = 1;
					initCounter = 0;

					for (clearCounter = 0; clearCounter < 8; clearCounter++) {
  803aec:	e0bf2417 	ldw	r2,-880(fp)
  803af0:	10800044 	addi	r2,r2,1
  803af4:	e0bf2415 	stw	r2,-880(fp)
  803af8:	e0bf2417 	ldw	r2,-880(fp)
  803afc:	10800210 	cmplti	r2,r2,8
  803b00:	103ff61e 	bne	r2,zero,803adc <main+0x3c8>
						buffer[clearCounter] = '\0';
					}
					continue;
  803b04:	003f7506 	br	8038dc <main+0x1c8>
				}

				//If you have reached the end of a number in the inital orientation data
				if (streamStart && !countStart && initStart
  803b08:	e0bf2617 	ldw	r2,-872(fp)
  803b0c:	1005003a 	cmpeq	r2,r2,zero
  803b10:	1000381e 	bne	r2,zero,803bf4 <main+0x4e0>
  803b14:	e0bf2117 	ldw	r2,-892(fp)
  803b18:	1004c03a 	cmpne	r2,r2,zero
  803b1c:	1000351e 	bne	r2,zero,803bf4 <main+0x4e0>
  803b20:	e0bf1f17 	ldw	r2,-900(fp)
  803b24:	1005003a 	cmpeq	r2,r2,zero
  803b28:	1000321e 	bne	r2,zero,803bf4 <main+0x4e0>
  803b2c:	e0bf2fc3 	ldbu	r2,-833(fp)
  803b30:	10803fcc 	andi	r2,r2,255
  803b34:	10800298 	cmpnei	r2,r2,10
  803b38:	10002e1e 	bne	r2,zero,803bf4 <main+0x4e0>
						&& data_R8 == '\n') {
					switch (initCounter) {
  803b3c:	e0bf1e17 	ldw	r2,-904(fp)
  803b40:	e0bffd15 	stw	r2,-12(fp)
  803b44:	e0fffd17 	ldw	r3,-12(fp)
  803b48:	18800060 	cmpeqi	r2,r3,1
  803b4c:	10000e1e 	bne	r2,zero,803b88 <main+0x474>
  803b50:	e13ffd17 	ldw	r4,-12(fp)
  803b54:	208000a0 	cmpeqi	r2,r4,2
  803b58:	1000121e 	bne	r2,zero,803ba4 <main+0x490>
  803b5c:	e0fffd17 	ldw	r3,-12(fp)
  803b60:	1805003a 	cmpeq	r2,r3,zero
  803b64:	1000011e 	bne	r2,zero,803b6c <main+0x458>
  803b68:	00001406 	br	803bbc <main+0x4a8>
					//get x orientation
					case 0:
						initax = atoi(buffer);
  803b6c:	e13f3104 	addi	r4,fp,-828
  803b70:	0805a140 	call	805a14 <atoi>
  803b74:	e0bf1015 	stw	r2,-960(fp)
						initCounter++;
  803b78:	e0bf1e17 	ldw	r2,-904(fp)
  803b7c:	10800044 	addi	r2,r2,1
  803b80:	e0bf1e15 	stw	r2,-904(fp)
						break;
  803b84:	00000d06 	br	803bbc <main+0x4a8>
						//get y orientation
					case 1:
						initay = atoi(buffer);
  803b88:	e13f3104 	addi	r4,fp,-828
  803b8c:	0805a140 	call	805a14 <atoi>
  803b90:	e0bf0f15 	stw	r2,-964(fp)
						initCounter++;
  803b94:	e0bf1e17 	ldw	r2,-904(fp)
  803b98:	10800044 	addi	r2,r2,1
  803b9c:	e0bf1e15 	stw	r2,-904(fp)
						break;
  803ba0:	00000606 	br	803bbc <main+0x4a8>
						//get z inital orientation and then set
						//up next cycle to read accleration data
					case 2:
						initaz = atoi(buffer);
  803ba4:	e13f3104 	addi	r4,fp,-828
  803ba8:	0805a140 	call	805a14 <atoi>
  803bac:	e0bf0e15 	stw	r2,-968(fp)
						initCounter = 0;
  803bb0:	e03f1e15 	stw	zero,-904(fp)
						initStart = 0;
  803bb4:	e03f1f15 	stw	zero,-900(fp)
						counti = 0;
  803bb8:	e03f2015 	stw	zero,-896(fp)
						break;
					}

					inc_i = 0;
  803bbc:	e03f2515 	stw	zero,-876(fp)
					for (clearCounter = 0; clearCounter < 8; clearCounter++) {
  803bc0:	e03f2415 	stw	zero,-880(fp)
  803bc4:	00000706 	br	803be4 <main+0x4d0>
						buffer[clearCounter] = '\0';
  803bc8:	e0ff2417 	ldw	r3,-880(fp)
  803bcc:	e0bf3104 	addi	r2,fp,-828
  803bd0:	10c5883a 	add	r2,r2,r3
  803bd4:	10000005 	stb	zero,0(r2)
						counti = 0;
						break;
					}

					inc_i = 0;
					for (clearCounter = 0; clearCounter < 8; clearCounter++) {
  803bd8:	e0bf2417 	ldw	r2,-880(fp)
  803bdc:	10800044 	addi	r2,r2,1
  803be0:	e0bf2415 	stw	r2,-880(fp)
  803be4:	e0bf2417 	ldw	r2,-880(fp)
  803be8:	10800210 	cmplti	r2,r2,8
  803bec:	103ff61e 	bne	r2,zero,803bc8 <main+0x4b4>
						buffer[clearCounter] = '\0';
					}
					continue;
  803bf0:	003f3a06 	br	8038dc <main+0x1c8>

				}

				//In this case reached the end of an acceleration data read
				//Now must convert the buffer into the corresponding number
				if (streamStart && !countStart && !initStart
  803bf4:	e0bf2617 	ldw	r2,-872(fp)
  803bf8:	1005003a 	cmpeq	r2,r2,zero
  803bfc:	10008d1e 	bne	r2,zero,803e34 <main+0x720>
  803c00:	e0bf2117 	ldw	r2,-892(fp)
  803c04:	1004c03a 	cmpne	r2,r2,zero
  803c08:	10008a1e 	bne	r2,zero,803e34 <main+0x720>
  803c0c:	e0bf1f17 	ldw	r2,-900(fp)
  803c10:	1004c03a 	cmpne	r2,r2,zero
  803c14:	1000871e 	bne	r2,zero,803e34 <main+0x720>
  803c18:	e0bf2fc3 	ldbu	r2,-833(fp)
  803c1c:	10803fcc 	andi	r2,r2,255
  803c20:	10800298 	cmpnei	r2,r2,10
  803c24:	1000831e 	bne	r2,zero,803e34 <main+0x720>
						&& data_R8 == '\n') {

					switch (cycleCount) {
  803c28:	e13f2317 	ldw	r4,-884(fp)
  803c2c:	e13ffe15 	stw	r4,-8(fp)
  803c30:	e0fffe17 	ldw	r3,-8(fp)
  803c34:	1805003a 	cmpeq	r2,r3,zero
  803c38:	1000041e 	bne	r2,zero,803c4c <main+0x538>
  803c3c:	e13ffe17 	ldw	r4,-8(fp)
  803c40:	20800060 	cmpeqi	r2,r4,1
  803c44:	1000371e 	bne	r2,zero,803d24 <main+0x610>
  803c48:	00006c06 	br	803dfc <main+0x6e8>

					case 0:
						ay[counti] = atoi(buffer);
  803c4c:	e43f2017 	ldw	r16,-896(fp)
  803c50:	e13f3104 	addi	r4,fp,-828
  803c54:	0805a140 	call	805a14 <atoi>
  803c58:	1007883a 	mov	r3,r2
  803c5c:	8405883a 	add	r2,r16,r16
  803c60:	1085883a 	add	r2,r2,r2
  803c64:	e13f0c04 	addi	r4,fp,-976
  803c68:	1105883a 	add	r2,r2,r4
  803c6c:	10802704 	addi	r2,r2,156
  803c70:	10c00015 	stw	r3,0(r2)
						vNewy = vOldy + (ay[counti]);
  803c74:	e0bf2017 	ldw	r2,-896(fp)
  803c78:	1085883a 	add	r2,r2,r2
  803c7c:	1085883a 	add	r2,r2,r2
  803c80:	e0ff0c04 	addi	r3,fp,-976
  803c84:	10c5883a 	add	r2,r2,r3
  803c88:	10802704 	addi	r2,r2,156
  803c8c:	11000017 	ldw	r4,0(r2)
  803c90:	08052200 	call	805220 <__floatsidf>
  803c94:	100b883a 	mov	r5,r2
  803c98:	180d883a 	mov	r6,r3
  803c9c:	2809883a 	mov	r4,r5
  803ca0:	300b883a 	mov	r5,r6
  803ca4:	e1bf1a17 	ldw	r6,-920(fp)
  803ca8:	e1ff1b17 	ldw	r7,-916(fp)
  803cac:	08051ac0 	call	8051ac <__adddf3>
  803cb0:	1009883a 	mov	r4,r2
  803cb4:	180b883a 	mov	r5,r3
  803cb8:	e13f1815 	stw	r4,-928(fp)
  803cbc:	e17f1915 	stw	r5,-924(fp)
						VAveragey += vNewy;
  803cc0:	e13f1217 	ldw	r4,-952(fp)
  803cc4:	08052200 	call	805220 <__floatsidf>
  803cc8:	100b883a 	mov	r5,r2
  803ccc:	180d883a 	mov	r6,r3
  803cd0:	2809883a 	mov	r4,r5
  803cd4:	300b883a 	mov	r5,r6
  803cd8:	e1bf1817 	ldw	r6,-928(fp)
  803cdc:	e1ff1917 	ldw	r7,-924(fp)
  803ce0:	08051ac0 	call	8051ac <__adddf3>
  803ce4:	1009883a 	mov	r4,r2
  803ce8:	180b883a 	mov	r5,r3
  803cec:	2005883a 	mov	r2,r4
  803cf0:	2807883a 	mov	r3,r5
  803cf4:	1009883a 	mov	r4,r2
  803cf8:	180b883a 	mov	r5,r3
  803cfc:	08053180 	call	805318 <__fixdfsi>
  803d00:	e0bf1215 	stw	r2,-952(fp)
						vOldy = vNewy;
  803d04:	e0bf1817 	ldw	r2,-928(fp)
  803d08:	e0bf1a15 	stw	r2,-920(fp)
  803d0c:	e0bf1917 	ldw	r2,-924(fp)
  803d10:	e0bf1b15 	stw	r2,-916(fp)
						cycleCount++;
  803d14:	e0bf2317 	ldw	r2,-884(fp)
  803d18:	10800044 	addi	r2,r2,1
  803d1c:	e0bf2315 	stw	r2,-884(fp)
						break;
  803d20:	00003606 	br	803dfc <main+0x6e8>
					case 1:
						az[counti] = atoi(buffer);
  803d24:	e43f2017 	ldw	r16,-896(fp)
  803d28:	e13f3104 	addi	r4,fp,-828
  803d2c:	0805a140 	call	805a14 <atoi>
  803d30:	1007883a 	mov	r3,r2
  803d34:	8405883a 	add	r2,r16,r16
  803d38:	1085883a 	add	r2,r2,r2
  803d3c:	e13f0c04 	addi	r4,fp,-976
  803d40:	1105883a 	add	r2,r2,r4
  803d44:	10808b04 	addi	r2,r2,556
  803d48:	10c00015 	stw	r3,0(r2)
						vNewz = vOldz + (az[counti]);
  803d4c:	e0bf2017 	ldw	r2,-896(fp)
  803d50:	1085883a 	add	r2,r2,r2
  803d54:	1085883a 	add	r2,r2,r2
  803d58:	e0ff0c04 	addi	r3,fp,-976
  803d5c:	10c5883a 	add	r2,r2,r3
  803d60:	10808b04 	addi	r2,r2,556
  803d64:	11000017 	ldw	r4,0(r2)
  803d68:	08052200 	call	805220 <__floatsidf>
  803d6c:	100b883a 	mov	r5,r2
  803d70:	180d883a 	mov	r6,r3
  803d74:	2809883a 	mov	r4,r5
  803d78:	300b883a 	mov	r5,r6
  803d7c:	e1bf1617 	ldw	r6,-936(fp)
  803d80:	e1ff1717 	ldw	r7,-932(fp)
  803d84:	08051ac0 	call	8051ac <__adddf3>
  803d88:	1009883a 	mov	r4,r2
  803d8c:	180b883a 	mov	r5,r3
  803d90:	e13f1415 	stw	r4,-944(fp)
  803d94:	e17f1515 	stw	r5,-940(fp)
						VAveragez += vNewz;
  803d98:	e13f1117 	ldw	r4,-956(fp)
  803d9c:	08052200 	call	805220 <__floatsidf>
  803da0:	100b883a 	mov	r5,r2
  803da4:	180d883a 	mov	r6,r3
  803da8:	2809883a 	mov	r4,r5
  803dac:	300b883a 	mov	r5,r6
  803db0:	e1bf1417 	ldw	r6,-944(fp)
  803db4:	e1ff1517 	ldw	r7,-940(fp)
  803db8:	08051ac0 	call	8051ac <__adddf3>
  803dbc:	1009883a 	mov	r4,r2
  803dc0:	180b883a 	mov	r5,r3
  803dc4:	2005883a 	mov	r2,r4
  803dc8:	2807883a 	mov	r3,r5
  803dcc:	1009883a 	mov	r4,r2
  803dd0:	180b883a 	mov	r5,r3
  803dd4:	08053180 	call	805318 <__fixdfsi>
  803dd8:	e0bf1115 	stw	r2,-956(fp)
						vOldz = vNewz;
  803ddc:	e0bf1417 	ldw	r2,-944(fp)
  803de0:	e0bf1615 	stw	r2,-936(fp)
  803de4:	e0bf1517 	ldw	r2,-940(fp)
  803de8:	e0bf1715 	stw	r2,-932(fp)
						counti++;
  803dec:	e0bf2017 	ldw	r2,-896(fp)
  803df0:	10800044 	addi	r2,r2,1
  803df4:	e0bf2015 	stw	r2,-896(fp)
						cycleCount = 0;
  803df8:	e03f2315 	stw	zero,-884(fp)
						break;
					}

					inc_i = 0;
  803dfc:	e03f2515 	stw	zero,-876(fp)
					for (clearCounter = 0; clearCounter < 8; clearCounter++) {
  803e00:	e03f2415 	stw	zero,-880(fp)
  803e04:	00000706 	br	803e24 <main+0x710>
						buffer[clearCounter] = '\0';
  803e08:	e0ff2417 	ldw	r3,-880(fp)
  803e0c:	e0bf3104 	addi	r2,fp,-828
  803e10:	10c5883a 	add	r2,r2,r3
  803e14:	10000005 	stb	zero,0(r2)
						cycleCount = 0;
						break;
					}

					inc_i = 0;
					for (clearCounter = 0; clearCounter < 8; clearCounter++) {
  803e18:	e0bf2417 	ldw	r2,-880(fp)
  803e1c:	10800044 	addi	r2,r2,1
  803e20:	e0bf2415 	stw	r2,-880(fp)
  803e24:	e0bf2417 	ldw	r2,-880(fp)
  803e28:	10800210 	cmplti	r2,r2,8
  803e2c:	103ff61e 	bne	r2,zero,803e08 <main+0x6f4>
						buffer[clearCounter] = '\0';
					}

					continue;
  803e30:	003eaa06 	br	8038dc <main+0x1c8>
				}

				//If character for the end of the data stream is reached
				if (streamStart && !countStart && data_R8 == 'E') {
  803e34:	e0bf2617 	ldw	r2,-872(fp)
  803e38:	1005003a 	cmpeq	r2,r2,zero
  803e3c:	1000951e 	bne	r2,zero,804094 <main+0x980>
  803e40:	e0bf2117 	ldw	r2,-892(fp)
  803e44:	1004c03a 	cmpne	r2,r2,zero
  803e48:	1000921e 	bne	r2,zero,804094 <main+0x980>
  803e4c:	e0bf2fc3 	ldbu	r2,-833(fp)
  803e50:	10803fcc 	andi	r2,r2,255
  803e54:	10801158 	cmpnei	r2,r2,69
  803e58:	10008e1e 	bne	r2,zero,804094 <main+0x980>

					//Averaging the velocities
					VAveragey = VAveragey / count;
  803e5c:	e13f1217 	ldw	r4,-952(fp)
  803e60:	e17f2217 	ldw	r5,-888(fp)
  803e64:	080546c0 	call	80546c <__divsi3>
  803e68:	e0bf1215 	stw	r2,-952(fp)
					VAveragez = VAveragez / count;
  803e6c:	e13f1117 	ldw	r4,-956(fp)
  803e70:	e17f2217 	ldw	r5,-888(fp)
  803e74:	080546c0 	call	80546c <__divsi3>
  803e78:	e0bf1115 	stw	r2,-956(fp)

					//Finding the glove orientation based on inital measurements
					gloveOrientation = orientation(initax, initay, initaz);
  803e7c:	e13f1017 	ldw	r4,-960(fp)
  803e80:	e17f0f17 	ldw	r5,-964(fp)
  803e84:	e1bf0e17 	ldw	r6,-968(fp)
  803e88:	0804b1c0 	call	804b1c <orientation>
  803e8c:	e0bf0d15 	stw	r2,-972(fp)

					//Determining movement based on glove orientation
					switch (gloveOrientation) {
  803e90:	e13f0d17 	ldw	r4,-972(fp)
  803e94:	e13fff15 	stw	r4,-4(fp)
  803e98:	e0ffff17 	ldw	r3,-4(fp)
  803e9c:	18800060 	cmpeqi	r2,r3,1
  803ea0:	1000141e 	bne	r2,zero,803ef4 <main+0x7e0>
  803ea4:	e13fff17 	ldw	r4,-4(fp)
  803ea8:	20800088 	cmpgei	r2,r4,2
  803eac:	1000041e 	bne	r2,zero,803ec0 <main+0x7ac>
  803eb0:	e0ffff17 	ldw	r3,-4(fp)
  803eb4:	1805003a 	cmpeq	r2,r3,zero
  803eb8:	1000081e 	bne	r2,zero,803edc <main+0x7c8>
  803ebc:	00001e06 	br	803f38 <main+0x824>
  803ec0:	e13fff17 	ldw	r4,-4(fp)
  803ec4:	208000a0 	cmpeqi	r2,r4,2
  803ec8:	1000101e 	bne	r2,zero,803f0c <main+0x7f8>
  803ecc:	e0ffff17 	ldw	r3,-4(fp)
  803ed0:	188000e0 	cmpeqi	r2,r3,3
  803ed4:	1000131e 	bne	r2,zero,803f24 <main+0x810>
  803ed8:	00001706 	br	803f38 <main+0x824>
					case 0:
						movementDirection = largest(0, VAveragey, VAveragez);
  803edc:	0009883a 	mov	r4,zero
  803ee0:	e17f1217 	ldw	r5,-952(fp)
  803ee4:	e1bf1117 	ldw	r6,-956(fp)
  803ee8:	080454c0 	call	80454c <largest>
  803eec:	e0bf0c15 	stw	r2,-976(fp)
						break;
  803ef0:	00001106 	br	803f38 <main+0x824>

					case 1:
						movementDirection = largestPalmLeft(0, VAveragey,
  803ef4:	0009883a 	mov	r4,zero
  803ef8:	e17f1217 	ldw	r5,-952(fp)
  803efc:	e1bf1117 	ldw	r6,-956(fp)
  803f00:	08046c00 	call	8046c0 <largestPalmLeft>
  803f04:	e0bf0c15 	stw	r2,-976(fp)
								VAveragez);
						break;
  803f08:	00000b06 	br	803f38 <main+0x824>

					case 2:
						movementDirection = largestPalmRight(0, VAveragey,
  803f0c:	0009883a 	mov	r4,zero
  803f10:	e17f1217 	ldw	r5,-952(fp)
  803f14:	e1bf1117 	ldw	r6,-956(fp)
  803f18:	08048340 	call	804834 <largestPalmRight>
  803f1c:	e0bf0c15 	stw	r2,-976(fp)
								VAveragez);
						break;
  803f20:	00000506 	br	803f38 <main+0x824>
					case 3:
						movementDirection = largestPalmUp(0, VAveragey,
  803f24:	0009883a 	mov	r4,zero
  803f28:	e17f1217 	ldw	r5,-952(fp)
  803f2c:	e1bf1117 	ldw	r6,-956(fp)
  803f30:	08049a80 	call	8049a8 <largestPalmUp>
  803f34:	e0bf0c15 	stw	r2,-976(fp)
								VAveragez);
						break;
					}

					//Checking if the glove passed threshold values
					if (noMovement(0, VAveragey, VAveragez)) {
  803f38:	0009883a 	mov	r4,zero
  803f3c:	e17f1217 	ldw	r5,-952(fp)
  803f40:	e1bf1117 	ldw	r6,-956(fp)
  803f44:	08044c80 	call	8044c8 <noMovement>
  803f48:	1005003a 	cmpeq	r2,r2,zero
  803f4c:	1000021e 	bne	r2,zero,803f58 <main+0x844>
						movementDirection = 6;
  803f50:	00800184 	movi	r2,6
  803f54:	e0bf0c15 	stw	r2,-976(fp)
					}
					//Setting the correct USB command
					switch (movementDirection) {
  803f58:	e0bf0c17 	ldw	r2,-976(fp)
  803f5c:	108001e8 	cmpgeui	r2,r2,7
  803f60:	1000331e 	bne	r2,zero,804030 <main+0x91c>
  803f64:	e0bf0c17 	ldw	r2,-976(fp)
  803f68:	1085883a 	add	r2,r2,r2
  803f6c:	1087883a 	add	r3,r2,r2
  803f70:	00802034 	movhi	r2,128
  803f74:	108fe104 	addi	r2,r2,16260
  803f78:	1885883a 	add	r2,r3,r2
  803f7c:	10800017 	ldw	r2,0(r2)
  803f80:	1000683a 	jmp	r2
  803f84:	00803fa0 	cmpeqi	r2,zero,254
  803f88:	00803fb0 	cmpltui	r2,zero,254
  803f8c:	00803fc0 	call	803fc <__alt_mem_sdram_0-0x77fc04>
  803f90:	00803fd8 	cmpnei	r2,zero,255
  803f94:	00803ff0 	cmpltui	r2,zero,255
  803f98:	00804008 	cmpgei	r2,zero,256
  803f9c:	00804020 	cmpeqi	r2,zero,256
					case 0:
						printf("Forward\n");
  803fa0:	01002074 	movhi	r4,129
  803fa4:	2108c604 	addi	r4,r4,8984
  803fa8:	0805b5c0 	call	805b5c <puts>
						break;
  803fac:	00002006 	br	804030 <main+0x91c>
					case 1:
						printf("Backward\n");
  803fb0:	01002074 	movhi	r4,129
  803fb4:	2108c804 	addi	r4,r4,8992
  803fb8:	0805b5c0 	call	805b5c <puts>
						break;
  803fbc:	00001c06 	br	804030 <main+0x91c>
					case 2:
						gesture = GESTURE_LEFT;
  803fc0:	008000c4 	movi	r2,3
  803fc4:	e0bf2b05 	stb	r2,-852(fp)
						printf("Left\n");
  803fc8:	01002074 	movhi	r4,129
  803fcc:	2108cb04 	addi	r4,r4,9004
  803fd0:	0805b5c0 	call	805b5c <puts>
						break;
  803fd4:	00001606 	br	804030 <main+0x91c>
					case 3:
						gesture = GESTURE_RIGHT;
  803fd8:	00800104 	movi	r2,4
  803fdc:	e0bf2b05 	stb	r2,-852(fp)
						printf("Right\n");
  803fe0:	01002074 	movhi	r4,129
  803fe4:	2108cd04 	addi	r4,r4,9012
  803fe8:	0805b5c0 	call	805b5c <puts>
						break;
  803fec:	00001006 	br	804030 <main+0x91c>
					case 4:
						gesture = GESTURE_UP;
  803ff0:	00800044 	movi	r2,1
  803ff4:	e0bf2b05 	stb	r2,-852(fp)
						printf("Up\n");
  803ff8:	01002074 	movhi	r4,129
  803ffc:	2108cf04 	addi	r4,r4,9020
  804000:	0805b5c0 	call	805b5c <puts>
						break;
  804004:	00000a06 	br	804030 <main+0x91c>
					case 5:
						gesture = GESTURE_DOWN;
  804008:	00800084 	movi	r2,2
  80400c:	e0bf2b05 	stb	r2,-852(fp)
						printf("Down\n");
  804010:	01002074 	movhi	r4,129
  804014:	2108d004 	addi	r4,r4,9024
  804018:	0805b5c0 	call	805b5c <puts>
						break;
  80401c:	00000406 	br	804030 <main+0x91c>
					case 6:
						gesture = GESTURE_NULL;
  804020:	e03f2b05 	stb	zero,-852(fp)
						printf("No movement\n");
  804024:	01002074 	movhi	r4,129
  804028:	2108d204 	addi	r4,r4,9032
  80402c:	0805b5c0 	call	805b5c <puts>
						break;
					}

					//Sanity check
					if (counti == count) {
  804030:	e0ff2017 	ldw	r3,-896(fp)
  804034:	e0bf2217 	ldw	r2,-888(fp)
  804038:	1880041e 	bne	r3,r2,80404c <main+0x938>
						printf("Correct number of Measurements\n");
  80403c:	01002074 	movhi	r4,129
  804040:	2108d504 	addi	r4,r4,9044
  804044:	0805b5c0 	call	805b5c <puts>
  804048:	00000306 	br	804058 <main+0x944>
					} else {
						printf("Did not get correct count\n");
  80404c:	01002074 	movhi	r4,129
  804050:	2108dd04 	addi	r4,r4,9076
  804054:	0805b5c0 	call	805b5c <puts>
					}

					//Reseting the variables
					streamStart = 0;
  804058:	e03f2615 	stw	zero,-872(fp)
					cycleCount = 0;
  80405c:	e03f2315 	stw	zero,-884(fp)
					counti = 0;
  804060:	e03f2015 	stw	zero,-896(fp)
					inc_i = 0;
  804064:	e03f2515 	stw	zero,-876(fp)
					VAveragex = 0;
  804068:	e03f1315 	stw	zero,-948(fp)
					VAveragey = 0;
  80406c:	e03f1215 	stw	zero,-952(fp)
					VAveragez = 0;
  804070:	e03f1115 	stw	zero,-956(fp)
					count = 0;
  804074:	e03f2215 	stw	zero,-888(fp)

					vOldx = 0;
  804078:	e03f1c15 	stw	zero,-912(fp)
  80407c:	e03f1d15 	stw	zero,-908(fp)
					vOldy = 0;
  804080:	e03f1a15 	stw	zero,-920(fp)
  804084:	e03f1b15 	stw	zero,-916(fp)
					vOldz = 0;
  804088:	e03f1615 	stw	zero,-936(fp)
  80408c:	e03f1715 	stw	zero,-932(fp)
					continue;
  804090:	003e1206 	br	8038dc <main+0x1c8>
				}

				//This is the case that reads in data into a buffer
				//so that it can be processed when a newline arrives
				if (streamStart) {
  804094:	e0bf2617 	ldw	r2,-872(fp)
  804098:	1005003a 	cmpeq	r2,r2,zero
  80409c:	10000a1e 	bne	r2,zero,8040c8 <main+0x9b4>

					buffer[inc_i] = data_R8;
  8040a0:	e13f2517 	ldw	r4,-876(fp)
  8040a4:	e0bf2fc3 	ldbu	r2,-833(fp)
  8040a8:	1007883a 	mov	r3,r2
  8040ac:	e0bf3104 	addi	r2,fp,-828
  8040b0:	1105883a 	add	r2,r2,r4
  8040b4:	10c00005 	stb	r3,0(r2)
					inc_i++;
  8040b8:	e0bf2517 	ldw	r2,-876(fp)
  8040bc:	10800044 	addi	r2,r2,1
  8040c0:	e0bf2515 	stw	r2,-876(fp)
					continue;
  8040c4:	003e0506 	br	8038dc <main+0x1c8>
				}
			}

			disable_irq();
  8040c8:	0804c880 	call	804c88 <disable_irq>
			mapGestureToKeycodes(&new_report, gesture);
  8040cc:	e17f2b03 	ldbu	r5,-852(fp)
  8040d0:	d1201804 	addi	r4,gp,-32672
  8040d4:	08043c80 	call	8043c8 <mapGestureToKeycodes>
			enable_irq();
  8040d8:	0804cd80 	call	804cd8 <enable_irq>

			/* If the report has changed send it */
			disable_irq();
  8040dc:	0804c880 	call	804c88 <disable_irq>
			readyToSend = reportChanged(old_report, new_report)	&& bufferAvailable;
  8040e0:	e0ff2bc3 	ldbu	r3,-849(fp)
  8040e4:	e0bf2c03 	ldbu	r2,-848(fp)
  8040e8:	1004923a 	slli	r2,r2,8
  8040ec:	10c6b03a 	or	r3,r2,r3
  8040f0:	e0bf2c43 	ldbu	r2,-847(fp)
  8040f4:	1004943a 	slli	r2,r2,16
  8040f8:	10c6b03a 	or	r3,r2,r3
  8040fc:	e0bf2c83 	ldbu	r2,-846(fp)
  804100:	1004963a 	slli	r2,r2,24
  804104:	10c4b03a 	or	r2,r2,r3
  804108:	100b883a 	mov	r5,r2
  80410c:	e0ff2cc3 	ldbu	r3,-845(fp)
  804110:	e0bf2d03 	ldbu	r2,-844(fp)
  804114:	1004923a 	slli	r2,r2,8
  804118:	10c6b03a 	or	r3,r2,r3
  80411c:	e0bf2d43 	ldbu	r2,-843(fp)
  804120:	1004943a 	slli	r2,r2,16
  804124:	10c6b03a 	or	r3,r2,r3
  804128:	e0bf2d83 	ldbu	r2,-842(fp)
  80412c:	1004963a 	slli	r2,r2,24
  804130:	10c4b03a 	or	r2,r2,r3
  804134:	100d883a 	mov	r6,r2
  804138:	d0e01803 	ldbu	r3,-32672(gp)
  80413c:	00802074 	movhi	r2,129
  804140:	1091c244 	addi	r2,r2,18185
  804144:	10800003 	ldbu	r2,0(r2)
  804148:	1004923a 	slli	r2,r2,8
  80414c:	10c6b03a 	or	r3,r2,r3
  804150:	00802074 	movhi	r2,129
  804154:	1091c284 	addi	r2,r2,18186
  804158:	10800003 	ldbu	r2,0(r2)
  80415c:	1004943a 	slli	r2,r2,16
  804160:	10c6b03a 	or	r3,r2,r3
  804164:	00802074 	movhi	r2,129
  804168:	1091c2c4 	addi	r2,r2,18187
  80416c:	10800003 	ldbu	r2,0(r2)
  804170:	1004963a 	slli	r2,r2,24
  804174:	10c4b03a 	or	r2,r2,r3
  804178:	1011883a 	mov	r8,r2
  80417c:	00c02074 	movhi	r3,129
  804180:	18d1c304 	addi	r3,r3,18188
  804184:	19000003 	ldbu	r4,0(r3)
  804188:	18800043 	ldbu	r2,1(r3)
  80418c:	1004923a 	slli	r2,r2,8
  804190:	1108b03a 	or	r4,r2,r4
  804194:	18800083 	ldbu	r2,2(r3)
  804198:	1004943a 	slli	r2,r2,16
  80419c:	1108b03a 	or	r4,r2,r4
  8041a0:	188000c3 	ldbu	r2,3(r3)
  8041a4:	1004963a 	slli	r2,r2,24
  8041a8:	1104b03a 	or	r2,r2,r4
  8041ac:	100f883a 	mov	r7,r2
  8041b0:	2809883a 	mov	r4,r5
  8041b4:	300b883a 	mov	r5,r6
  8041b8:	400d883a 	mov	r6,r8
  8041bc:	08043240 	call	804324 <reportChanged>
  8041c0:	10803fcc 	andi	r2,r2,255
  8041c4:	1005003a 	cmpeq	r2,r2,zero
  8041c8:	1000061e 	bne	r2,zero,8041e4 <main+0xad0>
  8041cc:	e0bf2b83 	ldbu	r2,-850(fp)
  8041d0:	1005003a 	cmpeq	r2,r2,zero
  8041d4:	1000031e 	bne	r2,zero,8041e4 <main+0xad0>
  8041d8:	01000044 	movi	r4,1
  8041dc:	e13ffb15 	stw	r4,-20(fp)
  8041e0:	00000106 	br	8041e8 <main+0xad4>
  8041e4:	e03ffb15 	stw	zero,-20(fp)
  8041e8:	e0bffb17 	ldw	r2,-20(fp)
  8041ec:	e0bf2b45 	stb	r2,-851(fp)
			if (readyToSend) {
  8041f0:	e0bf2b43 	ldbu	r2,-851(fp)
  8041f4:	1005003a 	cmpeq	r2,r2,zero
  8041f8:	1000261e 	bne	r2,zero,804294 <main+0xb80>
				send_buffer[0] = new_report.modifier;
  8041fc:	d0a01803 	ldbu	r2,-32672(gp)
  804200:	e0bf2dc5 	stb	r2,-841(fp)
				send_buffer[1] = new_report.reserved;
  804204:	00802074 	movhi	r2,129
  804208:	1091c244 	addi	r2,r2,18185
  80420c:	10800003 	ldbu	r2,0(r2)
  804210:	e0bf2e05 	stb	r2,-840(fp)
				send_buffer[2] = new_report.keycode[0];
  804214:	00802074 	movhi	r2,129
  804218:	1091c284 	addi	r2,r2,18186
  80421c:	10800003 	ldbu	r2,0(r2)
  804220:	e0bf2e45 	stb	r2,-839(fp)
				send_buffer[3] = new_report.keycode[1];
  804224:	00802074 	movhi	r2,129
  804228:	1091c2c4 	addi	r2,r2,18187
  80422c:	10800003 	ldbu	r2,0(r2)
  804230:	e0bf2e85 	stb	r2,-838(fp)
				send_buffer[4] = new_report.keycode[2];
  804234:	00802074 	movhi	r2,129
  804238:	1091c304 	addi	r2,r2,18188
  80423c:	10800003 	ldbu	r2,0(r2)
  804240:	e0bf2ec5 	stb	r2,-837(fp)
				send_buffer[5] = new_report.keycode[3];
  804244:	00802074 	movhi	r2,129
  804248:	1091c344 	addi	r2,r2,18189
  80424c:	10800003 	ldbu	r2,0(r2)
  804250:	e0bf2f05 	stb	r2,-836(fp)
				send_buffer[6] = new_report.keycode[4];
  804254:	00802074 	movhi	r2,129
  804258:	1091c384 	addi	r2,r2,18190
  80425c:	10800003 	ldbu	r2,0(r2)
  804260:	e0bf2f45 	stb	r2,-835(fp)
				send_buffer[7] = new_report.keycode[5];
  804264:	00802074 	movhi	r2,129
  804268:	1091c3c4 	addi	r2,r2,18191
  80426c:	10800003 	ldbu	r2,0(r2)
  804270:	e0bf2f85 	stb	r2,-834(fp)

				Hal4D13_LockDevice(0); //This unlocks device for read/write access
  804274:	0009883a 	mov	r4,zero
  804278:	080205c0 	call	80205c <Hal4D13_LockDevice>
				Hal4D13_WriteEndpoint(EPINDEX4EP01, send_buffer, 8);
  80427c:	e17f2dc4 	addi	r5,fp,-841
  804280:	01000084 	movi	r4,2
  804284:	01800204 	movi	r6,8
  804288:	0801a380 	call	801a38 <Hal4D13_WriteEndpoint>
				bufferAvailable = FALSE;
  80428c:	e03f2b85 	stb	zero,-850(fp)
				readyToSend = FALSE;
  804290:	e03f2b45 	stb	zero,-851(fp)
			}
			enable_irq();
  804294:	0804cd80 	call	804cd8 <enable_irq>

			/* Update old report */
			old_report.keycode[0] = new_report.keycode[0]; //We only use one key slot so only need to to update one
  804298:	00802074 	movhi	r2,129
  80429c:	1091c284 	addi	r2,r2,18186
  8042a0:	10800003 	ldbu	r2,0(r2)
  8042a4:	e0bf2c45 	stb	r2,-847(fp)
			old_report.modifier = new_report.modifier;
  8042a8:	d0a01803 	ldbu	r2,-32672(gp)
  8042ac:	e0bf2bc5 	stb	r2,-849(fp)

			if (new_report.keycode[0] != 0)
  8042b0:	00802074 	movhi	r2,129
  8042b4:	1091c284 	addi	r2,r2,18186
  8042b8:	10800003 	ldbu	r2,0(r2)
  8042bc:	10803fcc 	andi	r2,r2,255
  8042c0:	1005003a 	cmpeq	r2,r2,zero
  8042c4:	1000071e 	bne	r2,zero,8042e4 <main+0xbd0>
				IOWR(GREEN_LEDS_BASE, 0, new_report.keycode[0]);
  8042c8:	00802074 	movhi	r2,129
  8042cc:	1091c284 	addi	r2,r2,18186
  8042d0:	10800003 	ldbu	r2,0(r2)
  8042d4:	10c03fcc 	andi	r3,r2,255
  8042d8:	00806474 	movhi	r2,401
  8042dc:	10a41404 	addi	r2,r2,-28592
  8042e0:	10c00035 	stwio	r3,0(r2)

		} //If Connected

		if (hid_settings.state == reset) {
  8042e4:	00802074 	movhi	r2,129
  8042e8:	1091c704 	addi	r2,r2,18204
  8042ec:	10800017 	ldw	r2,0(r2)
  8042f0:	1004c03a 	cmpne	r2,r2,zero
  8042f4:	103d791e 	bne	r2,zero,8038dc <main+0x1c8>
			gesture = 0x00;
  8042f8:	e03f2b05 	stb	zero,-852(fp)
			bufferAvailable = TRUE;
  8042fc:	00800044 	movi	r2,1
  804300:	e0bf2b85 	stb	r2,-850(fp)
		}

	} //While
  804304:	003d7506 	br	8038dc <main+0x1c8>

	return 0;
} //Main
  804308:	e0bffc17 	ldw	r2,-16(fp)
  80430c:	e037883a 	mov	sp,fp
  804310:	dfc00217 	ldw	ra,8(sp)
  804314:	df000117 	ldw	fp,4(sp)
  804318:	dc000017 	ldw	r16,0(sp)
  80431c:	dec00304 	addi	sp,sp,12
  804320:	f800283a 	ret

00804324 <reportChanged>:

/*
 * Check to see if data in report has changed
 */
BOOL reportChanged(HID_KEYS_REPORT old, HID_KEYS_REPORT new) {
  804324:	defff904 	addi	sp,sp,-28
  804328:	df000615 	stw	fp,24(sp)
  80432c:	df000604 	addi	fp,sp,24
  804330:	e13ffc15 	stw	r4,-16(fp)
  804334:	e17ffd15 	stw	r5,-12(fp)
  804338:	e1bffe15 	stw	r6,-8(fp)
  80433c:	e1ffff15 	stw	r7,-4(fp)
	BOOL rv = FALSE;
  804340:	e03ffb05 	stb	zero,-20(fp)
	int i;

	if (old.modifier != new.modifier) {
  804344:	e0bffc03 	ldbu	r2,-16(fp)
  804348:	e0fffe03 	ldbu	r3,-8(fp)
  80434c:	11003fcc 	andi	r4,r2,255
  804350:	18803fcc 	andi	r2,r3,255
  804354:	20800226 	beq	r4,r2,804360 <reportChanged+0x3c>
		rv = TRUE;
  804358:	00800044 	movi	r2,1
  80435c:	e0bffb05 	stb	r2,-20(fp)
	}
	for (i = 0; i < 6; i++) {
  804360:	e03ffa15 	stw	zero,-24(fp)
  804364:	00001006 	br	8043a8 <reportChanged+0x84>
		if (old.keycode[i] != new.keycode[i]) {
  804368:	e0fffa17 	ldw	r3,-24(fp)
  80436c:	e0bffc04 	addi	r2,fp,-16
  804370:	10c5883a 	add	r2,r2,r3
  804374:	11000083 	ldbu	r4,2(r2)
  804378:	e0fffa17 	ldw	r3,-24(fp)
  80437c:	e0bffe04 	addi	r2,fp,-8
  804380:	10c5883a 	add	r2,r2,r3
  804384:	10800083 	ldbu	r2,2(r2)
  804388:	20c03fcc 	andi	r3,r4,255
  80438c:	10803fcc 	andi	r2,r2,255
  804390:	18800226 	beq	r3,r2,80439c <reportChanged+0x78>
			rv = TRUE;
  804394:	00800044 	movi	r2,1
  804398:	e0bffb05 	stb	r2,-20(fp)
	int i;

	if (old.modifier != new.modifier) {
		rv = TRUE;
	}
	for (i = 0; i < 6; i++) {
  80439c:	e0bffa17 	ldw	r2,-24(fp)
  8043a0:	10800044 	addi	r2,r2,1
  8043a4:	e0bffa15 	stw	r2,-24(fp)
  8043a8:	e0bffa17 	ldw	r2,-24(fp)
  8043ac:	10800190 	cmplti	r2,r2,6
  8043b0:	103fed1e 	bne	r2,zero,804368 <reportChanged+0x44>
		if (old.keycode[i] != new.keycode[i]) {
			rv = TRUE;
		}
	}
	return rv;
  8043b4:	e0bffb03 	ldbu	r2,-20(fp)
}
  8043b8:	e037883a 	mov	sp,fp
  8043bc:	df000017 	ldw	fp,0(sp)
  8043c0:	dec00104 	addi	sp,sp,4
  8043c4:	f800283a 	ret

008043c8 <mapGestureToKeycodes>:

/*
 * Sets the values of the HID_KEYS_REPORT based on a passed gesture
 */
void mapGestureToKeycodes(HID_KEYS_REPORT * new, UCHAR gesture_code) {
  8043c8:	defffc04 	addi	sp,sp,-16
  8043cc:	df000315 	stw	fp,12(sp)
  8043d0:	df000304 	addi	fp,sp,12
  8043d4:	e13ffd15 	stw	r4,-12(fp)
  8043d8:	e17ffe05 	stb	r5,-8(fp)
	switch (gesture_code) {
  8043dc:	e0bffe03 	ldbu	r2,-8(fp)
  8043e0:	e0bfff15 	stw	r2,-4(fp)
  8043e4:	e0ffff17 	ldw	r3,-4(fp)
  8043e8:	18800168 	cmpgeui	r2,r3,5
  8043ec:	10002d1e 	bne	r2,zero,8044a4 <mapGestureToKeycodes+0xdc>
  8043f0:	e13fff17 	ldw	r4,-4(fp)
  8043f4:	e13fff17 	ldw	r4,-4(fp)
  8043f8:	2105883a 	add	r2,r4,r4
  8043fc:	1087883a 	add	r3,r2,r2
  804400:	00802034 	movhi	r2,128
  804404:	10910504 	addi	r2,r2,17428
  804408:	1885883a 	add	r2,r3,r2
  80440c:	10800017 	ldw	r2,0(r2)
  804410:	1000683a 	jmp	r2
  804414:	00804428 	cmpgeui	r2,zero,272
  804418:	0080443c 	xorhi	r2,zero,272
  80441c:	00804454 	movui	r2,273
  804420:	0080446c 	andhi	r2,zero,273
  804424:	00804488 	cmpgei	r2,zero,274
	case (GESTURE_NULL):
		new->modifier = MODIFIER_NONE;
  804428:	e0bffd17 	ldw	r2,-12(fp)
  80442c:	10000005 	stb	zero,0(r2)
		new->keycode[0] = KEY_NONE;
  804430:	e0bffd17 	ldw	r2,-12(fp)
  804434:	10000085 	stb	zero,2(r2)
		break;
  804438:	00001f06 	br	8044b8 <mapGestureToKeycodes+0xf0>
	case (GESTURE_UP):
		new->modifier = MODIFIER_NONE;
  80443c:	e0bffd17 	ldw	r2,-12(fp)
  804440:	10000005 	stb	zero,0(r2)
		new->keycode[0] = KEY_PAGEUP;
  804444:	e0fffd17 	ldw	r3,-12(fp)
  804448:	00801844 	movi	r2,97
  80444c:	18800085 	stb	r2,2(r3)
		break;
  804450:	00001906 	br	8044b8 <mapGestureToKeycodes+0xf0>
	case (GESTURE_DOWN):
		new->modifier = MODIFIER_NONE;
  804454:	e0bffd17 	ldw	r2,-12(fp)
  804458:	10000005 	stb	zero,0(r2)
		new->keycode[0] = KEY_PAGEDOWN;
  80445c:	e0fffd17 	ldw	r3,-12(fp)
  804460:	008016c4 	movi	r2,91
  804464:	18800085 	stb	r2,2(r3)
		break;
  804468:	00001306 	br	8044b8 <mapGestureToKeycodes+0xf0>
	case (GESTURE_LEFT):
		new->modifier = MODIFIER_ALT | MODIFIER_SHIFT;
  80446c:	e0fffd17 	ldw	r3,-12(fp)
  804470:	00800184 	movi	r2,6
  804474:	18800005 	stb	r2,0(r3)
		new->keycode[0] = KEY_TAB;
  804478:	e0fffd17 	ldw	r3,-12(fp)
  80447c:	00800ac4 	movi	r2,43
  804480:	18800085 	stb	r2,2(r3)
		break;
  804484:	00000c06 	br	8044b8 <mapGestureToKeycodes+0xf0>
	case (GESTURE_RIGHT):
		new->modifier = MODIFIER_ALT;
  804488:	e0fffd17 	ldw	r3,-12(fp)
  80448c:	00800104 	movi	r2,4
  804490:	18800005 	stb	r2,0(r3)
		new->keycode[0] = KEY_TAB;
  804494:	e0fffd17 	ldw	r3,-12(fp)
  804498:	00800ac4 	movi	r2,43
  80449c:	18800085 	stb	r2,2(r3)
		break;
  8044a0:	00000506 	br	8044b8 <mapGestureToKeycodes+0xf0>
	default:
		new->modifier = MODIFIER_ALT;
  8044a4:	e0bffd17 	ldw	r2,-12(fp)
  8044a8:	00c00104 	movi	r3,4
  8044ac:	10c00005 	stb	r3,0(r2)
		new->keycode[0] = KEY_NONE;
  8044b0:	e0bffd17 	ldw	r2,-12(fp)
  8044b4:	10000085 	stb	zero,2(r2)
		break;
	}
}
  8044b8:	e037883a 	mov	sp,fp
  8044bc:	df000017 	ldw	fp,0(sp)
  8044c0:	dec00104 	addi	sp,sp,4
  8044c4:	f800283a 	ret

008044c8 <noMovement>:

/*
 * Determines if any of the x, y or z values exceed thresholds.
 * If none do, return 1 (meaning no movement registered)
 */
int noMovement(int x, int y, int z) {
  8044c8:	defffb04 	addi	sp,sp,-20
  8044cc:	df000415 	stw	fp,16(sp)
  8044d0:	df000404 	addi	fp,sp,16
  8044d4:	e13ffc15 	stw	r4,-16(fp)
  8044d8:	e17ffd15 	stw	r5,-12(fp)
  8044dc:	e1bffe15 	stw	r6,-8(fp)
	if ((abs(x) < 1500) && (abs(y) < 1500) && (abs(z) < 1500)) {
  8044e0:	e0bffc17 	ldw	r2,-16(fp)
  8044e4:	10be8950 	cmplti	r2,r2,-1499
  8044e8:	1000121e 	bne	r2,zero,804534 <noMovement+0x6c>
  8044ec:	e0bffc17 	ldw	r2,-16(fp)
  8044f0:	10817708 	cmpgei	r2,r2,1500
  8044f4:	10000f1e 	bne	r2,zero,804534 <noMovement+0x6c>
  8044f8:	e0bffd17 	ldw	r2,-12(fp)
  8044fc:	10be8950 	cmplti	r2,r2,-1499
  804500:	10000c1e 	bne	r2,zero,804534 <noMovement+0x6c>
  804504:	e0bffd17 	ldw	r2,-12(fp)
  804508:	10817708 	cmpgei	r2,r2,1500
  80450c:	1000091e 	bne	r2,zero,804534 <noMovement+0x6c>
  804510:	e0bffe17 	ldw	r2,-8(fp)
  804514:	10be8950 	cmplti	r2,r2,-1499
  804518:	1000061e 	bne	r2,zero,804534 <noMovement+0x6c>
  80451c:	e0bffe17 	ldw	r2,-8(fp)
  804520:	10817708 	cmpgei	r2,r2,1500
  804524:	1000031e 	bne	r2,zero,804534 <noMovement+0x6c>
		return 1;
  804528:	00800044 	movi	r2,1
  80452c:	e0bfff15 	stw	r2,-4(fp)
  804530:	00000106 	br	804538 <noMovement+0x70>
	}
	return 0;
  804534:	e03fff15 	stw	zero,-4(fp)
  804538:	e0bfff17 	ldw	r2,-4(fp)
}
  80453c:	e037883a 	mov	sp,fp
  804540:	df000017 	ldw	fp,0(sp)
  804544:	dec00104 	addi	sp,sp,4
  804548:	f800283a 	ret

0080454c <largest>:
 * 			two for left,
 * 			three for right,
 * 			four for up,
 * 			five for down
 */
int largest(int x, int y, int z) {
  80454c:	defff504 	addi	sp,sp,-44
  804550:	df000a15 	stw	fp,40(sp)
  804554:	df000a04 	addi	fp,sp,40
  804558:	e13ff615 	stw	r4,-40(fp)
  80455c:	e17ff715 	stw	r5,-36(fp)
  804560:	e1bff815 	stw	r6,-32(fp)
	if (abs(x) >= abs(y) && abs(x) >= abs(z)) {
  804564:	e0bff617 	ldw	r2,-40(fp)
  804568:	e0bfff15 	stw	r2,-4(fp)
  80456c:	e0ffff17 	ldw	r3,-4(fp)
  804570:	1804403a 	cmpge	r2,r3,zero
  804574:	1000031e 	bne	r2,zero,804584 <largest+0x38>
  804578:	e0bfff17 	ldw	r2,-4(fp)
  80457c:	0085c83a 	sub	r2,zero,r2
  804580:	e0bfff15 	stw	r2,-4(fp)
  804584:	e0fff717 	ldw	r3,-36(fp)
  804588:	e0fffe15 	stw	r3,-8(fp)
  80458c:	e0fffe17 	ldw	r3,-8(fp)
  804590:	1804403a 	cmpge	r2,r3,zero
  804594:	1000031e 	bne	r2,zero,8045a4 <largest+0x58>
  804598:	e0bffe17 	ldw	r2,-8(fp)
  80459c:	0085c83a 	sub	r2,zero,r2
  8045a0:	e0bffe15 	stw	r2,-8(fp)
  8045a4:	e0ffff17 	ldw	r3,-4(fp)
  8045a8:	e0bffe17 	ldw	r2,-8(fp)
  8045ac:	18801b16 	blt	r3,r2,80461c <largest+0xd0>
  8045b0:	e0fff617 	ldw	r3,-40(fp)
  8045b4:	e0fffd15 	stw	r3,-12(fp)
  8045b8:	e0fffd17 	ldw	r3,-12(fp)
  8045bc:	1804403a 	cmpge	r2,r3,zero
  8045c0:	1000031e 	bne	r2,zero,8045d0 <largest+0x84>
  8045c4:	e0bffd17 	ldw	r2,-12(fp)
  8045c8:	0085c83a 	sub	r2,zero,r2
  8045cc:	e0bffd15 	stw	r2,-12(fp)
  8045d0:	e0fff817 	ldw	r3,-32(fp)
  8045d4:	e0fffc15 	stw	r3,-16(fp)
  8045d8:	e0fffc17 	ldw	r3,-16(fp)
  8045dc:	1804403a 	cmpge	r2,r3,zero
  8045e0:	1000031e 	bne	r2,zero,8045f0 <largest+0xa4>
  8045e4:	e0bffc17 	ldw	r2,-16(fp)
  8045e8:	0085c83a 	sub	r2,zero,r2
  8045ec:	e0bffc15 	stw	r2,-16(fp)
  8045f0:	e0fffd17 	ldw	r3,-12(fp)
  8045f4:	e0bffc17 	ldw	r2,-16(fp)
  8045f8:	18800816 	blt	r3,r2,80461c <largest+0xd0>
		if (x >= 0) {
  8045fc:	e0bff617 	ldw	r2,-40(fp)
  804600:	1004803a 	cmplt	r2,r2,zero
  804604:	1000021e 	bne	r2,zero,804610 <largest+0xc4>
			return 0;
  804608:	e03ffb15 	stw	zero,-20(fp)
  80460c:	00002706 	br	8046ac <largest+0x160>
		} else {
			return 1;
  804610:	00c00044 	movi	r3,1
  804614:	e0fffb15 	stw	r3,-20(fp)
  804618:	00002406 	br	8046ac <largest+0x160>
		}
	} else if (abs(y) >= abs(z)) {
  80461c:	e0bff717 	ldw	r2,-36(fp)
  804620:	e0bffa15 	stw	r2,-24(fp)
  804624:	e0fffa17 	ldw	r3,-24(fp)
  804628:	1804403a 	cmpge	r2,r3,zero
  80462c:	1000031e 	bne	r2,zero,80463c <largest+0xf0>
  804630:	e0bffa17 	ldw	r2,-24(fp)
  804634:	0085c83a 	sub	r2,zero,r2
  804638:	e0bffa15 	stw	r2,-24(fp)
  80463c:	e0fff817 	ldw	r3,-32(fp)
  804640:	e0fff915 	stw	r3,-28(fp)
  804644:	e0fff917 	ldw	r3,-28(fp)
  804648:	1804403a 	cmpge	r2,r3,zero
  80464c:	1000031e 	bne	r2,zero,80465c <largest+0x110>
  804650:	e0bff917 	ldw	r2,-28(fp)
  804654:	0085c83a 	sub	r2,zero,r2
  804658:	e0bff915 	stw	r2,-28(fp)
  80465c:	e0fffa17 	ldw	r3,-24(fp)
  804660:	e0bff917 	ldw	r2,-28(fp)
  804664:	18800916 	blt	r3,r2,80468c <largest+0x140>
		if (y >= 0) {
  804668:	e0bff717 	ldw	r2,-36(fp)
  80466c:	1004803a 	cmplt	r2,r2,zero
  804670:	1000031e 	bne	r2,zero,804680 <largest+0x134>
			return 2;
  804674:	00c00084 	movi	r3,2
  804678:	e0fffb15 	stw	r3,-20(fp)
  80467c:	00000b06 	br	8046ac <largest+0x160>
		} else {
			return 3;
  804680:	008000c4 	movi	r2,3
  804684:	e0bffb15 	stw	r2,-20(fp)
  804688:	00000806 	br	8046ac <largest+0x160>
		}
	} else {
		if (z >= 0) {
  80468c:	e0bff817 	ldw	r2,-32(fp)
  804690:	1004803a 	cmplt	r2,r2,zero
  804694:	1000031e 	bne	r2,zero,8046a4 <largest+0x158>
			return 4;
  804698:	00c00104 	movi	r3,4
  80469c:	e0fffb15 	stw	r3,-20(fp)
  8046a0:	00000206 	br	8046ac <largest+0x160>
		} else {
			return 5;
  8046a4:	00800144 	movi	r2,5
  8046a8:	e0bffb15 	stw	r2,-20(fp)
  8046ac:	e0bffb17 	ldw	r2,-20(fp)
		}
	}
}
  8046b0:	e037883a 	mov	sp,fp
  8046b4:	df000017 	ldw	fp,0(sp)
  8046b8:	dec00104 	addi	sp,sp,4
  8046bc:	f800283a 	ret

008046c0 <largestPalmLeft>:
 * 			two for left,
 * 			three for right,
 * 			four for up,
 * 			five for down
 */
int largestPalmLeft(int x, int y, int z) {
  8046c0:	defff504 	addi	sp,sp,-44
  8046c4:	df000a15 	stw	fp,40(sp)
  8046c8:	df000a04 	addi	fp,sp,40
  8046cc:	e13ff615 	stw	r4,-40(fp)
  8046d0:	e17ff715 	stw	r5,-36(fp)
  8046d4:	e1bff815 	stw	r6,-32(fp)
	if (abs(x) >= abs(y) && abs(x) >= abs(z)) {
  8046d8:	e0bff617 	ldw	r2,-40(fp)
  8046dc:	e0bfff15 	stw	r2,-4(fp)
  8046e0:	e0ffff17 	ldw	r3,-4(fp)
  8046e4:	1804403a 	cmpge	r2,r3,zero
  8046e8:	1000031e 	bne	r2,zero,8046f8 <largestPalmLeft+0x38>
  8046ec:	e0bfff17 	ldw	r2,-4(fp)
  8046f0:	0085c83a 	sub	r2,zero,r2
  8046f4:	e0bfff15 	stw	r2,-4(fp)
  8046f8:	e0fff717 	ldw	r3,-36(fp)
  8046fc:	e0fffe15 	stw	r3,-8(fp)
  804700:	e0fffe17 	ldw	r3,-8(fp)
  804704:	1804403a 	cmpge	r2,r3,zero
  804708:	1000031e 	bne	r2,zero,804718 <largestPalmLeft+0x58>
  80470c:	e0bffe17 	ldw	r2,-8(fp)
  804710:	0085c83a 	sub	r2,zero,r2
  804714:	e0bffe15 	stw	r2,-8(fp)
  804718:	e0ffff17 	ldw	r3,-4(fp)
  80471c:	e0bffe17 	ldw	r2,-8(fp)
  804720:	18801b16 	blt	r3,r2,804790 <largestPalmLeft+0xd0>
  804724:	e0fff617 	ldw	r3,-40(fp)
  804728:	e0fffd15 	stw	r3,-12(fp)
  80472c:	e0fffd17 	ldw	r3,-12(fp)
  804730:	1804403a 	cmpge	r2,r3,zero
  804734:	1000031e 	bne	r2,zero,804744 <largestPalmLeft+0x84>
  804738:	e0bffd17 	ldw	r2,-12(fp)
  80473c:	0085c83a 	sub	r2,zero,r2
  804740:	e0bffd15 	stw	r2,-12(fp)
  804744:	e0fff817 	ldw	r3,-32(fp)
  804748:	e0fffc15 	stw	r3,-16(fp)
  80474c:	e0fffc17 	ldw	r3,-16(fp)
  804750:	1804403a 	cmpge	r2,r3,zero
  804754:	1000031e 	bne	r2,zero,804764 <largestPalmLeft+0xa4>
  804758:	e0bffc17 	ldw	r2,-16(fp)
  80475c:	0085c83a 	sub	r2,zero,r2
  804760:	e0bffc15 	stw	r2,-16(fp)
  804764:	e0fffd17 	ldw	r3,-12(fp)
  804768:	e0bffc17 	ldw	r2,-16(fp)
  80476c:	18800816 	blt	r3,r2,804790 <largestPalmLeft+0xd0>
		if (x >= 0) {
  804770:	e0bff617 	ldw	r2,-40(fp)
  804774:	1004803a 	cmplt	r2,r2,zero
  804778:	1000021e 	bne	r2,zero,804784 <largestPalmLeft+0xc4>
			return 0;
  80477c:	e03ffb15 	stw	zero,-20(fp)
  804780:	00002706 	br	804820 <largestPalmLeft+0x160>
		} else {
			return 1;
  804784:	00c00044 	movi	r3,1
  804788:	e0fffb15 	stw	r3,-20(fp)
  80478c:	00002406 	br	804820 <largestPalmLeft+0x160>
		}
	} else if (abs(y) >= abs(z)) {
  804790:	e0bff717 	ldw	r2,-36(fp)
  804794:	e0bffa15 	stw	r2,-24(fp)
  804798:	e0fffa17 	ldw	r3,-24(fp)
  80479c:	1804403a 	cmpge	r2,r3,zero
  8047a0:	1000031e 	bne	r2,zero,8047b0 <largestPalmLeft+0xf0>
  8047a4:	e0bffa17 	ldw	r2,-24(fp)
  8047a8:	0085c83a 	sub	r2,zero,r2
  8047ac:	e0bffa15 	stw	r2,-24(fp)
  8047b0:	e0fff817 	ldw	r3,-32(fp)
  8047b4:	e0fff915 	stw	r3,-28(fp)
  8047b8:	e0fff917 	ldw	r3,-28(fp)
  8047bc:	1804403a 	cmpge	r2,r3,zero
  8047c0:	1000031e 	bne	r2,zero,8047d0 <largestPalmLeft+0x110>
  8047c4:	e0bff917 	ldw	r2,-28(fp)
  8047c8:	0085c83a 	sub	r2,zero,r2
  8047cc:	e0bff915 	stw	r2,-28(fp)
  8047d0:	e0fffa17 	ldw	r3,-24(fp)
  8047d4:	e0bff917 	ldw	r2,-28(fp)
  8047d8:	18800916 	blt	r3,r2,804800 <largestPalmLeft+0x140>
		if (y >= 0) {
  8047dc:	e0bff717 	ldw	r2,-36(fp)
  8047e0:	1004803a 	cmplt	r2,r2,zero
  8047e4:	1000031e 	bne	r2,zero,8047f4 <largestPalmLeft+0x134>
			return 4;
  8047e8:	00c00104 	movi	r3,4
  8047ec:	e0fffb15 	stw	r3,-20(fp)
  8047f0:	00000b06 	br	804820 <largestPalmLeft+0x160>
		} else {
			return 5;
  8047f4:	00800144 	movi	r2,5
  8047f8:	e0bffb15 	stw	r2,-20(fp)
  8047fc:	00000806 	br	804820 <largestPalmLeft+0x160>
		}
	} else {
		if (z >= 0) {
  804800:	e0bff817 	ldw	r2,-32(fp)
  804804:	1004803a 	cmplt	r2,r2,zero
  804808:	1000031e 	bne	r2,zero,804818 <largestPalmLeft+0x158>
			return 3;
  80480c:	00c000c4 	movi	r3,3
  804810:	e0fffb15 	stw	r3,-20(fp)
  804814:	00000206 	br	804820 <largestPalmLeft+0x160>
		} else {
			return 2;
  804818:	00800084 	movi	r2,2
  80481c:	e0bffb15 	stw	r2,-20(fp)
  804820:	e0bffb17 	ldw	r2,-20(fp)
		}
	}
}
  804824:	e037883a 	mov	sp,fp
  804828:	df000017 	ldw	fp,0(sp)
  80482c:	dec00104 	addi	sp,sp,4
  804830:	f800283a 	ret

00804834 <largestPalmRight>:
 * 			two for left,
 * 			three for right,
 * 			four for up,
 * 			five for down
 */
int largestPalmRight(int x, int y, int z) {
  804834:	defff504 	addi	sp,sp,-44
  804838:	df000a15 	stw	fp,40(sp)
  80483c:	df000a04 	addi	fp,sp,40
  804840:	e13ff615 	stw	r4,-40(fp)
  804844:	e17ff715 	stw	r5,-36(fp)
  804848:	e1bff815 	stw	r6,-32(fp)
	if (abs(x) >= abs(y) && abs(x) >= abs(z)) {
  80484c:	e0bff617 	ldw	r2,-40(fp)
  804850:	e0bfff15 	stw	r2,-4(fp)
  804854:	e0ffff17 	ldw	r3,-4(fp)
  804858:	1804403a 	cmpge	r2,r3,zero
  80485c:	1000031e 	bne	r2,zero,80486c <largestPalmRight+0x38>
  804860:	e0bfff17 	ldw	r2,-4(fp)
  804864:	0085c83a 	sub	r2,zero,r2
  804868:	e0bfff15 	stw	r2,-4(fp)
  80486c:	e0fff717 	ldw	r3,-36(fp)
  804870:	e0fffe15 	stw	r3,-8(fp)
  804874:	e0fffe17 	ldw	r3,-8(fp)
  804878:	1804403a 	cmpge	r2,r3,zero
  80487c:	1000031e 	bne	r2,zero,80488c <largestPalmRight+0x58>
  804880:	e0bffe17 	ldw	r2,-8(fp)
  804884:	0085c83a 	sub	r2,zero,r2
  804888:	e0bffe15 	stw	r2,-8(fp)
  80488c:	e0ffff17 	ldw	r3,-4(fp)
  804890:	e0bffe17 	ldw	r2,-8(fp)
  804894:	18801b16 	blt	r3,r2,804904 <largestPalmRight+0xd0>
  804898:	e0fff617 	ldw	r3,-40(fp)
  80489c:	e0fffd15 	stw	r3,-12(fp)
  8048a0:	e0fffd17 	ldw	r3,-12(fp)
  8048a4:	1804403a 	cmpge	r2,r3,zero
  8048a8:	1000031e 	bne	r2,zero,8048b8 <largestPalmRight+0x84>
  8048ac:	e0bffd17 	ldw	r2,-12(fp)
  8048b0:	0085c83a 	sub	r2,zero,r2
  8048b4:	e0bffd15 	stw	r2,-12(fp)
  8048b8:	e0fff817 	ldw	r3,-32(fp)
  8048bc:	e0fffc15 	stw	r3,-16(fp)
  8048c0:	e0fffc17 	ldw	r3,-16(fp)
  8048c4:	1804403a 	cmpge	r2,r3,zero
  8048c8:	1000031e 	bne	r2,zero,8048d8 <largestPalmRight+0xa4>
  8048cc:	e0bffc17 	ldw	r2,-16(fp)
  8048d0:	0085c83a 	sub	r2,zero,r2
  8048d4:	e0bffc15 	stw	r2,-16(fp)
  8048d8:	e0fffd17 	ldw	r3,-12(fp)
  8048dc:	e0bffc17 	ldw	r2,-16(fp)
  8048e0:	18800816 	blt	r3,r2,804904 <largestPalmRight+0xd0>
		if (x >= 0) {
  8048e4:	e0bff617 	ldw	r2,-40(fp)
  8048e8:	1004803a 	cmplt	r2,r2,zero
  8048ec:	1000021e 	bne	r2,zero,8048f8 <largestPalmRight+0xc4>
			return 0;
  8048f0:	e03ffb15 	stw	zero,-20(fp)
  8048f4:	00002706 	br	804994 <largestPalmRight+0x160>
		} else {
			return 1;
  8048f8:	00c00044 	movi	r3,1
  8048fc:	e0fffb15 	stw	r3,-20(fp)
  804900:	00002406 	br	804994 <largestPalmRight+0x160>
		}
	} else if (abs(y) >= abs(z)) {
  804904:	e0bff717 	ldw	r2,-36(fp)
  804908:	e0bffa15 	stw	r2,-24(fp)
  80490c:	e0fffa17 	ldw	r3,-24(fp)
  804910:	1804403a 	cmpge	r2,r3,zero
  804914:	1000031e 	bne	r2,zero,804924 <largestPalmRight+0xf0>
  804918:	e0bffa17 	ldw	r2,-24(fp)
  80491c:	0085c83a 	sub	r2,zero,r2
  804920:	e0bffa15 	stw	r2,-24(fp)
  804924:	e0fff817 	ldw	r3,-32(fp)
  804928:	e0fff915 	stw	r3,-28(fp)
  80492c:	e0fff917 	ldw	r3,-28(fp)
  804930:	1804403a 	cmpge	r2,r3,zero
  804934:	1000031e 	bne	r2,zero,804944 <largestPalmRight+0x110>
  804938:	e0bff917 	ldw	r2,-28(fp)
  80493c:	0085c83a 	sub	r2,zero,r2
  804940:	e0bff915 	stw	r2,-28(fp)
  804944:	e0fffa17 	ldw	r3,-24(fp)
  804948:	e0bff917 	ldw	r2,-28(fp)
  80494c:	18800916 	blt	r3,r2,804974 <largestPalmRight+0x140>
		if (y >= 0) {
  804950:	e0bff717 	ldw	r2,-36(fp)
  804954:	1004803a 	cmplt	r2,r2,zero
  804958:	1000031e 	bne	r2,zero,804968 <largestPalmRight+0x134>
			return 5;
  80495c:	00c00144 	movi	r3,5
  804960:	e0fffb15 	stw	r3,-20(fp)
  804964:	00000b06 	br	804994 <largestPalmRight+0x160>
		} else {
			return 4;
  804968:	00800104 	movi	r2,4
  80496c:	e0bffb15 	stw	r2,-20(fp)
  804970:	00000806 	br	804994 <largestPalmRight+0x160>
		}
	} else {
		if (z >= 0) {
  804974:	e0bff817 	ldw	r2,-32(fp)
  804978:	1004803a 	cmplt	r2,r2,zero
  80497c:	1000031e 	bne	r2,zero,80498c <largestPalmRight+0x158>
			return 2;
  804980:	00c00084 	movi	r3,2
  804984:	e0fffb15 	stw	r3,-20(fp)
  804988:	00000206 	br	804994 <largestPalmRight+0x160>
		} else {
			return 3;
  80498c:	008000c4 	movi	r2,3
  804990:	e0bffb15 	stw	r2,-20(fp)
  804994:	e0bffb17 	ldw	r2,-20(fp)
		}
	}
}
  804998:	e037883a 	mov	sp,fp
  80499c:	df000017 	ldw	fp,0(sp)
  8049a0:	dec00104 	addi	sp,sp,4
  8049a4:	f800283a 	ret

008049a8 <largestPalmUp>:
 * 			two for left,
 * 			three for right,
 * 			four for up,
 * 			five for down
 */
int largestPalmUp(int x, int y, int z) {
  8049a8:	defff504 	addi	sp,sp,-44
  8049ac:	df000a15 	stw	fp,40(sp)
  8049b0:	df000a04 	addi	fp,sp,40
  8049b4:	e13ff615 	stw	r4,-40(fp)
  8049b8:	e17ff715 	stw	r5,-36(fp)
  8049bc:	e1bff815 	stw	r6,-32(fp)
	if (abs(x) >= abs(y) && abs(x) >= abs(z)) {
  8049c0:	e0bff617 	ldw	r2,-40(fp)
  8049c4:	e0bfff15 	stw	r2,-4(fp)
  8049c8:	e0ffff17 	ldw	r3,-4(fp)
  8049cc:	1804403a 	cmpge	r2,r3,zero
  8049d0:	1000031e 	bne	r2,zero,8049e0 <largestPalmUp+0x38>
  8049d4:	e0bfff17 	ldw	r2,-4(fp)
  8049d8:	0085c83a 	sub	r2,zero,r2
  8049dc:	e0bfff15 	stw	r2,-4(fp)
  8049e0:	e0fff717 	ldw	r3,-36(fp)
  8049e4:	e0fffe15 	stw	r3,-8(fp)
  8049e8:	e0fffe17 	ldw	r3,-8(fp)
  8049ec:	1804403a 	cmpge	r2,r3,zero
  8049f0:	1000031e 	bne	r2,zero,804a00 <largestPalmUp+0x58>
  8049f4:	e0bffe17 	ldw	r2,-8(fp)
  8049f8:	0085c83a 	sub	r2,zero,r2
  8049fc:	e0bffe15 	stw	r2,-8(fp)
  804a00:	e0ffff17 	ldw	r3,-4(fp)
  804a04:	e0bffe17 	ldw	r2,-8(fp)
  804a08:	18801b16 	blt	r3,r2,804a78 <largestPalmUp+0xd0>
  804a0c:	e0fff617 	ldw	r3,-40(fp)
  804a10:	e0fffd15 	stw	r3,-12(fp)
  804a14:	e0fffd17 	ldw	r3,-12(fp)
  804a18:	1804403a 	cmpge	r2,r3,zero
  804a1c:	1000031e 	bne	r2,zero,804a2c <largestPalmUp+0x84>
  804a20:	e0bffd17 	ldw	r2,-12(fp)
  804a24:	0085c83a 	sub	r2,zero,r2
  804a28:	e0bffd15 	stw	r2,-12(fp)
  804a2c:	e0fff817 	ldw	r3,-32(fp)
  804a30:	e0fffc15 	stw	r3,-16(fp)
  804a34:	e0fffc17 	ldw	r3,-16(fp)
  804a38:	1804403a 	cmpge	r2,r3,zero
  804a3c:	1000031e 	bne	r2,zero,804a4c <largestPalmUp+0xa4>
  804a40:	e0bffc17 	ldw	r2,-16(fp)
  804a44:	0085c83a 	sub	r2,zero,r2
  804a48:	e0bffc15 	stw	r2,-16(fp)
  804a4c:	e0fffd17 	ldw	r3,-12(fp)
  804a50:	e0bffc17 	ldw	r2,-16(fp)
  804a54:	18800816 	blt	r3,r2,804a78 <largestPalmUp+0xd0>
		if (x >= 0) {
  804a58:	e0bff617 	ldw	r2,-40(fp)
  804a5c:	1004803a 	cmplt	r2,r2,zero
  804a60:	1000021e 	bne	r2,zero,804a6c <largestPalmUp+0xc4>
			return 0;
  804a64:	e03ffb15 	stw	zero,-20(fp)
  804a68:	00002706 	br	804b08 <largestPalmUp+0x160>
		} else {
			return 1;
  804a6c:	00c00044 	movi	r3,1
  804a70:	e0fffb15 	stw	r3,-20(fp)
  804a74:	00002406 	br	804b08 <largestPalmUp+0x160>
		}
	} else if (abs(y) >= abs(z)) {
  804a78:	e0bff717 	ldw	r2,-36(fp)
  804a7c:	e0bffa15 	stw	r2,-24(fp)
  804a80:	e0fffa17 	ldw	r3,-24(fp)
  804a84:	1804403a 	cmpge	r2,r3,zero
  804a88:	1000031e 	bne	r2,zero,804a98 <largestPalmUp+0xf0>
  804a8c:	e0bffa17 	ldw	r2,-24(fp)
  804a90:	0085c83a 	sub	r2,zero,r2
  804a94:	e0bffa15 	stw	r2,-24(fp)
  804a98:	e0fff817 	ldw	r3,-32(fp)
  804a9c:	e0fff915 	stw	r3,-28(fp)
  804aa0:	e0fff917 	ldw	r3,-28(fp)
  804aa4:	1804403a 	cmpge	r2,r3,zero
  804aa8:	1000031e 	bne	r2,zero,804ab8 <largestPalmUp+0x110>
  804aac:	e0bff917 	ldw	r2,-28(fp)
  804ab0:	0085c83a 	sub	r2,zero,r2
  804ab4:	e0bff915 	stw	r2,-28(fp)
  804ab8:	e0fffa17 	ldw	r3,-24(fp)
  804abc:	e0bff917 	ldw	r2,-28(fp)
  804ac0:	18800916 	blt	r3,r2,804ae8 <largestPalmUp+0x140>
		if (y >= 0) {
  804ac4:	e0bff717 	ldw	r2,-36(fp)
  804ac8:	1004803a 	cmplt	r2,r2,zero
  804acc:	1000031e 	bne	r2,zero,804adc <largestPalmUp+0x134>
			return 3;
  804ad0:	00c000c4 	movi	r3,3
  804ad4:	e0fffb15 	stw	r3,-20(fp)
  804ad8:	00000b06 	br	804b08 <largestPalmUp+0x160>
		} else {
			return 2;
  804adc:	00800084 	movi	r2,2
  804ae0:	e0bffb15 	stw	r2,-20(fp)
  804ae4:	00000806 	br	804b08 <largestPalmUp+0x160>
		}
	} else {
		if (z >= 0) {
  804ae8:	e0bff817 	ldw	r2,-32(fp)
  804aec:	1004803a 	cmplt	r2,r2,zero
  804af0:	1000031e 	bne	r2,zero,804b00 <largestPalmUp+0x158>
			return 5;
  804af4:	00c00144 	movi	r3,5
  804af8:	e0fffb15 	stw	r3,-20(fp)
  804afc:	00000206 	br	804b08 <largestPalmUp+0x160>
		} else {
			return 4;
  804b00:	00800104 	movi	r2,4
  804b04:	e0bffb15 	stw	r2,-20(fp)
  804b08:	e0bffb17 	ldw	r2,-20(fp)
		}
	}
}
  804b0c:	e037883a 	mov	sp,fp
  804b10:	df000017 	ldw	fp,0(sp)
  804b14:	dec00104 	addi	sp,sp,4
  804b18:	f800283a 	ret

00804b1c <orientation>:
 * returns: zero for palm down,
 * 			one for palm left,
 * 			two for palm right,
 * 			three for palm up
 */
int orientation(int x, int y, int z) {
  804b1c:	defff504 	addi	sp,sp,-44
  804b20:	df000a15 	stw	fp,40(sp)
  804b24:	df000a04 	addi	fp,sp,40
  804b28:	e13ff615 	stw	r4,-40(fp)
  804b2c:	e17ff715 	stw	r5,-36(fp)
  804b30:	e1bff815 	stw	r6,-32(fp)
	if (abs(z) >= abs(y) && abs(z) >= abs(x)) {
  804b34:	e0bff817 	ldw	r2,-32(fp)
  804b38:	e0bfff15 	stw	r2,-4(fp)
  804b3c:	e0ffff17 	ldw	r3,-4(fp)
  804b40:	1804403a 	cmpge	r2,r3,zero
  804b44:	1000031e 	bne	r2,zero,804b54 <orientation+0x38>
  804b48:	e0bfff17 	ldw	r2,-4(fp)
  804b4c:	0085c83a 	sub	r2,zero,r2
  804b50:	e0bfff15 	stw	r2,-4(fp)
  804b54:	e0fff717 	ldw	r3,-36(fp)
  804b58:	e0fffe15 	stw	r3,-8(fp)
  804b5c:	e0fffe17 	ldw	r3,-8(fp)
  804b60:	1804403a 	cmpge	r2,r3,zero
  804b64:	1000031e 	bne	r2,zero,804b74 <orientation+0x58>
  804b68:	e0bffe17 	ldw	r2,-8(fp)
  804b6c:	0085c83a 	sub	r2,zero,r2
  804b70:	e0bffe15 	stw	r2,-8(fp)
  804b74:	e0ffff17 	ldw	r3,-4(fp)
  804b78:	e0bffe17 	ldw	r2,-8(fp)
  804b7c:	18801b16 	blt	r3,r2,804bec <orientation+0xd0>
  804b80:	e0fff817 	ldw	r3,-32(fp)
  804b84:	e0fffd15 	stw	r3,-12(fp)
  804b88:	e0fffd17 	ldw	r3,-12(fp)
  804b8c:	1804403a 	cmpge	r2,r3,zero
  804b90:	1000031e 	bne	r2,zero,804ba0 <orientation+0x84>
  804b94:	e0bffd17 	ldw	r2,-12(fp)
  804b98:	0085c83a 	sub	r2,zero,r2
  804b9c:	e0bffd15 	stw	r2,-12(fp)
  804ba0:	e0fff617 	ldw	r3,-40(fp)
  804ba4:	e0fffc15 	stw	r3,-16(fp)
  804ba8:	e0fffc17 	ldw	r3,-16(fp)
  804bac:	1804403a 	cmpge	r2,r3,zero
  804bb0:	1000031e 	bne	r2,zero,804bc0 <orientation+0xa4>
  804bb4:	e0bffc17 	ldw	r2,-16(fp)
  804bb8:	0085c83a 	sub	r2,zero,r2
  804bbc:	e0bffc15 	stw	r2,-16(fp)
  804bc0:	e0fffd17 	ldw	r3,-12(fp)
  804bc4:	e0bffc17 	ldw	r2,-16(fp)
  804bc8:	18800816 	blt	r3,r2,804bec <orientation+0xd0>
		if (z >= 0) {
  804bcc:	e0bff817 	ldw	r2,-32(fp)
  804bd0:	1004803a 	cmplt	r2,r2,zero
  804bd4:	1000021e 	bne	r2,zero,804be0 <orientation+0xc4>
			return 0;
  804bd8:	e03ffb15 	stw	zero,-20(fp)
  804bdc:	00002506 	br	804c74 <orientation+0x158>
		} else {
			return 3;
  804be0:	00c000c4 	movi	r3,3
  804be4:	e0fffb15 	stw	r3,-20(fp)
  804be8:	00002206 	br	804c74 <orientation+0x158>
		}
	} else if (abs(y) >= abs(x)) {
  804bec:	e0bff717 	ldw	r2,-36(fp)
  804bf0:	e0bffa15 	stw	r2,-24(fp)
  804bf4:	e0fffa17 	ldw	r3,-24(fp)
  804bf8:	1804403a 	cmpge	r2,r3,zero
  804bfc:	1000031e 	bne	r2,zero,804c0c <orientation+0xf0>
  804c00:	e0bffa17 	ldw	r2,-24(fp)
  804c04:	0085c83a 	sub	r2,zero,r2
  804c08:	e0bffa15 	stw	r2,-24(fp)
  804c0c:	e0fff617 	ldw	r3,-40(fp)
  804c10:	e0fff915 	stw	r3,-28(fp)
  804c14:	e0fff917 	ldw	r3,-28(fp)
  804c18:	1804403a 	cmpge	r2,r3,zero
  804c1c:	1000031e 	bne	r2,zero,804c2c <orientation+0x110>
  804c20:	e0bff917 	ldw	r2,-28(fp)
  804c24:	0085c83a 	sub	r2,zero,r2
  804c28:	e0bff915 	stw	r2,-28(fp)
  804c2c:	e0fffa17 	ldw	r3,-24(fp)
  804c30:	e0bff917 	ldw	r2,-28(fp)
  804c34:	18800916 	blt	r3,r2,804c5c <orientation+0x140>
		if (y >= 0) {
  804c38:	e0bff717 	ldw	r2,-36(fp)
  804c3c:	1004803a 	cmplt	r2,r2,zero
  804c40:	1000031e 	bne	r2,zero,804c50 <orientation+0x134>
			return 1;
  804c44:	00c00044 	movi	r3,1
  804c48:	e0fffb15 	stw	r3,-20(fp)
  804c4c:	00000906 	br	804c74 <orientation+0x158>
		} else {
			return 2;
  804c50:	00800084 	movi	r2,2
  804c54:	e0bffb15 	stw	r2,-20(fp)
  804c58:	00000606 	br	804c74 <orientation+0x158>
		}
	} else {
		if (x >= 0) {
  804c5c:	e0bff617 	ldw	r2,-40(fp)
  804c60:	1004803a 	cmplt	r2,r2,zero
  804c64:	1000021e 	bne	r2,zero,804c70 <orientation+0x154>
			return 0;
  804c68:	e03ffb15 	stw	zero,-20(fp)
  804c6c:	00000106 	br	804c74 <orientation+0x158>
		} else {
			return 0;
  804c70:	e03ffb15 	stw	zero,-20(fp)
  804c74:	e0bffb17 	ldw	r2,-20(fp)
		}
	}
}
  804c78:	e037883a 	mov	sp,fp
  804c7c:	df000017 	ldw	fp,0(sp)
  804c80:	dec00104 	addi	sp,sp,4
  804c84:	f800283a 	ret

00804c88 <disable_irq>:

alt_irq_context status;
unsigned char INT_Enabled=1;

void disable_irq(void)
{
  804c88:	defffe04 	addi	sp,sp,-8
  804c8c:	df000115 	stw	fp,4(sp)
  804c90:	df000104 	addi	fp,sp,4
  if(INT_Enabled)
  804c94:	d0a00403 	ldbu	r2,-32752(gp)
  804c98:	10803fcc 	andi	r2,r2,255
  804c9c:	1005003a 	cmpeq	r2,r2,zero
  804ca0:	1000091e 	bne	r2,zero,804cc8 <disable_irq+0x40>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804ca4:	0005303a 	rdctl	r2,status
  804ca8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804cac:	e0ffff17 	ldw	r3,-4(fp)
  804cb0:	00bfff84 	movi	r2,-2
  804cb4:	1884703a 	and	r2,r3,r2
  804cb8:	1001703a 	wrctl	status,r2
  
  return context;
  804cbc:	e0bfff17 	ldw	r2,-4(fp)
  {
    status=alt_irq_disable_all();
  804cc0:	d0a01f15 	stw	r2,-32644(gp)
    INT_Enabled=0;
  804cc4:	d0200405 	stb	zero,-32752(gp)
  }
}
  804cc8:	e037883a 	mov	sp,fp
  804ccc:	df000017 	ldw	fp,0(sp)
  804cd0:	dec00104 	addi	sp,sp,4
  804cd4:	f800283a 	ret

00804cd8 <enable_irq>:

void enable_irq(void)
{
  804cd8:	defffe04 	addi	sp,sp,-8
  804cdc:	df000115 	stw	fp,4(sp)
  804ce0:	df000104 	addi	fp,sp,4
  if(!INT_Enabled)
  804ce4:	d0a00403 	ldbu	r2,-32752(gp)
  804ce8:	10803fcc 	andi	r2,r2,255
  804cec:	1004c03a 	cmpne	r2,r2,zero
  804cf0:	1000061e 	bne	r2,zero,804d0c <enable_irq+0x34>
  {
    alt_irq_enable_all(status);
  804cf4:	d0a01f17 	ldw	r2,-32644(gp)
  804cf8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804cfc:	e0bfff17 	ldw	r2,-4(fp)
  804d00:	1001703a 	wrctl	status,r2
    INT_Enabled=1;    
  804d04:	00800044 	movi	r2,1
  804d08:	d0a00405 	stb	r2,-32752(gp)
  }
}
  804d0c:	e037883a 	mov	sp,fp
  804d10:	df000017 	ldw	fp,0(sp)
  804d14:	dec00104 	addi	sp,sp,4
  804d18:	f800283a 	ret

00804d1c <_fpadd_parts>:
  804d1c:	defff804 	addi	sp,sp,-32
  804d20:	dcc00315 	stw	r19,12(sp)
  804d24:	2027883a 	mov	r19,r4
  804d28:	21000017 	ldw	r4,0(r4)
  804d2c:	00c00044 	movi	r3,1
  804d30:	dd400515 	stw	r21,20(sp)
  804d34:	dd000415 	stw	r20,16(sp)
  804d38:	ddc00715 	stw	r23,28(sp)
  804d3c:	dd800615 	stw	r22,24(sp)
  804d40:	dc800215 	stw	r18,8(sp)
  804d44:	dc400115 	stw	r17,4(sp)
  804d48:	dc000015 	stw	r16,0(sp)
  804d4c:	282b883a 	mov	r21,r5
  804d50:	3029883a 	mov	r20,r6
  804d54:	1900632e 	bgeu	r3,r4,804ee4 <_fpadd_parts+0x1c8>
  804d58:	28800017 	ldw	r2,0(r5)
  804d5c:	1880812e 	bgeu	r3,r2,804f64 <_fpadd_parts+0x248>
  804d60:	00c00104 	movi	r3,4
  804d64:	20c0dc26 	beq	r4,r3,8050d8 <_fpadd_parts+0x3bc>
  804d68:	10c07e26 	beq	r2,r3,804f64 <_fpadd_parts+0x248>
  804d6c:	00c00084 	movi	r3,2
  804d70:	10c06726 	beq	r2,r3,804f10 <_fpadd_parts+0x1f4>
  804d74:	20c07b26 	beq	r4,r3,804f64 <_fpadd_parts+0x248>
  804d78:	9dc00217 	ldw	r23,8(r19)
  804d7c:	28c00217 	ldw	r3,8(r5)
  804d80:	9c400317 	ldw	r17,12(r19)
  804d84:	2bc00317 	ldw	r15,12(r5)
  804d88:	b8cdc83a 	sub	r6,r23,r3
  804d8c:	9c800417 	ldw	r18,16(r19)
  804d90:	2c000417 	ldw	r16,16(r5)
  804d94:	3009883a 	mov	r4,r6
  804d98:	30009716 	blt	r6,zero,804ff8 <_fpadd_parts+0x2dc>
  804d9c:	00800fc4 	movi	r2,63
  804da0:	11806b16 	blt	r2,r6,804f50 <_fpadd_parts+0x234>
  804da4:	0100a40e 	bge	zero,r4,805038 <_fpadd_parts+0x31c>
  804da8:	35bff804 	addi	r22,r6,-32
  804dac:	b000bc16 	blt	r22,zero,8050a0 <_fpadd_parts+0x384>
  804db0:	8596d83a 	srl	r11,r16,r22
  804db4:	0019883a 	mov	r12,zero
  804db8:	0013883a 	mov	r9,zero
  804dbc:	01000044 	movi	r4,1
  804dc0:	0015883a 	mov	r10,zero
  804dc4:	b000be16 	blt	r22,zero,8050c0 <_fpadd_parts+0x3a4>
  804dc8:	2590983a 	sll	r8,r4,r22
  804dcc:	000f883a 	mov	r7,zero
  804dd0:	00bfffc4 	movi	r2,-1
  804dd4:	3889883a 	add	r4,r7,r2
  804dd8:	408b883a 	add	r5,r8,r2
  804ddc:	21cd803a 	cmpltu	r6,r4,r7
  804de0:	314b883a 	add	r5,r6,r5
  804de4:	7904703a 	and	r2,r15,r4
  804de8:	8146703a 	and	r3,r16,r5
  804dec:	10c4b03a 	or	r2,r2,r3
  804df0:	10000226 	beq	r2,zero,804dfc <_fpadd_parts+0xe0>
  804df4:	02400044 	movi	r9,1
  804df8:	0015883a 	mov	r10,zero
  804dfc:	5a5eb03a 	or	r15,r11,r9
  804e00:	62a0b03a 	or	r16,r12,r10
  804e04:	99400117 	ldw	r5,4(r19)
  804e08:	a8800117 	ldw	r2,4(r21)
  804e0c:	28806e26 	beq	r5,r2,804fc8 <_fpadd_parts+0x2ac>
  804e10:	28006626 	beq	r5,zero,804fac <_fpadd_parts+0x290>
  804e14:	7c45c83a 	sub	r2,r15,r17
  804e18:	7889803a 	cmpltu	r4,r15,r2
  804e1c:	8487c83a 	sub	r3,r16,r18
  804e20:	1909c83a 	sub	r4,r3,r4
  804e24:	100d883a 	mov	r6,r2
  804e28:	200f883a 	mov	r7,r4
  804e2c:	38007716 	blt	r7,zero,80500c <_fpadd_parts+0x2f0>
  804e30:	a5c00215 	stw	r23,8(r20)
  804e34:	a1c00415 	stw	r7,16(r20)
  804e38:	a0000115 	stw	zero,4(r20)
  804e3c:	a1800315 	stw	r6,12(r20)
  804e40:	a2000317 	ldw	r8,12(r20)
  804e44:	a2400417 	ldw	r9,16(r20)
  804e48:	00bfffc4 	movi	r2,-1
  804e4c:	408b883a 	add	r5,r8,r2
  804e50:	2a09803a 	cmpltu	r4,r5,r8
  804e54:	488d883a 	add	r6,r9,r2
  804e58:	01c40034 	movhi	r7,4096
  804e5c:	39ffffc4 	addi	r7,r7,-1
  804e60:	218d883a 	add	r6,r4,r6
  804e64:	39801736 	bltu	r7,r6,804ec4 <_fpadd_parts+0x1a8>
  804e68:	31c06526 	beq	r6,r7,805000 <_fpadd_parts+0x2e4>
  804e6c:	a3000217 	ldw	r12,8(r20)
  804e70:	4209883a 	add	r4,r8,r8
  804e74:	00bfffc4 	movi	r2,-1
  804e78:	220f803a 	cmpltu	r7,r4,r8
  804e7c:	4a4b883a 	add	r5,r9,r9
  804e80:	394f883a 	add	r7,r7,r5
  804e84:	2095883a 	add	r10,r4,r2
  804e88:	3897883a 	add	r11,r7,r2
  804e8c:	510d803a 	cmpltu	r6,r10,r4
  804e90:	6099883a 	add	r12,r12,r2
  804e94:	32d7883a 	add	r11,r6,r11
  804e98:	00840034 	movhi	r2,4096
  804e9c:	10bfffc4 	addi	r2,r2,-1
  804ea0:	2011883a 	mov	r8,r4
  804ea4:	3813883a 	mov	r9,r7
  804ea8:	a1000315 	stw	r4,12(r20)
  804eac:	a1c00415 	stw	r7,16(r20)
  804eb0:	a3000215 	stw	r12,8(r20)
  804eb4:	12c00336 	bltu	r2,r11,804ec4 <_fpadd_parts+0x1a8>
  804eb8:	58bfed1e 	bne	r11,r2,804e70 <_fpadd_parts+0x154>
  804ebc:	00bfff84 	movi	r2,-2
  804ec0:	12bfeb2e 	bgeu	r2,r10,804e70 <_fpadd_parts+0x154>
  804ec4:	a2800417 	ldw	r10,16(r20)
  804ec8:	008000c4 	movi	r2,3
  804ecc:	00c80034 	movhi	r3,8192
  804ed0:	18ffffc4 	addi	r3,r3,-1
  804ed4:	a2400317 	ldw	r9,12(r20)
  804ed8:	a0800015 	stw	r2,0(r20)
  804edc:	1a802336 	bltu	r3,r10,804f6c <_fpadd_parts+0x250>
  804ee0:	a027883a 	mov	r19,r20
  804ee4:	9805883a 	mov	r2,r19
  804ee8:	ddc00717 	ldw	r23,28(sp)
  804eec:	dd800617 	ldw	r22,24(sp)
  804ef0:	dd400517 	ldw	r21,20(sp)
  804ef4:	dd000417 	ldw	r20,16(sp)
  804ef8:	dcc00317 	ldw	r19,12(sp)
  804efc:	dc800217 	ldw	r18,8(sp)
  804f00:	dc400117 	ldw	r17,4(sp)
  804f04:	dc000017 	ldw	r16,0(sp)
  804f08:	dec00804 	addi	sp,sp,32
  804f0c:	f800283a 	ret
  804f10:	20fff41e 	bne	r4,r3,804ee4 <_fpadd_parts+0x1c8>
  804f14:	31000015 	stw	r4,0(r6)
  804f18:	98800117 	ldw	r2,4(r19)
  804f1c:	30800115 	stw	r2,4(r6)
  804f20:	98c00217 	ldw	r3,8(r19)
  804f24:	30c00215 	stw	r3,8(r6)
  804f28:	98800317 	ldw	r2,12(r19)
  804f2c:	30800315 	stw	r2,12(r6)
  804f30:	98c00417 	ldw	r3,16(r19)
  804f34:	30c00415 	stw	r3,16(r6)
  804f38:	98800117 	ldw	r2,4(r19)
  804f3c:	28c00117 	ldw	r3,4(r5)
  804f40:	3027883a 	mov	r19,r6
  804f44:	10c4703a 	and	r2,r2,r3
  804f48:	30800115 	stw	r2,4(r6)
  804f4c:	003fe506 	br	804ee4 <_fpadd_parts+0x1c8>
  804f50:	1dc02616 	blt	r3,r23,804fec <_fpadd_parts+0x2d0>
  804f54:	0023883a 	mov	r17,zero
  804f58:	182f883a 	mov	r23,r3
  804f5c:	0025883a 	mov	r18,zero
  804f60:	003fa806 	br	804e04 <_fpadd_parts+0xe8>
  804f64:	a827883a 	mov	r19,r21
  804f68:	003fde06 	br	804ee4 <_fpadd_parts+0x1c8>
  804f6c:	01800044 	movi	r6,1
  804f70:	500497fa 	slli	r2,r10,31
  804f74:	4808d07a 	srli	r4,r9,1
  804f78:	518ad83a 	srl	r5,r10,r6
  804f7c:	a2000217 	ldw	r8,8(r20)
  804f80:	1108b03a 	or	r4,r2,r4
  804f84:	0007883a 	mov	r3,zero
  804f88:	4984703a 	and	r2,r9,r6
  804f8c:	208cb03a 	or	r6,r4,r2
  804f90:	28ceb03a 	or	r7,r5,r3
  804f94:	42000044 	addi	r8,r8,1
  804f98:	a027883a 	mov	r19,r20
  804f9c:	a1c00415 	stw	r7,16(r20)
  804fa0:	a2000215 	stw	r8,8(r20)
  804fa4:	a1800315 	stw	r6,12(r20)
  804fa8:	003fce06 	br	804ee4 <_fpadd_parts+0x1c8>
  804fac:	8bc5c83a 	sub	r2,r17,r15
  804fb0:	8889803a 	cmpltu	r4,r17,r2
  804fb4:	9407c83a 	sub	r3,r18,r16
  804fb8:	1909c83a 	sub	r4,r3,r4
  804fbc:	100d883a 	mov	r6,r2
  804fc0:	200f883a 	mov	r7,r4
  804fc4:	003f9906 	br	804e2c <_fpadd_parts+0x110>
  804fc8:	7c45883a 	add	r2,r15,r17
  804fcc:	13c9803a 	cmpltu	r4,r2,r15
  804fd0:	8487883a 	add	r3,r16,r18
  804fd4:	20c9883a 	add	r4,r4,r3
  804fd8:	a1400115 	stw	r5,4(r20)
  804fdc:	a5c00215 	stw	r23,8(r20)
  804fe0:	a0800315 	stw	r2,12(r20)
  804fe4:	a1000415 	stw	r4,16(r20)
  804fe8:	003fb606 	br	804ec4 <_fpadd_parts+0x1a8>
  804fec:	001f883a 	mov	r15,zero
  804ff0:	0021883a 	mov	r16,zero
  804ff4:	003f8306 	br	804e04 <_fpadd_parts+0xe8>
  804ff8:	018dc83a 	sub	r6,zero,r6
  804ffc:	003f6706 	br	804d9c <_fpadd_parts+0x80>
  805000:	00bfff84 	movi	r2,-2
  805004:	117faf36 	bltu	r2,r5,804ec4 <_fpadd_parts+0x1a8>
  805008:	003f9806 	br	804e6c <_fpadd_parts+0x150>
  80500c:	0005883a 	mov	r2,zero
  805010:	1189c83a 	sub	r4,r2,r6
  805014:	1105803a 	cmpltu	r2,r2,r4
  805018:	01cbc83a 	sub	r5,zero,r7
  80501c:	2885c83a 	sub	r2,r5,r2
  805020:	01800044 	movi	r6,1
  805024:	a1800115 	stw	r6,4(r20)
  805028:	a5c00215 	stw	r23,8(r20)
  80502c:	a1000315 	stw	r4,12(r20)
  805030:	a0800415 	stw	r2,16(r20)
  805034:	003f8206 	br	804e40 <_fpadd_parts+0x124>
  805038:	203f7226 	beq	r4,zero,804e04 <_fpadd_parts+0xe8>
  80503c:	35bff804 	addi	r22,r6,-32
  805040:	b9af883a 	add	r23,r23,r6
  805044:	b0003116 	blt	r22,zero,80510c <_fpadd_parts+0x3f0>
  805048:	959ad83a 	srl	r13,r18,r22
  80504c:	001d883a 	mov	r14,zero
  805050:	000f883a 	mov	r7,zero
  805054:	01000044 	movi	r4,1
  805058:	0011883a 	mov	r8,zero
  80505c:	b0002516 	blt	r22,zero,8050f4 <_fpadd_parts+0x3d8>
  805060:	2594983a 	sll	r10,r4,r22
  805064:	0013883a 	mov	r9,zero
  805068:	00bfffc4 	movi	r2,-1
  80506c:	4889883a 	add	r4,r9,r2
  805070:	508b883a 	add	r5,r10,r2
  805074:	224d803a 	cmpltu	r6,r4,r9
  805078:	314b883a 	add	r5,r6,r5
  80507c:	8904703a 	and	r2,r17,r4
  805080:	9146703a 	and	r3,r18,r5
  805084:	10c4b03a 	or	r2,r2,r3
  805088:	10000226 	beq	r2,zero,805094 <_fpadd_parts+0x378>
  80508c:	01c00044 	movi	r7,1
  805090:	0011883a 	mov	r8,zero
  805094:	69e2b03a 	or	r17,r13,r7
  805098:	7224b03a 	or	r18,r14,r8
  80509c:	003f5906 	br	804e04 <_fpadd_parts+0xe8>
  8050a0:	8407883a 	add	r3,r16,r16
  8050a4:	008007c4 	movi	r2,31
  8050a8:	1185c83a 	sub	r2,r2,r6
  8050ac:	1886983a 	sll	r3,r3,r2
  8050b0:	7996d83a 	srl	r11,r15,r6
  8050b4:	8198d83a 	srl	r12,r16,r6
  8050b8:	1ad6b03a 	or	r11,r3,r11
  8050bc:	003f3e06 	br	804db8 <_fpadd_parts+0x9c>
  8050c0:	2006d07a 	srli	r3,r4,1
  8050c4:	008007c4 	movi	r2,31
  8050c8:	1185c83a 	sub	r2,r2,r6
  8050cc:	1890d83a 	srl	r8,r3,r2
  8050d0:	218e983a 	sll	r7,r4,r6
  8050d4:	003f3e06 	br	804dd0 <_fpadd_parts+0xb4>
  8050d8:	113f821e 	bne	r2,r4,804ee4 <_fpadd_parts+0x1c8>
  8050dc:	28c00117 	ldw	r3,4(r5)
  8050e0:	98800117 	ldw	r2,4(r19)
  8050e4:	10ff7f26 	beq	r2,r3,804ee4 <_fpadd_parts+0x1c8>
  8050e8:	04c02074 	movhi	r19,129
  8050ec:	9cc8e404 	addi	r19,r19,9104
  8050f0:	003f7c06 	br	804ee4 <_fpadd_parts+0x1c8>
  8050f4:	2006d07a 	srli	r3,r4,1
  8050f8:	008007c4 	movi	r2,31
  8050fc:	1185c83a 	sub	r2,r2,r6
  805100:	1894d83a 	srl	r10,r3,r2
  805104:	2192983a 	sll	r9,r4,r6
  805108:	003fd706 	br	805068 <_fpadd_parts+0x34c>
  80510c:	9487883a 	add	r3,r18,r18
  805110:	008007c4 	movi	r2,31
  805114:	1185c83a 	sub	r2,r2,r6
  805118:	1886983a 	sll	r3,r3,r2
  80511c:	899ad83a 	srl	r13,r17,r6
  805120:	919cd83a 	srl	r14,r18,r6
  805124:	1b5ab03a 	or	r13,r3,r13
  805128:	003fc906 	br	805050 <_fpadd_parts+0x334>

0080512c <__subdf3>:
  80512c:	deffea04 	addi	sp,sp,-88
  805130:	dcc01415 	stw	r19,80(sp)
  805134:	dcc00404 	addi	r19,sp,16
  805138:	2011883a 	mov	r8,r4
  80513c:	2813883a 	mov	r9,r5
  805140:	dc401315 	stw	r17,76(sp)
  805144:	d809883a 	mov	r4,sp
  805148:	980b883a 	mov	r5,r19
  80514c:	dc400904 	addi	r17,sp,36
  805150:	dfc01515 	stw	ra,84(sp)
  805154:	da400115 	stw	r9,4(sp)
  805158:	d9c00315 	stw	r7,12(sp)
  80515c:	da000015 	stw	r8,0(sp)
  805160:	d9800215 	stw	r6,8(sp)
  805164:	08058d00 	call	8058d0 <__unpack_d>
  805168:	d9000204 	addi	r4,sp,8
  80516c:	880b883a 	mov	r5,r17
  805170:	08058d00 	call	8058d0 <__unpack_d>
  805174:	d8800a17 	ldw	r2,40(sp)
  805178:	880b883a 	mov	r5,r17
  80517c:	9809883a 	mov	r4,r19
  805180:	d9800e04 	addi	r6,sp,56
  805184:	1080005c 	xori	r2,r2,1
  805188:	d8800a15 	stw	r2,40(sp)
  80518c:	0804d1c0 	call	804d1c <_fpadd_parts>
  805190:	1009883a 	mov	r4,r2
  805194:	08055bc0 	call	8055bc <__pack_d>
  805198:	dfc01517 	ldw	ra,84(sp)
  80519c:	dcc01417 	ldw	r19,80(sp)
  8051a0:	dc401317 	ldw	r17,76(sp)
  8051a4:	dec01604 	addi	sp,sp,88
  8051a8:	f800283a 	ret

008051ac <__adddf3>:
  8051ac:	deffea04 	addi	sp,sp,-88
  8051b0:	dcc01415 	stw	r19,80(sp)
  8051b4:	dcc00404 	addi	r19,sp,16
  8051b8:	2011883a 	mov	r8,r4
  8051bc:	2813883a 	mov	r9,r5
  8051c0:	dc401315 	stw	r17,76(sp)
  8051c4:	d809883a 	mov	r4,sp
  8051c8:	980b883a 	mov	r5,r19
  8051cc:	dc400904 	addi	r17,sp,36
  8051d0:	dfc01515 	stw	ra,84(sp)
  8051d4:	da400115 	stw	r9,4(sp)
  8051d8:	d9c00315 	stw	r7,12(sp)
  8051dc:	da000015 	stw	r8,0(sp)
  8051e0:	d9800215 	stw	r6,8(sp)
  8051e4:	08058d00 	call	8058d0 <__unpack_d>
  8051e8:	d9000204 	addi	r4,sp,8
  8051ec:	880b883a 	mov	r5,r17
  8051f0:	08058d00 	call	8058d0 <__unpack_d>
  8051f4:	d9800e04 	addi	r6,sp,56
  8051f8:	9809883a 	mov	r4,r19
  8051fc:	880b883a 	mov	r5,r17
  805200:	0804d1c0 	call	804d1c <_fpadd_parts>
  805204:	1009883a 	mov	r4,r2
  805208:	08055bc0 	call	8055bc <__pack_d>
  80520c:	dfc01517 	ldw	ra,84(sp)
  805210:	dcc01417 	ldw	r19,80(sp)
  805214:	dc401317 	ldw	r17,76(sp)
  805218:	dec01604 	addi	sp,sp,88
  80521c:	f800283a 	ret

00805220 <__floatsidf>:
  805220:	2006d7fa 	srli	r3,r4,31
  805224:	defff604 	addi	sp,sp,-40
  805228:	008000c4 	movi	r2,3
  80522c:	dfc00915 	stw	ra,36(sp)
  805230:	dcc00815 	stw	r19,32(sp)
  805234:	dc800715 	stw	r18,28(sp)
  805238:	dc400615 	stw	r17,24(sp)
  80523c:	dc000515 	stw	r16,20(sp)
  805240:	d8800015 	stw	r2,0(sp)
  805244:	d8c00115 	stw	r3,4(sp)
  805248:	20000f1e 	bne	r4,zero,805288 <__floatsidf+0x68>
  80524c:	00800084 	movi	r2,2
  805250:	d8800015 	stw	r2,0(sp)
  805254:	d809883a 	mov	r4,sp
  805258:	08055bc0 	call	8055bc <__pack_d>
  80525c:	1009883a 	mov	r4,r2
  805260:	180b883a 	mov	r5,r3
  805264:	2005883a 	mov	r2,r4
  805268:	2807883a 	mov	r3,r5
  80526c:	dfc00917 	ldw	ra,36(sp)
  805270:	dcc00817 	ldw	r19,32(sp)
  805274:	dc800717 	ldw	r18,28(sp)
  805278:	dc400617 	ldw	r17,24(sp)
  80527c:	dc000517 	ldw	r16,20(sp)
  805280:	dec00a04 	addi	sp,sp,40
  805284:	f800283a 	ret
  805288:	00800f04 	movi	r2,60
  80528c:	1807003a 	cmpeq	r3,r3,zero
  805290:	d8800215 	stw	r2,8(sp)
  805294:	18001126 	beq	r3,zero,8052dc <__floatsidf+0xbc>
  805298:	0027883a 	mov	r19,zero
  80529c:	2025883a 	mov	r18,r4
  8052a0:	d9000315 	stw	r4,12(sp)
  8052a4:	dcc00415 	stw	r19,16(sp)
  8052a8:	080553c0 	call	80553c <__clzsi2>
  8052ac:	11000744 	addi	r4,r2,29
  8052b0:	013fe80e 	bge	zero,r4,805254 <__floatsidf+0x34>
  8052b4:	10bfff44 	addi	r2,r2,-3
  8052b8:	10000c16 	blt	r2,zero,8052ec <__floatsidf+0xcc>
  8052bc:	90a2983a 	sll	r17,r18,r2
  8052c0:	0021883a 	mov	r16,zero
  8052c4:	d8800217 	ldw	r2,8(sp)
  8052c8:	dc400415 	stw	r17,16(sp)
  8052cc:	dc000315 	stw	r16,12(sp)
  8052d0:	1105c83a 	sub	r2,r2,r4
  8052d4:	d8800215 	stw	r2,8(sp)
  8052d8:	003fde06 	br	805254 <__floatsidf+0x34>
  8052dc:	00a00034 	movhi	r2,32768
  8052e0:	20800a26 	beq	r4,r2,80530c <__floatsidf+0xec>
  8052e4:	0109c83a 	sub	r4,zero,r4
  8052e8:	003feb06 	br	805298 <__floatsidf+0x78>
  8052ec:	9006d07a 	srli	r3,r18,1
  8052f0:	008007c4 	movi	r2,31
  8052f4:	1105c83a 	sub	r2,r2,r4
  8052f8:	1886d83a 	srl	r3,r3,r2
  8052fc:	9922983a 	sll	r17,r19,r4
  805300:	9120983a 	sll	r16,r18,r4
  805304:	1c62b03a 	or	r17,r3,r17
  805308:	003fee06 	br	8052c4 <__floatsidf+0xa4>
  80530c:	0009883a 	mov	r4,zero
  805310:	01707834 	movhi	r5,49632
  805314:	003fd306 	br	805264 <__floatsidf+0x44>

00805318 <__fixdfsi>:
  805318:	defff804 	addi	sp,sp,-32
  80531c:	2005883a 	mov	r2,r4
  805320:	2807883a 	mov	r3,r5
  805324:	d809883a 	mov	r4,sp
  805328:	d9400204 	addi	r5,sp,8
  80532c:	d8c00115 	stw	r3,4(sp)
  805330:	d8800015 	stw	r2,0(sp)
  805334:	dfc00715 	stw	ra,28(sp)
  805338:	08058d00 	call	8058d0 <__unpack_d>
  80533c:	d8c00217 	ldw	r3,8(sp)
  805340:	00800084 	movi	r2,2
  805344:	1880051e 	bne	r3,r2,80535c <__fixdfsi+0x44>
  805348:	0007883a 	mov	r3,zero
  80534c:	1805883a 	mov	r2,r3
  805350:	dfc00717 	ldw	ra,28(sp)
  805354:	dec00804 	addi	sp,sp,32
  805358:	f800283a 	ret
  80535c:	00800044 	movi	r2,1
  805360:	10fff92e 	bgeu	r2,r3,805348 <__fixdfsi+0x30>
  805364:	00800104 	movi	r2,4
  805368:	18800426 	beq	r3,r2,80537c <__fixdfsi+0x64>
  80536c:	d8c00417 	ldw	r3,16(sp)
  805370:	183ff516 	blt	r3,zero,805348 <__fixdfsi+0x30>
  805374:	00800784 	movi	r2,30
  805378:	10c0080e 	bge	r2,r3,80539c <__fixdfsi+0x84>
  80537c:	d8800317 	ldw	r2,12(sp)
  805380:	1000121e 	bne	r2,zero,8053cc <__fixdfsi+0xb4>
  805384:	00e00034 	movhi	r3,32768
  805388:	18ffffc4 	addi	r3,r3,-1
  80538c:	1805883a 	mov	r2,r3
  805390:	dfc00717 	ldw	ra,28(sp)
  805394:	dec00804 	addi	sp,sp,32
  805398:	f800283a 	ret
  80539c:	00800f04 	movi	r2,60
  8053a0:	10d1c83a 	sub	r8,r2,r3
  8053a4:	40bff804 	addi	r2,r8,-32
  8053a8:	d9800517 	ldw	r6,20(sp)
  8053ac:	d9c00617 	ldw	r7,24(sp)
  8053b0:	10000816 	blt	r2,zero,8053d4 <__fixdfsi+0xbc>
  8053b4:	3888d83a 	srl	r4,r7,r2
  8053b8:	d8800317 	ldw	r2,12(sp)
  8053bc:	2007883a 	mov	r3,r4
  8053c0:	103fe226 	beq	r2,zero,80534c <__fixdfsi+0x34>
  8053c4:	0107c83a 	sub	r3,zero,r4
  8053c8:	003fe006 	br	80534c <__fixdfsi+0x34>
  8053cc:	00e00034 	movhi	r3,32768
  8053d0:	003fde06 	br	80534c <__fixdfsi+0x34>
  8053d4:	39c7883a 	add	r3,r7,r7
  8053d8:	008007c4 	movi	r2,31
  8053dc:	1205c83a 	sub	r2,r2,r8
  8053e0:	1886983a 	sll	r3,r3,r2
  8053e4:	3208d83a 	srl	r4,r6,r8
  8053e8:	1908b03a 	or	r4,r3,r4
  8053ec:	003ff206 	br	8053b8 <__fixdfsi+0xa0>

008053f0 <udivmodsi4>:
  8053f0:	29001b2e 	bgeu	r5,r4,805460 <udivmodsi4+0x70>
  8053f4:	28001a16 	blt	r5,zero,805460 <udivmodsi4+0x70>
  8053f8:	00800044 	movi	r2,1
  8053fc:	0007883a 	mov	r3,zero
  805400:	01c007c4 	movi	r7,31
  805404:	00000306 	br	805414 <udivmodsi4+0x24>
  805408:	19c01326 	beq	r3,r7,805458 <udivmodsi4+0x68>
  80540c:	18c00044 	addi	r3,r3,1
  805410:	28000416 	blt	r5,zero,805424 <udivmodsi4+0x34>
  805414:	294b883a 	add	r5,r5,r5
  805418:	1085883a 	add	r2,r2,r2
  80541c:	293ffa36 	bltu	r5,r4,805408 <udivmodsi4+0x18>
  805420:	10000d26 	beq	r2,zero,805458 <udivmodsi4+0x68>
  805424:	0007883a 	mov	r3,zero
  805428:	21400236 	bltu	r4,r5,805434 <udivmodsi4+0x44>
  80542c:	2149c83a 	sub	r4,r4,r5
  805430:	1886b03a 	or	r3,r3,r2
  805434:	1004d07a 	srli	r2,r2,1
  805438:	280ad07a 	srli	r5,r5,1
  80543c:	103ffa1e 	bne	r2,zero,805428 <udivmodsi4+0x38>
  805440:	30000226 	beq	r6,zero,80544c <udivmodsi4+0x5c>
  805444:	2005883a 	mov	r2,r4
  805448:	f800283a 	ret
  80544c:	1809883a 	mov	r4,r3
  805450:	2005883a 	mov	r2,r4
  805454:	f800283a 	ret
  805458:	0007883a 	mov	r3,zero
  80545c:	003ff806 	br	805440 <udivmodsi4+0x50>
  805460:	00800044 	movi	r2,1
  805464:	0007883a 	mov	r3,zero
  805468:	003fef06 	br	805428 <udivmodsi4+0x38>

0080546c <__divsi3>:
  80546c:	defffe04 	addi	sp,sp,-8
  805470:	dc000015 	stw	r16,0(sp)
  805474:	dfc00115 	stw	ra,4(sp)
  805478:	0021883a 	mov	r16,zero
  80547c:	20000c16 	blt	r4,zero,8054b0 <__divsi3+0x44>
  805480:	000d883a 	mov	r6,zero
  805484:	28000e16 	blt	r5,zero,8054c0 <__divsi3+0x54>
  805488:	08053f00 	call	8053f0 <udivmodsi4>
  80548c:	1007883a 	mov	r3,r2
  805490:	8005003a 	cmpeq	r2,r16,zero
  805494:	1000011e 	bne	r2,zero,80549c <__divsi3+0x30>
  805498:	00c7c83a 	sub	r3,zero,r3
  80549c:	1805883a 	mov	r2,r3
  8054a0:	dfc00117 	ldw	ra,4(sp)
  8054a4:	dc000017 	ldw	r16,0(sp)
  8054a8:	dec00204 	addi	sp,sp,8
  8054ac:	f800283a 	ret
  8054b0:	0109c83a 	sub	r4,zero,r4
  8054b4:	04000044 	movi	r16,1
  8054b8:	000d883a 	mov	r6,zero
  8054bc:	283ff20e 	bge	r5,zero,805488 <__divsi3+0x1c>
  8054c0:	014bc83a 	sub	r5,zero,r5
  8054c4:	8021003a 	cmpeq	r16,r16,zero
  8054c8:	003fef06 	br	805488 <__divsi3+0x1c>

008054cc <__modsi3>:
  8054cc:	deffff04 	addi	sp,sp,-4
  8054d0:	dfc00015 	stw	ra,0(sp)
  8054d4:	01800044 	movi	r6,1
  8054d8:	2807883a 	mov	r3,r5
  8054dc:	20000416 	blt	r4,zero,8054f0 <__modsi3+0x24>
  8054e0:	28000c16 	blt	r5,zero,805514 <__modsi3+0x48>
  8054e4:	dfc00017 	ldw	ra,0(sp)
  8054e8:	dec00104 	addi	sp,sp,4
  8054ec:	08053f01 	jmpi	8053f0 <udivmodsi4>
  8054f0:	0109c83a 	sub	r4,zero,r4
  8054f4:	28000b16 	blt	r5,zero,805524 <__modsi3+0x58>
  8054f8:	180b883a 	mov	r5,r3
  8054fc:	01800044 	movi	r6,1
  805500:	08053f00 	call	8053f0 <udivmodsi4>
  805504:	0085c83a 	sub	r2,zero,r2
  805508:	dfc00017 	ldw	ra,0(sp)
  80550c:	dec00104 	addi	sp,sp,4
  805510:	f800283a 	ret
  805514:	014bc83a 	sub	r5,zero,r5
  805518:	dfc00017 	ldw	ra,0(sp)
  80551c:	dec00104 	addi	sp,sp,4
  805520:	08053f01 	jmpi	8053f0 <udivmodsi4>
  805524:	0147c83a 	sub	r3,zero,r5
  805528:	003ff306 	br	8054f8 <__modsi3+0x2c>

0080552c <__udivsi3>:
  80552c:	000d883a 	mov	r6,zero
  805530:	08053f01 	jmpi	8053f0 <udivmodsi4>

00805534 <__umodsi3>:
  805534:	01800044 	movi	r6,1
  805538:	08053f01 	jmpi	8053f0 <udivmodsi4>

0080553c <__clzsi2>:
  80553c:	00bfffd4 	movui	r2,65535
  805540:	11000e36 	bltu	r2,r4,80557c <__clzsi2+0x40>
  805544:	00803fc4 	movi	r2,255
  805548:	01400204 	movi	r5,8
  80554c:	0007883a 	mov	r3,zero
  805550:	11001036 	bltu	r2,r4,805594 <__clzsi2+0x58>
  805554:	000b883a 	mov	r5,zero
  805558:	20c6d83a 	srl	r3,r4,r3
  80555c:	00802074 	movhi	r2,129
  805560:	1088e904 	addi	r2,r2,9124
  805564:	1887883a 	add	r3,r3,r2
  805568:	18800003 	ldbu	r2,0(r3)
  80556c:	00c00804 	movi	r3,32
  805570:	2885883a 	add	r2,r5,r2
  805574:	1885c83a 	sub	r2,r3,r2
  805578:	f800283a 	ret
  80557c:	01400404 	movi	r5,16
  805580:	00804034 	movhi	r2,256
  805584:	10bfffc4 	addi	r2,r2,-1
  805588:	2807883a 	mov	r3,r5
  80558c:	113ff22e 	bgeu	r2,r4,805558 <__clzsi2+0x1c>
  805590:	01400604 	movi	r5,24
  805594:	2807883a 	mov	r3,r5
  805598:	20c6d83a 	srl	r3,r4,r3
  80559c:	00802074 	movhi	r2,129
  8055a0:	1088e904 	addi	r2,r2,9124
  8055a4:	1887883a 	add	r3,r3,r2
  8055a8:	18800003 	ldbu	r2,0(r3)
  8055ac:	00c00804 	movi	r3,32
  8055b0:	2885883a 	add	r2,r5,r2
  8055b4:	1885c83a 	sub	r2,r3,r2
  8055b8:	f800283a 	ret

008055bc <__pack_d>:
  8055bc:	20c00017 	ldw	r3,0(r4)
  8055c0:	defffd04 	addi	sp,sp,-12
  8055c4:	dc000015 	stw	r16,0(sp)
  8055c8:	dc800215 	stw	r18,8(sp)
  8055cc:	dc400115 	stw	r17,4(sp)
  8055d0:	00800044 	movi	r2,1
  8055d4:	22000317 	ldw	r8,12(r4)
  8055d8:	001f883a 	mov	r15,zero
  8055dc:	22400417 	ldw	r9,16(r4)
  8055e0:	24000117 	ldw	r16,4(r4)
  8055e4:	10c0552e 	bgeu	r2,r3,80573c <__pack_d+0x180>
  8055e8:	00800104 	movi	r2,4
  8055ec:	18804f26 	beq	r3,r2,80572c <__pack_d+0x170>
  8055f0:	00800084 	movi	r2,2
  8055f4:	18800226 	beq	r3,r2,805600 <__pack_d+0x44>
  8055f8:	4244b03a 	or	r2,r8,r9
  8055fc:	10001a1e 	bne	r2,zero,805668 <__pack_d+0xac>
  805600:	000d883a 	mov	r6,zero
  805604:	000f883a 	mov	r7,zero
  805608:	0011883a 	mov	r8,zero
  80560c:	00800434 	movhi	r2,16
  805610:	10bfffc4 	addi	r2,r2,-1
  805614:	301d883a 	mov	r14,r6
  805618:	3884703a 	and	r2,r7,r2
  80561c:	400a953a 	slli	r5,r8,20
  805620:	79bffc2c 	andhi	r6,r15,65520
  805624:	308cb03a 	or	r6,r6,r2
  805628:	00e00434 	movhi	r3,32784
  80562c:	18ffffc4 	addi	r3,r3,-1
  805630:	800497fa 	slli	r2,r16,31
  805634:	30c6703a 	and	r3,r6,r3
  805638:	1946b03a 	or	r3,r3,r5
  80563c:	01600034 	movhi	r5,32768
  805640:	297fffc4 	addi	r5,r5,-1
  805644:	194a703a 	and	r5,r3,r5
  805648:	288ab03a 	or	r5,r5,r2
  80564c:	2807883a 	mov	r3,r5
  805650:	7005883a 	mov	r2,r14
  805654:	dc800217 	ldw	r18,8(sp)
  805658:	dc400117 	ldw	r17,4(sp)
  80565c:	dc000017 	ldw	r16,0(sp)
  805660:	dec00304 	addi	sp,sp,12
  805664:	f800283a 	ret
  805668:	21000217 	ldw	r4,8(r4)
  80566c:	00bf0084 	movi	r2,-1022
  805670:	20803f16 	blt	r4,r2,805770 <__pack_d+0x1b4>
  805674:	0080ffc4 	movi	r2,1023
  805678:	11002c16 	blt	r2,r4,80572c <__pack_d+0x170>
  80567c:	00803fc4 	movi	r2,255
  805680:	408c703a 	and	r6,r8,r2
  805684:	00802004 	movi	r2,128
  805688:	0007883a 	mov	r3,zero
  80568c:	000f883a 	mov	r7,zero
  805690:	2280ffc4 	addi	r10,r4,1023
  805694:	30801e26 	beq	r6,r2,805710 <__pack_d+0x154>
  805698:	00801fc4 	movi	r2,127
  80569c:	4089883a 	add	r4,r8,r2
  8056a0:	220d803a 	cmpltu	r6,r4,r8
  8056a4:	324d883a 	add	r6,r6,r9
  8056a8:	2011883a 	mov	r8,r4
  8056ac:	3013883a 	mov	r9,r6
  8056b0:	00880034 	movhi	r2,8192
  8056b4:	10bfffc4 	addi	r2,r2,-1
  8056b8:	12400d36 	bltu	r2,r9,8056f0 <__pack_d+0x134>
  8056bc:	4804963a 	slli	r2,r9,24
  8056c0:	400cd23a 	srli	r6,r8,8
  8056c4:	480ed23a 	srli	r7,r9,8
  8056c8:	013fffc4 	movi	r4,-1
  8056cc:	118cb03a 	or	r6,r2,r6
  8056d0:	01400434 	movhi	r5,16
  8056d4:	297fffc4 	addi	r5,r5,-1
  8056d8:	3104703a 	and	r2,r6,r4
  8056dc:	3946703a 	and	r3,r7,r5
  8056e0:	5201ffcc 	andi	r8,r10,2047
  8056e4:	100d883a 	mov	r6,r2
  8056e8:	180f883a 	mov	r7,r3
  8056ec:	003fc706 	br	80560c <__pack_d+0x50>
  8056f0:	480897fa 	slli	r4,r9,31
  8056f4:	4004d07a 	srli	r2,r8,1
  8056f8:	4806d07a 	srli	r3,r9,1
  8056fc:	52800044 	addi	r10,r10,1
  805700:	2084b03a 	or	r2,r4,r2
  805704:	1011883a 	mov	r8,r2
  805708:	1813883a 	mov	r9,r3
  80570c:	003feb06 	br	8056bc <__pack_d+0x100>
  805710:	383fe11e 	bne	r7,zero,805698 <__pack_d+0xdc>
  805714:	01004004 	movi	r4,256
  805718:	4104703a 	and	r2,r8,r4
  80571c:	10c4b03a 	or	r2,r2,r3
  805720:	103fe326 	beq	r2,zero,8056b0 <__pack_d+0xf4>
  805724:	3005883a 	mov	r2,r6
  805728:	003fdc06 	br	80569c <__pack_d+0xe0>
  80572c:	000d883a 	mov	r6,zero
  805730:	000f883a 	mov	r7,zero
  805734:	0201ffc4 	movi	r8,2047
  805738:	003fb406 	br	80560c <__pack_d+0x50>
  80573c:	0005883a 	mov	r2,zero
  805740:	00c00234 	movhi	r3,8
  805744:	408cb03a 	or	r6,r8,r2
  805748:	48ceb03a 	or	r7,r9,r3
  80574c:	013fffc4 	movi	r4,-1
  805750:	01400434 	movhi	r5,16
  805754:	297fffc4 	addi	r5,r5,-1
  805758:	3104703a 	and	r2,r6,r4
  80575c:	3946703a 	and	r3,r7,r5
  805760:	100d883a 	mov	r6,r2
  805764:	180f883a 	mov	r7,r3
  805768:	0201ffc4 	movi	r8,2047
  80576c:	003fa706 	br	80560c <__pack_d+0x50>
  805770:	1109c83a 	sub	r4,r2,r4
  805774:	00800e04 	movi	r2,56
  805778:	11004316 	blt	r2,r4,805888 <__pack_d+0x2cc>
  80577c:	21fff804 	addi	r7,r4,-32
  805780:	38004516 	blt	r7,zero,805898 <__pack_d+0x2dc>
  805784:	49d8d83a 	srl	r12,r9,r7
  805788:	001b883a 	mov	r13,zero
  80578c:	0023883a 	mov	r17,zero
  805790:	01400044 	movi	r5,1
  805794:	0025883a 	mov	r18,zero
  805798:	38004716 	blt	r7,zero,8058b8 <__pack_d+0x2fc>
  80579c:	29d6983a 	sll	r11,r5,r7
  8057a0:	0015883a 	mov	r10,zero
  8057a4:	00bfffc4 	movi	r2,-1
  8057a8:	5089883a 	add	r4,r10,r2
  8057ac:	588b883a 	add	r5,r11,r2
  8057b0:	228d803a 	cmpltu	r6,r4,r10
  8057b4:	314b883a 	add	r5,r6,r5
  8057b8:	4104703a 	and	r2,r8,r4
  8057bc:	4946703a 	and	r3,r9,r5
  8057c0:	10c4b03a 	or	r2,r2,r3
  8057c4:	10000226 	beq	r2,zero,8057d0 <__pack_d+0x214>
  8057c8:	04400044 	movi	r17,1
  8057cc:	0025883a 	mov	r18,zero
  8057d0:	00803fc4 	movi	r2,255
  8057d4:	644eb03a 	or	r7,r12,r17
  8057d8:	3892703a 	and	r9,r7,r2
  8057dc:	00802004 	movi	r2,128
  8057e0:	6c90b03a 	or	r8,r13,r18
  8057e4:	0015883a 	mov	r10,zero
  8057e8:	48801626 	beq	r9,r2,805844 <__pack_d+0x288>
  8057ec:	01001fc4 	movi	r4,127
  8057f0:	3905883a 	add	r2,r7,r4
  8057f4:	11cd803a 	cmpltu	r6,r2,r7
  8057f8:	320d883a 	add	r6,r6,r8
  8057fc:	100f883a 	mov	r7,r2
  805800:	00840034 	movhi	r2,4096
  805804:	10bfffc4 	addi	r2,r2,-1
  805808:	3011883a 	mov	r8,r6
  80580c:	0007883a 	mov	r3,zero
  805810:	11801b36 	bltu	r2,r6,805880 <__pack_d+0x2c4>
  805814:	4004963a 	slli	r2,r8,24
  805818:	3808d23a 	srli	r4,r7,8
  80581c:	400ad23a 	srli	r5,r8,8
  805820:	1813883a 	mov	r9,r3
  805824:	1108b03a 	or	r4,r2,r4
  805828:	00bfffc4 	movi	r2,-1
  80582c:	00c00434 	movhi	r3,16
  805830:	18ffffc4 	addi	r3,r3,-1
  805834:	208c703a 	and	r6,r4,r2
  805838:	28ce703a 	and	r7,r5,r3
  80583c:	4a01ffcc 	andi	r8,r9,2047
  805840:	003f7206 	br	80560c <__pack_d+0x50>
  805844:	503fe91e 	bne	r10,zero,8057ec <__pack_d+0x230>
  805848:	01004004 	movi	r4,256
  80584c:	3904703a 	and	r2,r7,r4
  805850:	0007883a 	mov	r3,zero
  805854:	10c4b03a 	or	r2,r2,r3
  805858:	10000626 	beq	r2,zero,805874 <__pack_d+0x2b8>
  80585c:	3a45883a 	add	r2,r7,r9
  805860:	11cd803a 	cmpltu	r6,r2,r7
  805864:	320d883a 	add	r6,r6,r8
  805868:	100f883a 	mov	r7,r2
  80586c:	3011883a 	mov	r8,r6
  805870:	0007883a 	mov	r3,zero
  805874:	00840034 	movhi	r2,4096
  805878:	10bfffc4 	addi	r2,r2,-1
  80587c:	123fe52e 	bgeu	r2,r8,805814 <__pack_d+0x258>
  805880:	00c00044 	movi	r3,1
  805884:	003fe306 	br	805814 <__pack_d+0x258>
  805888:	0009883a 	mov	r4,zero
  80588c:	0013883a 	mov	r9,zero
  805890:	000b883a 	mov	r5,zero
  805894:	003fe406 	br	805828 <__pack_d+0x26c>
  805898:	4a47883a 	add	r3,r9,r9
  80589c:	008007c4 	movi	r2,31
  8058a0:	1105c83a 	sub	r2,r2,r4
  8058a4:	1886983a 	sll	r3,r3,r2
  8058a8:	4118d83a 	srl	r12,r8,r4
  8058ac:	491ad83a 	srl	r13,r9,r4
  8058b0:	1b18b03a 	or	r12,r3,r12
  8058b4:	003fb506 	br	80578c <__pack_d+0x1d0>
  8058b8:	2806d07a 	srli	r3,r5,1
  8058bc:	008007c4 	movi	r2,31
  8058c0:	1105c83a 	sub	r2,r2,r4
  8058c4:	1896d83a 	srl	r11,r3,r2
  8058c8:	2914983a 	sll	r10,r5,r4
  8058cc:	003fb506 	br	8057a4 <__pack_d+0x1e8>

008058d0 <__unpack_d>:
  8058d0:	20c00117 	ldw	r3,4(r4)
  8058d4:	22400017 	ldw	r9,0(r4)
  8058d8:	00800434 	movhi	r2,16
  8058dc:	10bfffc4 	addi	r2,r2,-1
  8058e0:	1808d53a 	srli	r4,r3,20
  8058e4:	180cd7fa 	srli	r6,r3,31
  8058e8:	1894703a 	and	r10,r3,r2
  8058ec:	2201ffcc 	andi	r8,r4,2047
  8058f0:	281b883a 	mov	r13,r5
  8058f4:	4817883a 	mov	r11,r9
  8058f8:	29800115 	stw	r6,4(r5)
  8058fc:	5019883a 	mov	r12,r10
  805900:	40001e1e 	bne	r8,zero,80597c <__unpack_d+0xac>
  805904:	4a84b03a 	or	r2,r9,r10
  805908:	10001926 	beq	r2,zero,805970 <__unpack_d+0xa0>
  80590c:	4804d63a 	srli	r2,r9,24
  805910:	500c923a 	slli	r6,r10,8
  805914:	013f0084 	movi	r4,-1022
  805918:	00c40034 	movhi	r3,4096
  80591c:	18ffffc4 	addi	r3,r3,-1
  805920:	118cb03a 	or	r6,r2,r6
  805924:	008000c4 	movi	r2,3
  805928:	480a923a 	slli	r5,r9,8
  80592c:	68800015 	stw	r2,0(r13)
  805930:	69000215 	stw	r4,8(r13)
  805934:	19800b36 	bltu	r3,r6,805964 <__unpack_d+0x94>
  805938:	200f883a 	mov	r7,r4
  80593c:	1811883a 	mov	r8,r3
  805940:	2945883a 	add	r2,r5,r5
  805944:	1149803a 	cmpltu	r4,r2,r5
  805948:	3187883a 	add	r3,r6,r6
  80594c:	20c9883a 	add	r4,r4,r3
  805950:	100b883a 	mov	r5,r2
  805954:	200d883a 	mov	r6,r4
  805958:	39ffffc4 	addi	r7,r7,-1
  80595c:	413ff82e 	bgeu	r8,r4,805940 <__unpack_d+0x70>
  805960:	69c00215 	stw	r7,8(r13)
  805964:	69800415 	stw	r6,16(r13)
  805968:	69400315 	stw	r5,12(r13)
  80596c:	f800283a 	ret
  805970:	00800084 	movi	r2,2
  805974:	28800015 	stw	r2,0(r5)
  805978:	f800283a 	ret
  80597c:	0081ffc4 	movi	r2,2047
  805980:	40800f26 	beq	r8,r2,8059c0 <__unpack_d+0xf0>
  805984:	480cd63a 	srli	r6,r9,24
  805988:	5006923a 	slli	r3,r10,8
  80598c:	4804923a 	slli	r2,r9,8
  805990:	0009883a 	mov	r4,zero
  805994:	30c6b03a 	or	r3,r6,r3
  805998:	01440034 	movhi	r5,4096
  80599c:	110cb03a 	or	r6,r2,r4
  8059a0:	423f0044 	addi	r8,r8,-1023
  8059a4:	194eb03a 	or	r7,r3,r5
  8059a8:	008000c4 	movi	r2,3
  8059ac:	69c00415 	stw	r7,16(r13)
  8059b0:	6a000215 	stw	r8,8(r13)
  8059b4:	68800015 	stw	r2,0(r13)
  8059b8:	69800315 	stw	r6,12(r13)
  8059bc:	f800283a 	ret
  8059c0:	4a84b03a 	or	r2,r9,r10
  8059c4:	1000031e 	bne	r2,zero,8059d4 <__unpack_d+0x104>
  8059c8:	00800104 	movi	r2,4
  8059cc:	28800015 	stw	r2,0(r5)
  8059d0:	f800283a 	ret
  8059d4:	0009883a 	mov	r4,zero
  8059d8:	01400234 	movhi	r5,8
  8059dc:	4904703a 	and	r2,r9,r4
  8059e0:	5146703a 	and	r3,r10,r5
  8059e4:	10c4b03a 	or	r2,r2,r3
  8059e8:	10000526 	beq	r2,zero,805a00 <__unpack_d+0x130>
  8059ec:	00800044 	movi	r2,1
  8059f0:	68800015 	stw	r2,0(r13)
  8059f4:	6b000415 	stw	r12,16(r13)
  8059f8:	6ac00315 	stw	r11,12(r13)
  8059fc:	f800283a 	ret
  805a00:	68000015 	stw	zero,0(r13)
  805a04:	003ffb06 	br	8059f4 <__unpack_d+0x124>

00805a08 <_atoi_r>:
  805a08:	000d883a 	mov	r6,zero
  805a0c:	01c00284 	movi	r7,10
  805a10:	0805be41 	jmpi	805be4 <_strtol_r>

00805a14 <atoi>:
  805a14:	000b883a 	mov	r5,zero
  805a18:	01800284 	movi	r6,10
  805a1c:	0805e341 	jmpi	805e34 <strtol>

00805a20 <printf>:
  805a20:	defffb04 	addi	sp,sp,-20
  805a24:	dfc00115 	stw	ra,4(sp)
  805a28:	d9400215 	stw	r5,8(sp)
  805a2c:	d9800315 	stw	r6,12(sp)
  805a30:	d9c00415 	stw	r7,16(sp)
  805a34:	00802074 	movhi	r2,129
  805a38:	1091b004 	addi	r2,r2,18112
  805a3c:	10c00017 	ldw	r3,0(r2)
  805a40:	200b883a 	mov	r5,r4
  805a44:	d8800204 	addi	r2,sp,8
  805a48:	19000217 	ldw	r4,8(r3)
  805a4c:	100d883a 	mov	r6,r2
  805a50:	d8800015 	stw	r2,0(sp)
  805a54:	0807d740 	call	807d74 <__vfprintf_internal>
  805a58:	dfc00117 	ldw	ra,4(sp)
  805a5c:	dec00504 	addi	sp,sp,20
  805a60:	f800283a 	ret

00805a64 <_printf_r>:
  805a64:	defffc04 	addi	sp,sp,-16
  805a68:	dfc00115 	stw	ra,4(sp)
  805a6c:	d9800215 	stw	r6,8(sp)
  805a70:	d9c00315 	stw	r7,12(sp)
  805a74:	280d883a 	mov	r6,r5
  805a78:	21400217 	ldw	r5,8(r4)
  805a7c:	d8c00204 	addi	r3,sp,8
  805a80:	180f883a 	mov	r7,r3
  805a84:	d8c00015 	stw	r3,0(sp)
  805a88:	0805eb00 	call	805eb0 <___vfprintf_internal_r>
  805a8c:	dfc00117 	ldw	ra,4(sp)
  805a90:	dec00404 	addi	sp,sp,16
  805a94:	f800283a 	ret

00805a98 <putchar>:
  805a98:	00802074 	movhi	r2,129
  805a9c:	1091b004 	addi	r2,r2,18112
  805aa0:	11800017 	ldw	r6,0(r2)
  805aa4:	200b883a 	mov	r5,r4
  805aa8:	3009883a 	mov	r4,r6
  805aac:	31800217 	ldw	r6,8(r6)
  805ab0:	080c4701 	jmpi	80c470 <_putc_r>

00805ab4 <_putchar_r>:
  805ab4:	21800217 	ldw	r6,8(r4)
  805ab8:	080c4701 	jmpi	80c470 <_putc_r>

00805abc <_puts_r>:
  805abc:	defff604 	addi	sp,sp,-40
  805ac0:	dc400715 	stw	r17,28(sp)
  805ac4:	2023883a 	mov	r17,r4
  805ac8:	2809883a 	mov	r4,r5
  805acc:	dfc00915 	stw	ra,36(sp)
  805ad0:	dcc00815 	stw	r19,32(sp)
  805ad4:	2827883a 	mov	r19,r5
  805ad8:	0805b700 	call	805b70 <strlen>
  805adc:	89400217 	ldw	r5,8(r17)
  805ae0:	00c02074 	movhi	r3,129
  805ae4:	18c92904 	addi	r3,r3,9380
  805ae8:	01c00044 	movi	r7,1
  805aec:	12000044 	addi	r8,r2,1
  805af0:	d8c00515 	stw	r3,20(sp)
  805af4:	d9c00615 	stw	r7,24(sp)
  805af8:	d8c00304 	addi	r3,sp,12
  805afc:	01c00084 	movi	r7,2
  805b00:	8809883a 	mov	r4,r17
  805b04:	d80d883a 	mov	r6,sp
  805b08:	d8c00015 	stw	r3,0(sp)
  805b0c:	dcc00315 	stw	r19,12(sp)
  805b10:	da000215 	stw	r8,8(sp)
  805b14:	d9c00115 	stw	r7,4(sp)
  805b18:	d8800415 	stw	r2,16(sp)
  805b1c:	080a0300 	call	80a030 <__sfvwrite_r>
  805b20:	00ffffc4 	movi	r3,-1
  805b24:	10000626 	beq	r2,zero,805b40 <_puts_r+0x84>
  805b28:	1805883a 	mov	r2,r3
  805b2c:	dfc00917 	ldw	ra,36(sp)
  805b30:	dcc00817 	ldw	r19,32(sp)
  805b34:	dc400717 	ldw	r17,28(sp)
  805b38:	dec00a04 	addi	sp,sp,40
  805b3c:	f800283a 	ret
  805b40:	00c00284 	movi	r3,10
  805b44:	1805883a 	mov	r2,r3
  805b48:	dfc00917 	ldw	ra,36(sp)
  805b4c:	dcc00817 	ldw	r19,32(sp)
  805b50:	dc400717 	ldw	r17,28(sp)
  805b54:	dec00a04 	addi	sp,sp,40
  805b58:	f800283a 	ret

00805b5c <puts>:
  805b5c:	00802074 	movhi	r2,129
  805b60:	1091b004 	addi	r2,r2,18112
  805b64:	200b883a 	mov	r5,r4
  805b68:	11000017 	ldw	r4,0(r2)
  805b6c:	0805abc1 	jmpi	805abc <_puts_r>

00805b70 <strlen>:
  805b70:	208000cc 	andi	r2,r4,3
  805b74:	2011883a 	mov	r8,r4
  805b78:	1000161e 	bne	r2,zero,805bd4 <strlen+0x64>
  805b7c:	20c00017 	ldw	r3,0(r4)
  805b80:	017fbff4 	movhi	r5,65279
  805b84:	297fbfc4 	addi	r5,r5,-257
  805b88:	01e02074 	movhi	r7,32897
  805b8c:	39e02004 	addi	r7,r7,-32640
  805b90:	1945883a 	add	r2,r3,r5
  805b94:	11c4703a 	and	r2,r2,r7
  805b98:	00c6303a 	nor	r3,zero,r3
  805b9c:	1886703a 	and	r3,r3,r2
  805ba0:	18000c1e 	bne	r3,zero,805bd4 <strlen+0x64>
  805ba4:	280d883a 	mov	r6,r5
  805ba8:	380b883a 	mov	r5,r7
  805bac:	21000104 	addi	r4,r4,4
  805bb0:	20800017 	ldw	r2,0(r4)
  805bb4:	1187883a 	add	r3,r2,r6
  805bb8:	1946703a 	and	r3,r3,r5
  805bbc:	0084303a 	nor	r2,zero,r2
  805bc0:	10c4703a 	and	r2,r2,r3
  805bc4:	103ff926 	beq	r2,zero,805bac <strlen+0x3c>
  805bc8:	20800007 	ldb	r2,0(r4)
  805bcc:	10000326 	beq	r2,zero,805bdc <strlen+0x6c>
  805bd0:	21000044 	addi	r4,r4,1
  805bd4:	20800007 	ldb	r2,0(r4)
  805bd8:	103ffd1e 	bne	r2,zero,805bd0 <strlen+0x60>
  805bdc:	2205c83a 	sub	r2,r4,r8
  805be0:	f800283a 	ret

00805be4 <_strtol_r>:
  805be4:	defff304 	addi	sp,sp,-52
  805be8:	00802074 	movhi	r2,129
  805bec:	1091af04 	addi	r2,r2,18108
  805bf0:	dd000715 	stw	r20,28(sp)
  805bf4:	15000017 	ldw	r20,0(r2)
  805bf8:	ddc00a15 	stw	r23,40(sp)
  805bfc:	dc800515 	stw	r18,20(sp)
  805c00:	dc400415 	stw	r17,16(sp)
  805c04:	dfc00c15 	stw	ra,48(sp)
  805c08:	df000b15 	stw	fp,44(sp)
  805c0c:	dd800915 	stw	r22,36(sp)
  805c10:	dd400815 	stw	r21,32(sp)
  805c14:	dcc00615 	stw	r19,24(sp)
  805c18:	dc000315 	stw	r16,12(sp)
  805c1c:	282f883a 	mov	r23,r5
  805c20:	d9000115 	stw	r4,4(sp)
  805c24:	d9800215 	stw	r6,8(sp)
  805c28:	3825883a 	mov	r18,r7
  805c2c:	2823883a 	mov	r17,r5
  805c30:	8c000007 	ldb	r16,0(r17)
  805c34:	8c400044 	addi	r17,r17,1
  805c38:	a407883a 	add	r3,r20,r16
  805c3c:	18800003 	ldbu	r2,0(r3)
  805c40:	1080020c 	andi	r2,r2,8
  805c44:	103ffa1e 	bne	r2,zero,805c30 <_strtol_r+0x4c>
  805c48:	00800b44 	movi	r2,45
  805c4c:	80805c26 	beq	r16,r2,805dc0 <_strtol_r+0x1dc>
  805c50:	00800ac4 	movi	r2,43
  805c54:	80805726 	beq	r16,r2,805db4 <_strtol_r+0x1d0>
  805c58:	d8000015 	stw	zero,0(sp)
  805c5c:	9007003a 	cmpeq	r3,r18,zero
  805c60:	1800431e 	bne	r3,zero,805d70 <_strtol_r+0x18c>
  805c64:	00800404 	movi	r2,16
  805c68:	90804126 	beq	r18,r2,805d70 <_strtol_r+0x18c>
  805c6c:	902b883a 	mov	r21,r18
  805c70:	d8c00017 	ldw	r3,0(sp)
  805c74:	1838c03a 	cmpne	fp,r3,zero
  805c78:	e0004a1e 	bne	fp,zero,805da4 <_strtol_r+0x1c0>
  805c7c:	04e00034 	movhi	r19,32768
  805c80:	9cffffc4 	addi	r19,r19,-1
  805c84:	9809883a 	mov	r4,r19
  805c88:	a80b883a 	mov	r5,r21
  805c8c:	08055340 	call	805534 <__umodsi3>
  805c90:	9809883a 	mov	r4,r19
  805c94:	a80b883a 	mov	r5,r21
  805c98:	102d883a 	mov	r22,r2
  805c9c:	080552c0 	call	80552c <__udivsi3>
  805ca0:	1027883a 	mov	r19,r2
  805ca4:	a405883a 	add	r2,r20,r16
  805ca8:	11400003 	ldbu	r5,0(r2)
  805cac:	0009883a 	mov	r4,zero
  805cb0:	000d883a 	mov	r6,zero
  805cb4:	28c0010c 	andi	r3,r5,4
  805cb8:	18000f26 	beq	r3,zero,805cf8 <_strtol_r+0x114>
  805cbc:	843ff404 	addi	r16,r16,-48
  805cc0:	8480150e 	bge	r16,r18,805d18 <_strtol_r+0x134>
  805cc4:	30003216 	blt	r6,zero,805d90 <_strtol_r+0x1ac>
  805cc8:	99003136 	bltu	r19,r4,805d90 <_strtol_r+0x1ac>
  805ccc:	24c02f26 	beq	r4,r19,805d8c <_strtol_r+0x1a8>
  805cd0:	a80b883a 	mov	r5,r21
  805cd4:	080eb4c0 	call	80eb4c <__mulsi3>
  805cd8:	1409883a 	add	r4,r2,r16
  805cdc:	01800044 	movi	r6,1
  805ce0:	8c000007 	ldb	r16,0(r17)
  805ce4:	8c400044 	addi	r17,r17,1
  805ce8:	a405883a 	add	r2,r20,r16
  805cec:	11400003 	ldbu	r5,0(r2)
  805cf0:	28c0010c 	andi	r3,r5,4
  805cf4:	183ff11e 	bne	r3,zero,805cbc <_strtol_r+0xd8>
  805cf8:	288000cc 	andi	r2,r5,3
  805cfc:	10000626 	beq	r2,zero,805d18 <_strtol_r+0x134>
  805d00:	2880004c 	andi	r2,r5,1
  805d04:	1005003a 	cmpeq	r2,r2,zero
  805d08:	1000231e 	bne	r2,zero,805d98 <_strtol_r+0x1b4>
  805d0c:	00800dc4 	movi	r2,55
  805d10:	80a1c83a 	sub	r16,r16,r2
  805d14:	84bfeb16 	blt	r16,r18,805cc4 <_strtol_r+0xe0>
  805d18:	30002e16 	blt	r6,zero,805dd4 <_strtol_r+0x1f0>
  805d1c:	e000231e 	bne	fp,zero,805dac <_strtol_r+0x1c8>
  805d20:	2007883a 	mov	r3,r4
  805d24:	d8800217 	ldw	r2,8(sp)
  805d28:	10000426 	beq	r2,zero,805d3c <_strtol_r+0x158>
  805d2c:	30000126 	beq	r6,zero,805d34 <_strtol_r+0x150>
  805d30:	8dffffc4 	addi	r23,r17,-1
  805d34:	d9000217 	ldw	r4,8(sp)
  805d38:	25c00015 	stw	r23,0(r4)
  805d3c:	1805883a 	mov	r2,r3
  805d40:	dfc00c17 	ldw	ra,48(sp)
  805d44:	df000b17 	ldw	fp,44(sp)
  805d48:	ddc00a17 	ldw	r23,40(sp)
  805d4c:	dd800917 	ldw	r22,36(sp)
  805d50:	dd400817 	ldw	r21,32(sp)
  805d54:	dd000717 	ldw	r20,28(sp)
  805d58:	dcc00617 	ldw	r19,24(sp)
  805d5c:	dc800517 	ldw	r18,20(sp)
  805d60:	dc400417 	ldw	r17,16(sp)
  805d64:	dc000317 	ldw	r16,12(sp)
  805d68:	dec00d04 	addi	sp,sp,52
  805d6c:	f800283a 	ret
  805d70:	00800c04 	movi	r2,48
  805d74:	80801f26 	beq	r16,r2,805df4 <_strtol_r+0x210>
  805d78:	183fbc26 	beq	r3,zero,805c6c <_strtol_r+0x88>
  805d7c:	00800c04 	movi	r2,48
  805d80:	80802926 	beq	r16,r2,805e28 <_strtol_r+0x244>
  805d84:	04800284 	movi	r18,10
  805d88:	003fb806 	br	805c6c <_strtol_r+0x88>
  805d8c:	b43fd00e 	bge	r22,r16,805cd0 <_strtol_r+0xec>
  805d90:	01bfffc4 	movi	r6,-1
  805d94:	003fd206 	br	805ce0 <_strtol_r+0xfc>
  805d98:	008015c4 	movi	r2,87
  805d9c:	80a1c83a 	sub	r16,r16,r2
  805da0:	003fdc06 	br	805d14 <_strtol_r+0x130>
  805da4:	04e00034 	movhi	r19,32768
  805da8:	003fb606 	br	805c84 <_strtol_r+0xa0>
  805dac:	0107c83a 	sub	r3,zero,r4
  805db0:	003fdc06 	br	805d24 <_strtol_r+0x140>
  805db4:	8c000007 	ldb	r16,0(r17)
  805db8:	8c400044 	addi	r17,r17,1
  805dbc:	003fa606 	br	805c58 <_strtol_r+0x74>
  805dc0:	8c000007 	ldb	r16,0(r17)
  805dc4:	00800044 	movi	r2,1
  805dc8:	8c400044 	addi	r17,r17,1
  805dcc:	d8800015 	stw	r2,0(sp)
  805dd0:	003fa206 	br	805c5c <_strtol_r+0x78>
  805dd4:	d9000017 	ldw	r4,0(sp)
  805dd8:	2005003a 	cmpeq	r2,r4,zero
  805ddc:	10000f1e 	bne	r2,zero,805e1c <_strtol_r+0x238>
  805de0:	00e00034 	movhi	r3,32768
  805de4:	d9000117 	ldw	r4,4(sp)
  805de8:	00800884 	movi	r2,34
  805dec:	20800015 	stw	r2,0(r4)
  805df0:	003fcc06 	br	805d24 <_strtol_r+0x140>
  805df4:	89000007 	ldb	r4,0(r17)
  805df8:	00801e04 	movi	r2,120
  805dfc:	20800226 	beq	r4,r2,805e08 <_strtol_r+0x224>
  805e00:	00801604 	movi	r2,88
  805e04:	20bfdc1e 	bne	r4,r2,805d78 <_strtol_r+0x194>
  805e08:	8c000047 	ldb	r16,1(r17)
  805e0c:	04800404 	movi	r18,16
  805e10:	8c400084 	addi	r17,r17,2
  805e14:	902b883a 	mov	r21,r18
  805e18:	003f9506 	br	805c70 <_strtol_r+0x8c>
  805e1c:	00e00034 	movhi	r3,32768
  805e20:	18ffffc4 	addi	r3,r3,-1
  805e24:	003fef06 	br	805de4 <_strtol_r+0x200>
  805e28:	04800204 	movi	r18,8
  805e2c:	902b883a 	mov	r21,r18
  805e30:	003f8f06 	br	805c70 <_strtol_r+0x8c>

00805e34 <strtol>:
  805e34:	00802074 	movhi	r2,129
  805e38:	1091b004 	addi	r2,r2,18112
  805e3c:	2013883a 	mov	r9,r4
  805e40:	11000017 	ldw	r4,0(r2)
  805e44:	2805883a 	mov	r2,r5
  805e48:	300f883a 	mov	r7,r6
  805e4c:	480b883a 	mov	r5,r9
  805e50:	100d883a 	mov	r6,r2
  805e54:	0805be41 	jmpi	805be4 <_strtol_r>

00805e58 <__sprint_r>:
  805e58:	30800217 	ldw	r2,8(r6)
  805e5c:	defffe04 	addi	sp,sp,-8
  805e60:	dc000015 	stw	r16,0(sp)
  805e64:	dfc00115 	stw	ra,4(sp)
  805e68:	3021883a 	mov	r16,r6
  805e6c:	0007883a 	mov	r3,zero
  805e70:	1000061e 	bne	r2,zero,805e8c <__sprint_r+0x34>
  805e74:	1805883a 	mov	r2,r3
  805e78:	30000115 	stw	zero,4(r6)
  805e7c:	dfc00117 	ldw	ra,4(sp)
  805e80:	dc000017 	ldw	r16,0(sp)
  805e84:	dec00204 	addi	sp,sp,8
  805e88:	f800283a 	ret
  805e8c:	080a0300 	call	80a030 <__sfvwrite_r>
  805e90:	1007883a 	mov	r3,r2
  805e94:	1805883a 	mov	r2,r3
  805e98:	80000115 	stw	zero,4(r16)
  805e9c:	80000215 	stw	zero,8(r16)
  805ea0:	dfc00117 	ldw	ra,4(sp)
  805ea4:	dc000017 	ldw	r16,0(sp)
  805ea8:	dec00204 	addi	sp,sp,8
  805eac:	f800283a 	ret

00805eb0 <___vfprintf_internal_r>:
  805eb0:	defea404 	addi	sp,sp,-1392
  805eb4:	dd815815 	stw	r22,1376(sp)
  805eb8:	dc015215 	stw	r16,1352(sp)
  805ebc:	d9c15115 	stw	r7,1348(sp)
  805ec0:	dfc15b15 	stw	ra,1388(sp)
  805ec4:	df015a15 	stw	fp,1384(sp)
  805ec8:	ddc15915 	stw	r23,1380(sp)
  805ecc:	dd415715 	stw	r21,1372(sp)
  805ed0:	dd015615 	stw	r20,1368(sp)
  805ed4:	dcc15515 	stw	r19,1364(sp)
  805ed8:	dc815415 	stw	r18,1360(sp)
  805edc:	dc415315 	stw	r17,1356(sp)
  805ee0:	282d883a 	mov	r22,r5
  805ee4:	3021883a 	mov	r16,r6
  805ee8:	d9014f15 	stw	r4,1340(sp)
  805eec:	080a6540 	call	80a654 <_localeconv_r>
  805ef0:	10800017 	ldw	r2,0(r2)
  805ef4:	d9c15117 	ldw	r7,1348(sp)
  805ef8:	d8814915 	stw	r2,1316(sp)
  805efc:	d8814f17 	ldw	r2,1340(sp)
  805f00:	10000226 	beq	r2,zero,805f0c <___vfprintf_internal_r+0x5c>
  805f04:	10800e17 	ldw	r2,56(r2)
  805f08:	10020d26 	beq	r2,zero,806740 <___vfprintf_internal_r+0x890>
  805f0c:	b080030b 	ldhu	r2,12(r22)
  805f10:	1080020c 	andi	r2,r2,8
  805f14:	10020e26 	beq	r2,zero,806750 <___vfprintf_internal_r+0x8a0>
  805f18:	b0800417 	ldw	r2,16(r22)
  805f1c:	10020c26 	beq	r2,zero,806750 <___vfprintf_internal_r+0x8a0>
  805f20:	b200030b 	ldhu	r8,12(r22)
  805f24:	00800284 	movi	r2,10
  805f28:	40c0068c 	andi	r3,r8,26
  805f2c:	18802f1e 	bne	r3,r2,805fec <___vfprintf_internal_r+0x13c>
  805f30:	b080038f 	ldh	r2,14(r22)
  805f34:	10002d16 	blt	r2,zero,805fec <___vfprintf_internal_r+0x13c>
  805f38:	b240038b 	ldhu	r9,14(r22)
  805f3c:	b2800717 	ldw	r10,28(r22)
  805f40:	b2c00917 	ldw	r11,36(r22)
  805f44:	d9014f17 	ldw	r4,1340(sp)
  805f48:	dc402904 	addi	r17,sp,164
  805f4c:	d8804004 	addi	r2,sp,256
  805f50:	00c10004 	movi	r3,1024
  805f54:	423fff4c 	andi	r8,r8,65533
  805f58:	800d883a 	mov	r6,r16
  805f5c:	880b883a 	mov	r5,r17
  805f60:	da002c0d 	sth	r8,176(sp)
  805f64:	da402c8d 	sth	r9,178(sp)
  805f68:	da803015 	stw	r10,192(sp)
  805f6c:	dac03215 	stw	r11,200(sp)
  805f70:	d8802d15 	stw	r2,180(sp)
  805f74:	d8c02e15 	stw	r3,184(sp)
  805f78:	d8802915 	stw	r2,164(sp)
  805f7c:	d8c02b15 	stw	r3,172(sp)
  805f80:	d8002f15 	stw	zero,188(sp)
  805f84:	0805eb00 	call	805eb0 <___vfprintf_internal_r>
  805f88:	d8814b15 	stw	r2,1324(sp)
  805f8c:	10000416 	blt	r2,zero,805fa0 <___vfprintf_internal_r+0xf0>
  805f90:	d9014f17 	ldw	r4,1340(sp)
  805f94:	880b883a 	mov	r5,r17
  805f98:	08096cc0 	call	8096cc <_fflush_r>
  805f9c:	1002321e 	bne	r2,zero,806868 <___vfprintf_internal_r+0x9b8>
  805fa0:	d8802c0b 	ldhu	r2,176(sp)
  805fa4:	1080100c 	andi	r2,r2,64
  805fa8:	10000326 	beq	r2,zero,805fb8 <___vfprintf_internal_r+0x108>
  805fac:	b080030b 	ldhu	r2,12(r22)
  805fb0:	10801014 	ori	r2,r2,64
  805fb4:	b080030d 	sth	r2,12(r22)
  805fb8:	d8814b17 	ldw	r2,1324(sp)
  805fbc:	dfc15b17 	ldw	ra,1388(sp)
  805fc0:	df015a17 	ldw	fp,1384(sp)
  805fc4:	ddc15917 	ldw	r23,1380(sp)
  805fc8:	dd815817 	ldw	r22,1376(sp)
  805fcc:	dd415717 	ldw	r21,1372(sp)
  805fd0:	dd015617 	ldw	r20,1368(sp)
  805fd4:	dcc15517 	ldw	r19,1364(sp)
  805fd8:	dc815417 	ldw	r18,1360(sp)
  805fdc:	dc415317 	ldw	r17,1356(sp)
  805fe0:	dc015217 	ldw	r16,1352(sp)
  805fe4:	dec15c04 	addi	sp,sp,1392
  805fe8:	f800283a 	ret
  805fec:	0005883a 	mov	r2,zero
  805ff0:	0007883a 	mov	r3,zero
  805ff4:	dd401904 	addi	r21,sp,100
  805ff8:	d8814215 	stw	r2,1288(sp)
  805ffc:	802f883a 	mov	r23,r16
  806000:	d8c14315 	stw	r3,1292(sp)
  806004:	d8014b15 	stw	zero,1324(sp)
  806008:	d8014815 	stw	zero,1312(sp)
  80600c:	d8014415 	stw	zero,1296(sp)
  806010:	d8014715 	stw	zero,1308(sp)
  806014:	dd400c15 	stw	r21,48(sp)
  806018:	d8000e15 	stw	zero,56(sp)
  80601c:	d8000d15 	stw	zero,52(sp)
  806020:	b8800007 	ldb	r2,0(r23)
  806024:	10001926 	beq	r2,zero,80608c <___vfprintf_internal_r+0x1dc>
  806028:	00c00944 	movi	r3,37
  80602c:	10c01726 	beq	r2,r3,80608c <___vfprintf_internal_r+0x1dc>
  806030:	b821883a 	mov	r16,r23
  806034:	00000106 	br	80603c <___vfprintf_internal_r+0x18c>
  806038:	10c00326 	beq	r2,r3,806048 <___vfprintf_internal_r+0x198>
  80603c:	84000044 	addi	r16,r16,1
  806040:	80800007 	ldb	r2,0(r16)
  806044:	103ffc1e 	bne	r2,zero,806038 <___vfprintf_internal_r+0x188>
  806048:	85e7c83a 	sub	r19,r16,r23
  80604c:	98000e26 	beq	r19,zero,806088 <___vfprintf_internal_r+0x1d8>
  806050:	dc800e17 	ldw	r18,56(sp)
  806054:	dc400d17 	ldw	r17,52(sp)
  806058:	008001c4 	movi	r2,7
  80605c:	94e5883a 	add	r18,r18,r19
  806060:	8c400044 	addi	r17,r17,1
  806064:	adc00015 	stw	r23,0(r21)
  806068:	dc800e15 	stw	r18,56(sp)
  80606c:	acc00115 	stw	r19,4(r21)
  806070:	dc400d15 	stw	r17,52(sp)
  806074:	14428b16 	blt	r2,r17,806aa4 <___vfprintf_internal_r+0xbf4>
  806078:	ad400204 	addi	r21,r21,8
  80607c:	d9014b17 	ldw	r4,1324(sp)
  806080:	24c9883a 	add	r4,r4,r19
  806084:	d9014b15 	stw	r4,1324(sp)
  806088:	802f883a 	mov	r23,r16
  80608c:	b8800007 	ldb	r2,0(r23)
  806090:	10013c26 	beq	r2,zero,806584 <___vfprintf_internal_r+0x6d4>
  806094:	bdc00044 	addi	r23,r23,1
  806098:	d8000405 	stb	zero,16(sp)
  80609c:	b8c00007 	ldb	r3,0(r23)
  8060a0:	04ffffc4 	movi	r19,-1
  8060a4:	d8014c15 	stw	zero,1328(sp)
  8060a8:	d8014a15 	stw	zero,1320(sp)
  8060ac:	d8c14d15 	stw	r3,1332(sp)
  8060b0:	bdc00044 	addi	r23,r23,1
  8060b4:	d9414d17 	ldw	r5,1332(sp)
  8060b8:	00801604 	movi	r2,88
  8060bc:	28fff804 	addi	r3,r5,-32
  8060c0:	10c06036 	bltu	r2,r3,806244 <___vfprintf_internal_r+0x394>
  8060c4:	18c5883a 	add	r2,r3,r3
  8060c8:	1085883a 	add	r2,r2,r2
  8060cc:	00c02034 	movhi	r3,128
  8060d0:	18d83804 	addi	r3,r3,24800
  8060d4:	10c5883a 	add	r2,r2,r3
  8060d8:	11000017 	ldw	r4,0(r2)
  8060dc:	2000683a 	jmp	r4
  8060e0:	00807054 	movui	r2,449
  8060e4:	00806244 	movi	r2,393
  8060e8:	00806244 	movi	r2,393
  8060ec:	00807040 	call	80704 <__alt_mem_sdram_0-0x77f8fc>
  8060f0:	00806244 	movi	r2,393
  8060f4:	00806244 	movi	r2,393
  8060f8:	00806244 	movi	r2,393
  8060fc:	00806244 	movi	r2,393
  806100:	00806244 	movi	r2,393
  806104:	00806244 	movi	r2,393
  806108:	00806e20 	cmpeqi	r2,zero,440
  80610c:	00807030 	cmpltui	r2,zero,448
  806110:	00806244 	movi	r2,393
  806114:	00806e38 	rdprs	r2,zero,440
  806118:	008070d8 	cmpnei	r2,zero,451
  80611c:	00806244 	movi	r2,393
  806120:	008070c4 	movi	r2,451
  806124:	00807080 	call	80708 <__alt_mem_sdram_0-0x77f8f8>
  806128:	00807080 	call	80708 <__alt_mem_sdram_0-0x77f8f8>
  80612c:	00807080 	call	80708 <__alt_mem_sdram_0-0x77f8f8>
  806130:	00807080 	call	80708 <__alt_mem_sdram_0-0x77f8f8>
  806134:	00807080 	call	80708 <__alt_mem_sdram_0-0x77f8f8>
  806138:	00807080 	call	80708 <__alt_mem_sdram_0-0x77f8f8>
  80613c:	00807080 	call	80708 <__alt_mem_sdram_0-0x77f8f8>
  806140:	00807080 	call	80708 <__alt_mem_sdram_0-0x77f8f8>
  806144:	00807080 	call	80708 <__alt_mem_sdram_0-0x77f8f8>
  806148:	00806244 	movi	r2,393
  80614c:	00806244 	movi	r2,393
  806150:	00806244 	movi	r2,393
  806154:	00806244 	movi	r2,393
  806158:	00806244 	movi	r2,393
  80615c:	00806244 	movi	r2,393
  806160:	00806244 	movi	r2,393
  806164:	00806244 	movi	r2,393
  806168:	00806244 	movi	r2,393
  80616c:	00806244 	movi	r2,393
  806170:	0080689c 	xori	r2,zero,418
  806174:	00806f08 	cmpgei	r2,zero,444
  806178:	00806244 	movi	r2,393
  80617c:	00806f08 	cmpgei	r2,zero,444
  806180:	00806244 	movi	r2,393
  806184:	00806244 	movi	r2,393
  806188:	00806244 	movi	r2,393
  80618c:	00806244 	movi	r2,393
  806190:	0080706c 	andhi	r2,zero,449
  806194:	00806244 	movi	r2,393
  806198:	00806244 	movi	r2,393
  80619c:	00806950 	cmplti	r2,zero,421
  8061a0:	00806244 	movi	r2,393
  8061a4:	00806244 	movi	r2,393
  8061a8:	00806244 	movi	r2,393
  8061ac:	00806244 	movi	r2,393
  8061b0:	00806244 	movi	r2,393
  8061b4:	0080699c 	xori	r2,zero,422
  8061b8:	00806244 	movi	r2,393
  8061bc:	00806244 	movi	r2,393
  8061c0:	00806fbc 	xorhi	r2,zero,446
  8061c4:	00806244 	movi	r2,393
  8061c8:	00806244 	movi	r2,393
  8061cc:	00806244 	movi	r2,393
  8061d0:	00806244 	movi	r2,393
  8061d4:	00806244 	movi	r2,393
  8061d8:	00806244 	movi	r2,393
  8061dc:	00806244 	movi	r2,393
  8061e0:	00806244 	movi	r2,393
  8061e4:	00806244 	movi	r2,393
  8061e8:	00806244 	movi	r2,393
  8061ec:	00806f90 	cmplti	r2,zero,446
  8061f0:	008068a8 	cmpgeui	r2,zero,418
  8061f4:	00806f08 	cmpgei	r2,zero,444
  8061f8:	00806f08 	cmpgei	r2,zero,444
  8061fc:	00806f08 	cmpgei	r2,zero,444
  806200:	00806ef4 	movhi	r2,443
  806204:	008068a8 	cmpgeui	r2,zero,418
  806208:	00806244 	movi	r2,393
  80620c:	00806244 	movi	r2,393
  806210:	00806e7c 	xorhi	r2,zero,441
  806214:	00806244 	movi	r2,393
  806218:	00806e4c 	andi	r2,zero,441
  80621c:	0080695c 	xori	r2,zero,421
  806220:	00806eac 	andhi	r2,zero,442
  806224:	00806e98 	cmpnei	r2,zero,442
  806228:	00806244 	movi	r2,393
  80622c:	00807140 	call	80714 <__alt_mem_sdram_0-0x77f8ec>
  806230:	00806244 	movi	r2,393
  806234:	008069a8 	cmpgeui	r2,zero,422
  806238:	00806244 	movi	r2,393
  80623c:	00806244 	movi	r2,393
  806240:	00807020 	cmpeqi	r2,zero,448
  806244:	d9014d17 	ldw	r4,1332(sp)
  806248:	2000ce26 	beq	r4,zero,806584 <___vfprintf_internal_r+0x6d4>
  80624c:	01400044 	movi	r5,1
  806250:	d9800f04 	addi	r6,sp,60
  806254:	d9c14015 	stw	r7,1280(sp)
  806258:	d9414515 	stw	r5,1300(sp)
  80625c:	d9814115 	stw	r6,1284(sp)
  806260:	280f883a 	mov	r7,r5
  806264:	d9000f05 	stb	r4,60(sp)
  806268:	d8000405 	stb	zero,16(sp)
  80626c:	d8014615 	stw	zero,1304(sp)
  806270:	d8c14c17 	ldw	r3,1328(sp)
  806274:	1880008c 	andi	r2,r3,2
  806278:	1005003a 	cmpeq	r2,r2,zero
  80627c:	d8815015 	stw	r2,1344(sp)
  806280:	1000031e 	bne	r2,zero,806290 <___vfprintf_internal_r+0x3e0>
  806284:	d9014517 	ldw	r4,1300(sp)
  806288:	21000084 	addi	r4,r4,2
  80628c:	d9014515 	stw	r4,1300(sp)
  806290:	d9414c17 	ldw	r5,1328(sp)
  806294:	2940210c 	andi	r5,r5,132
  806298:	d9414e15 	stw	r5,1336(sp)
  80629c:	28002d1e 	bne	r5,zero,806354 <___vfprintf_internal_r+0x4a4>
  8062a0:	d9814a17 	ldw	r6,1320(sp)
  8062a4:	d8814517 	ldw	r2,1300(sp)
  8062a8:	30a1c83a 	sub	r16,r6,r2
  8062ac:	0400290e 	bge	zero,r16,806354 <___vfprintf_internal_r+0x4a4>
  8062b0:	00800404 	movi	r2,16
  8062b4:	14045e0e 	bge	r2,r16,807430 <___vfprintf_internal_r+0x1580>
  8062b8:	dc800e17 	ldw	r18,56(sp)
  8062bc:	dc400d17 	ldw	r17,52(sp)
  8062c0:	1027883a 	mov	r19,r2
  8062c4:	07002074 	movhi	fp,129
  8062c8:	e7094584 	addi	fp,fp,9494
  8062cc:	050001c4 	movi	r20,7
  8062d0:	00000306 	br	8062e0 <___vfprintf_internal_r+0x430>
  8062d4:	843ffc04 	addi	r16,r16,-16
  8062d8:	ad400204 	addi	r21,r21,8
  8062dc:	9c00130e 	bge	r19,r16,80632c <___vfprintf_internal_r+0x47c>
  8062e0:	94800404 	addi	r18,r18,16
  8062e4:	8c400044 	addi	r17,r17,1
  8062e8:	af000015 	stw	fp,0(r21)
  8062ec:	acc00115 	stw	r19,4(r21)
  8062f0:	dc800e15 	stw	r18,56(sp)
  8062f4:	dc400d15 	stw	r17,52(sp)
  8062f8:	a47ff60e 	bge	r20,r17,8062d4 <___vfprintf_internal_r+0x424>
  8062fc:	d9014f17 	ldw	r4,1340(sp)
  806300:	b00b883a 	mov	r5,r22
  806304:	d9800c04 	addi	r6,sp,48
  806308:	d9c15115 	stw	r7,1348(sp)
  80630c:	0805e580 	call	805e58 <__sprint_r>
  806310:	d9c15117 	ldw	r7,1348(sp)
  806314:	10009e1e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  806318:	843ffc04 	addi	r16,r16,-16
  80631c:	dc800e17 	ldw	r18,56(sp)
  806320:	dc400d17 	ldw	r17,52(sp)
  806324:	dd401904 	addi	r21,sp,100
  806328:	9c3fed16 	blt	r19,r16,8062e0 <___vfprintf_internal_r+0x430>
  80632c:	9425883a 	add	r18,r18,r16
  806330:	8c400044 	addi	r17,r17,1
  806334:	008001c4 	movi	r2,7
  806338:	af000015 	stw	fp,0(r21)
  80633c:	ac000115 	stw	r16,4(r21)
  806340:	dc800e15 	stw	r18,56(sp)
  806344:	dc400d15 	stw	r17,52(sp)
  806348:	1441f516 	blt	r2,r17,806b20 <___vfprintf_internal_r+0xc70>
  80634c:	ad400204 	addi	r21,r21,8
  806350:	00000206 	br	80635c <___vfprintf_internal_r+0x4ac>
  806354:	dc800e17 	ldw	r18,56(sp)
  806358:	dc400d17 	ldw	r17,52(sp)
  80635c:	d8800407 	ldb	r2,16(sp)
  806360:	10000b26 	beq	r2,zero,806390 <___vfprintf_internal_r+0x4e0>
  806364:	00800044 	movi	r2,1
  806368:	94800044 	addi	r18,r18,1
  80636c:	8c400044 	addi	r17,r17,1
  806370:	a8800115 	stw	r2,4(r21)
  806374:	d8c00404 	addi	r3,sp,16
  806378:	008001c4 	movi	r2,7
  80637c:	a8c00015 	stw	r3,0(r21)
  806380:	dc800e15 	stw	r18,56(sp)
  806384:	dc400d15 	stw	r17,52(sp)
  806388:	1441da16 	blt	r2,r17,806af4 <___vfprintf_internal_r+0xc44>
  80638c:	ad400204 	addi	r21,r21,8
  806390:	d9015017 	ldw	r4,1344(sp)
  806394:	20000b1e 	bne	r4,zero,8063c4 <___vfprintf_internal_r+0x514>
  806398:	d8800444 	addi	r2,sp,17
  80639c:	94800084 	addi	r18,r18,2
  8063a0:	8c400044 	addi	r17,r17,1
  8063a4:	a8800015 	stw	r2,0(r21)
  8063a8:	00c00084 	movi	r3,2
  8063ac:	008001c4 	movi	r2,7
  8063b0:	a8c00115 	stw	r3,4(r21)
  8063b4:	dc800e15 	stw	r18,56(sp)
  8063b8:	dc400d15 	stw	r17,52(sp)
  8063bc:	1441c216 	blt	r2,r17,806ac8 <___vfprintf_internal_r+0xc18>
  8063c0:	ad400204 	addi	r21,r21,8
  8063c4:	d9414e17 	ldw	r5,1336(sp)
  8063c8:	00802004 	movi	r2,128
  8063cc:	2880b126 	beq	r5,r2,806694 <___vfprintf_internal_r+0x7e4>
  8063d0:	d8c14617 	ldw	r3,1304(sp)
  8063d4:	19e1c83a 	sub	r16,r3,r7
  8063d8:	0400260e 	bge	zero,r16,806474 <___vfprintf_internal_r+0x5c4>
  8063dc:	00800404 	movi	r2,16
  8063e0:	1403cf0e 	bge	r2,r16,807320 <___vfprintf_internal_r+0x1470>
  8063e4:	1027883a 	mov	r19,r2
  8063e8:	07002074 	movhi	fp,129
  8063ec:	e7094184 	addi	fp,fp,9478
  8063f0:	050001c4 	movi	r20,7
  8063f4:	00000306 	br	806404 <___vfprintf_internal_r+0x554>
  8063f8:	843ffc04 	addi	r16,r16,-16
  8063fc:	ad400204 	addi	r21,r21,8
  806400:	9c00130e 	bge	r19,r16,806450 <___vfprintf_internal_r+0x5a0>
  806404:	94800404 	addi	r18,r18,16
  806408:	8c400044 	addi	r17,r17,1
  80640c:	af000015 	stw	fp,0(r21)
  806410:	acc00115 	stw	r19,4(r21)
  806414:	dc800e15 	stw	r18,56(sp)
  806418:	dc400d15 	stw	r17,52(sp)
  80641c:	a47ff60e 	bge	r20,r17,8063f8 <___vfprintf_internal_r+0x548>
  806420:	d9014f17 	ldw	r4,1340(sp)
  806424:	b00b883a 	mov	r5,r22
  806428:	d9800c04 	addi	r6,sp,48
  80642c:	d9c15115 	stw	r7,1348(sp)
  806430:	0805e580 	call	805e58 <__sprint_r>
  806434:	d9c15117 	ldw	r7,1348(sp)
  806438:	1000551e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  80643c:	843ffc04 	addi	r16,r16,-16
  806440:	dc800e17 	ldw	r18,56(sp)
  806444:	dc400d17 	ldw	r17,52(sp)
  806448:	dd401904 	addi	r21,sp,100
  80644c:	9c3fed16 	blt	r19,r16,806404 <___vfprintf_internal_r+0x554>
  806450:	9425883a 	add	r18,r18,r16
  806454:	8c400044 	addi	r17,r17,1
  806458:	008001c4 	movi	r2,7
  80645c:	af000015 	stw	fp,0(r21)
  806460:	ac000115 	stw	r16,4(r21)
  806464:	dc800e15 	stw	r18,56(sp)
  806468:	dc400d15 	stw	r17,52(sp)
  80646c:	14418216 	blt	r2,r17,806a78 <___vfprintf_internal_r+0xbc8>
  806470:	ad400204 	addi	r21,r21,8
  806474:	d9014c17 	ldw	r4,1328(sp)
  806478:	2080400c 	andi	r2,r4,256
  80647c:	10004a1e 	bne	r2,zero,8065a8 <___vfprintf_internal_r+0x6f8>
  806480:	d9414117 	ldw	r5,1284(sp)
  806484:	91e5883a 	add	r18,r18,r7
  806488:	8c400044 	addi	r17,r17,1
  80648c:	008001c4 	movi	r2,7
  806490:	a9400015 	stw	r5,0(r21)
  806494:	a9c00115 	stw	r7,4(r21)
  806498:	dc800e15 	stw	r18,56(sp)
  80649c:	dc400d15 	stw	r17,52(sp)
  8064a0:	14416716 	blt	r2,r17,806a40 <___vfprintf_internal_r+0xb90>
  8064a4:	a8c00204 	addi	r3,r21,8
  8064a8:	d9814c17 	ldw	r6,1328(sp)
  8064ac:	3080010c 	andi	r2,r6,4
  8064b0:	10002826 	beq	r2,zero,806554 <___vfprintf_internal_r+0x6a4>
  8064b4:	d8814a17 	ldw	r2,1320(sp)
  8064b8:	d9014517 	ldw	r4,1300(sp)
  8064bc:	1121c83a 	sub	r16,r2,r4
  8064c0:	0400240e 	bge	zero,r16,806554 <___vfprintf_internal_r+0x6a4>
  8064c4:	00800404 	movi	r2,16
  8064c8:	1404550e 	bge	r2,r16,807620 <___vfprintf_internal_r+0x1770>
  8064cc:	dc400d17 	ldw	r17,52(sp)
  8064d0:	1027883a 	mov	r19,r2
  8064d4:	07002074 	movhi	fp,129
  8064d8:	e7094584 	addi	fp,fp,9494
  8064dc:	050001c4 	movi	r20,7
  8064e0:	00000306 	br	8064f0 <___vfprintf_internal_r+0x640>
  8064e4:	843ffc04 	addi	r16,r16,-16
  8064e8:	18c00204 	addi	r3,r3,8
  8064ec:	9c00110e 	bge	r19,r16,806534 <___vfprintf_internal_r+0x684>
  8064f0:	94800404 	addi	r18,r18,16
  8064f4:	8c400044 	addi	r17,r17,1
  8064f8:	1f000015 	stw	fp,0(r3)
  8064fc:	1cc00115 	stw	r19,4(r3)
  806500:	dc800e15 	stw	r18,56(sp)
  806504:	dc400d15 	stw	r17,52(sp)
  806508:	a47ff60e 	bge	r20,r17,8064e4 <___vfprintf_internal_r+0x634>
  80650c:	d9014f17 	ldw	r4,1340(sp)
  806510:	b00b883a 	mov	r5,r22
  806514:	d9800c04 	addi	r6,sp,48
  806518:	0805e580 	call	805e58 <__sprint_r>
  80651c:	10001c1e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  806520:	843ffc04 	addi	r16,r16,-16
  806524:	dc800e17 	ldw	r18,56(sp)
  806528:	dc400d17 	ldw	r17,52(sp)
  80652c:	d8c01904 	addi	r3,sp,100
  806530:	9c3fef16 	blt	r19,r16,8064f0 <___vfprintf_internal_r+0x640>
  806534:	9425883a 	add	r18,r18,r16
  806538:	8c400044 	addi	r17,r17,1
  80653c:	008001c4 	movi	r2,7
  806540:	1f000015 	stw	fp,0(r3)
  806544:	1c000115 	stw	r16,4(r3)
  806548:	dc800e15 	stw	r18,56(sp)
  80654c:	dc400d15 	stw	r17,52(sp)
  806550:	1440cb16 	blt	r2,r17,806880 <___vfprintf_internal_r+0x9d0>
  806554:	d8814a17 	ldw	r2,1320(sp)
  806558:	d9414517 	ldw	r5,1300(sp)
  80655c:	1140010e 	bge	r2,r5,806564 <___vfprintf_internal_r+0x6b4>
  806560:	2805883a 	mov	r2,r5
  806564:	d9814b17 	ldw	r6,1324(sp)
  806568:	308d883a 	add	r6,r6,r2
  80656c:	d9814b15 	stw	r6,1324(sp)
  806570:	90013b1e 	bne	r18,zero,806a60 <___vfprintf_internal_r+0xbb0>
  806574:	d9c14017 	ldw	r7,1280(sp)
  806578:	dd401904 	addi	r21,sp,100
  80657c:	d8000d15 	stw	zero,52(sp)
  806580:	003ea706 	br	806020 <___vfprintf_internal_r+0x170>
  806584:	d8800e17 	ldw	r2,56(sp)
  806588:	1005451e 	bne	r2,zero,807aa0 <___vfprintf_internal_r+0x1bf0>
  80658c:	d8000d15 	stw	zero,52(sp)
  806590:	b080030b 	ldhu	r2,12(r22)
  806594:	1080100c 	andi	r2,r2,64
  806598:	103e8726 	beq	r2,zero,805fb8 <___vfprintf_internal_r+0x108>
  80659c:	00bfffc4 	movi	r2,-1
  8065a0:	d8814b15 	stw	r2,1324(sp)
  8065a4:	003e8406 	br	805fb8 <___vfprintf_internal_r+0x108>
  8065a8:	d9814d17 	ldw	r6,1332(sp)
  8065ac:	00801944 	movi	r2,101
  8065b0:	11806e16 	blt	r2,r6,80676c <___vfprintf_internal_r+0x8bc>
  8065b4:	d9414717 	ldw	r5,1308(sp)
  8065b8:	00c00044 	movi	r3,1
  8065bc:	1943490e 	bge	r3,r5,8072e4 <___vfprintf_internal_r+0x1434>
  8065c0:	d8814117 	ldw	r2,1284(sp)
  8065c4:	94800044 	addi	r18,r18,1
  8065c8:	8c400044 	addi	r17,r17,1
  8065cc:	a8800015 	stw	r2,0(r21)
  8065d0:	008001c4 	movi	r2,7
  8065d4:	a8c00115 	stw	r3,4(r21)
  8065d8:	dc800e15 	stw	r18,56(sp)
  8065dc:	dc400d15 	stw	r17,52(sp)
  8065e0:	1441ca16 	blt	r2,r17,806d0c <___vfprintf_internal_r+0xe5c>
  8065e4:	a8c00204 	addi	r3,r21,8
  8065e8:	d9014917 	ldw	r4,1316(sp)
  8065ec:	00800044 	movi	r2,1
  8065f0:	94800044 	addi	r18,r18,1
  8065f4:	8c400044 	addi	r17,r17,1
  8065f8:	18800115 	stw	r2,4(r3)
  8065fc:	008001c4 	movi	r2,7
  806600:	19000015 	stw	r4,0(r3)
  806604:	dc800e15 	stw	r18,56(sp)
  806608:	dc400d15 	stw	r17,52(sp)
  80660c:	1441b616 	blt	r2,r17,806ce8 <___vfprintf_internal_r+0xe38>
  806610:	1cc00204 	addi	r19,r3,8
  806614:	d9014217 	ldw	r4,1288(sp)
  806618:	d9414317 	ldw	r5,1292(sp)
  80661c:	000d883a 	mov	r6,zero
  806620:	000f883a 	mov	r7,zero
  806624:	080e7980 	call	80e798 <__nedf2>
  806628:	10017426 	beq	r2,zero,806bfc <___vfprintf_internal_r+0xd4c>
  80662c:	d9414717 	ldw	r5,1308(sp)
  806630:	d9814117 	ldw	r6,1284(sp)
  806634:	8c400044 	addi	r17,r17,1
  806638:	2c85883a 	add	r2,r5,r18
  80663c:	14bfffc4 	addi	r18,r2,-1
  806640:	28bfffc4 	addi	r2,r5,-1
  806644:	30c00044 	addi	r3,r6,1
  806648:	98800115 	stw	r2,4(r19)
  80664c:	008001c4 	movi	r2,7
  806650:	98c00015 	stw	r3,0(r19)
  806654:	dc800e15 	stw	r18,56(sp)
  806658:	dc400d15 	stw	r17,52(sp)
  80665c:	14418e16 	blt	r2,r17,806c98 <___vfprintf_internal_r+0xde8>
  806660:	9cc00204 	addi	r19,r19,8
  806664:	d9414817 	ldw	r5,1312(sp)
  806668:	d8800804 	addi	r2,sp,32
  80666c:	8c400044 	addi	r17,r17,1
  806670:	9165883a 	add	r18,r18,r5
  806674:	98800015 	stw	r2,0(r19)
  806678:	008001c4 	movi	r2,7
  80667c:	99400115 	stw	r5,4(r19)
  806680:	dc800e15 	stw	r18,56(sp)
  806684:	dc400d15 	stw	r17,52(sp)
  806688:	1440ed16 	blt	r2,r17,806a40 <___vfprintf_internal_r+0xb90>
  80668c:	98c00204 	addi	r3,r19,8
  806690:	003f8506 	br	8064a8 <___vfprintf_internal_r+0x5f8>
  806694:	d9814a17 	ldw	r6,1320(sp)
  806698:	d8814517 	ldw	r2,1300(sp)
  80669c:	30a1c83a 	sub	r16,r6,r2
  8066a0:	043f4b0e 	bge	zero,r16,8063d0 <___vfprintf_internal_r+0x520>
  8066a4:	00800404 	movi	r2,16
  8066a8:	14043a0e 	bge	r2,r16,807794 <___vfprintf_internal_r+0x18e4>
  8066ac:	1027883a 	mov	r19,r2
  8066b0:	07002074 	movhi	fp,129
  8066b4:	e7094184 	addi	fp,fp,9478
  8066b8:	050001c4 	movi	r20,7
  8066bc:	00000306 	br	8066cc <___vfprintf_internal_r+0x81c>
  8066c0:	843ffc04 	addi	r16,r16,-16
  8066c4:	ad400204 	addi	r21,r21,8
  8066c8:	9c00130e 	bge	r19,r16,806718 <___vfprintf_internal_r+0x868>
  8066cc:	94800404 	addi	r18,r18,16
  8066d0:	8c400044 	addi	r17,r17,1
  8066d4:	af000015 	stw	fp,0(r21)
  8066d8:	acc00115 	stw	r19,4(r21)
  8066dc:	dc800e15 	stw	r18,56(sp)
  8066e0:	dc400d15 	stw	r17,52(sp)
  8066e4:	a47ff60e 	bge	r20,r17,8066c0 <___vfprintf_internal_r+0x810>
  8066e8:	d9014f17 	ldw	r4,1340(sp)
  8066ec:	b00b883a 	mov	r5,r22
  8066f0:	d9800c04 	addi	r6,sp,48
  8066f4:	d9c15115 	stw	r7,1348(sp)
  8066f8:	0805e580 	call	805e58 <__sprint_r>
  8066fc:	d9c15117 	ldw	r7,1348(sp)
  806700:	103fa31e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  806704:	843ffc04 	addi	r16,r16,-16
  806708:	dc800e17 	ldw	r18,56(sp)
  80670c:	dc400d17 	ldw	r17,52(sp)
  806710:	dd401904 	addi	r21,sp,100
  806714:	9c3fed16 	blt	r19,r16,8066cc <___vfprintf_internal_r+0x81c>
  806718:	9425883a 	add	r18,r18,r16
  80671c:	8c400044 	addi	r17,r17,1
  806720:	008001c4 	movi	r2,7
  806724:	af000015 	stw	fp,0(r21)
  806728:	ac000115 	stw	r16,4(r21)
  80672c:	dc800e15 	stw	r18,56(sp)
  806730:	dc400d15 	stw	r17,52(sp)
  806734:	14416116 	blt	r2,r17,806cbc <___vfprintf_internal_r+0xe0c>
  806738:	ad400204 	addi	r21,r21,8
  80673c:	003f2406 	br	8063d0 <___vfprintf_internal_r+0x520>
  806740:	d9014f17 	ldw	r4,1340(sp)
  806744:	08099640 	call	809964 <__sinit>
  806748:	d9c15117 	ldw	r7,1348(sp)
  80674c:	003def06 	br	805f0c <___vfprintf_internal_r+0x5c>
  806750:	d9014f17 	ldw	r4,1340(sp)
  806754:	b00b883a 	mov	r5,r22
  806758:	d9c15115 	stw	r7,1348(sp)
  80675c:	0807d980 	call	807d98 <__swsetup_r>
  806760:	d9c15117 	ldw	r7,1348(sp)
  806764:	103dee26 	beq	r2,zero,805f20 <___vfprintf_internal_r+0x70>
  806768:	003f8c06 	br	80659c <___vfprintf_internal_r+0x6ec>
  80676c:	d9014217 	ldw	r4,1288(sp)
  806770:	d9414317 	ldw	r5,1292(sp)
  806774:	000d883a 	mov	r6,zero
  806778:	000f883a 	mov	r7,zero
  80677c:	080e7100 	call	80e710 <__eqdf2>
  806780:	1000f21e 	bne	r2,zero,806b4c <___vfprintf_internal_r+0xc9c>
  806784:	00802074 	movhi	r2,129
  806788:	10894104 	addi	r2,r2,9476
  80678c:	94800044 	addi	r18,r18,1
  806790:	8c400044 	addi	r17,r17,1
  806794:	a8800015 	stw	r2,0(r21)
  806798:	00c00044 	movi	r3,1
  80679c:	008001c4 	movi	r2,7
  8067a0:	a8c00115 	stw	r3,4(r21)
  8067a4:	dc800e15 	stw	r18,56(sp)
  8067a8:	dc400d15 	stw	r17,52(sp)
  8067ac:	14430016 	blt	r2,r17,8073b0 <___vfprintf_internal_r+0x1500>
  8067b0:	a8c00204 	addi	r3,r21,8
  8067b4:	d8800517 	ldw	r2,20(sp)
  8067b8:	d9014717 	ldw	r4,1308(sp)
  8067bc:	11015c0e 	bge	r2,r4,806d30 <___vfprintf_internal_r+0xe80>
  8067c0:	dc400d17 	ldw	r17,52(sp)
  8067c4:	d9814917 	ldw	r6,1316(sp)
  8067c8:	00800044 	movi	r2,1
  8067cc:	94800044 	addi	r18,r18,1
  8067d0:	8c400044 	addi	r17,r17,1
  8067d4:	18800115 	stw	r2,4(r3)
  8067d8:	008001c4 	movi	r2,7
  8067dc:	19800015 	stw	r6,0(r3)
  8067e0:	dc800e15 	stw	r18,56(sp)
  8067e4:	dc400d15 	stw	r17,52(sp)
  8067e8:	14431616 	blt	r2,r17,807444 <___vfprintf_internal_r+0x1594>
  8067ec:	18c00204 	addi	r3,r3,8
  8067f0:	d8814717 	ldw	r2,1308(sp)
  8067f4:	143fffc4 	addi	r16,r2,-1
  8067f8:	043f2b0e 	bge	zero,r16,8064a8 <___vfprintf_internal_r+0x5f8>
  8067fc:	00800404 	movi	r2,16
  806800:	1402a80e 	bge	r2,r16,8072a4 <___vfprintf_internal_r+0x13f4>
  806804:	dc400d17 	ldw	r17,52(sp)
  806808:	1027883a 	mov	r19,r2
  80680c:	07002074 	movhi	fp,129
  806810:	e7094184 	addi	fp,fp,9478
  806814:	050001c4 	movi	r20,7
  806818:	00000306 	br	806828 <___vfprintf_internal_r+0x978>
  80681c:	18c00204 	addi	r3,r3,8
  806820:	843ffc04 	addi	r16,r16,-16
  806824:	9c02a20e 	bge	r19,r16,8072b0 <___vfprintf_internal_r+0x1400>
  806828:	94800404 	addi	r18,r18,16
  80682c:	8c400044 	addi	r17,r17,1
  806830:	1f000015 	stw	fp,0(r3)
  806834:	1cc00115 	stw	r19,4(r3)
  806838:	dc800e15 	stw	r18,56(sp)
  80683c:	dc400d15 	stw	r17,52(sp)
  806840:	a47ff60e 	bge	r20,r17,80681c <___vfprintf_internal_r+0x96c>
  806844:	d9014f17 	ldw	r4,1340(sp)
  806848:	b00b883a 	mov	r5,r22
  80684c:	d9800c04 	addi	r6,sp,48
  806850:	0805e580 	call	805e58 <__sprint_r>
  806854:	103f4e1e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  806858:	dc800e17 	ldw	r18,56(sp)
  80685c:	dc400d17 	ldw	r17,52(sp)
  806860:	d8c01904 	addi	r3,sp,100
  806864:	003fee06 	br	806820 <___vfprintf_internal_r+0x970>
  806868:	d8802c0b 	ldhu	r2,176(sp)
  80686c:	00ffffc4 	movi	r3,-1
  806870:	d8c14b15 	stw	r3,1324(sp)
  806874:	1080100c 	andi	r2,r2,64
  806878:	103dcc1e 	bne	r2,zero,805fac <___vfprintf_internal_r+0xfc>
  80687c:	003dce06 	br	805fb8 <___vfprintf_internal_r+0x108>
  806880:	d9014f17 	ldw	r4,1340(sp)
  806884:	b00b883a 	mov	r5,r22
  806888:	d9800c04 	addi	r6,sp,48
  80688c:	0805e580 	call	805e58 <__sprint_r>
  806890:	103f3f1e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  806894:	dc800e17 	ldw	r18,56(sp)
  806898:	003f2e06 	br	806554 <___vfprintf_internal_r+0x6a4>
  80689c:	d9414c17 	ldw	r5,1328(sp)
  8068a0:	29400414 	ori	r5,r5,16
  8068a4:	d9414c15 	stw	r5,1328(sp)
  8068a8:	d9814c17 	ldw	r6,1328(sp)
  8068ac:	3080080c 	andi	r2,r6,32
  8068b0:	10014f1e 	bne	r2,zero,806df0 <___vfprintf_internal_r+0xf40>
  8068b4:	d8c14c17 	ldw	r3,1328(sp)
  8068b8:	1880040c 	andi	r2,r3,16
  8068bc:	1002f01e 	bne	r2,zero,807480 <___vfprintf_internal_r+0x15d0>
  8068c0:	d9014c17 	ldw	r4,1328(sp)
  8068c4:	2080100c 	andi	r2,r4,64
  8068c8:	1002ed26 	beq	r2,zero,807480 <___vfprintf_internal_r+0x15d0>
  8068cc:	3880000f 	ldh	r2,0(r7)
  8068d0:	39c00104 	addi	r7,r7,4
  8068d4:	d9c14015 	stw	r7,1280(sp)
  8068d8:	1023d7fa 	srai	r17,r2,31
  8068dc:	1021883a 	mov	r16,r2
  8068e0:	88037816 	blt	r17,zero,8076c4 <___vfprintf_internal_r+0x1814>
  8068e4:	01000044 	movi	r4,1
  8068e8:	98000416 	blt	r19,zero,8068fc <___vfprintf_internal_r+0xa4c>
  8068ec:	d8c14c17 	ldw	r3,1328(sp)
  8068f0:	00bfdfc4 	movi	r2,-129
  8068f4:	1886703a 	and	r3,r3,r2
  8068f8:	d8c14c15 	stw	r3,1328(sp)
  8068fc:	8444b03a 	or	r2,r16,r17
  806900:	10022c1e 	bne	r2,zero,8071b4 <___vfprintf_internal_r+0x1304>
  806904:	98022b1e 	bne	r19,zero,8071b4 <___vfprintf_internal_r+0x1304>
  806908:	20803fcc 	andi	r2,r4,255
  80690c:	1002a126 	beq	r2,zero,807394 <___vfprintf_internal_r+0x14e4>
  806910:	d8c01904 	addi	r3,sp,100
  806914:	dd000f04 	addi	r20,sp,60
  806918:	d8c14115 	stw	r3,1284(sp)
  80691c:	d8c14117 	ldw	r3,1284(sp)
  806920:	dcc14515 	stw	r19,1300(sp)
  806924:	a0c5c83a 	sub	r2,r20,r3
  806928:	11c00a04 	addi	r7,r2,40
  80692c:	99c0010e 	bge	r19,r7,806934 <___vfprintf_internal_r+0xa84>
  806930:	d9c14515 	stw	r7,1300(sp)
  806934:	dcc14615 	stw	r19,1304(sp)
  806938:	d8800407 	ldb	r2,16(sp)
  80693c:	103e4c26 	beq	r2,zero,806270 <___vfprintf_internal_r+0x3c0>
  806940:	d8814517 	ldw	r2,1300(sp)
  806944:	10800044 	addi	r2,r2,1
  806948:	d8814515 	stw	r2,1300(sp)
  80694c:	003e4806 	br	806270 <___vfprintf_internal_r+0x3c0>
  806950:	d9814c17 	ldw	r6,1328(sp)
  806954:	31800414 	ori	r6,r6,16
  806958:	d9814c15 	stw	r6,1328(sp)
  80695c:	d8c14c17 	ldw	r3,1328(sp)
  806960:	1880080c 	andi	r2,r3,32
  806964:	1001271e 	bne	r2,zero,806e04 <___vfprintf_internal_r+0xf54>
  806968:	d9414c17 	ldw	r5,1328(sp)
  80696c:	2880040c 	andi	r2,r5,16
  806970:	1002bc1e 	bne	r2,zero,807464 <___vfprintf_internal_r+0x15b4>
  806974:	d9814c17 	ldw	r6,1328(sp)
  806978:	3080100c 	andi	r2,r6,64
  80697c:	1002b926 	beq	r2,zero,807464 <___vfprintf_internal_r+0x15b4>
  806980:	3c00000b 	ldhu	r16,0(r7)
  806984:	0009883a 	mov	r4,zero
  806988:	39c00104 	addi	r7,r7,4
  80698c:	0023883a 	mov	r17,zero
  806990:	d9c14015 	stw	r7,1280(sp)
  806994:	d8000405 	stb	zero,16(sp)
  806998:	003fd306 	br	8068e8 <___vfprintf_internal_r+0xa38>
  80699c:	d9014c17 	ldw	r4,1328(sp)
  8069a0:	21000414 	ori	r4,r4,16
  8069a4:	d9014c15 	stw	r4,1328(sp)
  8069a8:	d9414c17 	ldw	r5,1328(sp)
  8069ac:	2880080c 	andi	r2,r5,32
  8069b0:	1001081e 	bne	r2,zero,806dd4 <___vfprintf_internal_r+0xf24>
  8069b4:	d8c14c17 	ldw	r3,1328(sp)
  8069b8:	1880040c 	andi	r2,r3,16
  8069bc:	1002b61e 	bne	r2,zero,807498 <___vfprintf_internal_r+0x15e8>
  8069c0:	d9014c17 	ldw	r4,1328(sp)
  8069c4:	2080100c 	andi	r2,r4,64
  8069c8:	1002b326 	beq	r2,zero,807498 <___vfprintf_internal_r+0x15e8>
  8069cc:	3c00000b 	ldhu	r16,0(r7)
  8069d0:	01000044 	movi	r4,1
  8069d4:	39c00104 	addi	r7,r7,4
  8069d8:	0023883a 	mov	r17,zero
  8069dc:	d9c14015 	stw	r7,1280(sp)
  8069e0:	d8000405 	stb	zero,16(sp)
  8069e4:	003fc006 	br	8068e8 <___vfprintf_internal_r+0xa38>
  8069e8:	d9014f17 	ldw	r4,1340(sp)
  8069ec:	b00b883a 	mov	r5,r22
  8069f0:	d9800c04 	addi	r6,sp,48
  8069f4:	0805e580 	call	805e58 <__sprint_r>
  8069f8:	103ee51e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  8069fc:	dc800e17 	ldw	r18,56(sp)
  806a00:	d8c01904 	addi	r3,sp,100
  806a04:	d9814c17 	ldw	r6,1328(sp)
  806a08:	3080004c 	andi	r2,r6,1
  806a0c:	1005003a 	cmpeq	r2,r2,zero
  806a10:	103ea51e 	bne	r2,zero,8064a8 <___vfprintf_internal_r+0x5f8>
  806a14:	00800044 	movi	r2,1
  806a18:	dc400d17 	ldw	r17,52(sp)
  806a1c:	18800115 	stw	r2,4(r3)
  806a20:	d8814917 	ldw	r2,1316(sp)
  806a24:	94800044 	addi	r18,r18,1
  806a28:	8c400044 	addi	r17,r17,1
  806a2c:	18800015 	stw	r2,0(r3)
  806a30:	008001c4 	movi	r2,7
  806a34:	dc800e15 	stw	r18,56(sp)
  806a38:	dc400d15 	stw	r17,52(sp)
  806a3c:	1442240e 	bge	r2,r17,8072d0 <___vfprintf_internal_r+0x1420>
  806a40:	d9014f17 	ldw	r4,1340(sp)
  806a44:	b00b883a 	mov	r5,r22
  806a48:	d9800c04 	addi	r6,sp,48
  806a4c:	0805e580 	call	805e58 <__sprint_r>
  806a50:	103ecf1e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  806a54:	dc800e17 	ldw	r18,56(sp)
  806a58:	d8c01904 	addi	r3,sp,100
  806a5c:	003e9206 	br	8064a8 <___vfprintf_internal_r+0x5f8>
  806a60:	d9014f17 	ldw	r4,1340(sp)
  806a64:	b00b883a 	mov	r5,r22
  806a68:	d9800c04 	addi	r6,sp,48
  806a6c:	0805e580 	call	805e58 <__sprint_r>
  806a70:	103ec026 	beq	r2,zero,806574 <___vfprintf_internal_r+0x6c4>
  806a74:	003ec606 	br	806590 <___vfprintf_internal_r+0x6e0>
  806a78:	d9014f17 	ldw	r4,1340(sp)
  806a7c:	b00b883a 	mov	r5,r22
  806a80:	d9800c04 	addi	r6,sp,48
  806a84:	d9c15115 	stw	r7,1348(sp)
  806a88:	0805e580 	call	805e58 <__sprint_r>
  806a8c:	d9c15117 	ldw	r7,1348(sp)
  806a90:	103ebf1e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  806a94:	dc800e17 	ldw	r18,56(sp)
  806a98:	dc400d17 	ldw	r17,52(sp)
  806a9c:	dd401904 	addi	r21,sp,100
  806aa0:	003e7406 	br	806474 <___vfprintf_internal_r+0x5c4>
  806aa4:	d9014f17 	ldw	r4,1340(sp)
  806aa8:	b00b883a 	mov	r5,r22
  806aac:	d9800c04 	addi	r6,sp,48
  806ab0:	d9c15115 	stw	r7,1348(sp)
  806ab4:	0805e580 	call	805e58 <__sprint_r>
  806ab8:	d9c15117 	ldw	r7,1348(sp)
  806abc:	103eb41e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  806ac0:	dd401904 	addi	r21,sp,100
  806ac4:	003d6d06 	br	80607c <___vfprintf_internal_r+0x1cc>
  806ac8:	d9014f17 	ldw	r4,1340(sp)
  806acc:	b00b883a 	mov	r5,r22
  806ad0:	d9800c04 	addi	r6,sp,48
  806ad4:	d9c15115 	stw	r7,1348(sp)
  806ad8:	0805e580 	call	805e58 <__sprint_r>
  806adc:	d9c15117 	ldw	r7,1348(sp)
  806ae0:	103eab1e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  806ae4:	dc800e17 	ldw	r18,56(sp)
  806ae8:	dc400d17 	ldw	r17,52(sp)
  806aec:	dd401904 	addi	r21,sp,100
  806af0:	003e3406 	br	8063c4 <___vfprintf_internal_r+0x514>
  806af4:	d9014f17 	ldw	r4,1340(sp)
  806af8:	b00b883a 	mov	r5,r22
  806afc:	d9800c04 	addi	r6,sp,48
  806b00:	d9c15115 	stw	r7,1348(sp)
  806b04:	0805e580 	call	805e58 <__sprint_r>
  806b08:	d9c15117 	ldw	r7,1348(sp)
  806b0c:	103ea01e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  806b10:	dc800e17 	ldw	r18,56(sp)
  806b14:	dc400d17 	ldw	r17,52(sp)
  806b18:	dd401904 	addi	r21,sp,100
  806b1c:	003e1c06 	br	806390 <___vfprintf_internal_r+0x4e0>
  806b20:	d9014f17 	ldw	r4,1340(sp)
  806b24:	b00b883a 	mov	r5,r22
  806b28:	d9800c04 	addi	r6,sp,48
  806b2c:	d9c15115 	stw	r7,1348(sp)
  806b30:	0805e580 	call	805e58 <__sprint_r>
  806b34:	d9c15117 	ldw	r7,1348(sp)
  806b38:	103e951e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  806b3c:	dc800e17 	ldw	r18,56(sp)
  806b40:	dc400d17 	ldw	r17,52(sp)
  806b44:	dd401904 	addi	r21,sp,100
  806b48:	003e0406 	br	80635c <___vfprintf_internal_r+0x4ac>
  806b4c:	d9000517 	ldw	r4,20(sp)
  806b50:	0102580e 	bge	zero,r4,8074b4 <___vfprintf_internal_r+0x1604>
  806b54:	d9814717 	ldw	r6,1308(sp)
  806b58:	21807a16 	blt	r4,r6,806d44 <___vfprintf_internal_r+0xe94>
  806b5c:	d8814117 	ldw	r2,1284(sp)
  806b60:	91a5883a 	add	r18,r18,r6
  806b64:	8c400044 	addi	r17,r17,1
  806b68:	a8800015 	stw	r2,0(r21)
  806b6c:	008001c4 	movi	r2,7
  806b70:	a9800115 	stw	r6,4(r21)
  806b74:	dc800e15 	stw	r18,56(sp)
  806b78:	dc400d15 	stw	r17,52(sp)
  806b7c:	1442fc16 	blt	r2,r17,807770 <___vfprintf_internal_r+0x18c0>
  806b80:	a8c00204 	addi	r3,r21,8
  806b84:	d9414717 	ldw	r5,1308(sp)
  806b88:	2161c83a 	sub	r16,r4,r5
  806b8c:	043f9d0e 	bge	zero,r16,806a04 <___vfprintf_internal_r+0xb54>
  806b90:	00800404 	movi	r2,16
  806b94:	1402190e 	bge	r2,r16,8073fc <___vfprintf_internal_r+0x154c>
  806b98:	dc400d17 	ldw	r17,52(sp)
  806b9c:	1027883a 	mov	r19,r2
  806ba0:	07002074 	movhi	fp,129
  806ba4:	e7094184 	addi	fp,fp,9478
  806ba8:	050001c4 	movi	r20,7
  806bac:	00000306 	br	806bbc <___vfprintf_internal_r+0xd0c>
  806bb0:	18c00204 	addi	r3,r3,8
  806bb4:	843ffc04 	addi	r16,r16,-16
  806bb8:	9c02130e 	bge	r19,r16,807408 <___vfprintf_internal_r+0x1558>
  806bbc:	94800404 	addi	r18,r18,16
  806bc0:	8c400044 	addi	r17,r17,1
  806bc4:	1f000015 	stw	fp,0(r3)
  806bc8:	1cc00115 	stw	r19,4(r3)
  806bcc:	dc800e15 	stw	r18,56(sp)
  806bd0:	dc400d15 	stw	r17,52(sp)
  806bd4:	a47ff60e 	bge	r20,r17,806bb0 <___vfprintf_internal_r+0xd00>
  806bd8:	d9014f17 	ldw	r4,1340(sp)
  806bdc:	b00b883a 	mov	r5,r22
  806be0:	d9800c04 	addi	r6,sp,48
  806be4:	0805e580 	call	805e58 <__sprint_r>
  806be8:	103e691e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  806bec:	dc800e17 	ldw	r18,56(sp)
  806bf0:	dc400d17 	ldw	r17,52(sp)
  806bf4:	d8c01904 	addi	r3,sp,100
  806bf8:	003fee06 	br	806bb4 <___vfprintf_internal_r+0xd04>
  806bfc:	d8814717 	ldw	r2,1308(sp)
  806c00:	143fffc4 	addi	r16,r2,-1
  806c04:	043e970e 	bge	zero,r16,806664 <___vfprintf_internal_r+0x7b4>
  806c08:	00800404 	movi	r2,16
  806c0c:	1400180e 	bge	r2,r16,806c70 <___vfprintf_internal_r+0xdc0>
  806c10:	1029883a 	mov	r20,r2
  806c14:	07002074 	movhi	fp,129
  806c18:	e7094184 	addi	fp,fp,9478
  806c1c:	054001c4 	movi	r21,7
  806c20:	00000306 	br	806c30 <___vfprintf_internal_r+0xd80>
  806c24:	9cc00204 	addi	r19,r19,8
  806c28:	843ffc04 	addi	r16,r16,-16
  806c2c:	a400120e 	bge	r20,r16,806c78 <___vfprintf_internal_r+0xdc8>
  806c30:	94800404 	addi	r18,r18,16
  806c34:	8c400044 	addi	r17,r17,1
  806c38:	9f000015 	stw	fp,0(r19)
  806c3c:	9d000115 	stw	r20,4(r19)
  806c40:	dc800e15 	stw	r18,56(sp)
  806c44:	dc400d15 	stw	r17,52(sp)
  806c48:	ac7ff60e 	bge	r21,r17,806c24 <___vfprintf_internal_r+0xd74>
  806c4c:	d9014f17 	ldw	r4,1340(sp)
  806c50:	b00b883a 	mov	r5,r22
  806c54:	d9800c04 	addi	r6,sp,48
  806c58:	0805e580 	call	805e58 <__sprint_r>
  806c5c:	103e4c1e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  806c60:	dc800e17 	ldw	r18,56(sp)
  806c64:	dc400d17 	ldw	r17,52(sp)
  806c68:	dcc01904 	addi	r19,sp,100
  806c6c:	003fee06 	br	806c28 <___vfprintf_internal_r+0xd78>
  806c70:	07002074 	movhi	fp,129
  806c74:	e7094184 	addi	fp,fp,9478
  806c78:	9425883a 	add	r18,r18,r16
  806c7c:	8c400044 	addi	r17,r17,1
  806c80:	008001c4 	movi	r2,7
  806c84:	9f000015 	stw	fp,0(r19)
  806c88:	9c000115 	stw	r16,4(r19)
  806c8c:	dc800e15 	stw	r18,56(sp)
  806c90:	dc400d15 	stw	r17,52(sp)
  806c94:	147e720e 	bge	r2,r17,806660 <___vfprintf_internal_r+0x7b0>
  806c98:	d9014f17 	ldw	r4,1340(sp)
  806c9c:	b00b883a 	mov	r5,r22
  806ca0:	d9800c04 	addi	r6,sp,48
  806ca4:	0805e580 	call	805e58 <__sprint_r>
  806ca8:	103e391e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  806cac:	dc800e17 	ldw	r18,56(sp)
  806cb0:	dc400d17 	ldw	r17,52(sp)
  806cb4:	dcc01904 	addi	r19,sp,100
  806cb8:	003e6a06 	br	806664 <___vfprintf_internal_r+0x7b4>
  806cbc:	d9014f17 	ldw	r4,1340(sp)
  806cc0:	b00b883a 	mov	r5,r22
  806cc4:	d9800c04 	addi	r6,sp,48
  806cc8:	d9c15115 	stw	r7,1348(sp)
  806ccc:	0805e580 	call	805e58 <__sprint_r>
  806cd0:	d9c15117 	ldw	r7,1348(sp)
  806cd4:	103e2e1e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  806cd8:	dc800e17 	ldw	r18,56(sp)
  806cdc:	dc400d17 	ldw	r17,52(sp)
  806ce0:	dd401904 	addi	r21,sp,100
  806ce4:	003dba06 	br	8063d0 <___vfprintf_internal_r+0x520>
  806ce8:	d9014f17 	ldw	r4,1340(sp)
  806cec:	b00b883a 	mov	r5,r22
  806cf0:	d9800c04 	addi	r6,sp,48
  806cf4:	0805e580 	call	805e58 <__sprint_r>
  806cf8:	103e251e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  806cfc:	dc800e17 	ldw	r18,56(sp)
  806d00:	dc400d17 	ldw	r17,52(sp)
  806d04:	dcc01904 	addi	r19,sp,100
  806d08:	003e4206 	br	806614 <___vfprintf_internal_r+0x764>
  806d0c:	d9014f17 	ldw	r4,1340(sp)
  806d10:	b00b883a 	mov	r5,r22
  806d14:	d9800c04 	addi	r6,sp,48
  806d18:	0805e580 	call	805e58 <__sprint_r>
  806d1c:	103e1c1e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  806d20:	dc800e17 	ldw	r18,56(sp)
  806d24:	dc400d17 	ldw	r17,52(sp)
  806d28:	d8c01904 	addi	r3,sp,100
  806d2c:	003e2e06 	br	8065e8 <___vfprintf_internal_r+0x738>
  806d30:	d9414c17 	ldw	r5,1328(sp)
  806d34:	2880004c 	andi	r2,r5,1
  806d38:	1005003a 	cmpeq	r2,r2,zero
  806d3c:	103dda1e 	bne	r2,zero,8064a8 <___vfprintf_internal_r+0x5f8>
  806d40:	003e9f06 	br	8067c0 <___vfprintf_internal_r+0x910>
  806d44:	d8c14117 	ldw	r3,1284(sp)
  806d48:	9125883a 	add	r18,r18,r4
  806d4c:	8c400044 	addi	r17,r17,1
  806d50:	008001c4 	movi	r2,7
  806d54:	a8c00015 	stw	r3,0(r21)
  806d58:	a9000115 	stw	r4,4(r21)
  806d5c:	dc800e15 	stw	r18,56(sp)
  806d60:	dc400d15 	stw	r17,52(sp)
  806d64:	14426c16 	blt	r2,r17,807718 <___vfprintf_internal_r+0x1868>
  806d68:	a8c00204 	addi	r3,r21,8
  806d6c:	d9414917 	ldw	r5,1316(sp)
  806d70:	00800044 	movi	r2,1
  806d74:	94800044 	addi	r18,r18,1
  806d78:	8c400044 	addi	r17,r17,1
  806d7c:	18800115 	stw	r2,4(r3)
  806d80:	008001c4 	movi	r2,7
  806d84:	19400015 	stw	r5,0(r3)
  806d88:	dc800e15 	stw	r18,56(sp)
  806d8c:	dc400d15 	stw	r17,52(sp)
  806d90:	2021883a 	mov	r16,r4
  806d94:	14425616 	blt	r2,r17,8076f0 <___vfprintf_internal_r+0x1840>
  806d98:	19400204 	addi	r5,r3,8
  806d9c:	d9814717 	ldw	r6,1308(sp)
  806da0:	8c400044 	addi	r17,r17,1
  806da4:	dc400d15 	stw	r17,52(sp)
  806da8:	3107c83a 	sub	r3,r6,r4
  806dac:	d9014117 	ldw	r4,1284(sp)
  806db0:	90e5883a 	add	r18,r18,r3
  806db4:	28c00115 	stw	r3,4(r5)
  806db8:	8105883a 	add	r2,r16,r4
  806dbc:	28800015 	stw	r2,0(r5)
  806dc0:	008001c4 	movi	r2,7
  806dc4:	dc800e15 	stw	r18,56(sp)
  806dc8:	147f1d16 	blt	r2,r17,806a40 <___vfprintf_internal_r+0xb90>
  806dcc:	28c00204 	addi	r3,r5,8
  806dd0:	003db506 	br	8064a8 <___vfprintf_internal_r+0x5f8>
  806dd4:	3c000017 	ldw	r16,0(r7)
  806dd8:	3c400117 	ldw	r17,4(r7)
  806ddc:	39800204 	addi	r6,r7,8
  806de0:	01000044 	movi	r4,1
  806de4:	d9814015 	stw	r6,1280(sp)
  806de8:	d8000405 	stb	zero,16(sp)
  806dec:	003ebe06 	br	8068e8 <___vfprintf_internal_r+0xa38>
  806df0:	3c000017 	ldw	r16,0(r7)
  806df4:	3c400117 	ldw	r17,4(r7)
  806df8:	38800204 	addi	r2,r7,8
  806dfc:	d8814015 	stw	r2,1280(sp)
  806e00:	003eb706 	br	8068e0 <___vfprintf_internal_r+0xa30>
  806e04:	3c000017 	ldw	r16,0(r7)
  806e08:	3c400117 	ldw	r17,4(r7)
  806e0c:	39000204 	addi	r4,r7,8
  806e10:	d9014015 	stw	r4,1280(sp)
  806e14:	0009883a 	mov	r4,zero
  806e18:	d8000405 	stb	zero,16(sp)
  806e1c:	003eb206 	br	8068e8 <___vfprintf_internal_r+0xa38>
  806e20:	38c00017 	ldw	r3,0(r7)
  806e24:	39c00104 	addi	r7,r7,4
  806e28:	d8c14a15 	stw	r3,1320(sp)
  806e2c:	1800d70e 	bge	r3,zero,80718c <___vfprintf_internal_r+0x12dc>
  806e30:	00c7c83a 	sub	r3,zero,r3
  806e34:	d8c14a15 	stw	r3,1320(sp)
  806e38:	d9014c17 	ldw	r4,1328(sp)
  806e3c:	b8c00007 	ldb	r3,0(r23)
  806e40:	21000114 	ori	r4,r4,4
  806e44:	d9014c15 	stw	r4,1328(sp)
  806e48:	003c9806 	br	8060ac <___vfprintf_internal_r+0x1fc>
  806e4c:	d9814c17 	ldw	r6,1328(sp)
  806e50:	3080080c 	andi	r2,r6,32
  806e54:	1001f626 	beq	r2,zero,807630 <___vfprintf_internal_r+0x1780>
  806e58:	d9014b17 	ldw	r4,1324(sp)
  806e5c:	38800017 	ldw	r2,0(r7)
  806e60:	39c00104 	addi	r7,r7,4
  806e64:	d9c14015 	stw	r7,1280(sp)
  806e68:	2007d7fa 	srai	r3,r4,31
  806e6c:	d9c14017 	ldw	r7,1280(sp)
  806e70:	11000015 	stw	r4,0(r2)
  806e74:	10c00115 	stw	r3,4(r2)
  806e78:	003c6906 	br	806020 <___vfprintf_internal_r+0x170>
  806e7c:	b8c00007 	ldb	r3,0(r23)
  806e80:	00801b04 	movi	r2,108
  806e84:	18825526 	beq	r3,r2,8077dc <___vfprintf_internal_r+0x192c>
  806e88:	d9414c17 	ldw	r5,1328(sp)
  806e8c:	29400414 	ori	r5,r5,16
  806e90:	d9414c15 	stw	r5,1328(sp)
  806e94:	003c8506 	br	8060ac <___vfprintf_internal_r+0x1fc>
  806e98:	d9814c17 	ldw	r6,1328(sp)
  806e9c:	b8c00007 	ldb	r3,0(r23)
  806ea0:	31800814 	ori	r6,r6,32
  806ea4:	d9814c15 	stw	r6,1328(sp)
  806ea8:	003c8006 	br	8060ac <___vfprintf_internal_r+0x1fc>
  806eac:	d8814c17 	ldw	r2,1328(sp)
  806eb0:	3c000017 	ldw	r16,0(r7)
  806eb4:	00c01e04 	movi	r3,120
  806eb8:	10800094 	ori	r2,r2,2
  806ebc:	d8814c15 	stw	r2,1328(sp)
  806ec0:	39c00104 	addi	r7,r7,4
  806ec4:	01402074 	movhi	r5,129
  806ec8:	29492a04 	addi	r5,r5,9384
  806ecc:	00800c04 	movi	r2,48
  806ed0:	0023883a 	mov	r17,zero
  806ed4:	01000084 	movi	r4,2
  806ed8:	d9c14015 	stw	r7,1280(sp)
  806edc:	d8c14d15 	stw	r3,1332(sp)
  806ee0:	d9414415 	stw	r5,1296(sp)
  806ee4:	d8800445 	stb	r2,17(sp)
  806ee8:	d8c00485 	stb	r3,18(sp)
  806eec:	d8000405 	stb	zero,16(sp)
  806ef0:	003e7d06 	br	8068e8 <___vfprintf_internal_r+0xa38>
  806ef4:	d8814c17 	ldw	r2,1328(sp)
  806ef8:	b8c00007 	ldb	r3,0(r23)
  806efc:	10801014 	ori	r2,r2,64
  806f00:	d8814c15 	stw	r2,1328(sp)
  806f04:	003c6906 	br	8060ac <___vfprintf_internal_r+0x1fc>
  806f08:	d9414c17 	ldw	r5,1328(sp)
  806f0c:	2880020c 	andi	r2,r5,8
  806f10:	1001e526 	beq	r2,zero,8076a8 <___vfprintf_internal_r+0x17f8>
  806f14:	39800017 	ldw	r6,0(r7)
  806f18:	38800204 	addi	r2,r7,8
  806f1c:	d8814015 	stw	r2,1280(sp)
  806f20:	d9814215 	stw	r6,1288(sp)
  806f24:	39c00117 	ldw	r7,4(r7)
  806f28:	d9c14315 	stw	r7,1292(sp)
  806f2c:	d9014217 	ldw	r4,1288(sp)
  806f30:	d9414317 	ldw	r5,1292(sp)
  806f34:	080cb4c0 	call	80cb4c <__isinfd>
  806f38:	10021d26 	beq	r2,zero,8077b0 <___vfprintf_internal_r+0x1900>
  806f3c:	d9014217 	ldw	r4,1288(sp)
  806f40:	d9414317 	ldw	r5,1292(sp)
  806f44:	000d883a 	mov	r6,zero
  806f48:	000f883a 	mov	r7,zero
  806f4c:	080e9300 	call	80e930 <__ltdf2>
  806f50:	1002d016 	blt	r2,zero,807a94 <___vfprintf_internal_r+0x1be4>
  806f54:	d9414d17 	ldw	r5,1332(sp)
  806f58:	008011c4 	movi	r2,71
  806f5c:	11421016 	blt	r2,r5,8077a0 <___vfprintf_internal_r+0x18f0>
  806f60:	01802074 	movhi	r6,129
  806f64:	31892f04 	addi	r6,r6,9404
  806f68:	d9814115 	stw	r6,1284(sp)
  806f6c:	d9014c17 	ldw	r4,1328(sp)
  806f70:	00c000c4 	movi	r3,3
  806f74:	00bfdfc4 	movi	r2,-129
  806f78:	2088703a 	and	r4,r4,r2
  806f7c:	180f883a 	mov	r7,r3
  806f80:	d8c14515 	stw	r3,1300(sp)
  806f84:	d9014c15 	stw	r4,1328(sp)
  806f88:	d8014615 	stw	zero,1304(sp)
  806f8c:	003e6a06 	br	806938 <___vfprintf_internal_r+0xa88>
  806f90:	38800017 	ldw	r2,0(r7)
  806f94:	00c00044 	movi	r3,1
  806f98:	39c00104 	addi	r7,r7,4
  806f9c:	d9c14015 	stw	r7,1280(sp)
  806fa0:	d9000f04 	addi	r4,sp,60
  806fa4:	180f883a 	mov	r7,r3
  806fa8:	d8c14515 	stw	r3,1300(sp)
  806fac:	d9014115 	stw	r4,1284(sp)
  806fb0:	d8800f05 	stb	r2,60(sp)
  806fb4:	d8000405 	stb	zero,16(sp)
  806fb8:	003cac06 	br	80626c <___vfprintf_internal_r+0x3bc>
  806fbc:	01402074 	movhi	r5,129
  806fc0:	29493504 	addi	r5,r5,9428
  806fc4:	d9414415 	stw	r5,1296(sp)
  806fc8:	d9814c17 	ldw	r6,1328(sp)
  806fcc:	3080080c 	andi	r2,r6,32
  806fd0:	1000ff26 	beq	r2,zero,8073d0 <___vfprintf_internal_r+0x1520>
  806fd4:	3c000017 	ldw	r16,0(r7)
  806fd8:	3c400117 	ldw	r17,4(r7)
  806fdc:	38800204 	addi	r2,r7,8
  806fe0:	d8814015 	stw	r2,1280(sp)
  806fe4:	d9414c17 	ldw	r5,1328(sp)
  806fe8:	2880004c 	andi	r2,r5,1
  806fec:	1005003a 	cmpeq	r2,r2,zero
  806ff0:	1000b91e 	bne	r2,zero,8072d8 <___vfprintf_internal_r+0x1428>
  806ff4:	8444b03a 	or	r2,r16,r17
  806ff8:	1000b726 	beq	r2,zero,8072d8 <___vfprintf_internal_r+0x1428>
  806ffc:	d9814d17 	ldw	r6,1332(sp)
  807000:	29400094 	ori	r5,r5,2
  807004:	00800c04 	movi	r2,48
  807008:	01000084 	movi	r4,2
  80700c:	d9414c15 	stw	r5,1328(sp)
  807010:	d8800445 	stb	r2,17(sp)
  807014:	d9800485 	stb	r6,18(sp)
  807018:	d8000405 	stb	zero,16(sp)
  80701c:	003e3206 	br	8068e8 <___vfprintf_internal_r+0xa38>
  807020:	01802074 	movhi	r6,129
  807024:	31892a04 	addi	r6,r6,9384
  807028:	d9814415 	stw	r6,1296(sp)
  80702c:	003fe606 	br	806fc8 <___vfprintf_internal_r+0x1118>
  807030:	00800ac4 	movi	r2,43
  807034:	d8800405 	stb	r2,16(sp)
  807038:	b8c00007 	ldb	r3,0(r23)
  80703c:	003c1b06 	br	8060ac <___vfprintf_internal_r+0x1fc>
  807040:	d8814c17 	ldw	r2,1328(sp)
  807044:	b8c00007 	ldb	r3,0(r23)
  807048:	10800054 	ori	r2,r2,1
  80704c:	d8814c15 	stw	r2,1328(sp)
  807050:	003c1606 	br	8060ac <___vfprintf_internal_r+0x1fc>
  807054:	d8800407 	ldb	r2,16(sp)
  807058:	10004c1e 	bne	r2,zero,80718c <___vfprintf_internal_r+0x12dc>
  80705c:	00800804 	movi	r2,32
  807060:	d8800405 	stb	r2,16(sp)
  807064:	b8c00007 	ldb	r3,0(r23)
  807068:	003c1006 	br	8060ac <___vfprintf_internal_r+0x1fc>
  80706c:	d9814c17 	ldw	r6,1328(sp)
  807070:	b8c00007 	ldb	r3,0(r23)
  807074:	31800214 	ori	r6,r6,8
  807078:	d9814c15 	stw	r6,1328(sp)
  80707c:	003c0b06 	br	8060ac <___vfprintf_internal_r+0x1fc>
  807080:	0009883a 	mov	r4,zero
  807084:	04000244 	movi	r16,9
  807088:	01400284 	movi	r5,10
  80708c:	d9c15115 	stw	r7,1348(sp)
  807090:	080eb4c0 	call	80eb4c <__mulsi3>
  807094:	b9000007 	ldb	r4,0(r23)
  807098:	d8c14d17 	ldw	r3,1332(sp)
  80709c:	bdc00044 	addi	r23,r23,1
  8070a0:	d9014d15 	stw	r4,1332(sp)
  8070a4:	d9414d17 	ldw	r5,1332(sp)
  8070a8:	1885883a 	add	r2,r3,r2
  8070ac:	113ff404 	addi	r4,r2,-48
  8070b0:	28bff404 	addi	r2,r5,-48
  8070b4:	d9c15117 	ldw	r7,1348(sp)
  8070b8:	80bff32e 	bgeu	r16,r2,807088 <___vfprintf_internal_r+0x11d8>
  8070bc:	d9014a15 	stw	r4,1320(sp)
  8070c0:	003bfc06 	br	8060b4 <___vfprintf_internal_r+0x204>
  8070c4:	d8814c17 	ldw	r2,1328(sp)
  8070c8:	b8c00007 	ldb	r3,0(r23)
  8070cc:	10802014 	ori	r2,r2,128
  8070d0:	d8814c15 	stw	r2,1328(sp)
  8070d4:	003bf506 	br	8060ac <___vfprintf_internal_r+0x1fc>
  8070d8:	b8c00007 	ldb	r3,0(r23)
  8070dc:	00800a84 	movi	r2,42
  8070e0:	bdc00044 	addi	r23,r23,1
  8070e4:	18831826 	beq	r3,r2,807d48 <___vfprintf_internal_r+0x1e98>
  8070e8:	d8c14d15 	stw	r3,1332(sp)
  8070ec:	18bff404 	addi	r2,r3,-48
  8070f0:	00c00244 	movi	r3,9
  8070f4:	18827b36 	bltu	r3,r2,807ae4 <___vfprintf_internal_r+0x1c34>
  8070f8:	1821883a 	mov	r16,r3
  8070fc:	0009883a 	mov	r4,zero
  807100:	01400284 	movi	r5,10
  807104:	d9c15115 	stw	r7,1348(sp)
  807108:	080eb4c0 	call	80eb4c <__mulsi3>
  80710c:	d9414d17 	ldw	r5,1332(sp)
  807110:	b9800007 	ldb	r6,0(r23)
  807114:	d9c15117 	ldw	r7,1348(sp)
  807118:	1145883a 	add	r2,r2,r5
  80711c:	113ff404 	addi	r4,r2,-48
  807120:	30bff404 	addi	r2,r6,-48
  807124:	d9814d15 	stw	r6,1332(sp)
  807128:	bdc00044 	addi	r23,r23,1
  80712c:	80bff42e 	bgeu	r16,r2,807100 <___vfprintf_internal_r+0x1250>
  807130:	2027883a 	mov	r19,r4
  807134:	203bdf0e 	bge	r4,zero,8060b4 <___vfprintf_internal_r+0x204>
  807138:	04ffffc4 	movi	r19,-1
  80713c:	003bdd06 	br	8060b4 <___vfprintf_internal_r+0x204>
  807140:	d8000405 	stb	zero,16(sp)
  807144:	39800017 	ldw	r6,0(r7)
  807148:	39c00104 	addi	r7,r7,4
  80714c:	d9c14015 	stw	r7,1280(sp)
  807150:	d9814115 	stw	r6,1284(sp)
  807154:	3001c926 	beq	r6,zero,80787c <___vfprintf_internal_r+0x19cc>
  807158:	98000e16 	blt	r19,zero,807194 <___vfprintf_internal_r+0x12e4>
  80715c:	d9014117 	ldw	r4,1284(sp)
  807160:	000b883a 	mov	r5,zero
  807164:	980d883a 	mov	r6,r19
  807168:	080afe40 	call	80afe4 <memchr>
  80716c:	10025926 	beq	r2,zero,807ad4 <___vfprintf_internal_r+0x1c24>
  807170:	d8c14117 	ldw	r3,1284(sp)
  807174:	10cfc83a 	sub	r7,r2,r3
  807178:	99c19e16 	blt	r19,r7,8077f4 <___vfprintf_internal_r+0x1944>
  80717c:	d9c14515 	stw	r7,1300(sp)
  807180:	38000916 	blt	r7,zero,8071a8 <___vfprintf_internal_r+0x12f8>
  807184:	d8014615 	stw	zero,1304(sp)
  807188:	003deb06 	br	806938 <___vfprintf_internal_r+0xa88>
  80718c:	b8c00007 	ldb	r3,0(r23)
  807190:	003bc606 	br	8060ac <___vfprintf_internal_r+0x1fc>
  807194:	d9014117 	ldw	r4,1284(sp)
  807198:	0805b700 	call	805b70 <strlen>
  80719c:	d8814515 	stw	r2,1300(sp)
  8071a0:	100f883a 	mov	r7,r2
  8071a4:	103ff70e 	bge	r2,zero,807184 <___vfprintf_internal_r+0x12d4>
  8071a8:	d8014515 	stw	zero,1300(sp)
  8071ac:	d8014615 	stw	zero,1304(sp)
  8071b0:	003de106 	br	806938 <___vfprintf_internal_r+0xa88>
  8071b4:	20c03fcc 	andi	r3,r4,255
  8071b8:	00800044 	movi	r2,1
  8071bc:	18802d26 	beq	r3,r2,807274 <___vfprintf_internal_r+0x13c4>
  8071c0:	18800e36 	bltu	r3,r2,8071fc <___vfprintf_internal_r+0x134c>
  8071c4:	00800084 	movi	r2,2
  8071c8:	1880fa26 	beq	r3,r2,8075b4 <___vfprintf_internal_r+0x1704>
  8071cc:	01002074 	movhi	r4,129
  8071d0:	21093a04 	addi	r4,r4,9448
  8071d4:	0805b700 	call	805b70 <strlen>
  8071d8:	100f883a 	mov	r7,r2
  8071dc:	dcc14515 	stw	r19,1300(sp)
  8071e0:	9880010e 	bge	r19,r2,8071e8 <___vfprintf_internal_r+0x1338>
  8071e4:	d8814515 	stw	r2,1300(sp)
  8071e8:	00802074 	movhi	r2,129
  8071ec:	10893a04 	addi	r2,r2,9448
  8071f0:	dcc14615 	stw	r19,1304(sp)
  8071f4:	d8814115 	stw	r2,1284(sp)
  8071f8:	003dcf06 	br	806938 <___vfprintf_internal_r+0xa88>
  8071fc:	d9401904 	addi	r5,sp,100
  807200:	dd000f04 	addi	r20,sp,60
  807204:	d9414115 	stw	r5,1284(sp)
  807208:	880a977a 	slli	r5,r17,29
  80720c:	d9814117 	ldw	r6,1284(sp)
  807210:	8004d0fa 	srli	r2,r16,3
  807214:	8806d0fa 	srli	r3,r17,3
  807218:	810001cc 	andi	r4,r16,7
  80721c:	2884b03a 	or	r2,r5,r2
  807220:	31bfffc4 	addi	r6,r6,-1
  807224:	21000c04 	addi	r4,r4,48
  807228:	d9814115 	stw	r6,1284(sp)
  80722c:	10cab03a 	or	r5,r2,r3
  807230:	31000005 	stb	r4,0(r6)
  807234:	1021883a 	mov	r16,r2
  807238:	1823883a 	mov	r17,r3
  80723c:	283ff21e 	bne	r5,zero,807208 <___vfprintf_internal_r+0x1358>
  807240:	d8c14c17 	ldw	r3,1328(sp)
  807244:	1880004c 	andi	r2,r3,1
  807248:	1005003a 	cmpeq	r2,r2,zero
  80724c:	103db31e 	bne	r2,zero,80691c <___vfprintf_internal_r+0xa6c>
  807250:	20803fcc 	andi	r2,r4,255
  807254:	1080201c 	xori	r2,r2,128
  807258:	10bfe004 	addi	r2,r2,-128
  80725c:	00c00c04 	movi	r3,48
  807260:	10fdae26 	beq	r2,r3,80691c <___vfprintf_internal_r+0xa6c>
  807264:	31bfffc4 	addi	r6,r6,-1
  807268:	d9814115 	stw	r6,1284(sp)
  80726c:	30c00005 	stb	r3,0(r6)
  807270:	003daa06 	br	80691c <___vfprintf_internal_r+0xa6c>
  807274:	88800068 	cmpgeui	r2,r17,1
  807278:	10002c1e 	bne	r2,zero,80732c <___vfprintf_internal_r+0x147c>
  80727c:	8800021e 	bne	r17,zero,807288 <___vfprintf_internal_r+0x13d8>
  807280:	00800244 	movi	r2,9
  807284:	14002936 	bltu	r2,r16,80732c <___vfprintf_internal_r+0x147c>
  807288:	d90018c4 	addi	r4,sp,99
  80728c:	dd000f04 	addi	r20,sp,60
  807290:	d9014115 	stw	r4,1284(sp)
  807294:	d9014117 	ldw	r4,1284(sp)
  807298:	80800c04 	addi	r2,r16,48
  80729c:	20800005 	stb	r2,0(r4)
  8072a0:	003d9e06 	br	80691c <___vfprintf_internal_r+0xa6c>
  8072a4:	dc400d17 	ldw	r17,52(sp)
  8072a8:	07002074 	movhi	fp,129
  8072ac:	e7094184 	addi	fp,fp,9478
  8072b0:	9425883a 	add	r18,r18,r16
  8072b4:	8c400044 	addi	r17,r17,1
  8072b8:	008001c4 	movi	r2,7
  8072bc:	1f000015 	stw	fp,0(r3)
  8072c0:	1c000115 	stw	r16,4(r3)
  8072c4:	dc800e15 	stw	r18,56(sp)
  8072c8:	dc400d15 	stw	r17,52(sp)
  8072cc:	147ddc16 	blt	r2,r17,806a40 <___vfprintf_internal_r+0xb90>
  8072d0:	18c00204 	addi	r3,r3,8
  8072d4:	003c7406 	br	8064a8 <___vfprintf_internal_r+0x5f8>
  8072d8:	01000084 	movi	r4,2
  8072dc:	d8000405 	stb	zero,16(sp)
  8072e0:	003d8106 	br	8068e8 <___vfprintf_internal_r+0xa38>
  8072e4:	d9814c17 	ldw	r6,1328(sp)
  8072e8:	30c4703a 	and	r2,r6,r3
  8072ec:	1005003a 	cmpeq	r2,r2,zero
  8072f0:	103cb326 	beq	r2,zero,8065c0 <___vfprintf_internal_r+0x710>
  8072f4:	d9014117 	ldw	r4,1284(sp)
  8072f8:	94800044 	addi	r18,r18,1
  8072fc:	8c400044 	addi	r17,r17,1
  807300:	008001c4 	movi	r2,7
  807304:	a9000015 	stw	r4,0(r21)
  807308:	a8c00115 	stw	r3,4(r21)
  80730c:	dc800e15 	stw	r18,56(sp)
  807310:	dc400d15 	stw	r17,52(sp)
  807314:	147e6016 	blt	r2,r17,806c98 <___vfprintf_internal_r+0xde8>
  807318:	acc00204 	addi	r19,r21,8
  80731c:	003cd106 	br	806664 <___vfprintf_internal_r+0x7b4>
  807320:	07002074 	movhi	fp,129
  807324:	e7094184 	addi	fp,fp,9478
  807328:	003c4906 	br	806450 <___vfprintf_internal_r+0x5a0>
  80732c:	dd000f04 	addi	r20,sp,60
  807330:	dc801904 	addi	r18,sp,100
  807334:	8009883a 	mov	r4,r16
  807338:	880b883a 	mov	r5,r17
  80733c:	01800284 	movi	r6,10
  807340:	000f883a 	mov	r7,zero
  807344:	080da940 	call	80da94 <__umoddi3>
  807348:	12000c04 	addi	r8,r2,48
  80734c:	94bfffc4 	addi	r18,r18,-1
  807350:	8009883a 	mov	r4,r16
  807354:	880b883a 	mov	r5,r17
  807358:	01800284 	movi	r6,10
  80735c:	000f883a 	mov	r7,zero
  807360:	92000005 	stb	r8,0(r18)
  807364:	080d4280 	call	80d428 <__udivdi3>
  807368:	1009883a 	mov	r4,r2
  80736c:	1021883a 	mov	r16,r2
  807370:	18800068 	cmpgeui	r2,r3,1
  807374:	1823883a 	mov	r17,r3
  807378:	103fee1e 	bne	r2,zero,807334 <___vfprintf_internal_r+0x1484>
  80737c:	1800021e 	bne	r3,zero,807388 <___vfprintf_internal_r+0x14d8>
  807380:	00800244 	movi	r2,9
  807384:	113feb36 	bltu	r2,r4,807334 <___vfprintf_internal_r+0x1484>
  807388:	94bfffc4 	addi	r18,r18,-1
  80738c:	dc814115 	stw	r18,1284(sp)
  807390:	003fc006 	br	807294 <___vfprintf_internal_r+0x13e4>
  807394:	d9014c17 	ldw	r4,1328(sp)
  807398:	2080004c 	andi	r2,r4,1
  80739c:	10009a1e 	bne	r2,zero,807608 <___vfprintf_internal_r+0x1758>
  8073a0:	d9401904 	addi	r5,sp,100
  8073a4:	dd000f04 	addi	r20,sp,60
  8073a8:	d9414115 	stw	r5,1284(sp)
  8073ac:	003d5b06 	br	80691c <___vfprintf_internal_r+0xa6c>
  8073b0:	d9014f17 	ldw	r4,1340(sp)
  8073b4:	b00b883a 	mov	r5,r22
  8073b8:	d9800c04 	addi	r6,sp,48
  8073bc:	0805e580 	call	805e58 <__sprint_r>
  8073c0:	103c731e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  8073c4:	dc800e17 	ldw	r18,56(sp)
  8073c8:	d8c01904 	addi	r3,sp,100
  8073cc:	003cf906 	br	8067b4 <___vfprintf_internal_r+0x904>
  8073d0:	d8c14c17 	ldw	r3,1328(sp)
  8073d4:	1880040c 	andi	r2,r3,16
  8073d8:	1000711e 	bne	r2,zero,8075a0 <___vfprintf_internal_r+0x16f0>
  8073dc:	d9014c17 	ldw	r4,1328(sp)
  8073e0:	2080100c 	andi	r2,r4,64
  8073e4:	10006e26 	beq	r2,zero,8075a0 <___vfprintf_internal_r+0x16f0>
  8073e8:	3c00000b 	ldhu	r16,0(r7)
  8073ec:	0023883a 	mov	r17,zero
  8073f0:	39c00104 	addi	r7,r7,4
  8073f4:	d9c14015 	stw	r7,1280(sp)
  8073f8:	003efa06 	br	806fe4 <___vfprintf_internal_r+0x1134>
  8073fc:	dc400d17 	ldw	r17,52(sp)
  807400:	07002074 	movhi	fp,129
  807404:	e7094184 	addi	fp,fp,9478
  807408:	9425883a 	add	r18,r18,r16
  80740c:	8c400044 	addi	r17,r17,1
  807410:	008001c4 	movi	r2,7
  807414:	1f000015 	stw	fp,0(r3)
  807418:	1c000115 	stw	r16,4(r3)
  80741c:	dc800e15 	stw	r18,56(sp)
  807420:	dc400d15 	stw	r17,52(sp)
  807424:	147d7016 	blt	r2,r17,8069e8 <___vfprintf_internal_r+0xb38>
  807428:	18c00204 	addi	r3,r3,8
  80742c:	003d7506 	br	806a04 <___vfprintf_internal_r+0xb54>
  807430:	dc800e17 	ldw	r18,56(sp)
  807434:	dc400d17 	ldw	r17,52(sp)
  807438:	07002074 	movhi	fp,129
  80743c:	e7094584 	addi	fp,fp,9494
  807440:	003bba06 	br	80632c <___vfprintf_internal_r+0x47c>
  807444:	d9014f17 	ldw	r4,1340(sp)
  807448:	b00b883a 	mov	r5,r22
  80744c:	d9800c04 	addi	r6,sp,48
  807450:	0805e580 	call	805e58 <__sprint_r>
  807454:	103c4e1e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  807458:	dc800e17 	ldw	r18,56(sp)
  80745c:	d8c01904 	addi	r3,sp,100
  807460:	003ce306 	br	8067f0 <___vfprintf_internal_r+0x940>
  807464:	3c000017 	ldw	r16,0(r7)
  807468:	0009883a 	mov	r4,zero
  80746c:	39c00104 	addi	r7,r7,4
  807470:	0023883a 	mov	r17,zero
  807474:	d9c14015 	stw	r7,1280(sp)
  807478:	d8000405 	stb	zero,16(sp)
  80747c:	003d1a06 	br	8068e8 <___vfprintf_internal_r+0xa38>
  807480:	38800017 	ldw	r2,0(r7)
  807484:	39c00104 	addi	r7,r7,4
  807488:	d9c14015 	stw	r7,1280(sp)
  80748c:	1023d7fa 	srai	r17,r2,31
  807490:	1021883a 	mov	r16,r2
  807494:	003d1206 	br	8068e0 <___vfprintf_internal_r+0xa30>
  807498:	3c000017 	ldw	r16,0(r7)
  80749c:	01000044 	movi	r4,1
  8074a0:	39c00104 	addi	r7,r7,4
  8074a4:	0023883a 	mov	r17,zero
  8074a8:	d9c14015 	stw	r7,1280(sp)
  8074ac:	d8000405 	stb	zero,16(sp)
  8074b0:	003d0d06 	br	8068e8 <___vfprintf_internal_r+0xa38>
  8074b4:	00802074 	movhi	r2,129
  8074b8:	10894104 	addi	r2,r2,9476
  8074bc:	94800044 	addi	r18,r18,1
  8074c0:	8c400044 	addi	r17,r17,1
  8074c4:	a8800015 	stw	r2,0(r21)
  8074c8:	00c00044 	movi	r3,1
  8074cc:	008001c4 	movi	r2,7
  8074d0:	a8c00115 	stw	r3,4(r21)
  8074d4:	dc800e15 	stw	r18,56(sp)
  8074d8:	dc400d15 	stw	r17,52(sp)
  8074dc:	1440ca16 	blt	r2,r17,807808 <___vfprintf_internal_r+0x1958>
  8074e0:	a8c00204 	addi	r3,r21,8
  8074e4:	2000061e 	bne	r4,zero,807500 <___vfprintf_internal_r+0x1650>
  8074e8:	d9414717 	ldw	r5,1308(sp)
  8074ec:	2800041e 	bne	r5,zero,807500 <___vfprintf_internal_r+0x1650>
  8074f0:	d9814c17 	ldw	r6,1328(sp)
  8074f4:	3080004c 	andi	r2,r6,1
  8074f8:	1005003a 	cmpeq	r2,r2,zero
  8074fc:	103bea1e 	bne	r2,zero,8064a8 <___vfprintf_internal_r+0x5f8>
  807500:	00800044 	movi	r2,1
  807504:	dc400d17 	ldw	r17,52(sp)
  807508:	18800115 	stw	r2,4(r3)
  80750c:	d8814917 	ldw	r2,1316(sp)
  807510:	94800044 	addi	r18,r18,1
  807514:	8c400044 	addi	r17,r17,1
  807518:	18800015 	stw	r2,0(r3)
  80751c:	008001c4 	movi	r2,7
  807520:	dc800e15 	stw	r18,56(sp)
  807524:	dc400d15 	stw	r17,52(sp)
  807528:	1440ca16 	blt	r2,r17,807854 <___vfprintf_internal_r+0x19a4>
  80752c:	18c00204 	addi	r3,r3,8
  807530:	0121c83a 	sub	r16,zero,r4
  807534:	0400500e 	bge	zero,r16,807678 <___vfprintf_internal_r+0x17c8>
  807538:	00800404 	movi	r2,16
  80753c:	1400800e 	bge	r2,r16,807740 <___vfprintf_internal_r+0x1890>
  807540:	1027883a 	mov	r19,r2
  807544:	07002074 	movhi	fp,129
  807548:	e7094184 	addi	fp,fp,9478
  80754c:	050001c4 	movi	r20,7
  807550:	00000306 	br	807560 <___vfprintf_internal_r+0x16b0>
  807554:	18c00204 	addi	r3,r3,8
  807558:	843ffc04 	addi	r16,r16,-16
  80755c:	9c007a0e 	bge	r19,r16,807748 <___vfprintf_internal_r+0x1898>
  807560:	94800404 	addi	r18,r18,16
  807564:	8c400044 	addi	r17,r17,1
  807568:	1f000015 	stw	fp,0(r3)
  80756c:	1cc00115 	stw	r19,4(r3)
  807570:	dc800e15 	stw	r18,56(sp)
  807574:	dc400d15 	stw	r17,52(sp)
  807578:	a47ff60e 	bge	r20,r17,807554 <___vfprintf_internal_r+0x16a4>
  80757c:	d9014f17 	ldw	r4,1340(sp)
  807580:	b00b883a 	mov	r5,r22
  807584:	d9800c04 	addi	r6,sp,48
  807588:	0805e580 	call	805e58 <__sprint_r>
  80758c:	103c001e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  807590:	dc800e17 	ldw	r18,56(sp)
  807594:	dc400d17 	ldw	r17,52(sp)
  807598:	d8c01904 	addi	r3,sp,100
  80759c:	003fee06 	br	807558 <___vfprintf_internal_r+0x16a8>
  8075a0:	3c000017 	ldw	r16,0(r7)
  8075a4:	0023883a 	mov	r17,zero
  8075a8:	39c00104 	addi	r7,r7,4
  8075ac:	d9c14015 	stw	r7,1280(sp)
  8075b0:	003e8c06 	br	806fe4 <___vfprintf_internal_r+0x1134>
  8075b4:	d9401904 	addi	r5,sp,100
  8075b8:	dd000f04 	addi	r20,sp,60
  8075bc:	d9414115 	stw	r5,1284(sp)
  8075c0:	d9814417 	ldw	r6,1296(sp)
  8075c4:	880a973a 	slli	r5,r17,28
  8075c8:	8004d13a 	srli	r2,r16,4
  8075cc:	810003cc 	andi	r4,r16,15
  8075d0:	3109883a 	add	r4,r6,r4
  8075d4:	2884b03a 	or	r2,r5,r2
  8075d8:	21400003 	ldbu	r5,0(r4)
  8075dc:	d9014117 	ldw	r4,1284(sp)
  8075e0:	8806d13a 	srli	r3,r17,4
  8075e4:	1021883a 	mov	r16,r2
  8075e8:	213fffc4 	addi	r4,r4,-1
  8075ec:	d9014115 	stw	r4,1284(sp)
  8075f0:	d9814117 	ldw	r6,1284(sp)
  8075f4:	10c8b03a 	or	r4,r2,r3
  8075f8:	1823883a 	mov	r17,r3
  8075fc:	31400005 	stb	r5,0(r6)
  807600:	203fef1e 	bne	r4,zero,8075c0 <___vfprintf_internal_r+0x1710>
  807604:	003cc506 	br	80691c <___vfprintf_internal_r+0xa6c>
  807608:	00800c04 	movi	r2,48
  80760c:	d98018c4 	addi	r6,sp,99
  807610:	dd000f04 	addi	r20,sp,60
  807614:	d88018c5 	stb	r2,99(sp)
  807618:	d9814115 	stw	r6,1284(sp)
  80761c:	003cbf06 	br	80691c <___vfprintf_internal_r+0xa6c>
  807620:	dc400d17 	ldw	r17,52(sp)
  807624:	07002074 	movhi	fp,129
  807628:	e7094584 	addi	fp,fp,9494
  80762c:	003bc106 	br	806534 <___vfprintf_internal_r+0x684>
  807630:	d9414c17 	ldw	r5,1328(sp)
  807634:	2880040c 	andi	r2,r5,16
  807638:	10007c26 	beq	r2,zero,80782c <___vfprintf_internal_r+0x197c>
  80763c:	38800017 	ldw	r2,0(r7)
  807640:	39c00104 	addi	r7,r7,4
  807644:	d9c14015 	stw	r7,1280(sp)
  807648:	d9814b17 	ldw	r6,1324(sp)
  80764c:	d9c14017 	ldw	r7,1280(sp)
  807650:	11800015 	stw	r6,0(r2)
  807654:	003a7206 	br	806020 <___vfprintf_internal_r+0x170>
  807658:	d9014f17 	ldw	r4,1340(sp)
  80765c:	b00b883a 	mov	r5,r22
  807660:	d9800c04 	addi	r6,sp,48
  807664:	0805e580 	call	805e58 <__sprint_r>
  807668:	103bc91e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  80766c:	dc800e17 	ldw	r18,56(sp)
  807670:	dc400d17 	ldw	r17,52(sp)
  807674:	d8c01904 	addi	r3,sp,100
  807678:	d9014717 	ldw	r4,1308(sp)
  80767c:	d9414117 	ldw	r5,1284(sp)
  807680:	8c400044 	addi	r17,r17,1
  807684:	9125883a 	add	r18,r18,r4
  807688:	008001c4 	movi	r2,7
  80768c:	19400015 	stw	r5,0(r3)
  807690:	19000115 	stw	r4,4(r3)
  807694:	dc800e15 	stw	r18,56(sp)
  807698:	dc400d15 	stw	r17,52(sp)
  80769c:	147ce816 	blt	r2,r17,806a40 <___vfprintf_internal_r+0xb90>
  8076a0:	18c00204 	addi	r3,r3,8
  8076a4:	003b8006 	br	8064a8 <___vfprintf_internal_r+0x5f8>
  8076a8:	38c00017 	ldw	r3,0(r7)
  8076ac:	39000204 	addi	r4,r7,8
  8076b0:	d9014015 	stw	r4,1280(sp)
  8076b4:	d8c14215 	stw	r3,1288(sp)
  8076b8:	39c00117 	ldw	r7,4(r7)
  8076bc:	d9c14315 	stw	r7,1292(sp)
  8076c0:	003e1a06 	br	806f2c <___vfprintf_internal_r+0x107c>
  8076c4:	0005883a 	mov	r2,zero
  8076c8:	1409c83a 	sub	r4,r2,r16
  8076cc:	1105803a 	cmpltu	r2,r2,r4
  8076d0:	044bc83a 	sub	r5,zero,r17
  8076d4:	2885c83a 	sub	r2,r5,r2
  8076d8:	2021883a 	mov	r16,r4
  8076dc:	1023883a 	mov	r17,r2
  8076e0:	01000044 	movi	r4,1
  8076e4:	00800b44 	movi	r2,45
  8076e8:	d8800405 	stb	r2,16(sp)
  8076ec:	003c7e06 	br	8068e8 <___vfprintf_internal_r+0xa38>
  8076f0:	d9014f17 	ldw	r4,1340(sp)
  8076f4:	b00b883a 	mov	r5,r22
  8076f8:	d9800c04 	addi	r6,sp,48
  8076fc:	0805e580 	call	805e58 <__sprint_r>
  807700:	103ba31e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  807704:	dc800e17 	ldw	r18,56(sp)
  807708:	dc400d17 	ldw	r17,52(sp)
  80770c:	d9000517 	ldw	r4,20(sp)
  807710:	d9401904 	addi	r5,sp,100
  807714:	003da106 	br	806d9c <___vfprintf_internal_r+0xeec>
  807718:	d9014f17 	ldw	r4,1340(sp)
  80771c:	b00b883a 	mov	r5,r22
  807720:	d9800c04 	addi	r6,sp,48
  807724:	0805e580 	call	805e58 <__sprint_r>
  807728:	103b991e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  80772c:	dc800e17 	ldw	r18,56(sp)
  807730:	dc400d17 	ldw	r17,52(sp)
  807734:	d9000517 	ldw	r4,20(sp)
  807738:	d8c01904 	addi	r3,sp,100
  80773c:	003d8b06 	br	806d6c <___vfprintf_internal_r+0xebc>
  807740:	07002074 	movhi	fp,129
  807744:	e7094184 	addi	fp,fp,9478
  807748:	9425883a 	add	r18,r18,r16
  80774c:	8c400044 	addi	r17,r17,1
  807750:	008001c4 	movi	r2,7
  807754:	1f000015 	stw	fp,0(r3)
  807758:	1c000115 	stw	r16,4(r3)
  80775c:	dc800e15 	stw	r18,56(sp)
  807760:	dc400d15 	stw	r17,52(sp)
  807764:	147fbc16 	blt	r2,r17,807658 <___vfprintf_internal_r+0x17a8>
  807768:	18c00204 	addi	r3,r3,8
  80776c:	003fc206 	br	807678 <___vfprintf_internal_r+0x17c8>
  807770:	d9014f17 	ldw	r4,1340(sp)
  807774:	b00b883a 	mov	r5,r22
  807778:	d9800c04 	addi	r6,sp,48
  80777c:	0805e580 	call	805e58 <__sprint_r>
  807780:	103b831e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  807784:	dc800e17 	ldw	r18,56(sp)
  807788:	d9000517 	ldw	r4,20(sp)
  80778c:	d8c01904 	addi	r3,sp,100
  807790:	003cfc06 	br	806b84 <___vfprintf_internal_r+0xcd4>
  807794:	07002074 	movhi	fp,129
  807798:	e7094184 	addi	fp,fp,9478
  80779c:	003bde06 	br	806718 <___vfprintf_internal_r+0x868>
  8077a0:	00802074 	movhi	r2,129
  8077a4:	10893004 	addi	r2,r2,9408
  8077a8:	d8814115 	stw	r2,1284(sp)
  8077ac:	003def06 	br	806f6c <___vfprintf_internal_r+0x10bc>
  8077b0:	d9014217 	ldw	r4,1288(sp)
  8077b4:	d9414317 	ldw	r5,1292(sp)
  8077b8:	080cb8c0 	call	80cb8c <__isnand>
  8077bc:	10003926 	beq	r2,zero,8078a4 <___vfprintf_internal_r+0x19f4>
  8077c0:	d9414d17 	ldw	r5,1332(sp)
  8077c4:	008011c4 	movi	r2,71
  8077c8:	1140ce16 	blt	r2,r5,807b04 <___vfprintf_internal_r+0x1c54>
  8077cc:	01802074 	movhi	r6,129
  8077d0:	31893104 	addi	r6,r6,9412
  8077d4:	d9814115 	stw	r6,1284(sp)
  8077d8:	003de406 	br	806f6c <___vfprintf_internal_r+0x10bc>
  8077dc:	d9014c17 	ldw	r4,1328(sp)
  8077e0:	bdc00044 	addi	r23,r23,1
  8077e4:	b8c00007 	ldb	r3,0(r23)
  8077e8:	21000814 	ori	r4,r4,32
  8077ec:	d9014c15 	stw	r4,1328(sp)
  8077f0:	003a2e06 	br	8060ac <___vfprintf_internal_r+0x1fc>
  8077f4:	dcc14515 	stw	r19,1300(sp)
  8077f8:	98011016 	blt	r19,zero,807c3c <___vfprintf_internal_r+0x1d8c>
  8077fc:	980f883a 	mov	r7,r19
  807800:	d8014615 	stw	zero,1304(sp)
  807804:	003c4c06 	br	806938 <___vfprintf_internal_r+0xa88>
  807808:	d9014f17 	ldw	r4,1340(sp)
  80780c:	b00b883a 	mov	r5,r22
  807810:	d9800c04 	addi	r6,sp,48
  807814:	0805e580 	call	805e58 <__sprint_r>
  807818:	103b5d1e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  80781c:	dc800e17 	ldw	r18,56(sp)
  807820:	d9000517 	ldw	r4,20(sp)
  807824:	d8c01904 	addi	r3,sp,100
  807828:	003f2e06 	br	8074e4 <___vfprintf_internal_r+0x1634>
  80782c:	d8c14c17 	ldw	r3,1328(sp)
  807830:	1880100c 	andi	r2,r3,64
  807834:	1000a026 	beq	r2,zero,807ab8 <___vfprintf_internal_r+0x1c08>
  807838:	38800017 	ldw	r2,0(r7)
  80783c:	39c00104 	addi	r7,r7,4
  807840:	d9c14015 	stw	r7,1280(sp)
  807844:	d9014b17 	ldw	r4,1324(sp)
  807848:	d9c14017 	ldw	r7,1280(sp)
  80784c:	1100000d 	sth	r4,0(r2)
  807850:	0039f306 	br	806020 <___vfprintf_internal_r+0x170>
  807854:	d9014f17 	ldw	r4,1340(sp)
  807858:	b00b883a 	mov	r5,r22
  80785c:	d9800c04 	addi	r6,sp,48
  807860:	0805e580 	call	805e58 <__sprint_r>
  807864:	103b4a1e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  807868:	dc800e17 	ldw	r18,56(sp)
  80786c:	dc400d17 	ldw	r17,52(sp)
  807870:	d9000517 	ldw	r4,20(sp)
  807874:	d8c01904 	addi	r3,sp,100
  807878:	003f2d06 	br	807530 <___vfprintf_internal_r+0x1680>
  80787c:	00800184 	movi	r2,6
  807880:	14c09a36 	bltu	r2,r19,807aec <___vfprintf_internal_r+0x1c3c>
  807884:	dcc14515 	stw	r19,1300(sp)
  807888:	9800010e 	bge	r19,zero,807890 <___vfprintf_internal_r+0x19e0>
  80788c:	d8014515 	stw	zero,1300(sp)
  807890:	00802074 	movhi	r2,129
  807894:	10893304 	addi	r2,r2,9420
  807898:	980f883a 	mov	r7,r19
  80789c:	d8814115 	stw	r2,1284(sp)
  8078a0:	003a7206 	br	80626c <___vfprintf_internal_r+0x3bc>
  8078a4:	00bfffc4 	movi	r2,-1
  8078a8:	9880e226 	beq	r19,r2,807c34 <___vfprintf_internal_r+0x1d84>
  8078ac:	d9414d17 	ldw	r5,1332(sp)
  8078b0:	008019c4 	movi	r2,103
  8078b4:	2880dc26 	beq	r5,r2,807c28 <___vfprintf_internal_r+0x1d78>
  8078b8:	008011c4 	movi	r2,71
  8078bc:	2880da26 	beq	r5,r2,807c28 <___vfprintf_internal_r+0x1d78>
  8078c0:	d9414c17 	ldw	r5,1328(sp)
  8078c4:	d9014317 	ldw	r4,1292(sp)
  8078c8:	d9814217 	ldw	r6,1288(sp)
  8078cc:	29404014 	ori	r5,r5,256
  8078d0:	d9414c15 	stw	r5,1328(sp)
  8078d4:	2000cc16 	blt	r4,zero,807c08 <___vfprintf_internal_r+0x1d58>
  8078d8:	3021883a 	mov	r16,r6
  8078dc:	2023883a 	mov	r17,r4
  8078e0:	0039883a 	mov	fp,zero
  8078e4:	d9414d17 	ldw	r5,1332(sp)
  8078e8:	00801984 	movi	r2,102
  8078ec:	2880b726 	beq	r5,r2,807bcc <___vfprintf_internal_r+0x1d1c>
  8078f0:	00801184 	movi	r2,70
  8078f4:	2880b526 	beq	r5,r2,807bcc <___vfprintf_internal_r+0x1d1c>
  8078f8:	00801944 	movi	r2,101
  8078fc:	2880c826 	beq	r5,r2,807c20 <___vfprintf_internal_r+0x1d70>
  807900:	00801144 	movi	r2,69
  807904:	2880c626 	beq	r5,r2,807c20 <___vfprintf_internal_r+0x1d70>
  807908:	9829883a 	mov	r20,r19
  80790c:	d9014f17 	ldw	r4,1340(sp)
  807910:	d8800504 	addi	r2,sp,20
  807914:	880d883a 	mov	r6,r17
  807918:	d8800115 	stw	r2,4(sp)
  80791c:	d8c00604 	addi	r3,sp,24
  807920:	d8800704 	addi	r2,sp,28
  807924:	800b883a 	mov	r5,r16
  807928:	01c00084 	movi	r7,2
  80792c:	d8c00215 	stw	r3,8(sp)
  807930:	d8800315 	stw	r2,12(sp)
  807934:	dd000015 	stw	r20,0(sp)
  807938:	08081180 	call	808118 <_dtoa_r>
  80793c:	d9814d17 	ldw	r6,1332(sp)
  807940:	d8814115 	stw	r2,1284(sp)
  807944:	008019c4 	movi	r2,103
  807948:	30809526 	beq	r6,r2,807ba0 <___vfprintf_internal_r+0x1cf0>
  80794c:	d8c14d17 	ldw	r3,1332(sp)
  807950:	008011c4 	movi	r2,71
  807954:	18809226 	beq	r3,r2,807ba0 <___vfprintf_internal_r+0x1cf0>
  807958:	d9414117 	ldw	r5,1284(sp)
  80795c:	d9814d17 	ldw	r6,1332(sp)
  807960:	00801984 	movi	r2,102
  807964:	2d25883a 	add	r18,r5,r20
  807968:	30808626 	beq	r6,r2,807b84 <___vfprintf_internal_r+0x1cd4>
  80796c:	00801184 	movi	r2,70
  807970:	30808426 	beq	r6,r2,807b84 <___vfprintf_internal_r+0x1cd4>
  807974:	000d883a 	mov	r6,zero
  807978:	000f883a 	mov	r7,zero
  80797c:	880b883a 	mov	r5,r17
  807980:	8009883a 	mov	r4,r16
  807984:	080e7100 	call	80e710 <__eqdf2>
  807988:	1000751e 	bne	r2,zero,807b60 <___vfprintf_internal_r+0x1cb0>
  80798c:	9005883a 	mov	r2,r18
  807990:	dc800715 	stw	r18,28(sp)
  807994:	d9014117 	ldw	r4,1284(sp)
  807998:	d9414d17 	ldw	r5,1332(sp)
  80799c:	00c019c4 	movi	r3,103
  8079a0:	1125c83a 	sub	r18,r2,r4
  8079a4:	28c06826 	beq	r5,r3,807b48 <___vfprintf_internal_r+0x1c98>
  8079a8:	008011c4 	movi	r2,71
  8079ac:	28806626 	beq	r5,r2,807b48 <___vfprintf_internal_r+0x1c98>
  8079b0:	d9000517 	ldw	r4,20(sp)
  8079b4:	d8c14d17 	ldw	r3,1332(sp)
  8079b8:	00801944 	movi	r2,101
  8079bc:	10c05516 	blt	r2,r3,807b14 <___vfprintf_internal_r+0x1c64>
  8079c0:	213fffc4 	addi	r4,r4,-1
  8079c4:	d9000515 	stw	r4,20(sp)
  8079c8:	d8c00805 	stb	r3,32(sp)
  8079cc:	2021883a 	mov	r16,r4
  8079d0:	2000c116 	blt	r4,zero,807cd8 <___vfprintf_internal_r+0x1e28>
  8079d4:	00800ac4 	movi	r2,43
  8079d8:	d8800845 	stb	r2,33(sp)
  8079dc:	00800244 	movi	r2,9
  8079e0:	1400af0e 	bge	r2,r16,807ca0 <___vfprintf_internal_r+0x1df0>
  8079e4:	1027883a 	mov	r19,r2
  8079e8:	dc400b84 	addi	r17,sp,46
  8079ec:	8009883a 	mov	r4,r16
  8079f0:	01400284 	movi	r5,10
  8079f4:	08054cc0 	call	8054cc <__modsi3>
  8079f8:	10800c04 	addi	r2,r2,48
  8079fc:	8c7fffc4 	addi	r17,r17,-1
  807a00:	8009883a 	mov	r4,r16
  807a04:	01400284 	movi	r5,10
  807a08:	88800005 	stb	r2,0(r17)
  807a0c:	080546c0 	call	80546c <__divsi3>
  807a10:	1021883a 	mov	r16,r2
  807a14:	98bff516 	blt	r19,r2,8079ec <___vfprintf_internal_r+0x1b3c>
  807a18:	10c00c04 	addi	r3,r2,48
  807a1c:	d88009c4 	addi	r2,sp,39
  807a20:	108001c4 	addi	r2,r2,7
  807a24:	897fffc4 	addi	r5,r17,-1
  807a28:	88ffffc5 	stb	r3,-1(r17)
  807a2c:	2880a72e 	bgeu	r5,r2,807ccc <___vfprintf_internal_r+0x1e1c>
  807a30:	1009883a 	mov	r4,r2
  807a34:	d9800804 	addi	r6,sp,32
  807a38:	d8c00884 	addi	r3,sp,34
  807a3c:	28800003 	ldbu	r2,0(r5)
  807a40:	29400044 	addi	r5,r5,1
  807a44:	18800005 	stb	r2,0(r3)
  807a48:	18c00044 	addi	r3,r3,1
  807a4c:	293ffb36 	bltu	r5,r4,807a3c <___vfprintf_internal_r+0x1b8c>
  807a50:	1987c83a 	sub	r3,r3,r6
  807a54:	00800044 	movi	r2,1
  807a58:	d8c14815 	stw	r3,1312(sp)
  807a5c:	90cf883a 	add	r7,r18,r3
  807a60:	1480960e 	bge	r2,r18,807cbc <___vfprintf_internal_r+0x1e0c>
  807a64:	39c00044 	addi	r7,r7,1
  807a68:	d9c14515 	stw	r7,1300(sp)
  807a6c:	38003416 	blt	r7,zero,807b40 <___vfprintf_internal_r+0x1c90>
  807a70:	e0803fcc 	andi	r2,fp,255
  807a74:	1080201c 	xori	r2,r2,128
  807a78:	10bfe004 	addi	r2,r2,-128
  807a7c:	10004e26 	beq	r2,zero,807bb8 <___vfprintf_internal_r+0x1d08>
  807a80:	00800b44 	movi	r2,45
  807a84:	dc814715 	stw	r18,1308(sp)
  807a88:	d8014615 	stw	zero,1304(sp)
  807a8c:	d8800405 	stb	r2,16(sp)
  807a90:	003bab06 	br	806940 <___vfprintf_internal_r+0xa90>
  807a94:	00800b44 	movi	r2,45
  807a98:	d8800405 	stb	r2,16(sp)
  807a9c:	003d2d06 	br	806f54 <___vfprintf_internal_r+0x10a4>
  807aa0:	d9014f17 	ldw	r4,1340(sp)
  807aa4:	b00b883a 	mov	r5,r22
  807aa8:	d9800c04 	addi	r6,sp,48
  807aac:	0805e580 	call	805e58 <__sprint_r>
  807ab0:	103ab71e 	bne	r2,zero,806590 <___vfprintf_internal_r+0x6e0>
  807ab4:	003ab506 	br	80658c <___vfprintf_internal_r+0x6dc>
  807ab8:	38800017 	ldw	r2,0(r7)
  807abc:	39c00104 	addi	r7,r7,4
  807ac0:	d9c14015 	stw	r7,1280(sp)
  807ac4:	d9414b17 	ldw	r5,1324(sp)
  807ac8:	d9c14017 	ldw	r7,1280(sp)
  807acc:	11400015 	stw	r5,0(r2)
  807ad0:	00395306 	br	806020 <___vfprintf_internal_r+0x170>
  807ad4:	980f883a 	mov	r7,r19
  807ad8:	dcc14515 	stw	r19,1300(sp)
  807adc:	d8014615 	stw	zero,1304(sp)
  807ae0:	003b9506 	br	806938 <___vfprintf_internal_r+0xa88>
  807ae4:	0027883a 	mov	r19,zero
  807ae8:	00397206 	br	8060b4 <___vfprintf_internal_r+0x204>
  807aec:	00c02074 	movhi	r3,129
  807af0:	18c93304 	addi	r3,r3,9420
  807af4:	100f883a 	mov	r7,r2
  807af8:	d8814515 	stw	r2,1300(sp)
  807afc:	d8c14115 	stw	r3,1284(sp)
  807b00:	0039da06 	br	80626c <___vfprintf_internal_r+0x3bc>
  807b04:	00802074 	movhi	r2,129
  807b08:	10893204 	addi	r2,r2,9416
  807b0c:	d8814115 	stw	r2,1284(sp)
  807b10:	003d1606 	br	806f6c <___vfprintf_internal_r+0x10bc>
  807b14:	d9414d17 	ldw	r5,1332(sp)
  807b18:	00801984 	movi	r2,102
  807b1c:	28804926 	beq	r5,r2,807c44 <___vfprintf_internal_r+0x1d94>
  807b20:	200f883a 	mov	r7,r4
  807b24:	24805716 	blt	r4,r18,807c84 <___vfprintf_internal_r+0x1dd4>
  807b28:	d9414c17 	ldw	r5,1328(sp)
  807b2c:	2880004c 	andi	r2,r5,1
  807b30:	10000126 	beq	r2,zero,807b38 <___vfprintf_internal_r+0x1c88>
  807b34:	21c00044 	addi	r7,r4,1
  807b38:	d9c14515 	stw	r7,1300(sp)
  807b3c:	383fcc0e 	bge	r7,zero,807a70 <___vfprintf_internal_r+0x1bc0>
  807b40:	d8014515 	stw	zero,1300(sp)
  807b44:	003fca06 	br	807a70 <___vfprintf_internal_r+0x1bc0>
  807b48:	d9000517 	ldw	r4,20(sp)
  807b4c:	00bfff04 	movi	r2,-4
  807b50:	1100480e 	bge	r2,r4,807c74 <___vfprintf_internal_r+0x1dc4>
  807b54:	99004716 	blt	r19,r4,807c74 <___vfprintf_internal_r+0x1dc4>
  807b58:	d8c14d15 	stw	r3,1332(sp)
  807b5c:	003ff006 	br	807b20 <___vfprintf_internal_r+0x1c70>
  807b60:	d8800717 	ldw	r2,28(sp)
  807b64:	14bf8b2e 	bgeu	r2,r18,807994 <___vfprintf_internal_r+0x1ae4>
  807b68:	9007883a 	mov	r3,r18
  807b6c:	01000c04 	movi	r4,48
  807b70:	11000005 	stb	r4,0(r2)
  807b74:	10800044 	addi	r2,r2,1
  807b78:	d8800715 	stw	r2,28(sp)
  807b7c:	18bffc1e 	bne	r3,r2,807b70 <___vfprintf_internal_r+0x1cc0>
  807b80:	003f8406 	br	807994 <___vfprintf_internal_r+0x1ae4>
  807b84:	d8814117 	ldw	r2,1284(sp)
  807b88:	10c00007 	ldb	r3,0(r2)
  807b8c:	00800c04 	movi	r2,48
  807b90:	18805b26 	beq	r3,r2,807d00 <___vfprintf_internal_r+0x1e50>
  807b94:	d9000517 	ldw	r4,20(sp)
  807b98:	9125883a 	add	r18,r18,r4
  807b9c:	003f7506 	br	807974 <___vfprintf_internal_r+0x1ac4>
  807ba0:	d9014c17 	ldw	r4,1328(sp)
  807ba4:	2080004c 	andi	r2,r4,1
  807ba8:	1005003a 	cmpeq	r2,r2,zero
  807bac:	103f6a26 	beq	r2,zero,807958 <___vfprintf_internal_r+0x1aa8>
  807bb0:	d8800717 	ldw	r2,28(sp)
  807bb4:	003f7706 	br	807994 <___vfprintf_internal_r+0x1ae4>
  807bb8:	d9c14515 	stw	r7,1300(sp)
  807bbc:	38004d16 	blt	r7,zero,807cf4 <___vfprintf_internal_r+0x1e44>
  807bc0:	dc814715 	stw	r18,1308(sp)
  807bc4:	d8014615 	stw	zero,1304(sp)
  807bc8:	003b5b06 	br	806938 <___vfprintf_internal_r+0xa88>
  807bcc:	d9014f17 	ldw	r4,1340(sp)
  807bd0:	d8800504 	addi	r2,sp,20
  807bd4:	d8800115 	stw	r2,4(sp)
  807bd8:	d8c00604 	addi	r3,sp,24
  807bdc:	d8800704 	addi	r2,sp,28
  807be0:	800b883a 	mov	r5,r16
  807be4:	880d883a 	mov	r6,r17
  807be8:	01c000c4 	movi	r7,3
  807bec:	d8c00215 	stw	r3,8(sp)
  807bf0:	d8800315 	stw	r2,12(sp)
  807bf4:	dcc00015 	stw	r19,0(sp)
  807bf8:	9829883a 	mov	r20,r19
  807bfc:	08081180 	call	808118 <_dtoa_r>
  807c00:	d8814115 	stw	r2,1284(sp)
  807c04:	003f5106 	br	80794c <___vfprintf_internal_r+0x1a9c>
  807c08:	d8c14217 	ldw	r3,1288(sp)
  807c0c:	d9014317 	ldw	r4,1292(sp)
  807c10:	07000b44 	movi	fp,45
  807c14:	1821883a 	mov	r16,r3
  807c18:	2460003c 	xorhi	r17,r4,32768
  807c1c:	003f3106 	br	8078e4 <___vfprintf_internal_r+0x1a34>
  807c20:	9d000044 	addi	r20,r19,1
  807c24:	003f3906 	br	80790c <___vfprintf_internal_r+0x1a5c>
  807c28:	983f251e 	bne	r19,zero,8078c0 <___vfprintf_internal_r+0x1a10>
  807c2c:	04c00044 	movi	r19,1
  807c30:	003f2306 	br	8078c0 <___vfprintf_internal_r+0x1a10>
  807c34:	04c00184 	movi	r19,6
  807c38:	003f2106 	br	8078c0 <___vfprintf_internal_r+0x1a10>
  807c3c:	d8014515 	stw	zero,1300(sp)
  807c40:	003eee06 	br	8077fc <___vfprintf_internal_r+0x194c>
  807c44:	200f883a 	mov	r7,r4
  807c48:	0100370e 	bge	zero,r4,807d28 <___vfprintf_internal_r+0x1e78>
  807c4c:	9800031e 	bne	r19,zero,807c5c <___vfprintf_internal_r+0x1dac>
  807c50:	d9814c17 	ldw	r6,1328(sp)
  807c54:	3080004c 	andi	r2,r6,1
  807c58:	103fb726 	beq	r2,zero,807b38 <___vfprintf_internal_r+0x1c88>
  807c5c:	20800044 	addi	r2,r4,1
  807c60:	98a7883a 	add	r19,r19,r2
  807c64:	dcc14515 	stw	r19,1300(sp)
  807c68:	980f883a 	mov	r7,r19
  807c6c:	983f800e 	bge	r19,zero,807a70 <___vfprintf_internal_r+0x1bc0>
  807c70:	003fb306 	br	807b40 <___vfprintf_internal_r+0x1c90>
  807c74:	d9814d17 	ldw	r6,1332(sp)
  807c78:	31bfff84 	addi	r6,r6,-2
  807c7c:	d9814d15 	stw	r6,1332(sp)
  807c80:	003f4c06 	br	8079b4 <___vfprintf_internal_r+0x1b04>
  807c84:	0100180e 	bge	zero,r4,807ce8 <___vfprintf_internal_r+0x1e38>
  807c88:	00800044 	movi	r2,1
  807c8c:	1485883a 	add	r2,r2,r18
  807c90:	d8814515 	stw	r2,1300(sp)
  807c94:	100f883a 	mov	r7,r2
  807c98:	103f750e 	bge	r2,zero,807a70 <___vfprintf_internal_r+0x1bc0>
  807c9c:	003fa806 	br	807b40 <___vfprintf_internal_r+0x1c90>
  807ca0:	80c00c04 	addi	r3,r16,48
  807ca4:	00800c04 	movi	r2,48
  807ca8:	d8c008c5 	stb	r3,35(sp)
  807cac:	d9800804 	addi	r6,sp,32
  807cb0:	d8c00904 	addi	r3,sp,36
  807cb4:	d8800885 	stb	r2,34(sp)
  807cb8:	003f6506 	br	807a50 <___vfprintf_internal_r+0x1ba0>
  807cbc:	d9014c17 	ldw	r4,1328(sp)
  807cc0:	2084703a 	and	r2,r4,r2
  807cc4:	103f9c26 	beq	r2,zero,807b38 <___vfprintf_internal_r+0x1c88>
  807cc8:	003f6606 	br	807a64 <___vfprintf_internal_r+0x1bb4>
  807ccc:	d9800804 	addi	r6,sp,32
  807cd0:	d8c00884 	addi	r3,sp,34
  807cd4:	003f5e06 	br	807a50 <___vfprintf_internal_r+0x1ba0>
  807cd8:	00800b44 	movi	r2,45
  807cdc:	0121c83a 	sub	r16,zero,r4
  807ce0:	d8800845 	stb	r2,33(sp)
  807ce4:	003f3d06 	br	8079dc <___vfprintf_internal_r+0x1b2c>
  807ce8:	00800084 	movi	r2,2
  807cec:	1105c83a 	sub	r2,r2,r4
  807cf0:	003fe606 	br	807c8c <___vfprintf_internal_r+0x1ddc>
  807cf4:	d8014515 	stw	zero,1300(sp)
  807cf8:	dc814715 	stw	r18,1308(sp)
  807cfc:	003fb106 	br	807bc4 <___vfprintf_internal_r+0x1d14>
  807d00:	000d883a 	mov	r6,zero
  807d04:	000f883a 	mov	r7,zero
  807d08:	8009883a 	mov	r4,r16
  807d0c:	880b883a 	mov	r5,r17
  807d10:	080e7980 	call	80e798 <__nedf2>
  807d14:	103f9f26 	beq	r2,zero,807b94 <___vfprintf_internal_r+0x1ce4>
  807d18:	00800044 	movi	r2,1
  807d1c:	1509c83a 	sub	r4,r2,r20
  807d20:	d9000515 	stw	r4,20(sp)
  807d24:	003f9b06 	br	807b94 <___vfprintf_internal_r+0x1ce4>
  807d28:	98000d1e 	bne	r19,zero,807d60 <___vfprintf_internal_r+0x1eb0>
  807d2c:	d8c14c17 	ldw	r3,1328(sp)
  807d30:	1880004c 	andi	r2,r3,1
  807d34:	10000a1e 	bne	r2,zero,807d60 <___vfprintf_internal_r+0x1eb0>
  807d38:	01000044 	movi	r4,1
  807d3c:	200f883a 	mov	r7,r4
  807d40:	d9014515 	stw	r4,1300(sp)
  807d44:	003f4a06 	br	807a70 <___vfprintf_internal_r+0x1bc0>
  807d48:	3cc00017 	ldw	r19,0(r7)
  807d4c:	39c00104 	addi	r7,r7,4
  807d50:	983d0e0e 	bge	r19,zero,80718c <___vfprintf_internal_r+0x12dc>
  807d54:	b8c00007 	ldb	r3,0(r23)
  807d58:	04ffffc4 	movi	r19,-1
  807d5c:	0038d306 	br	8060ac <___vfprintf_internal_r+0x1fc>
  807d60:	9cc00084 	addi	r19,r19,2
  807d64:	dcc14515 	stw	r19,1300(sp)
  807d68:	980f883a 	mov	r7,r19
  807d6c:	983f400e 	bge	r19,zero,807a70 <___vfprintf_internal_r+0x1bc0>
  807d70:	003f7306 	br	807b40 <___vfprintf_internal_r+0x1c90>

00807d74 <__vfprintf_internal>:
  807d74:	00802074 	movhi	r2,129
  807d78:	1091b004 	addi	r2,r2,18112
  807d7c:	2013883a 	mov	r9,r4
  807d80:	11000017 	ldw	r4,0(r2)
  807d84:	2805883a 	mov	r2,r5
  807d88:	300f883a 	mov	r7,r6
  807d8c:	480b883a 	mov	r5,r9
  807d90:	100d883a 	mov	r6,r2
  807d94:	0805eb01 	jmpi	805eb0 <___vfprintf_internal_r>

00807d98 <__swsetup_r>:
  807d98:	00802074 	movhi	r2,129
  807d9c:	1091b004 	addi	r2,r2,18112
  807da0:	10c00017 	ldw	r3,0(r2)
  807da4:	defffd04 	addi	sp,sp,-12
  807da8:	dc400115 	stw	r17,4(sp)
  807dac:	dc000015 	stw	r16,0(sp)
  807db0:	dfc00215 	stw	ra,8(sp)
  807db4:	2023883a 	mov	r17,r4
  807db8:	2821883a 	mov	r16,r5
  807dbc:	18000226 	beq	r3,zero,807dc8 <__swsetup_r+0x30>
  807dc0:	18800e17 	ldw	r2,56(r3)
  807dc4:	10001f26 	beq	r2,zero,807e44 <__swsetup_r+0xac>
  807dc8:	8100030b 	ldhu	r4,12(r16)
  807dcc:	2080020c 	andi	r2,r4,8
  807dd0:	10002826 	beq	r2,zero,807e74 <__swsetup_r+0xdc>
  807dd4:	81400417 	ldw	r5,16(r16)
  807dd8:	28001d26 	beq	r5,zero,807e50 <__swsetup_r+0xb8>
  807ddc:	2080004c 	andi	r2,r4,1
  807de0:	1005003a 	cmpeq	r2,r2,zero
  807de4:	10000b26 	beq	r2,zero,807e14 <__swsetup_r+0x7c>
  807de8:	2080008c 	andi	r2,r4,2
  807dec:	10001226 	beq	r2,zero,807e38 <__swsetup_r+0xa0>
  807df0:	0005883a 	mov	r2,zero
  807df4:	80800215 	stw	r2,8(r16)
  807df8:	28000b26 	beq	r5,zero,807e28 <__swsetup_r+0x90>
  807dfc:	0005883a 	mov	r2,zero
  807e00:	dfc00217 	ldw	ra,8(sp)
  807e04:	dc400117 	ldw	r17,4(sp)
  807e08:	dc000017 	ldw	r16,0(sp)
  807e0c:	dec00304 	addi	sp,sp,12
  807e10:	f800283a 	ret
  807e14:	80800517 	ldw	r2,20(r16)
  807e18:	80000215 	stw	zero,8(r16)
  807e1c:	0085c83a 	sub	r2,zero,r2
  807e20:	80800615 	stw	r2,24(r16)
  807e24:	283ff51e 	bne	r5,zero,807dfc <__swsetup_r+0x64>
  807e28:	2080200c 	andi	r2,r4,128
  807e2c:	103ff326 	beq	r2,zero,807dfc <__swsetup_r+0x64>
  807e30:	00bfffc4 	movi	r2,-1
  807e34:	003ff206 	br	807e00 <__swsetup_r+0x68>
  807e38:	80800517 	ldw	r2,20(r16)
  807e3c:	80800215 	stw	r2,8(r16)
  807e40:	003fed06 	br	807df8 <__swsetup_r+0x60>
  807e44:	1809883a 	mov	r4,r3
  807e48:	08099640 	call	809964 <__sinit>
  807e4c:	003fde06 	br	807dc8 <__swsetup_r+0x30>
  807e50:	20c0a00c 	andi	r3,r4,640
  807e54:	00808004 	movi	r2,512
  807e58:	18bfe026 	beq	r3,r2,807ddc <__swsetup_r+0x44>
  807e5c:	8809883a 	mov	r4,r17
  807e60:	800b883a 	mov	r5,r16
  807e64:	080a7100 	call	80a710 <__smakebuf_r>
  807e68:	8100030b 	ldhu	r4,12(r16)
  807e6c:	81400417 	ldw	r5,16(r16)
  807e70:	003fda06 	br	807ddc <__swsetup_r+0x44>
  807e74:	2080040c 	andi	r2,r4,16
  807e78:	103fed26 	beq	r2,zero,807e30 <__swsetup_r+0x98>
  807e7c:	2080010c 	andi	r2,r4,4
  807e80:	10001226 	beq	r2,zero,807ecc <__swsetup_r+0x134>
  807e84:	81400c17 	ldw	r5,48(r16)
  807e88:	28000526 	beq	r5,zero,807ea0 <__swsetup_r+0x108>
  807e8c:	80801004 	addi	r2,r16,64
  807e90:	28800226 	beq	r5,r2,807e9c <__swsetup_r+0x104>
  807e94:	8809883a 	mov	r4,r17
  807e98:	0809d1c0 	call	809d1c <_free_r>
  807e9c:	80000c15 	stw	zero,48(r16)
  807ea0:	8080030b 	ldhu	r2,12(r16)
  807ea4:	81400417 	ldw	r5,16(r16)
  807ea8:	80000115 	stw	zero,4(r16)
  807eac:	10bff6cc 	andi	r2,r2,65499
  807eb0:	8080030d 	sth	r2,12(r16)
  807eb4:	81400015 	stw	r5,0(r16)
  807eb8:	8080030b 	ldhu	r2,12(r16)
  807ebc:	10800214 	ori	r2,r2,8
  807ec0:	113fffcc 	andi	r4,r2,65535
  807ec4:	8080030d 	sth	r2,12(r16)
  807ec8:	003fc306 	br	807dd8 <__swsetup_r+0x40>
  807ecc:	81400417 	ldw	r5,16(r16)
  807ed0:	003ff906 	br	807eb8 <__swsetup_r+0x120>

00807ed4 <quorem>:
  807ed4:	28c00417 	ldw	r3,16(r5)
  807ed8:	20800417 	ldw	r2,16(r4)
  807edc:	defff104 	addi	sp,sp,-60
  807ee0:	dfc00e15 	stw	ra,56(sp)
  807ee4:	df000d15 	stw	fp,52(sp)
  807ee8:	ddc00c15 	stw	r23,48(sp)
  807eec:	dd800b15 	stw	r22,44(sp)
  807ef0:	dd400a15 	stw	r21,40(sp)
  807ef4:	dd000915 	stw	r20,36(sp)
  807ef8:	dcc00815 	stw	r19,32(sp)
  807efc:	dc800715 	stw	r18,28(sp)
  807f00:	dc400615 	stw	r17,24(sp)
  807f04:	dc000515 	stw	r16,20(sp)
  807f08:	d9000315 	stw	r4,12(sp)
  807f0c:	d9400415 	stw	r5,16(sp)
  807f10:	10c07f16 	blt	r2,r3,808110 <quorem+0x23c>
  807f14:	1d3fffc4 	addi	r20,r3,-1
  807f18:	d8c00417 	ldw	r3,16(sp)
  807f1c:	d9000317 	ldw	r4,12(sp)
  807f20:	a505883a 	add	r2,r20,r20
  807f24:	1085883a 	add	r2,r2,r2
  807f28:	1cc00504 	addi	r19,r3,20
  807f2c:	25c00504 	addi	r23,r4,20
  807f30:	98ad883a 	add	r22,r19,r2
  807f34:	15c7883a 	add	r3,r2,r23
  807f38:	b1400017 	ldw	r5,0(r22)
  807f3c:	19000017 	ldw	r4,0(r3)
  807f40:	d8c00015 	stw	r3,0(sp)
  807f44:	29400044 	addi	r5,r5,1
  807f48:	d9000215 	stw	r4,8(sp)
  807f4c:	080552c0 	call	80552c <__udivsi3>
  807f50:	1039883a 	mov	fp,r2
  807f54:	10003d1e 	bne	r2,zero,80804c <quorem+0x178>
  807f58:	d9400417 	ldw	r5,16(sp)
  807f5c:	d9000317 	ldw	r4,12(sp)
  807f60:	080b43c0 	call	80b43c <__mcmp>
  807f64:	10002c16 	blt	r2,zero,808018 <quorem+0x144>
  807f68:	e7000044 	addi	fp,fp,1
  807f6c:	b80f883a 	mov	r7,r23
  807f70:	0011883a 	mov	r8,zero
  807f74:	0009883a 	mov	r4,zero
  807f78:	99400017 	ldw	r5,0(r19)
  807f7c:	38c00017 	ldw	r3,0(r7)
  807f80:	9cc00104 	addi	r19,r19,4
  807f84:	28bfffcc 	andi	r2,r5,65535
  807f88:	2085883a 	add	r2,r4,r2
  807f8c:	11bfffcc 	andi	r6,r2,65535
  807f90:	193fffcc 	andi	r4,r3,65535
  807f94:	1004d43a 	srli	r2,r2,16
  807f98:	280ad43a 	srli	r5,r5,16
  807f9c:	2189c83a 	sub	r4,r4,r6
  807fa0:	2209883a 	add	r4,r4,r8
  807fa4:	1806d43a 	srli	r3,r3,16
  807fa8:	288b883a 	add	r5,r5,r2
  807fac:	200dd43a 	srai	r6,r4,16
  807fb0:	28bfffcc 	andi	r2,r5,65535
  807fb4:	1887c83a 	sub	r3,r3,r2
  807fb8:	1987883a 	add	r3,r3,r6
  807fbc:	3900000d 	sth	r4,0(r7)
  807fc0:	38c0008d 	sth	r3,2(r7)
  807fc4:	2808d43a 	srli	r4,r5,16
  807fc8:	39c00104 	addi	r7,r7,4
  807fcc:	1811d43a 	srai	r8,r3,16
  807fd0:	b4ffe92e 	bgeu	r22,r19,807f78 <quorem+0xa4>
  807fd4:	a505883a 	add	r2,r20,r20
  807fd8:	1085883a 	add	r2,r2,r2
  807fdc:	b885883a 	add	r2,r23,r2
  807fe0:	10c00017 	ldw	r3,0(r2)
  807fe4:	18000c1e 	bne	r3,zero,808018 <quorem+0x144>
  807fe8:	113fff04 	addi	r4,r2,-4
  807fec:	b900082e 	bgeu	r23,r4,808010 <quorem+0x13c>
  807ff0:	10bfff17 	ldw	r2,-4(r2)
  807ff4:	10000326 	beq	r2,zero,808004 <quorem+0x130>
  807ff8:	00000506 	br	808010 <quorem+0x13c>
  807ffc:	20800017 	ldw	r2,0(r4)
  808000:	1000031e 	bne	r2,zero,808010 <quorem+0x13c>
  808004:	213fff04 	addi	r4,r4,-4
  808008:	a53fffc4 	addi	r20,r20,-1
  80800c:	b93ffb36 	bltu	r23,r4,807ffc <quorem+0x128>
  808010:	d9000317 	ldw	r4,12(sp)
  808014:	25000415 	stw	r20,16(r4)
  808018:	e005883a 	mov	r2,fp
  80801c:	dfc00e17 	ldw	ra,56(sp)
  808020:	df000d17 	ldw	fp,52(sp)
  808024:	ddc00c17 	ldw	r23,48(sp)
  808028:	dd800b17 	ldw	r22,44(sp)
  80802c:	dd400a17 	ldw	r21,40(sp)
  808030:	dd000917 	ldw	r20,36(sp)
  808034:	dcc00817 	ldw	r19,32(sp)
  808038:	dc800717 	ldw	r18,28(sp)
  80803c:	dc400617 	ldw	r17,24(sp)
  808040:	dc000517 	ldw	r16,20(sp)
  808044:	dec00f04 	addi	sp,sp,60
  808048:	f800283a 	ret
  80804c:	b823883a 	mov	r17,r23
  808050:	9825883a 	mov	r18,r19
  808054:	d8000115 	stw	zero,4(sp)
  808058:	002b883a 	mov	r21,zero
  80805c:	94000017 	ldw	r16,0(r18)
  808060:	e009883a 	mov	r4,fp
  808064:	94800104 	addi	r18,r18,4
  808068:	817fffcc 	andi	r5,r16,65535
  80806c:	080eb4c0 	call	80eb4c <__mulsi3>
  808070:	800ad43a 	srli	r5,r16,16
  808074:	e009883a 	mov	r4,fp
  808078:	a8a1883a 	add	r16,r21,r2
  80807c:	080eb4c0 	call	80eb4c <__mulsi3>
  808080:	89000017 	ldw	r4,0(r17)
  808084:	80ffffcc 	andi	r3,r16,65535
  808088:	8020d43a 	srli	r16,r16,16
  80808c:	217fffcc 	andi	r5,r4,65535
  808090:	28cbc83a 	sub	r5,r5,r3
  808094:	d8c00117 	ldw	r3,4(sp)
  808098:	2008d43a 	srli	r4,r4,16
  80809c:	1405883a 	add	r2,r2,r16
  8080a0:	28cb883a 	add	r5,r5,r3
  8080a4:	280dd43a 	srai	r6,r5,16
  8080a8:	10ffffcc 	andi	r3,r2,65535
  8080ac:	20c9c83a 	sub	r4,r4,r3
  8080b0:	2189883a 	add	r4,r4,r6
  8080b4:	8900008d 	sth	r4,2(r17)
  8080b8:	2009d43a 	srai	r4,r4,16
  8080bc:	8940000d 	sth	r5,0(r17)
  8080c0:	102ad43a 	srli	r21,r2,16
  8080c4:	8c400104 	addi	r17,r17,4
  8080c8:	d9000115 	stw	r4,4(sp)
  8080cc:	b4bfe32e 	bgeu	r22,r18,80805c <quorem+0x188>
  8080d0:	d9000217 	ldw	r4,8(sp)
  8080d4:	203fa01e 	bne	r4,zero,807f58 <quorem+0x84>
  8080d8:	d8800017 	ldw	r2,0(sp)
  8080dc:	10ffff04 	addi	r3,r2,-4
  8080e0:	b8c0082e 	bgeu	r23,r3,808104 <quorem+0x230>
  8080e4:	10bfff17 	ldw	r2,-4(r2)
  8080e8:	10000326 	beq	r2,zero,8080f8 <quorem+0x224>
  8080ec:	00000506 	br	808104 <quorem+0x230>
  8080f0:	18800017 	ldw	r2,0(r3)
  8080f4:	1000031e 	bne	r2,zero,808104 <quorem+0x230>
  8080f8:	18ffff04 	addi	r3,r3,-4
  8080fc:	a53fffc4 	addi	r20,r20,-1
  808100:	b8fffb36 	bltu	r23,r3,8080f0 <quorem+0x21c>
  808104:	d8c00317 	ldw	r3,12(sp)
  808108:	1d000415 	stw	r20,16(r3)
  80810c:	003f9206 	br	807f58 <quorem+0x84>
  808110:	0005883a 	mov	r2,zero
  808114:	003fc106 	br	80801c <quorem+0x148>

00808118 <_dtoa_r>:
  808118:	22001017 	ldw	r8,64(r4)
  80811c:	deffda04 	addi	sp,sp,-152
  808120:	dd402115 	stw	r21,132(sp)
  808124:	dd002015 	stw	r20,128(sp)
  808128:	dc801e15 	stw	r18,120(sp)
  80812c:	dc401d15 	stw	r17,116(sp)
  808130:	dfc02515 	stw	ra,148(sp)
  808134:	df002415 	stw	fp,144(sp)
  808138:	ddc02315 	stw	r23,140(sp)
  80813c:	dd802215 	stw	r22,136(sp)
  808140:	dcc01f15 	stw	r19,124(sp)
  808144:	dc001c15 	stw	r16,112(sp)
  808148:	d9001615 	stw	r4,88(sp)
  80814c:	3023883a 	mov	r17,r6
  808150:	2829883a 	mov	r20,r5
  808154:	d9c01715 	stw	r7,92(sp)
  808158:	dc802817 	ldw	r18,160(sp)
  80815c:	302b883a 	mov	r21,r6
  808160:	40000a26 	beq	r8,zero,80818c <_dtoa_r+0x74>
  808164:	20801117 	ldw	r2,68(r4)
  808168:	400b883a 	mov	r5,r8
  80816c:	40800115 	stw	r2,4(r8)
  808170:	20c01117 	ldw	r3,68(r4)
  808174:	00800044 	movi	r2,1
  808178:	10c4983a 	sll	r2,r2,r3
  80817c:	40800215 	stw	r2,8(r8)
  808180:	080b2e00 	call	80b2e0 <_Bfree>
  808184:	d8c01617 	ldw	r3,88(sp)
  808188:	18001015 	stw	zero,64(r3)
  80818c:	8800a316 	blt	r17,zero,80841c <_dtoa_r+0x304>
  808190:	90000015 	stw	zero,0(r18)
  808194:	a8dffc2c 	andhi	r3,r21,32752
  808198:	009ffc34 	movhi	r2,32752
  80819c:	18809126 	beq	r3,r2,8083e4 <_dtoa_r+0x2cc>
  8081a0:	000d883a 	mov	r6,zero
  8081a4:	000f883a 	mov	r7,zero
  8081a8:	a009883a 	mov	r4,r20
  8081ac:	a80b883a 	mov	r5,r21
  8081b0:	dd001215 	stw	r20,72(sp)
  8081b4:	dd401315 	stw	r21,76(sp)
  8081b8:	080e7980 	call	80e798 <__nedf2>
  8081bc:	1000171e 	bne	r2,zero,80821c <_dtoa_r+0x104>
  8081c0:	d9802717 	ldw	r6,156(sp)
  8081c4:	00800044 	movi	r2,1
  8081c8:	30800015 	stw	r2,0(r6)
  8081cc:	d8802917 	ldw	r2,164(sp)
  8081d0:	10029b26 	beq	r2,zero,808c40 <_dtoa_r+0xb28>
  8081d4:	d9002917 	ldw	r4,164(sp)
  8081d8:	00802074 	movhi	r2,129
  8081dc:	10894144 	addi	r2,r2,9477
  8081e0:	10ffffc4 	addi	r3,r2,-1
  8081e4:	20800015 	stw	r2,0(r4)
  8081e8:	1805883a 	mov	r2,r3
  8081ec:	dfc02517 	ldw	ra,148(sp)
  8081f0:	df002417 	ldw	fp,144(sp)
  8081f4:	ddc02317 	ldw	r23,140(sp)
  8081f8:	dd802217 	ldw	r22,136(sp)
  8081fc:	dd402117 	ldw	r21,132(sp)
  808200:	dd002017 	ldw	r20,128(sp)
  808204:	dcc01f17 	ldw	r19,124(sp)
  808208:	dc801e17 	ldw	r18,120(sp)
  80820c:	dc401d17 	ldw	r17,116(sp)
  808210:	dc001c17 	ldw	r16,112(sp)
  808214:	dec02604 	addi	sp,sp,152
  808218:	f800283a 	ret
  80821c:	d9001617 	ldw	r4,88(sp)
  808220:	d9401217 	ldw	r5,72(sp)
  808224:	d8800104 	addi	r2,sp,4
  808228:	a80d883a 	mov	r6,r21
  80822c:	d9c00204 	addi	r7,sp,8
  808230:	d8800015 	stw	r2,0(sp)
  808234:	080b91c0 	call	80b91c <__d2b>
  808238:	d8800715 	stw	r2,28(sp)
  80823c:	a804d53a 	srli	r2,r21,20
  808240:	1101ffcc 	andi	r4,r2,2047
  808244:	20008626 	beq	r4,zero,808460 <_dtoa_r+0x348>
  808248:	d8c01217 	ldw	r3,72(sp)
  80824c:	00800434 	movhi	r2,16
  808250:	10bfffc4 	addi	r2,r2,-1
  808254:	ddc00117 	ldw	r23,4(sp)
  808258:	a884703a 	and	r2,r21,r2
  80825c:	1811883a 	mov	r8,r3
  808260:	124ffc34 	orhi	r9,r2,16368
  808264:	25bf0044 	addi	r22,r4,-1023
  808268:	d8000815 	stw	zero,32(sp)
  80826c:	0005883a 	mov	r2,zero
  808270:	00cffe34 	movhi	r3,16376
  808274:	480b883a 	mov	r5,r9
  808278:	4009883a 	mov	r4,r8
  80827c:	180f883a 	mov	r7,r3
  808280:	100d883a 	mov	r6,r2
  808284:	080512c0 	call	80512c <__subdf3>
  808288:	0218dbf4 	movhi	r8,25455
  80828c:	4210d844 	addi	r8,r8,17249
  808290:	024ff4f4 	movhi	r9,16339
  808294:	4a61e9c4 	addi	r9,r9,-30809
  808298:	480f883a 	mov	r7,r9
  80829c:	400d883a 	mov	r6,r8
  8082a0:	180b883a 	mov	r5,r3
  8082a4:	1009883a 	mov	r4,r2
  8082a8:	080e0f40 	call	80e0f4 <__muldf3>
  8082ac:	0222d874 	movhi	r8,35681
  8082b0:	42322cc4 	addi	r8,r8,-14157
  8082b4:	024ff1f4 	movhi	r9,16327
  8082b8:	4a628a04 	addi	r9,r9,-30168
  8082bc:	480f883a 	mov	r7,r9
  8082c0:	400d883a 	mov	r6,r8
  8082c4:	180b883a 	mov	r5,r3
  8082c8:	1009883a 	mov	r4,r2
  8082cc:	08051ac0 	call	8051ac <__adddf3>
  8082d0:	b009883a 	mov	r4,r22
  8082d4:	1021883a 	mov	r16,r2
  8082d8:	1823883a 	mov	r17,r3
  8082dc:	08052200 	call	805220 <__floatsidf>
  8082e0:	021427f4 	movhi	r8,20639
  8082e4:	421e7ec4 	addi	r8,r8,31227
  8082e8:	024ff4f4 	movhi	r9,16339
  8082ec:	4a5104c4 	addi	r9,r9,17427
  8082f0:	480f883a 	mov	r7,r9
  8082f4:	400d883a 	mov	r6,r8
  8082f8:	180b883a 	mov	r5,r3
  8082fc:	1009883a 	mov	r4,r2
  808300:	080e0f40 	call	80e0f4 <__muldf3>
  808304:	180f883a 	mov	r7,r3
  808308:	880b883a 	mov	r5,r17
  80830c:	100d883a 	mov	r6,r2
  808310:	8009883a 	mov	r4,r16
  808314:	08051ac0 	call	8051ac <__adddf3>
  808318:	1009883a 	mov	r4,r2
  80831c:	180b883a 	mov	r5,r3
  808320:	1021883a 	mov	r16,r2
  808324:	1823883a 	mov	r17,r3
  808328:	08053180 	call	805318 <__fixdfsi>
  80832c:	000d883a 	mov	r6,zero
  808330:	000f883a 	mov	r7,zero
  808334:	8009883a 	mov	r4,r16
  808338:	880b883a 	mov	r5,r17
  80833c:	d8800d15 	stw	r2,52(sp)
  808340:	080e9300 	call	80e930 <__ltdf2>
  808344:	10031716 	blt	r2,zero,808fa4 <_dtoa_r+0xe8c>
  808348:	d8c00d17 	ldw	r3,52(sp)
  80834c:	00800584 	movi	r2,22
  808350:	10c1482e 	bgeu	r2,r3,808874 <_dtoa_r+0x75c>
  808354:	01000044 	movi	r4,1
  808358:	d9000c15 	stw	r4,48(sp)
  80835c:	bd85c83a 	sub	r2,r23,r22
  808360:	11bfffc4 	addi	r6,r2,-1
  808364:	30030b16 	blt	r6,zero,808f94 <_dtoa_r+0xe7c>
  808368:	d9800a15 	stw	r6,40(sp)
  80836c:	d8001115 	stw	zero,68(sp)
  808370:	d8c00d17 	ldw	r3,52(sp)
  808374:	1802ff16 	blt	r3,zero,808f74 <_dtoa_r+0xe5c>
  808378:	d9000a17 	ldw	r4,40(sp)
  80837c:	d8c00915 	stw	r3,36(sp)
  808380:	d8001015 	stw	zero,64(sp)
  808384:	20c9883a 	add	r4,r4,r3
  808388:	d9000a15 	stw	r4,40(sp)
  80838c:	d9001717 	ldw	r4,92(sp)
  808390:	00800244 	movi	r2,9
  808394:	11004636 	bltu	r2,r4,8084b0 <_dtoa_r+0x398>
  808398:	00800144 	movi	r2,5
  80839c:	11020416 	blt	r2,r4,808bb0 <_dtoa_r+0xa98>
  8083a0:	04400044 	movi	r17,1
  8083a4:	d8c01717 	ldw	r3,92(sp)
  8083a8:	00800144 	movi	r2,5
  8083ac:	10c1ed36 	bltu	r2,r3,808b64 <_dtoa_r+0xa4c>
  8083b0:	18c5883a 	add	r2,r3,r3
  8083b4:	1085883a 	add	r2,r2,r2
  8083b8:	00c02074 	movhi	r3,129
  8083bc:	18e0f304 	addi	r3,r3,-31796
  8083c0:	10c5883a 	add	r2,r2,r3
  8083c4:	11000017 	ldw	r4,0(r2)
  8083c8:	2000683a 	jmp	r4
  8083cc:	008084b8 	rdprs	r2,zero,530
  8083d0:	008084b8 	rdprs	r2,zero,530
  8083d4:	00808eb8 	rdprs	r2,zero,570
  8083d8:	00808e90 	cmplti	r2,zero,570
  8083dc:	00808ed4 	movui	r2,571
  8083e0:	00808ee0 	cmpeqi	r2,zero,571
  8083e4:	d9002717 	ldw	r4,156(sp)
  8083e8:	0089c3c4 	movi	r2,9999
  8083ec:	20800015 	stw	r2,0(r4)
  8083f0:	a0001026 	beq	r20,zero,808434 <_dtoa_r+0x31c>
  8083f4:	00c02074 	movhi	r3,129
  8083f8:	18c9ed04 	addi	r3,r3,10164
  8083fc:	d9802917 	ldw	r6,164(sp)
  808400:	303f7926 	beq	r6,zero,8081e8 <_dtoa_r+0xd0>
  808404:	188000c7 	ldb	r2,3(r3)
  808408:	190000c4 	addi	r4,r3,3
  80840c:	1000101e 	bne	r2,zero,808450 <_dtoa_r+0x338>
  808410:	d8802917 	ldw	r2,164(sp)
  808414:	11000015 	stw	r4,0(r2)
  808418:	003f7306 	br	8081e8 <_dtoa_r+0xd0>
  80841c:	00a00034 	movhi	r2,32768
  808420:	10bfffc4 	addi	r2,r2,-1
  808424:	00c00044 	movi	r3,1
  808428:	88aa703a 	and	r21,r17,r2
  80842c:	90c00015 	stw	r3,0(r18)
  808430:	003f5806 	br	808194 <_dtoa_r+0x7c>
  808434:	00800434 	movhi	r2,16
  808438:	10bfffc4 	addi	r2,r2,-1
  80843c:	a884703a 	and	r2,r21,r2
  808440:	103fec1e 	bne	r2,zero,8083f4 <_dtoa_r+0x2dc>
  808444:	00c02074 	movhi	r3,129
  808448:	18c9ea04 	addi	r3,r3,10152
  80844c:	003feb06 	br	8083fc <_dtoa_r+0x2e4>
  808450:	d8802917 	ldw	r2,164(sp)
  808454:	19000204 	addi	r4,r3,8
  808458:	11000015 	stw	r4,0(r2)
  80845c:	003f6206 	br	8081e8 <_dtoa_r+0xd0>
  808460:	ddc00117 	ldw	r23,4(sp)
  808464:	d8800217 	ldw	r2,8(sp)
  808468:	01000804 	movi	r4,32
  80846c:	b8c10c84 	addi	r3,r23,1074
  808470:	18a3883a 	add	r17,r3,r2
  808474:	2441b80e 	bge	r4,r17,808b58 <_dtoa_r+0xa40>
  808478:	00c01004 	movi	r3,64
  80847c:	1c47c83a 	sub	r3,r3,r17
  808480:	88bff804 	addi	r2,r17,-32
  808484:	a8c6983a 	sll	r3,r21,r3
  808488:	a084d83a 	srl	r2,r20,r2
  80848c:	1888b03a 	or	r4,r3,r2
  808490:	080e9b80 	call	80e9b8 <__floatunsidf>
  808494:	1011883a 	mov	r8,r2
  808498:	00bf8434 	movhi	r2,65040
  80849c:	01000044 	movi	r4,1
  8084a0:	10d3883a 	add	r9,r2,r3
  8084a4:	8dbef344 	addi	r22,r17,-1075
  8084a8:	d9000815 	stw	r4,32(sp)
  8084ac:	003f6f06 	br	80826c <_dtoa_r+0x154>
  8084b0:	d8001715 	stw	zero,92(sp)
  8084b4:	04400044 	movi	r17,1
  8084b8:	00bfffc4 	movi	r2,-1
  8084bc:	00c00044 	movi	r3,1
  8084c0:	d8800e15 	stw	r2,56(sp)
  8084c4:	d8002615 	stw	zero,152(sp)
  8084c8:	d8800f15 	stw	r2,60(sp)
  8084cc:	d8c00b15 	stw	r3,44(sp)
  8084d0:	1021883a 	mov	r16,r2
  8084d4:	d8801617 	ldw	r2,88(sp)
  8084d8:	10001115 	stw	zero,68(r2)
  8084dc:	d8801617 	ldw	r2,88(sp)
  8084e0:	11401117 	ldw	r5,68(r2)
  8084e4:	1009883a 	mov	r4,r2
  8084e8:	080b8600 	call	80b860 <_Balloc>
  8084ec:	d8c01617 	ldw	r3,88(sp)
  8084f0:	d8800515 	stw	r2,20(sp)
  8084f4:	18801015 	stw	r2,64(r3)
  8084f8:	00800384 	movi	r2,14
  8084fc:	14006836 	bltu	r2,r16,8086a0 <_dtoa_r+0x588>
  808500:	8805003a 	cmpeq	r2,r17,zero
  808504:	1000661e 	bne	r2,zero,8086a0 <_dtoa_r+0x588>
  808508:	d9000d17 	ldw	r4,52(sp)
  80850c:	0102300e 	bge	zero,r4,808dd0 <_dtoa_r+0xcb8>
  808510:	208003cc 	andi	r2,r4,15
  808514:	100490fa 	slli	r2,r2,3
  808518:	2025d13a 	srai	r18,r4,4
  80851c:	00c02074 	movhi	r3,129
  808520:	18c9ff04 	addi	r3,r3,10236
  808524:	10c5883a 	add	r2,r2,r3
  808528:	90c0040c 	andi	r3,r18,16
  80852c:	14000017 	ldw	r16,0(r2)
  808530:	14400117 	ldw	r17,4(r2)
  808534:	18036a1e 	bne	r3,zero,8092e0 <_dtoa_r+0x11c8>
  808538:	05800084 	movi	r22,2
  80853c:	90001026 	beq	r18,zero,808580 <_dtoa_r+0x468>
  808540:	04c02074 	movhi	r19,129
  808544:	9cca3104 	addi	r19,r19,10436
  808548:	9080004c 	andi	r2,r18,1
  80854c:	1005003a 	cmpeq	r2,r2,zero
  808550:	1000081e 	bne	r2,zero,808574 <_dtoa_r+0x45c>
  808554:	99800017 	ldw	r6,0(r19)
  808558:	99c00117 	ldw	r7,4(r19)
  80855c:	880b883a 	mov	r5,r17
  808560:	8009883a 	mov	r4,r16
  808564:	080e0f40 	call	80e0f4 <__muldf3>
  808568:	1021883a 	mov	r16,r2
  80856c:	b5800044 	addi	r22,r22,1
  808570:	1823883a 	mov	r17,r3
  808574:	9025d07a 	srai	r18,r18,1
  808578:	9cc00204 	addi	r19,r19,8
  80857c:	903ff21e 	bne	r18,zero,808548 <_dtoa_r+0x430>
  808580:	a80b883a 	mov	r5,r21
  808584:	a009883a 	mov	r4,r20
  808588:	880f883a 	mov	r7,r17
  80858c:	800d883a 	mov	r6,r16
  808590:	080e4b80 	call	80e4b8 <__divdf3>
  808594:	1029883a 	mov	r20,r2
  808598:	182b883a 	mov	r21,r3
  80859c:	d8c00c17 	ldw	r3,48(sp)
  8085a0:	1805003a 	cmpeq	r2,r3,zero
  8085a4:	1000081e 	bne	r2,zero,8085c8 <_dtoa_r+0x4b0>
  8085a8:	0005883a 	mov	r2,zero
  8085ac:	00cffc34 	movhi	r3,16368
  8085b0:	180f883a 	mov	r7,r3
  8085b4:	a009883a 	mov	r4,r20
  8085b8:	a80b883a 	mov	r5,r21
  8085bc:	100d883a 	mov	r6,r2
  8085c0:	080e9300 	call	80e930 <__ltdf2>
  8085c4:	1003fe16 	blt	r2,zero,8095c0 <_dtoa_r+0x14a8>
  8085c8:	b009883a 	mov	r4,r22
  8085cc:	08052200 	call	805220 <__floatsidf>
  8085d0:	180b883a 	mov	r5,r3
  8085d4:	1009883a 	mov	r4,r2
  8085d8:	a00d883a 	mov	r6,r20
  8085dc:	a80f883a 	mov	r7,r21
  8085e0:	080e0f40 	call	80e0f4 <__muldf3>
  8085e4:	0011883a 	mov	r8,zero
  8085e8:	02500734 	movhi	r9,16412
  8085ec:	1009883a 	mov	r4,r2
  8085f0:	180b883a 	mov	r5,r3
  8085f4:	480f883a 	mov	r7,r9
  8085f8:	400d883a 	mov	r6,r8
  8085fc:	08051ac0 	call	8051ac <__adddf3>
  808600:	d9000f17 	ldw	r4,60(sp)
  808604:	102d883a 	mov	r22,r2
  808608:	00bf3034 	movhi	r2,64704
  80860c:	18b9883a 	add	fp,r3,r2
  808610:	e02f883a 	mov	r23,fp
  808614:	20028f1e 	bne	r4,zero,809054 <_dtoa_r+0xf3c>
  808618:	0005883a 	mov	r2,zero
  80861c:	00d00534 	movhi	r3,16404
  808620:	a009883a 	mov	r4,r20
  808624:	a80b883a 	mov	r5,r21
  808628:	180f883a 	mov	r7,r3
  80862c:	100d883a 	mov	r6,r2
  808630:	080512c0 	call	80512c <__subdf3>
  808634:	1009883a 	mov	r4,r2
  808638:	e00f883a 	mov	r7,fp
  80863c:	180b883a 	mov	r5,r3
  808640:	b00d883a 	mov	r6,r22
  808644:	1025883a 	mov	r18,r2
  808648:	1827883a 	mov	r19,r3
  80864c:	080e8200 	call	80e820 <__gtdf2>
  808650:	00834f16 	blt	zero,r2,809390 <_dtoa_r+0x1278>
  808654:	e0e0003c 	xorhi	r3,fp,32768
  808658:	9009883a 	mov	r4,r18
  80865c:	980b883a 	mov	r5,r19
  808660:	180f883a 	mov	r7,r3
  808664:	b00d883a 	mov	r6,r22
  808668:	080e9300 	call	80e930 <__ltdf2>
  80866c:	1000080e 	bge	r2,zero,808690 <_dtoa_r+0x578>
  808670:	0027883a 	mov	r19,zero
  808674:	0025883a 	mov	r18,zero
  808678:	d8802617 	ldw	r2,152(sp)
  80867c:	df000517 	ldw	fp,20(sp)
  808680:	d8000615 	stw	zero,24(sp)
  808684:	0084303a 	nor	r2,zero,r2
  808688:	d8800d15 	stw	r2,52(sp)
  80868c:	00019b06 	br	808cfc <_dtoa_r+0xbe4>
  808690:	d9801217 	ldw	r6,72(sp)
  808694:	d8801317 	ldw	r2,76(sp)
  808698:	3029883a 	mov	r20,r6
  80869c:	102b883a 	mov	r21,r2
  8086a0:	d8c00217 	ldw	r3,8(sp)
  8086a4:	18008516 	blt	r3,zero,8088bc <_dtoa_r+0x7a4>
  8086a8:	d9000d17 	ldw	r4,52(sp)
  8086ac:	00800384 	movi	r2,14
  8086b0:	11008216 	blt	r2,r4,8088bc <_dtoa_r+0x7a4>
  8086b4:	200490fa 	slli	r2,r4,3
  8086b8:	d9802617 	ldw	r6,152(sp)
  8086bc:	00c02074 	movhi	r3,129
  8086c0:	18c9ff04 	addi	r3,r3,10236
  8086c4:	10c5883a 	add	r2,r2,r3
  8086c8:	14800017 	ldw	r18,0(r2)
  8086cc:	14c00117 	ldw	r19,4(r2)
  8086d0:	30031e16 	blt	r6,zero,80934c <_dtoa_r+0x1234>
  8086d4:	d9000517 	ldw	r4,20(sp)
  8086d8:	d8c00f17 	ldw	r3,60(sp)
  8086dc:	a823883a 	mov	r17,r21
  8086e0:	a021883a 	mov	r16,r20
  8086e4:	192b883a 	add	r21,r3,r4
  8086e8:	2039883a 	mov	fp,r4
  8086ec:	00000f06 	br	80872c <_dtoa_r+0x614>
  8086f0:	0005883a 	mov	r2,zero
  8086f4:	00d00934 	movhi	r3,16420
  8086f8:	5009883a 	mov	r4,r10
  8086fc:	580b883a 	mov	r5,r11
  808700:	180f883a 	mov	r7,r3
  808704:	100d883a 	mov	r6,r2
  808708:	080e0f40 	call	80e0f4 <__muldf3>
  80870c:	180b883a 	mov	r5,r3
  808710:	000d883a 	mov	r6,zero
  808714:	000f883a 	mov	r7,zero
  808718:	1009883a 	mov	r4,r2
  80871c:	1021883a 	mov	r16,r2
  808720:	1823883a 	mov	r17,r3
  808724:	080e7980 	call	80e798 <__nedf2>
  808728:	10004526 	beq	r2,zero,808840 <_dtoa_r+0x728>
  80872c:	900d883a 	mov	r6,r18
  808730:	980f883a 	mov	r7,r19
  808734:	8009883a 	mov	r4,r16
  808738:	880b883a 	mov	r5,r17
  80873c:	080e4b80 	call	80e4b8 <__divdf3>
  808740:	180b883a 	mov	r5,r3
  808744:	1009883a 	mov	r4,r2
  808748:	08053180 	call	805318 <__fixdfsi>
  80874c:	1009883a 	mov	r4,r2
  808750:	1029883a 	mov	r20,r2
  808754:	08052200 	call	805220 <__floatsidf>
  808758:	180f883a 	mov	r7,r3
  80875c:	9009883a 	mov	r4,r18
  808760:	980b883a 	mov	r5,r19
  808764:	100d883a 	mov	r6,r2
  808768:	080e0f40 	call	80e0f4 <__muldf3>
  80876c:	180f883a 	mov	r7,r3
  808770:	880b883a 	mov	r5,r17
  808774:	8009883a 	mov	r4,r16
  808778:	100d883a 	mov	r6,r2
  80877c:	080512c0 	call	80512c <__subdf3>
  808780:	1015883a 	mov	r10,r2
  808784:	a0800c04 	addi	r2,r20,48
  808788:	e0800005 	stb	r2,0(fp)
  80878c:	e7000044 	addi	fp,fp,1
  808790:	1817883a 	mov	r11,r3
  808794:	e57fd61e 	bne	fp,r21,8086f0 <_dtoa_r+0x5d8>
  808798:	500d883a 	mov	r6,r10
  80879c:	180f883a 	mov	r7,r3
  8087a0:	5009883a 	mov	r4,r10
  8087a4:	180b883a 	mov	r5,r3
  8087a8:	08051ac0 	call	8051ac <__adddf3>
  8087ac:	100d883a 	mov	r6,r2
  8087b0:	9009883a 	mov	r4,r18
  8087b4:	980b883a 	mov	r5,r19
  8087b8:	180f883a 	mov	r7,r3
  8087bc:	1021883a 	mov	r16,r2
  8087c0:	1823883a 	mov	r17,r3
  8087c4:	080e9300 	call	80e930 <__ltdf2>
  8087c8:	10000816 	blt	r2,zero,8087ec <_dtoa_r+0x6d4>
  8087cc:	980b883a 	mov	r5,r19
  8087d0:	800d883a 	mov	r6,r16
  8087d4:	880f883a 	mov	r7,r17
  8087d8:	9009883a 	mov	r4,r18
  8087dc:	080e7100 	call	80e710 <__eqdf2>
  8087e0:	1000171e 	bne	r2,zero,808840 <_dtoa_r+0x728>
  8087e4:	a080004c 	andi	r2,r20,1
  8087e8:	10001526 	beq	r2,zero,808840 <_dtoa_r+0x728>
  8087ec:	d8800d17 	ldw	r2,52(sp)
  8087f0:	d8800415 	stw	r2,16(sp)
  8087f4:	e009883a 	mov	r4,fp
  8087f8:	213fffc4 	addi	r4,r4,-1
  8087fc:	20c00007 	ldb	r3,0(r4)
  808800:	00800e44 	movi	r2,57
  808804:	1880081e 	bne	r3,r2,808828 <_dtoa_r+0x710>
  808808:	d8800517 	ldw	r2,20(sp)
  80880c:	113ffa1e 	bne	r2,r4,8087f8 <_dtoa_r+0x6e0>
  808810:	d8c00417 	ldw	r3,16(sp)
  808814:	d9800517 	ldw	r6,20(sp)
  808818:	00800c04 	movi	r2,48
  80881c:	18c00044 	addi	r3,r3,1
  808820:	d8c00415 	stw	r3,16(sp)
  808824:	30800005 	stb	r2,0(r6)
  808828:	20800003 	ldbu	r2,0(r4)
  80882c:	d8c00417 	ldw	r3,16(sp)
  808830:	27000044 	addi	fp,r4,1
  808834:	10800044 	addi	r2,r2,1
  808838:	d8c00d15 	stw	r3,52(sp)
  80883c:	20800005 	stb	r2,0(r4)
  808840:	d9001617 	ldw	r4,88(sp)
  808844:	d9400717 	ldw	r5,28(sp)
  808848:	080b2e00 	call	80b2e0 <_Bfree>
  80884c:	e0000005 	stb	zero,0(fp)
  808850:	d9800d17 	ldw	r6,52(sp)
  808854:	d8c02717 	ldw	r3,156(sp)
  808858:	d9002917 	ldw	r4,164(sp)
  80885c:	30800044 	addi	r2,r6,1
  808860:	18800015 	stw	r2,0(r3)
  808864:	20029c26 	beq	r4,zero,8092d8 <_dtoa_r+0x11c0>
  808868:	d8c00517 	ldw	r3,20(sp)
  80886c:	27000015 	stw	fp,0(r4)
  808870:	003e5d06 	br	8081e8 <_dtoa_r+0xd0>
  808874:	d9800d17 	ldw	r6,52(sp)
  808878:	00c02074 	movhi	r3,129
  80887c:	18c9ff04 	addi	r3,r3,10236
  808880:	d9001217 	ldw	r4,72(sp)
  808884:	300490fa 	slli	r2,r6,3
  808888:	d9401317 	ldw	r5,76(sp)
  80888c:	10c5883a 	add	r2,r2,r3
  808890:	12000017 	ldw	r8,0(r2)
  808894:	12400117 	ldw	r9,4(r2)
  808898:	400d883a 	mov	r6,r8
  80889c:	480f883a 	mov	r7,r9
  8088a0:	080e9300 	call	80e930 <__ltdf2>
  8088a4:	1000030e 	bge	r2,zero,8088b4 <_dtoa_r+0x79c>
  8088a8:	d8800d17 	ldw	r2,52(sp)
  8088ac:	10bfffc4 	addi	r2,r2,-1
  8088b0:	d8800d15 	stw	r2,52(sp)
  8088b4:	d8000c15 	stw	zero,48(sp)
  8088b8:	003ea806 	br	80835c <_dtoa_r+0x244>
  8088bc:	d9000b17 	ldw	r4,44(sp)
  8088c0:	202cc03a 	cmpne	r22,r4,zero
  8088c4:	b000c71e 	bne	r22,zero,808be4 <_dtoa_r+0xacc>
  8088c8:	dc001117 	ldw	r16,68(sp)
  8088cc:	dc801017 	ldw	r18,64(sp)
  8088d0:	0027883a 	mov	r19,zero
  8088d4:	04000b0e 	bge	zero,r16,808904 <_dtoa_r+0x7ec>
  8088d8:	d8c00a17 	ldw	r3,40(sp)
  8088dc:	00c0090e 	bge	zero,r3,808904 <_dtoa_r+0x7ec>
  8088e0:	8005883a 	mov	r2,r16
  8088e4:	1c011316 	blt	r3,r16,808d34 <_dtoa_r+0xc1c>
  8088e8:	d9000a17 	ldw	r4,40(sp)
  8088ec:	d9801117 	ldw	r6,68(sp)
  8088f0:	80a1c83a 	sub	r16,r16,r2
  8088f4:	2089c83a 	sub	r4,r4,r2
  8088f8:	308dc83a 	sub	r6,r6,r2
  8088fc:	d9000a15 	stw	r4,40(sp)
  808900:	d9801115 	stw	r6,68(sp)
  808904:	d8801017 	ldw	r2,64(sp)
  808908:	0080150e 	bge	zero,r2,808960 <_dtoa_r+0x848>
  80890c:	d8c00b17 	ldw	r3,44(sp)
  808910:	1805003a 	cmpeq	r2,r3,zero
  808914:	1001c91e 	bne	r2,zero,80903c <_dtoa_r+0xf24>
  808918:	04800e0e 	bge	zero,r18,808954 <_dtoa_r+0x83c>
  80891c:	d9001617 	ldw	r4,88(sp)
  808920:	980b883a 	mov	r5,r19
  808924:	900d883a 	mov	r6,r18
  808928:	080c12c0 	call	80c12c <__pow5mult>
  80892c:	d9001617 	ldw	r4,88(sp)
  808930:	d9800717 	ldw	r6,28(sp)
  808934:	100b883a 	mov	r5,r2
  808938:	1027883a 	mov	r19,r2
  80893c:	080bd700 	call	80bd70 <__multiply>
  808940:	d9001617 	ldw	r4,88(sp)
  808944:	d9400717 	ldw	r5,28(sp)
  808948:	1023883a 	mov	r17,r2
  80894c:	080b2e00 	call	80b2e0 <_Bfree>
  808950:	dc400715 	stw	r17,28(sp)
  808954:	d9001017 	ldw	r4,64(sp)
  808958:	248dc83a 	sub	r6,r4,r18
  80895c:	30010e1e 	bne	r6,zero,808d98 <_dtoa_r+0xc80>
  808960:	d9001617 	ldw	r4,88(sp)
  808964:	04400044 	movi	r17,1
  808968:	880b883a 	mov	r5,r17
  80896c:	080bfc40 	call	80bfc4 <__i2b>
  808970:	d9800917 	ldw	r6,36(sp)
  808974:	1025883a 	mov	r18,r2
  808978:	0180040e 	bge	zero,r6,80898c <_dtoa_r+0x874>
  80897c:	d9001617 	ldw	r4,88(sp)
  808980:	100b883a 	mov	r5,r2
  808984:	080c12c0 	call	80c12c <__pow5mult>
  808988:	1025883a 	mov	r18,r2
  80898c:	d8801717 	ldw	r2,92(sp)
  808990:	8880f30e 	bge	r17,r2,808d60 <_dtoa_r+0xc48>
  808994:	0023883a 	mov	r17,zero
  808998:	d9800917 	ldw	r6,36(sp)
  80899c:	30019e1e 	bne	r6,zero,809018 <_dtoa_r+0xf00>
  8089a0:	00c00044 	movi	r3,1
  8089a4:	d9000a17 	ldw	r4,40(sp)
  8089a8:	20c5883a 	add	r2,r4,r3
  8089ac:	10c007cc 	andi	r3,r2,31
  8089b0:	1800841e 	bne	r3,zero,808bc4 <_dtoa_r+0xaac>
  8089b4:	00800704 	movi	r2,28
  8089b8:	d9000a17 	ldw	r4,40(sp)
  8089bc:	d9801117 	ldw	r6,68(sp)
  8089c0:	80a1883a 	add	r16,r16,r2
  8089c4:	2089883a 	add	r4,r4,r2
  8089c8:	308d883a 	add	r6,r6,r2
  8089cc:	d9000a15 	stw	r4,40(sp)
  8089d0:	d9801115 	stw	r6,68(sp)
  8089d4:	d8801117 	ldw	r2,68(sp)
  8089d8:	0080050e 	bge	zero,r2,8089f0 <_dtoa_r+0x8d8>
  8089dc:	d9400717 	ldw	r5,28(sp)
  8089e0:	d9001617 	ldw	r4,88(sp)
  8089e4:	100d883a 	mov	r6,r2
  8089e8:	080bc240 	call	80bc24 <__lshift>
  8089ec:	d8800715 	stw	r2,28(sp)
  8089f0:	d8c00a17 	ldw	r3,40(sp)
  8089f4:	00c0050e 	bge	zero,r3,808a0c <_dtoa_r+0x8f4>
  8089f8:	d9001617 	ldw	r4,88(sp)
  8089fc:	900b883a 	mov	r5,r18
  808a00:	180d883a 	mov	r6,r3
  808a04:	080bc240 	call	80bc24 <__lshift>
  808a08:	1025883a 	mov	r18,r2
  808a0c:	d9000c17 	ldw	r4,48(sp)
  808a10:	2005003a 	cmpeq	r2,r4,zero
  808a14:	10016f26 	beq	r2,zero,808fd4 <_dtoa_r+0xebc>
  808a18:	d9000f17 	ldw	r4,60(sp)
  808a1c:	0102170e 	bge	zero,r4,80927c <_dtoa_r+0x1164>
  808a20:	d9800b17 	ldw	r6,44(sp)
  808a24:	3005003a 	cmpeq	r2,r6,zero
  808a28:	1000881e 	bne	r2,zero,808c4c <_dtoa_r+0xb34>
  808a2c:	0400050e 	bge	zero,r16,808a44 <_dtoa_r+0x92c>
  808a30:	d9001617 	ldw	r4,88(sp)
  808a34:	980b883a 	mov	r5,r19
  808a38:	800d883a 	mov	r6,r16
  808a3c:	080bc240 	call	80bc24 <__lshift>
  808a40:	1027883a 	mov	r19,r2
  808a44:	8804c03a 	cmpne	r2,r17,zero
  808a48:	1002541e 	bne	r2,zero,80939c <_dtoa_r+0x1284>
  808a4c:	980b883a 	mov	r5,r19
  808a50:	dd800517 	ldw	r22,20(sp)
  808a54:	dcc00615 	stw	r19,24(sp)
  808a58:	a700004c 	andi	fp,r20,1
  808a5c:	2827883a 	mov	r19,r5
  808a60:	d9000717 	ldw	r4,28(sp)
  808a64:	900b883a 	mov	r5,r18
  808a68:	0807ed40 	call	807ed4 <quorem>
  808a6c:	d9000717 	ldw	r4,28(sp)
  808a70:	d9400617 	ldw	r5,24(sp)
  808a74:	1023883a 	mov	r17,r2
  808a78:	8dc00c04 	addi	r23,r17,48
  808a7c:	080b43c0 	call	80b43c <__mcmp>
  808a80:	d9001617 	ldw	r4,88(sp)
  808a84:	900b883a 	mov	r5,r18
  808a88:	980d883a 	mov	r6,r19
  808a8c:	1029883a 	mov	r20,r2
  808a90:	080ba980 	call	80ba98 <__mdiff>
  808a94:	102b883a 	mov	r21,r2
  808a98:	10800317 	ldw	r2,12(r2)
  808a9c:	1001281e 	bne	r2,zero,808f40 <_dtoa_r+0xe28>
  808aa0:	d9000717 	ldw	r4,28(sp)
  808aa4:	a80b883a 	mov	r5,r21
  808aa8:	080b43c0 	call	80b43c <__mcmp>
  808aac:	d9001617 	ldw	r4,88(sp)
  808ab0:	1021883a 	mov	r16,r2
  808ab4:	a80b883a 	mov	r5,r21
  808ab8:	080b2e00 	call	80b2e0 <_Bfree>
  808abc:	8000041e 	bne	r16,zero,808ad0 <_dtoa_r+0x9b8>
  808ac0:	d8801717 	ldw	r2,92(sp)
  808ac4:	1000021e 	bne	r2,zero,808ad0 <_dtoa_r+0x9b8>
  808ac8:	e004c03a 	cmpne	r2,fp,zero
  808acc:	10011726 	beq	r2,zero,808f2c <_dtoa_r+0xe14>
  808ad0:	a0010616 	blt	r20,zero,808eec <_dtoa_r+0xdd4>
  808ad4:	a000041e 	bne	r20,zero,808ae8 <_dtoa_r+0x9d0>
  808ad8:	d8c01717 	ldw	r3,92(sp)
  808adc:	1800021e 	bne	r3,zero,808ae8 <_dtoa_r+0x9d0>
  808ae0:	e004c03a 	cmpne	r2,fp,zero
  808ae4:	10010126 	beq	r2,zero,808eec <_dtoa_r+0xdd4>
  808ae8:	04023d16 	blt	zero,r16,8093e0 <_dtoa_r+0x12c8>
  808aec:	b5c00005 	stb	r23,0(r22)
  808af0:	d9800517 	ldw	r6,20(sp)
  808af4:	d9000f17 	ldw	r4,60(sp)
  808af8:	b5800044 	addi	r22,r22,1
  808afc:	3105883a 	add	r2,r6,r4
  808b00:	b0806526 	beq	r22,r2,808c98 <_dtoa_r+0xb80>
  808b04:	d9400717 	ldw	r5,28(sp)
  808b08:	d9001617 	ldw	r4,88(sp)
  808b0c:	01800284 	movi	r6,10
  808b10:	000f883a 	mov	r7,zero
  808b14:	080c0000 	call	80c000 <__multadd>
  808b18:	d8800715 	stw	r2,28(sp)
  808b1c:	d8800617 	ldw	r2,24(sp)
  808b20:	14c10c26 	beq	r2,r19,808f54 <_dtoa_r+0xe3c>
  808b24:	d9400617 	ldw	r5,24(sp)
  808b28:	d9001617 	ldw	r4,88(sp)
  808b2c:	01800284 	movi	r6,10
  808b30:	000f883a 	mov	r7,zero
  808b34:	080c0000 	call	80c000 <__multadd>
  808b38:	d9001617 	ldw	r4,88(sp)
  808b3c:	980b883a 	mov	r5,r19
  808b40:	01800284 	movi	r6,10
  808b44:	000f883a 	mov	r7,zero
  808b48:	d8800615 	stw	r2,24(sp)
  808b4c:	080c0000 	call	80c000 <__multadd>
  808b50:	1027883a 	mov	r19,r2
  808b54:	003fc206 	br	808a60 <_dtoa_r+0x948>
  808b58:	2445c83a 	sub	r2,r4,r17
  808b5c:	a088983a 	sll	r4,r20,r2
  808b60:	003e4b06 	br	808490 <_dtoa_r+0x378>
  808b64:	01bfffc4 	movi	r6,-1
  808b68:	00800044 	movi	r2,1
  808b6c:	d9800e15 	stw	r6,56(sp)
  808b70:	d9800f15 	stw	r6,60(sp)
  808b74:	d8800b15 	stw	r2,44(sp)
  808b78:	d8c01617 	ldw	r3,88(sp)
  808b7c:	008005c4 	movi	r2,23
  808b80:	18001115 	stw	zero,68(r3)
  808b84:	1580082e 	bgeu	r2,r22,808ba8 <_dtoa_r+0xa90>
  808b88:	00c00104 	movi	r3,4
  808b8c:	0009883a 	mov	r4,zero
  808b90:	18c7883a 	add	r3,r3,r3
  808b94:	18800504 	addi	r2,r3,20
  808b98:	21000044 	addi	r4,r4,1
  808b9c:	b0bffc2e 	bgeu	r22,r2,808b90 <_dtoa_r+0xa78>
  808ba0:	d9801617 	ldw	r6,88(sp)
  808ba4:	31001115 	stw	r4,68(r6)
  808ba8:	dc000f17 	ldw	r16,60(sp)
  808bac:	003e4b06 	br	8084dc <_dtoa_r+0x3c4>
  808bb0:	d9801717 	ldw	r6,92(sp)
  808bb4:	0023883a 	mov	r17,zero
  808bb8:	31bfff04 	addi	r6,r6,-4
  808bbc:	d9801715 	stw	r6,92(sp)
  808bc0:	003df806 	br	8083a4 <_dtoa_r+0x28c>
  808bc4:	00800804 	movi	r2,32
  808bc8:	10c9c83a 	sub	r4,r2,r3
  808bcc:	00c00104 	movi	r3,4
  808bd0:	19005a16 	blt	r3,r4,808d3c <_dtoa_r+0xc24>
  808bd4:	008000c4 	movi	r2,3
  808bd8:	113f7e16 	blt	r2,r4,8089d4 <_dtoa_r+0x8bc>
  808bdc:	20800704 	addi	r2,r4,28
  808be0:	003f7506 	br	8089b8 <_dtoa_r+0x8a0>
  808be4:	d9801717 	ldw	r6,92(sp)
  808be8:	00800044 	movi	r2,1
  808bec:	1180a10e 	bge	r2,r6,808e74 <_dtoa_r+0xd5c>
  808bf0:	d9800f17 	ldw	r6,60(sp)
  808bf4:	d8c01017 	ldw	r3,64(sp)
  808bf8:	30bfffc4 	addi	r2,r6,-1
  808bfc:	1881c616 	blt	r3,r2,809318 <_dtoa_r+0x1200>
  808c00:	18a5c83a 	sub	r18,r3,r2
  808c04:	d8800f17 	ldw	r2,60(sp)
  808c08:	10026216 	blt	r2,zero,809594 <_dtoa_r+0x147c>
  808c0c:	dc001117 	ldw	r16,68(sp)
  808c10:	1007883a 	mov	r3,r2
  808c14:	d9800a17 	ldw	r6,40(sp)
  808c18:	d8801117 	ldw	r2,68(sp)
  808c1c:	d9001617 	ldw	r4,88(sp)
  808c20:	30cd883a 	add	r6,r6,r3
  808c24:	10c5883a 	add	r2,r2,r3
  808c28:	01400044 	movi	r5,1
  808c2c:	d9800a15 	stw	r6,40(sp)
  808c30:	d8801115 	stw	r2,68(sp)
  808c34:	080bfc40 	call	80bfc4 <__i2b>
  808c38:	1027883a 	mov	r19,r2
  808c3c:	003f2506 	br	8088d4 <_dtoa_r+0x7bc>
  808c40:	00c02074 	movhi	r3,129
  808c44:	18c94104 	addi	r3,r3,9476
  808c48:	003d6706 	br	8081e8 <_dtoa_r+0xd0>
  808c4c:	dd800517 	ldw	r22,20(sp)
  808c50:	04000044 	movi	r16,1
  808c54:	00000706 	br	808c74 <_dtoa_r+0xb5c>
  808c58:	d9400717 	ldw	r5,28(sp)
  808c5c:	d9001617 	ldw	r4,88(sp)
  808c60:	01800284 	movi	r6,10
  808c64:	000f883a 	mov	r7,zero
  808c68:	080c0000 	call	80c000 <__multadd>
  808c6c:	d8800715 	stw	r2,28(sp)
  808c70:	84000044 	addi	r16,r16,1
  808c74:	d9000717 	ldw	r4,28(sp)
  808c78:	900b883a 	mov	r5,r18
  808c7c:	0807ed40 	call	807ed4 <quorem>
  808c80:	15c00c04 	addi	r23,r2,48
  808c84:	b5c00005 	stb	r23,0(r22)
  808c88:	d8c00f17 	ldw	r3,60(sp)
  808c8c:	b5800044 	addi	r22,r22,1
  808c90:	80fff116 	blt	r16,r3,808c58 <_dtoa_r+0xb40>
  808c94:	d8000615 	stw	zero,24(sp)
  808c98:	d9400717 	ldw	r5,28(sp)
  808c9c:	d9001617 	ldw	r4,88(sp)
  808ca0:	01800044 	movi	r6,1
  808ca4:	080bc240 	call	80bc24 <__lshift>
  808ca8:	1009883a 	mov	r4,r2
  808cac:	900b883a 	mov	r5,r18
  808cb0:	d8800715 	stw	r2,28(sp)
  808cb4:	080b43c0 	call	80b43c <__mcmp>
  808cb8:	00803c0e 	bge	zero,r2,808dac <_dtoa_r+0xc94>
  808cbc:	b009883a 	mov	r4,r22
  808cc0:	213fffc4 	addi	r4,r4,-1
  808cc4:	21400003 	ldbu	r5,0(r4)
  808cc8:	00800e44 	movi	r2,57
  808ccc:	28c03fcc 	andi	r3,r5,255
  808cd0:	18c0201c 	xori	r3,r3,128
  808cd4:	18ffe004 	addi	r3,r3,-128
  808cd8:	1881981e 	bne	r3,r2,80933c <_dtoa_r+0x1224>
  808cdc:	d9800517 	ldw	r6,20(sp)
  808ce0:	21bff71e 	bne	r4,r6,808cc0 <_dtoa_r+0xba8>
  808ce4:	d8800d17 	ldw	r2,52(sp)
  808ce8:	37000044 	addi	fp,r6,1
  808cec:	10800044 	addi	r2,r2,1
  808cf0:	d8800d15 	stw	r2,52(sp)
  808cf4:	00800c44 	movi	r2,49
  808cf8:	30800005 	stb	r2,0(r6)
  808cfc:	d9001617 	ldw	r4,88(sp)
  808d00:	900b883a 	mov	r5,r18
  808d04:	080b2e00 	call	80b2e0 <_Bfree>
  808d08:	983ecd26 	beq	r19,zero,808840 <_dtoa_r+0x728>
  808d0c:	d8c00617 	ldw	r3,24(sp)
  808d10:	18000426 	beq	r3,zero,808d24 <_dtoa_r+0xc0c>
  808d14:	1cc00326 	beq	r3,r19,808d24 <_dtoa_r+0xc0c>
  808d18:	d9001617 	ldw	r4,88(sp)
  808d1c:	180b883a 	mov	r5,r3
  808d20:	080b2e00 	call	80b2e0 <_Bfree>
  808d24:	d9001617 	ldw	r4,88(sp)
  808d28:	980b883a 	mov	r5,r19
  808d2c:	080b2e00 	call	80b2e0 <_Bfree>
  808d30:	003ec306 	br	808840 <_dtoa_r+0x728>
  808d34:	1805883a 	mov	r2,r3
  808d38:	003eeb06 	br	8088e8 <_dtoa_r+0x7d0>
  808d3c:	d9800a17 	ldw	r6,40(sp)
  808d40:	d8c01117 	ldw	r3,68(sp)
  808d44:	20bfff04 	addi	r2,r4,-4
  808d48:	308d883a 	add	r6,r6,r2
  808d4c:	1887883a 	add	r3,r3,r2
  808d50:	80a1883a 	add	r16,r16,r2
  808d54:	d9800a15 	stw	r6,40(sp)
  808d58:	d8c01115 	stw	r3,68(sp)
  808d5c:	003f1d06 	br	8089d4 <_dtoa_r+0x8bc>
  808d60:	a03f0c1e 	bne	r20,zero,808994 <_dtoa_r+0x87c>
  808d64:	00800434 	movhi	r2,16
  808d68:	10bfffc4 	addi	r2,r2,-1
  808d6c:	a884703a 	and	r2,r21,r2
  808d70:	103f081e 	bne	r2,zero,808994 <_dtoa_r+0x87c>
  808d74:	a89ffc2c 	andhi	r2,r21,32752
  808d78:	103f0626 	beq	r2,zero,808994 <_dtoa_r+0x87c>
  808d7c:	d8c01117 	ldw	r3,68(sp)
  808d80:	d9000a17 	ldw	r4,40(sp)
  808d84:	18c00044 	addi	r3,r3,1
  808d88:	21000044 	addi	r4,r4,1
  808d8c:	d8c01115 	stw	r3,68(sp)
  808d90:	d9000a15 	stw	r4,40(sp)
  808d94:	003f0006 	br	808998 <_dtoa_r+0x880>
  808d98:	d9400717 	ldw	r5,28(sp)
  808d9c:	d9001617 	ldw	r4,88(sp)
  808da0:	080c12c0 	call	80c12c <__pow5mult>
  808da4:	d8800715 	stw	r2,28(sp)
  808da8:	003eed06 	br	808960 <_dtoa_r+0x848>
  808dac:	1000021e 	bne	r2,zero,808db8 <_dtoa_r+0xca0>
  808db0:	b880004c 	andi	r2,r23,1
  808db4:	103fc11e 	bne	r2,zero,808cbc <_dtoa_r+0xba4>
  808db8:	b5bfffc4 	addi	r22,r22,-1
  808dbc:	b0c00007 	ldb	r3,0(r22)
  808dc0:	00800c04 	movi	r2,48
  808dc4:	18bffc26 	beq	r3,r2,808db8 <_dtoa_r+0xca0>
  808dc8:	b7000044 	addi	fp,r22,1
  808dcc:	003fcb06 	br	808cfc <_dtoa_r+0xbe4>
  808dd0:	d9800d17 	ldw	r6,52(sp)
  808dd4:	018fc83a 	sub	r7,zero,r6
  808dd8:	3801f726 	beq	r7,zero,8095b8 <_dtoa_r+0x14a0>
  808ddc:	398003cc 	andi	r6,r7,15
  808de0:	300c90fa 	slli	r6,r6,3
  808de4:	01402074 	movhi	r5,129
  808de8:	2949ff04 	addi	r5,r5,10236
  808dec:	d9001217 	ldw	r4,72(sp)
  808df0:	314d883a 	add	r6,r6,r5
  808df4:	30c00117 	ldw	r3,4(r6)
  808df8:	30800017 	ldw	r2,0(r6)
  808dfc:	d9401317 	ldw	r5,76(sp)
  808e00:	3821d13a 	srai	r16,r7,4
  808e04:	100d883a 	mov	r6,r2
  808e08:	180f883a 	mov	r7,r3
  808e0c:	080e0f40 	call	80e0f4 <__muldf3>
  808e10:	1011883a 	mov	r8,r2
  808e14:	1813883a 	mov	r9,r3
  808e18:	1029883a 	mov	r20,r2
  808e1c:	182b883a 	mov	r21,r3
  808e20:	8001e526 	beq	r16,zero,8095b8 <_dtoa_r+0x14a0>
  808e24:	05800084 	movi	r22,2
  808e28:	04402074 	movhi	r17,129
  808e2c:	8c4a3104 	addi	r17,r17,10436
  808e30:	8080004c 	andi	r2,r16,1
  808e34:	1005003a 	cmpeq	r2,r2,zero
  808e38:	1000081e 	bne	r2,zero,808e5c <_dtoa_r+0xd44>
  808e3c:	89800017 	ldw	r6,0(r17)
  808e40:	89c00117 	ldw	r7,4(r17)
  808e44:	480b883a 	mov	r5,r9
  808e48:	4009883a 	mov	r4,r8
  808e4c:	080e0f40 	call	80e0f4 <__muldf3>
  808e50:	1011883a 	mov	r8,r2
  808e54:	b5800044 	addi	r22,r22,1
  808e58:	1813883a 	mov	r9,r3
  808e5c:	8021d07a 	srai	r16,r16,1
  808e60:	8c400204 	addi	r17,r17,8
  808e64:	803ff21e 	bne	r16,zero,808e30 <_dtoa_r+0xd18>
  808e68:	4029883a 	mov	r20,r8
  808e6c:	482b883a 	mov	r21,r9
  808e70:	003dca06 	br	80859c <_dtoa_r+0x484>
  808e74:	d9000817 	ldw	r4,32(sp)
  808e78:	2005003a 	cmpeq	r2,r4,zero
  808e7c:	1001f61e 	bne	r2,zero,809658 <_dtoa_r+0x1540>
  808e80:	dc001117 	ldw	r16,68(sp)
  808e84:	dc801017 	ldw	r18,64(sp)
  808e88:	18c10cc4 	addi	r3,r3,1075
  808e8c:	003f6106 	br	808c14 <_dtoa_r+0xafc>
  808e90:	d8000b15 	stw	zero,44(sp)
  808e94:	d9802617 	ldw	r6,152(sp)
  808e98:	d8c00d17 	ldw	r3,52(sp)
  808e9c:	30800044 	addi	r2,r6,1
  808ea0:	18ad883a 	add	r22,r3,r2
  808ea4:	b13fffc4 	addi	r4,r22,-1
  808ea8:	d9000e15 	stw	r4,56(sp)
  808eac:	0581f60e 	bge	zero,r22,809688 <_dtoa_r+0x1570>
  808eb0:	dd800f15 	stw	r22,60(sp)
  808eb4:	003f3006 	br	808b78 <_dtoa_r+0xa60>
  808eb8:	d8000b15 	stw	zero,44(sp)
  808ebc:	d9002617 	ldw	r4,152(sp)
  808ec0:	0101eb0e 	bge	zero,r4,809670 <_dtoa_r+0x1558>
  808ec4:	202d883a 	mov	r22,r4
  808ec8:	d9000e15 	stw	r4,56(sp)
  808ecc:	d9000f15 	stw	r4,60(sp)
  808ed0:	003f2906 	br	808b78 <_dtoa_r+0xa60>
  808ed4:	01800044 	movi	r6,1
  808ed8:	d9800b15 	stw	r6,44(sp)
  808edc:	003ff706 	br	808ebc <_dtoa_r+0xda4>
  808ee0:	01000044 	movi	r4,1
  808ee4:	d9000b15 	stw	r4,44(sp)
  808ee8:	003fea06 	br	808e94 <_dtoa_r+0xd7c>
  808eec:	04000c0e 	bge	zero,r16,808f20 <_dtoa_r+0xe08>
  808ef0:	d9400717 	ldw	r5,28(sp)
  808ef4:	d9001617 	ldw	r4,88(sp)
  808ef8:	01800044 	movi	r6,1
  808efc:	080bc240 	call	80bc24 <__lshift>
  808f00:	1009883a 	mov	r4,r2
  808f04:	900b883a 	mov	r5,r18
  808f08:	d8800715 	stw	r2,28(sp)
  808f0c:	080b43c0 	call	80b43c <__mcmp>
  808f10:	0081e00e 	bge	zero,r2,809694 <_dtoa_r+0x157c>
  808f14:	bdc00044 	addi	r23,r23,1
  808f18:	00800e84 	movi	r2,58
  808f1c:	b881a226 	beq	r23,r2,8095a8 <_dtoa_r+0x1490>
  808f20:	b7000044 	addi	fp,r22,1
  808f24:	b5c00005 	stb	r23,0(r22)
  808f28:	003f7406 	br	808cfc <_dtoa_r+0xbe4>
  808f2c:	00800e44 	movi	r2,57
  808f30:	b8819d26 	beq	r23,r2,8095a8 <_dtoa_r+0x1490>
  808f34:	053ffa0e 	bge	zero,r20,808f20 <_dtoa_r+0xe08>
  808f38:	8dc00c44 	addi	r23,r17,49
  808f3c:	003ff806 	br	808f20 <_dtoa_r+0xe08>
  808f40:	d9001617 	ldw	r4,88(sp)
  808f44:	a80b883a 	mov	r5,r21
  808f48:	04000044 	movi	r16,1
  808f4c:	080b2e00 	call	80b2e0 <_Bfree>
  808f50:	003edf06 	br	808ad0 <_dtoa_r+0x9b8>
  808f54:	d9001617 	ldw	r4,88(sp)
  808f58:	980b883a 	mov	r5,r19
  808f5c:	01800284 	movi	r6,10
  808f60:	000f883a 	mov	r7,zero
  808f64:	080c0000 	call	80c000 <__multadd>
  808f68:	1027883a 	mov	r19,r2
  808f6c:	d8800615 	stw	r2,24(sp)
  808f70:	003ebb06 	br	808a60 <_dtoa_r+0x948>
  808f74:	d9801117 	ldw	r6,68(sp)
  808f78:	d8800d17 	ldw	r2,52(sp)
  808f7c:	d8000915 	stw	zero,36(sp)
  808f80:	308dc83a 	sub	r6,r6,r2
  808f84:	0087c83a 	sub	r3,zero,r2
  808f88:	d9801115 	stw	r6,68(sp)
  808f8c:	d8c01015 	stw	r3,64(sp)
  808f90:	003cfe06 	br	80838c <_dtoa_r+0x274>
  808f94:	018dc83a 	sub	r6,zero,r6
  808f98:	d9801115 	stw	r6,68(sp)
  808f9c:	d8000a15 	stw	zero,40(sp)
  808fa0:	003cf306 	br	808370 <_dtoa_r+0x258>
  808fa4:	d9000d17 	ldw	r4,52(sp)
  808fa8:	08052200 	call	805220 <__floatsidf>
  808fac:	880b883a 	mov	r5,r17
  808fb0:	8009883a 	mov	r4,r16
  808fb4:	180f883a 	mov	r7,r3
  808fb8:	100d883a 	mov	r6,r2
  808fbc:	080e7980 	call	80e798 <__nedf2>
  808fc0:	103ce126 	beq	r2,zero,808348 <_dtoa_r+0x230>
  808fc4:	d9800d17 	ldw	r6,52(sp)
  808fc8:	31bfffc4 	addi	r6,r6,-1
  808fcc:	d9800d15 	stw	r6,52(sp)
  808fd0:	003cdd06 	br	808348 <_dtoa_r+0x230>
  808fd4:	d9000717 	ldw	r4,28(sp)
  808fd8:	900b883a 	mov	r5,r18
  808fdc:	080b43c0 	call	80b43c <__mcmp>
  808fe0:	103e8d0e 	bge	r2,zero,808a18 <_dtoa_r+0x900>
  808fe4:	d9400717 	ldw	r5,28(sp)
  808fe8:	d9001617 	ldw	r4,88(sp)
  808fec:	01800284 	movi	r6,10
  808ff0:	000f883a 	mov	r7,zero
  808ff4:	080c0000 	call	80c000 <__multadd>
  808ff8:	d9800d17 	ldw	r6,52(sp)
  808ffc:	d8800715 	stw	r2,28(sp)
  809000:	31bfffc4 	addi	r6,r6,-1
  809004:	d9800d15 	stw	r6,52(sp)
  809008:	b001a71e 	bne	r22,zero,8096a8 <_dtoa_r+0x1590>
  80900c:	d8800e17 	ldw	r2,56(sp)
  809010:	d8800f15 	stw	r2,60(sp)
  809014:	003e8006 	br	808a18 <_dtoa_r+0x900>
  809018:	90800417 	ldw	r2,16(r18)
  80901c:	1085883a 	add	r2,r2,r2
  809020:	1085883a 	add	r2,r2,r2
  809024:	1485883a 	add	r2,r2,r18
  809028:	11000417 	ldw	r4,16(r2)
  80902c:	080b3080 	call	80b308 <__hi0bits>
  809030:	00c00804 	movi	r3,32
  809034:	1887c83a 	sub	r3,r3,r2
  809038:	003e5a06 	br	8089a4 <_dtoa_r+0x88c>
  80903c:	d9400717 	ldw	r5,28(sp)
  809040:	d9801017 	ldw	r6,64(sp)
  809044:	d9001617 	ldw	r4,88(sp)
  809048:	080c12c0 	call	80c12c <__pow5mult>
  80904c:	d8800715 	stw	r2,28(sp)
  809050:	003e4306 	br	808960 <_dtoa_r+0x848>
  809054:	d9800f17 	ldw	r6,60(sp)
  809058:	d8800d17 	ldw	r2,52(sp)
  80905c:	d9800315 	stw	r6,12(sp)
  809060:	d8800415 	stw	r2,16(sp)
  809064:	d8c00b17 	ldw	r3,44(sp)
  809068:	1805003a 	cmpeq	r2,r3,zero
  80906c:	1000e21e 	bne	r2,zero,8093f8 <_dtoa_r+0x12e0>
  809070:	d9000317 	ldw	r4,12(sp)
  809074:	0005883a 	mov	r2,zero
  809078:	00cff834 	movhi	r3,16352
  80907c:	200c90fa 	slli	r6,r4,3
  809080:	01002074 	movhi	r4,129
  809084:	2109ff04 	addi	r4,r4,10236
  809088:	180b883a 	mov	r5,r3
  80908c:	310d883a 	add	r6,r6,r4
  809090:	327fff17 	ldw	r9,-4(r6)
  809094:	323ffe17 	ldw	r8,-8(r6)
  809098:	1009883a 	mov	r4,r2
  80909c:	480f883a 	mov	r7,r9
  8090a0:	400d883a 	mov	r6,r8
  8090a4:	080e4b80 	call	80e4b8 <__divdf3>
  8090a8:	180b883a 	mov	r5,r3
  8090ac:	b00d883a 	mov	r6,r22
  8090b0:	b80f883a 	mov	r7,r23
  8090b4:	1009883a 	mov	r4,r2
  8090b8:	080512c0 	call	80512c <__subdf3>
  8090bc:	a80b883a 	mov	r5,r21
  8090c0:	a009883a 	mov	r4,r20
  8090c4:	d8c01915 	stw	r3,100(sp)
  8090c8:	d8801815 	stw	r2,96(sp)
  8090cc:	08053180 	call	805318 <__fixdfsi>
  8090d0:	1009883a 	mov	r4,r2
  8090d4:	1027883a 	mov	r19,r2
  8090d8:	08052200 	call	805220 <__floatsidf>
  8090dc:	a80b883a 	mov	r5,r21
  8090e0:	a009883a 	mov	r4,r20
  8090e4:	180f883a 	mov	r7,r3
  8090e8:	100d883a 	mov	r6,r2
  8090ec:	080512c0 	call	80512c <__subdf3>
  8090f0:	d9801817 	ldw	r6,96(sp)
  8090f4:	1823883a 	mov	r17,r3
  8090f8:	d8801415 	stw	r2,80(sp)
  8090fc:	302d883a 	mov	r22,r6
  809100:	d9800517 	ldw	r6,20(sp)
  809104:	9cc00c04 	addi	r19,r19,48
  809108:	dc401515 	stw	r17,84(sp)
  80910c:	d8c01917 	ldw	r3,100(sp)
  809110:	34c00005 	stb	r19,0(r6)
  809114:	d8800517 	ldw	r2,20(sp)
  809118:	d9401917 	ldw	r5,100(sp)
  80911c:	d9801417 	ldw	r6,80(sp)
  809120:	b009883a 	mov	r4,r22
  809124:	880f883a 	mov	r7,r17
  809128:	182f883a 	mov	r23,r3
  80912c:	17000044 	addi	fp,r2,1
  809130:	080e8200 	call	80e820 <__gtdf2>
  809134:	00804e16 	blt	zero,r2,809270 <_dtoa_r+0x1158>
  809138:	d9801417 	ldw	r6,80(sp)
  80913c:	0005883a 	mov	r2,zero
  809140:	00cffc34 	movhi	r3,16368
  809144:	180b883a 	mov	r5,r3
  809148:	880f883a 	mov	r7,r17
  80914c:	1009883a 	mov	r4,r2
  809150:	080512c0 	call	80512c <__subdf3>
  809154:	d9401917 	ldw	r5,100(sp)
  809158:	180f883a 	mov	r7,r3
  80915c:	b009883a 	mov	r4,r22
  809160:	100d883a 	mov	r6,r2
  809164:	080e8200 	call	80e820 <__gtdf2>
  809168:	00bda216 	blt	zero,r2,8087f4 <_dtoa_r+0x6dc>
  80916c:	d8c00317 	ldw	r3,12(sp)
  809170:	00800044 	movi	r2,1
  809174:	10c01216 	blt	r2,r3,8091c0 <_dtoa_r+0x10a8>
  809178:	003d4506 	br	808690 <_dtoa_r+0x578>
  80917c:	d9801417 	ldw	r6,80(sp)
  809180:	0005883a 	mov	r2,zero
  809184:	00cffc34 	movhi	r3,16368
  809188:	180b883a 	mov	r5,r3
  80918c:	880f883a 	mov	r7,r17
  809190:	1009883a 	mov	r4,r2
  809194:	080512c0 	call	80512c <__subdf3>
  809198:	d9c01b17 	ldw	r7,108(sp)
  80919c:	180b883a 	mov	r5,r3
  8091a0:	1009883a 	mov	r4,r2
  8091a4:	b00d883a 	mov	r6,r22
  8091a8:	080e9300 	call	80e930 <__ltdf2>
  8091ac:	103d9116 	blt	r2,zero,8087f4 <_dtoa_r+0x6dc>
  8091b0:	d9800517 	ldw	r6,20(sp)
  8091b4:	d9000317 	ldw	r4,12(sp)
  8091b8:	3105883a 	add	r2,r6,r4
  8091bc:	e0bd3426 	beq	fp,r2,808690 <_dtoa_r+0x578>
  8091c0:	04500934 	movhi	r17,16420
  8091c4:	0021883a 	mov	r16,zero
  8091c8:	b80b883a 	mov	r5,r23
  8091cc:	b009883a 	mov	r4,r22
  8091d0:	800d883a 	mov	r6,r16
  8091d4:	880f883a 	mov	r7,r17
  8091d8:	080e0f40 	call	80e0f4 <__muldf3>
  8091dc:	d9401517 	ldw	r5,84(sp)
  8091e0:	d9001417 	ldw	r4,80(sp)
  8091e4:	880f883a 	mov	r7,r17
  8091e8:	000d883a 	mov	r6,zero
  8091ec:	d8801a15 	stw	r2,104(sp)
  8091f0:	d8c01b15 	stw	r3,108(sp)
  8091f4:	080e0f40 	call	80e0f4 <__muldf3>
  8091f8:	180b883a 	mov	r5,r3
  8091fc:	1009883a 	mov	r4,r2
  809200:	1823883a 	mov	r17,r3
  809204:	1021883a 	mov	r16,r2
  809208:	08053180 	call	805318 <__fixdfsi>
  80920c:	1009883a 	mov	r4,r2
  809210:	102b883a 	mov	r21,r2
  809214:	08052200 	call	805220 <__floatsidf>
  809218:	880b883a 	mov	r5,r17
  80921c:	8009883a 	mov	r4,r16
  809220:	180f883a 	mov	r7,r3
  809224:	100d883a 	mov	r6,r2
  809228:	080512c0 	call	80512c <__subdf3>
  80922c:	1021883a 	mov	r16,r2
  809230:	d9001b17 	ldw	r4,108(sp)
  809234:	1823883a 	mov	r17,r3
  809238:	dc001415 	stw	r16,80(sp)
  80923c:	ad400c04 	addi	r21,r21,48
  809240:	dc401515 	stw	r17,84(sp)
  809244:	d8801a17 	ldw	r2,104(sp)
  809248:	e5400005 	stb	r21,0(fp)
  80924c:	202f883a 	mov	r23,r4
  809250:	d9c01b17 	ldw	r7,108(sp)
  809254:	d9001417 	ldw	r4,80(sp)
  809258:	880b883a 	mov	r5,r17
  80925c:	100d883a 	mov	r6,r2
  809260:	102d883a 	mov	r22,r2
  809264:	e7000044 	addi	fp,fp,1
  809268:	080e9300 	call	80e930 <__ltdf2>
  80926c:	103fc30e 	bge	r2,zero,80917c <_dtoa_r+0x1064>
  809270:	d9000417 	ldw	r4,16(sp)
  809274:	d9000d15 	stw	r4,52(sp)
  809278:	003d7106 	br	808840 <_dtoa_r+0x728>
  80927c:	d9801717 	ldw	r6,92(sp)
  809280:	00800084 	movi	r2,2
  809284:	11bde60e 	bge	r2,r6,808a20 <_dtoa_r+0x908>
  809288:	203cfb1e 	bne	r4,zero,808678 <_dtoa_r+0x560>
  80928c:	d9001617 	ldw	r4,88(sp)
  809290:	900b883a 	mov	r5,r18
  809294:	01800144 	movi	r6,5
  809298:	000f883a 	mov	r7,zero
  80929c:	080c0000 	call	80c000 <__multadd>
  8092a0:	d9000717 	ldw	r4,28(sp)
  8092a4:	100b883a 	mov	r5,r2
  8092a8:	1025883a 	mov	r18,r2
  8092ac:	080b43c0 	call	80b43c <__mcmp>
  8092b0:	00bcf10e 	bge	zero,r2,808678 <_dtoa_r+0x560>
  8092b4:	d8c00d17 	ldw	r3,52(sp)
  8092b8:	d9000517 	ldw	r4,20(sp)
  8092bc:	d8000615 	stw	zero,24(sp)
  8092c0:	18c00044 	addi	r3,r3,1
  8092c4:	d8c00d15 	stw	r3,52(sp)
  8092c8:	00800c44 	movi	r2,49
  8092cc:	27000044 	addi	fp,r4,1
  8092d0:	20800005 	stb	r2,0(r4)
  8092d4:	003e8906 	br	808cfc <_dtoa_r+0xbe4>
  8092d8:	d8c00517 	ldw	r3,20(sp)
  8092dc:	003bc206 	br	8081e8 <_dtoa_r+0xd0>
  8092e0:	01802074 	movhi	r6,129
  8092e4:	318a3104 	addi	r6,r6,10436
  8092e8:	30c00917 	ldw	r3,36(r6)
  8092ec:	30800817 	ldw	r2,32(r6)
  8092f0:	d9001217 	ldw	r4,72(sp)
  8092f4:	d9401317 	ldw	r5,76(sp)
  8092f8:	180f883a 	mov	r7,r3
  8092fc:	100d883a 	mov	r6,r2
  809300:	080e4b80 	call	80e4b8 <__divdf3>
  809304:	948003cc 	andi	r18,r18,15
  809308:	058000c4 	movi	r22,3
  80930c:	1029883a 	mov	r20,r2
  809310:	182b883a 	mov	r21,r3
  809314:	003c8906 	br	80853c <_dtoa_r+0x424>
  809318:	d9001017 	ldw	r4,64(sp)
  80931c:	d9800917 	ldw	r6,36(sp)
  809320:	0025883a 	mov	r18,zero
  809324:	1105c83a 	sub	r2,r2,r4
  809328:	2089883a 	add	r4,r4,r2
  80932c:	308d883a 	add	r6,r6,r2
  809330:	d9001015 	stw	r4,64(sp)
  809334:	d9800915 	stw	r6,36(sp)
  809338:	003e3206 	br	808c04 <_dtoa_r+0xaec>
  80933c:	28800044 	addi	r2,r5,1
  809340:	27000044 	addi	fp,r4,1
  809344:	20800005 	stb	r2,0(r4)
  809348:	003e6c06 	br	808cfc <_dtoa_r+0xbe4>
  80934c:	d8800f17 	ldw	r2,60(sp)
  809350:	00bce016 	blt	zero,r2,8086d4 <_dtoa_r+0x5bc>
  809354:	d9800f17 	ldw	r6,60(sp)
  809358:	303cc51e 	bne	r6,zero,808670 <_dtoa_r+0x558>
  80935c:	0005883a 	mov	r2,zero
  809360:	00d00534 	movhi	r3,16404
  809364:	980b883a 	mov	r5,r19
  809368:	180f883a 	mov	r7,r3
  80936c:	9009883a 	mov	r4,r18
  809370:	100d883a 	mov	r6,r2
  809374:	080e0f40 	call	80e0f4 <__muldf3>
  809378:	180b883a 	mov	r5,r3
  80937c:	a80f883a 	mov	r7,r21
  809380:	1009883a 	mov	r4,r2
  809384:	a00d883a 	mov	r6,r20
  809388:	080e8a80 	call	80e8a8 <__gedf2>
  80938c:	103cb80e 	bge	r2,zero,808670 <_dtoa_r+0x558>
  809390:	0027883a 	mov	r19,zero
  809394:	0025883a 	mov	r18,zero
  809398:	003fc606 	br	8092b4 <_dtoa_r+0x119c>
  80939c:	99400117 	ldw	r5,4(r19)
  8093a0:	d9001617 	ldw	r4,88(sp)
  8093a4:	080b8600 	call	80b860 <_Balloc>
  8093a8:	99800417 	ldw	r6,16(r19)
  8093ac:	11000304 	addi	r4,r2,12
  8093b0:	99400304 	addi	r5,r19,12
  8093b4:	318d883a 	add	r6,r6,r6
  8093b8:	318d883a 	add	r6,r6,r6
  8093bc:	31800204 	addi	r6,r6,8
  8093c0:	1023883a 	mov	r17,r2
  8093c4:	080b0c80 	call	80b0c8 <memcpy>
  8093c8:	d9001617 	ldw	r4,88(sp)
  8093cc:	880b883a 	mov	r5,r17
  8093d0:	01800044 	movi	r6,1
  8093d4:	080bc240 	call	80bc24 <__lshift>
  8093d8:	100b883a 	mov	r5,r2
  8093dc:	003d9c06 	br	808a50 <_dtoa_r+0x938>
  8093e0:	00800e44 	movi	r2,57
  8093e4:	b8807026 	beq	r23,r2,8095a8 <_dtoa_r+0x1490>
  8093e8:	b8800044 	addi	r2,r23,1
  8093ec:	b7000044 	addi	fp,r22,1
  8093f0:	b0800005 	stb	r2,0(r22)
  8093f4:	003e4106 	br	808cfc <_dtoa_r+0xbe4>
  8093f8:	d8800317 	ldw	r2,12(sp)
  8093fc:	01802074 	movhi	r6,129
  809400:	3189ff04 	addi	r6,r6,10236
  809404:	b009883a 	mov	r4,r22
  809408:	100e90fa 	slli	r7,r2,3
  80940c:	b80b883a 	mov	r5,r23
  809410:	398f883a 	add	r7,r7,r6
  809414:	38bffe17 	ldw	r2,-8(r7)
  809418:	d9800517 	ldw	r6,20(sp)
  80941c:	38ffff17 	ldw	r3,-4(r7)
  809420:	37000044 	addi	fp,r6,1
  809424:	180f883a 	mov	r7,r3
  809428:	100d883a 	mov	r6,r2
  80942c:	080e0f40 	call	80e0f4 <__muldf3>
  809430:	a80b883a 	mov	r5,r21
  809434:	a009883a 	mov	r4,r20
  809438:	182f883a 	mov	r23,r3
  80943c:	102d883a 	mov	r22,r2
  809440:	08053180 	call	805318 <__fixdfsi>
  809444:	1009883a 	mov	r4,r2
  809448:	1027883a 	mov	r19,r2
  80944c:	08052200 	call	805220 <__floatsidf>
  809450:	a80b883a 	mov	r5,r21
  809454:	a009883a 	mov	r4,r20
  809458:	180f883a 	mov	r7,r3
  80945c:	100d883a 	mov	r6,r2
  809460:	080512c0 	call	80512c <__subdf3>
  809464:	180b883a 	mov	r5,r3
  809468:	d8c00517 	ldw	r3,20(sp)
  80946c:	9cc00c04 	addi	r19,r19,48
  809470:	1009883a 	mov	r4,r2
  809474:	1cc00005 	stb	r19,0(r3)
  809478:	2021883a 	mov	r16,r4
  80947c:	d9000317 	ldw	r4,12(sp)
  809480:	00800044 	movi	r2,1
  809484:	2823883a 	mov	r17,r5
  809488:	20802226 	beq	r4,r2,809514 <_dtoa_r+0x13fc>
  80948c:	1029883a 	mov	r20,r2
  809490:	0005883a 	mov	r2,zero
  809494:	00d00934 	movhi	r3,16420
  809498:	180f883a 	mov	r7,r3
  80949c:	100d883a 	mov	r6,r2
  8094a0:	880b883a 	mov	r5,r17
  8094a4:	8009883a 	mov	r4,r16
  8094a8:	080e0f40 	call	80e0f4 <__muldf3>
  8094ac:	180b883a 	mov	r5,r3
  8094b0:	1009883a 	mov	r4,r2
  8094b4:	1823883a 	mov	r17,r3
  8094b8:	1021883a 	mov	r16,r2
  8094bc:	08053180 	call	805318 <__fixdfsi>
  8094c0:	1009883a 	mov	r4,r2
  8094c4:	102b883a 	mov	r21,r2
  8094c8:	08052200 	call	805220 <__floatsidf>
  8094cc:	880b883a 	mov	r5,r17
  8094d0:	8009883a 	mov	r4,r16
  8094d4:	180f883a 	mov	r7,r3
  8094d8:	100d883a 	mov	r6,r2
  8094dc:	080512c0 	call	80512c <__subdf3>
  8094e0:	180b883a 	mov	r5,r3
  8094e4:	d8c00517 	ldw	r3,20(sp)
  8094e8:	1009883a 	mov	r4,r2
  8094ec:	ad400c04 	addi	r21,r21,48
  8094f0:	1d05883a 	add	r2,r3,r20
  8094f4:	15400005 	stb	r21,0(r2)
  8094f8:	2021883a 	mov	r16,r4
  8094fc:	d9000317 	ldw	r4,12(sp)
  809500:	a5000044 	addi	r20,r20,1
  809504:	2823883a 	mov	r17,r5
  809508:	a13fe11e 	bne	r20,r4,809490 <_dtoa_r+0x1378>
  80950c:	e505883a 	add	r2,fp,r20
  809510:	173fffc4 	addi	fp,r2,-1
  809514:	0025883a 	mov	r18,zero
  809518:	04cff834 	movhi	r19,16352
  80951c:	b009883a 	mov	r4,r22
  809520:	b80b883a 	mov	r5,r23
  809524:	900d883a 	mov	r6,r18
  809528:	980f883a 	mov	r7,r19
  80952c:	08051ac0 	call	8051ac <__adddf3>
  809530:	180b883a 	mov	r5,r3
  809534:	1009883a 	mov	r4,r2
  809538:	800d883a 	mov	r6,r16
  80953c:	880f883a 	mov	r7,r17
  809540:	080e9300 	call	80e930 <__ltdf2>
  809544:	103cab16 	blt	r2,zero,8087f4 <_dtoa_r+0x6dc>
  809548:	0009883a 	mov	r4,zero
  80954c:	980b883a 	mov	r5,r19
  809550:	b80f883a 	mov	r7,r23
  809554:	b00d883a 	mov	r6,r22
  809558:	080512c0 	call	80512c <__subdf3>
  80955c:	180b883a 	mov	r5,r3
  809560:	880f883a 	mov	r7,r17
  809564:	1009883a 	mov	r4,r2
  809568:	800d883a 	mov	r6,r16
  80956c:	080e8200 	call	80e820 <__gtdf2>
  809570:	00bc470e 	bge	zero,r2,808690 <_dtoa_r+0x578>
  809574:	00c00c04 	movi	r3,48
  809578:	e73fffc4 	addi	fp,fp,-1
  80957c:	e0800007 	ldb	r2,0(fp)
  809580:	10fffd26 	beq	r2,r3,809578 <_dtoa_r+0x1460>
  809584:	d9800417 	ldw	r6,16(sp)
  809588:	e7000044 	addi	fp,fp,1
  80958c:	d9800d15 	stw	r6,52(sp)
  809590:	003cab06 	br	808840 <_dtoa_r+0x728>
  809594:	d8c00f17 	ldw	r3,60(sp)
  809598:	d9001117 	ldw	r4,68(sp)
  80959c:	20e1c83a 	sub	r16,r4,r3
  8095a0:	0007883a 	mov	r3,zero
  8095a4:	003d9b06 	br	808c14 <_dtoa_r+0xafc>
  8095a8:	00800e44 	movi	r2,57
  8095ac:	b0800005 	stb	r2,0(r22)
  8095b0:	b5800044 	addi	r22,r22,1
  8095b4:	003dc106 	br	808cbc <_dtoa_r+0xba4>
  8095b8:	05800084 	movi	r22,2
  8095bc:	003bf706 	br	80859c <_dtoa_r+0x484>
  8095c0:	d9000f17 	ldw	r4,60(sp)
  8095c4:	013c000e 	bge	zero,r4,8085c8 <_dtoa_r+0x4b0>
  8095c8:	d9800e17 	ldw	r6,56(sp)
  8095cc:	01bc300e 	bge	zero,r6,808690 <_dtoa_r+0x578>
  8095d0:	0005883a 	mov	r2,zero
  8095d4:	00d00934 	movhi	r3,16420
  8095d8:	a80b883a 	mov	r5,r21
  8095dc:	180f883a 	mov	r7,r3
  8095e0:	a009883a 	mov	r4,r20
  8095e4:	100d883a 	mov	r6,r2
  8095e8:	080e0f40 	call	80e0f4 <__muldf3>
  8095ec:	b1000044 	addi	r4,r22,1
  8095f0:	1021883a 	mov	r16,r2
  8095f4:	1823883a 	mov	r17,r3
  8095f8:	08052200 	call	805220 <__floatsidf>
  8095fc:	880b883a 	mov	r5,r17
  809600:	8009883a 	mov	r4,r16
  809604:	180f883a 	mov	r7,r3
  809608:	100d883a 	mov	r6,r2
  80960c:	080e0f40 	call	80e0f4 <__muldf3>
  809610:	0011883a 	mov	r8,zero
  809614:	02500734 	movhi	r9,16412
  809618:	180b883a 	mov	r5,r3
  80961c:	480f883a 	mov	r7,r9
  809620:	1009883a 	mov	r4,r2
  809624:	400d883a 	mov	r6,r8
  809628:	08051ac0 	call	8051ac <__adddf3>
  80962c:	102d883a 	mov	r22,r2
  809630:	00bf3034 	movhi	r2,64704
  809634:	10ef883a 	add	r23,r2,r3
  809638:	d8800d17 	ldw	r2,52(sp)
  80963c:	d8c00e17 	ldw	r3,56(sp)
  809640:	8029883a 	mov	r20,r16
  809644:	10bfffc4 	addi	r2,r2,-1
  809648:	882b883a 	mov	r21,r17
  80964c:	d8800415 	stw	r2,16(sp)
  809650:	d8c00315 	stw	r3,12(sp)
  809654:	003e8306 	br	809064 <_dtoa_r+0xf4c>
  809658:	d8800117 	ldw	r2,4(sp)
  80965c:	dc001117 	ldw	r16,68(sp)
  809660:	dc801017 	ldw	r18,64(sp)
  809664:	00c00d84 	movi	r3,54
  809668:	1887c83a 	sub	r3,r3,r2
  80966c:	003d6906 	br	808c14 <_dtoa_r+0xafc>
  809670:	01800044 	movi	r6,1
  809674:	3021883a 	mov	r16,r6
  809678:	d9800f15 	stw	r6,60(sp)
  80967c:	d9802615 	stw	r6,152(sp)
  809680:	d9800e15 	stw	r6,56(sp)
  809684:	003b9306 	br	8084d4 <_dtoa_r+0x3bc>
  809688:	b021883a 	mov	r16,r22
  80968c:	dd800f15 	stw	r22,60(sp)
  809690:	003b9006 	br	8084d4 <_dtoa_r+0x3bc>
  809694:	103e221e 	bne	r2,zero,808f20 <_dtoa_r+0xe08>
  809698:	b880004c 	andi	r2,r23,1
  80969c:	1005003a 	cmpeq	r2,r2,zero
  8096a0:	103e1f1e 	bne	r2,zero,808f20 <_dtoa_r+0xe08>
  8096a4:	003e1b06 	br	808f14 <_dtoa_r+0xdfc>
  8096a8:	d9001617 	ldw	r4,88(sp)
  8096ac:	980b883a 	mov	r5,r19
  8096b0:	01800284 	movi	r6,10
  8096b4:	000f883a 	mov	r7,zero
  8096b8:	080c0000 	call	80c000 <__multadd>
  8096bc:	d8c00e17 	ldw	r3,56(sp)
  8096c0:	1027883a 	mov	r19,r2
  8096c4:	d8c00f15 	stw	r3,60(sp)
  8096c8:	003cd306 	br	808a18 <_dtoa_r+0x900>

008096cc <_fflush_r>:
  8096cc:	defffb04 	addi	sp,sp,-20
  8096d0:	dcc00315 	stw	r19,12(sp)
  8096d4:	dc800215 	stw	r18,8(sp)
  8096d8:	dfc00415 	stw	ra,16(sp)
  8096dc:	dc400115 	stw	r17,4(sp)
  8096e0:	dc000015 	stw	r16,0(sp)
  8096e4:	2027883a 	mov	r19,r4
  8096e8:	2825883a 	mov	r18,r5
  8096ec:	20000226 	beq	r4,zero,8096f8 <_fflush_r+0x2c>
  8096f0:	20800e17 	ldw	r2,56(r4)
  8096f4:	10005626 	beq	r2,zero,809850 <_fflush_r+0x184>
  8096f8:	9100030b 	ldhu	r4,12(r18)
  8096fc:	20ffffcc 	andi	r3,r4,65535
  809700:	18e0001c 	xori	r3,r3,32768
  809704:	18e00004 	addi	r3,r3,-32768
  809708:	1880020c 	andi	r2,r3,8
  80970c:	1000261e 	bne	r2,zero,8097a8 <_fflush_r+0xdc>
  809710:	90c00117 	ldw	r3,4(r18)
  809714:	20820014 	ori	r2,r4,2048
  809718:	9080030d 	sth	r2,12(r18)
  80971c:	1009883a 	mov	r4,r2
  809720:	00c0400e 	bge	zero,r3,809824 <_fflush_r+0x158>
  809724:	92000a17 	ldw	r8,40(r18)
  809728:	40004026 	beq	r8,zero,80982c <_fflush_r+0x160>
  80972c:	2084000c 	andi	r2,r4,4096
  809730:	10005326 	beq	r2,zero,809880 <_fflush_r+0x1b4>
  809734:	94001417 	ldw	r16,80(r18)
  809738:	9080030b 	ldhu	r2,12(r18)
  80973c:	1080010c 	andi	r2,r2,4
  809740:	1000481e 	bne	r2,zero,809864 <_fflush_r+0x198>
  809744:	91400717 	ldw	r5,28(r18)
  809748:	9809883a 	mov	r4,r19
  80974c:	800d883a 	mov	r6,r16
  809750:	000f883a 	mov	r7,zero
  809754:	403ee83a 	callr	r8
  809758:	8080261e 	bne	r16,r2,8097f4 <_fflush_r+0x128>
  80975c:	9080030b 	ldhu	r2,12(r18)
  809760:	91000417 	ldw	r4,16(r18)
  809764:	90000115 	stw	zero,4(r18)
  809768:	10bdffcc 	andi	r2,r2,63487
  80976c:	10ffffcc 	andi	r3,r2,65535
  809770:	18c4000c 	andi	r3,r3,4096
  809774:	9080030d 	sth	r2,12(r18)
  809778:	91000015 	stw	r4,0(r18)
  80977c:	18002b26 	beq	r3,zero,80982c <_fflush_r+0x160>
  809780:	0007883a 	mov	r3,zero
  809784:	1805883a 	mov	r2,r3
  809788:	94001415 	stw	r16,80(r18)
  80978c:	dfc00417 	ldw	ra,16(sp)
  809790:	dcc00317 	ldw	r19,12(sp)
  809794:	dc800217 	ldw	r18,8(sp)
  809798:	dc400117 	ldw	r17,4(sp)
  80979c:	dc000017 	ldw	r16,0(sp)
  8097a0:	dec00504 	addi	sp,sp,20
  8097a4:	f800283a 	ret
  8097a8:	94400417 	ldw	r17,16(r18)
  8097ac:	88001f26 	beq	r17,zero,80982c <_fflush_r+0x160>
  8097b0:	90800017 	ldw	r2,0(r18)
  8097b4:	18c000cc 	andi	r3,r3,3
  8097b8:	94400015 	stw	r17,0(r18)
  8097bc:	1461c83a 	sub	r16,r2,r17
  8097c0:	18002526 	beq	r3,zero,809858 <_fflush_r+0x18c>
  8097c4:	0005883a 	mov	r2,zero
  8097c8:	90800215 	stw	r2,8(r18)
  8097cc:	0400170e 	bge	zero,r16,80982c <_fflush_r+0x160>
  8097d0:	90c00917 	ldw	r3,36(r18)
  8097d4:	91400717 	ldw	r5,28(r18)
  8097d8:	880d883a 	mov	r6,r17
  8097dc:	800f883a 	mov	r7,r16
  8097e0:	9809883a 	mov	r4,r19
  8097e4:	183ee83a 	callr	r3
  8097e8:	88a3883a 	add	r17,r17,r2
  8097ec:	80a1c83a 	sub	r16,r16,r2
  8097f0:	00bff616 	blt	zero,r2,8097cc <_fflush_r+0x100>
  8097f4:	9080030b 	ldhu	r2,12(r18)
  8097f8:	00ffffc4 	movi	r3,-1
  8097fc:	10801014 	ori	r2,r2,64
  809800:	9080030d 	sth	r2,12(r18)
  809804:	1805883a 	mov	r2,r3
  809808:	dfc00417 	ldw	ra,16(sp)
  80980c:	dcc00317 	ldw	r19,12(sp)
  809810:	dc800217 	ldw	r18,8(sp)
  809814:	dc400117 	ldw	r17,4(sp)
  809818:	dc000017 	ldw	r16,0(sp)
  80981c:	dec00504 	addi	sp,sp,20
  809820:	f800283a 	ret
  809824:	90800f17 	ldw	r2,60(r18)
  809828:	00bfbe16 	blt	zero,r2,809724 <_fflush_r+0x58>
  80982c:	0007883a 	mov	r3,zero
  809830:	1805883a 	mov	r2,r3
  809834:	dfc00417 	ldw	ra,16(sp)
  809838:	dcc00317 	ldw	r19,12(sp)
  80983c:	dc800217 	ldw	r18,8(sp)
  809840:	dc400117 	ldw	r17,4(sp)
  809844:	dc000017 	ldw	r16,0(sp)
  809848:	dec00504 	addi	sp,sp,20
  80984c:	f800283a 	ret
  809850:	08099640 	call	809964 <__sinit>
  809854:	003fa806 	br	8096f8 <_fflush_r+0x2c>
  809858:	90800517 	ldw	r2,20(r18)
  80985c:	90800215 	stw	r2,8(r18)
  809860:	003fda06 	br	8097cc <_fflush_r+0x100>
  809864:	90800117 	ldw	r2,4(r18)
  809868:	90c00c17 	ldw	r3,48(r18)
  80986c:	80a1c83a 	sub	r16,r16,r2
  809870:	183fb426 	beq	r3,zero,809744 <_fflush_r+0x78>
  809874:	90800f17 	ldw	r2,60(r18)
  809878:	80a1c83a 	sub	r16,r16,r2
  80987c:	003fb106 	br	809744 <_fflush_r+0x78>
  809880:	91400717 	ldw	r5,28(r18)
  809884:	9809883a 	mov	r4,r19
  809888:	000d883a 	mov	r6,zero
  80988c:	01c00044 	movi	r7,1
  809890:	403ee83a 	callr	r8
  809894:	1021883a 	mov	r16,r2
  809898:	00bfffc4 	movi	r2,-1
  80989c:	80800226 	beq	r16,r2,8098a8 <_fflush_r+0x1dc>
  8098a0:	92000a17 	ldw	r8,40(r18)
  8098a4:	003fa406 	br	809738 <_fflush_r+0x6c>
  8098a8:	98c00017 	ldw	r3,0(r19)
  8098ac:	00800744 	movi	r2,29
  8098b0:	18bfde26 	beq	r3,r2,80982c <_fflush_r+0x160>
  8098b4:	9080030b 	ldhu	r2,12(r18)
  8098b8:	8007883a 	mov	r3,r16
  8098bc:	10801014 	ori	r2,r2,64
  8098c0:	9080030d 	sth	r2,12(r18)
  8098c4:	003fcf06 	br	809804 <_fflush_r+0x138>

008098c8 <fflush>:
  8098c8:	01402074 	movhi	r5,129
  8098cc:	2965b304 	addi	r5,r5,-26932
  8098d0:	2007883a 	mov	r3,r4
  8098d4:	20000526 	beq	r4,zero,8098ec <fflush+0x24>
  8098d8:	00802074 	movhi	r2,129
  8098dc:	1091b004 	addi	r2,r2,18112
  8098e0:	11000017 	ldw	r4,0(r2)
  8098e4:	180b883a 	mov	r5,r3
  8098e8:	08096cc1 	jmpi	8096cc <_fflush_r>
  8098ec:	00802074 	movhi	r2,129
  8098f0:	1091b104 	addi	r2,r2,18116
  8098f4:	11000017 	ldw	r4,0(r2)
  8098f8:	080a4cc1 	jmpi	80a4cc <_fwalk_reent>

008098fc <std>:
  8098fc:	00802074 	movhi	r2,129
  809900:	10b30b04 	addi	r2,r2,-13268
  809904:	20800b15 	stw	r2,44(r4)
  809908:	00802074 	movhi	r2,129
  80990c:	10b34604 	addi	r2,r2,-13032
  809910:	20800815 	stw	r2,32(r4)
  809914:	00c02074 	movhi	r3,129
  809918:	18f32704 	addi	r3,r3,-13156
  80991c:	00802074 	movhi	r2,129
  809920:	10b30d04 	addi	r2,r2,-13260
  809924:	2140030d 	sth	r5,12(r4)
  809928:	2180038d 	sth	r6,14(r4)
  80992c:	20c00915 	stw	r3,36(r4)
  809930:	20800a15 	stw	r2,40(r4)
  809934:	20000015 	stw	zero,0(r4)
  809938:	20000115 	stw	zero,4(r4)
  80993c:	20000215 	stw	zero,8(r4)
  809940:	20000415 	stw	zero,16(r4)
  809944:	20000515 	stw	zero,20(r4)
  809948:	20000615 	stw	zero,24(r4)
  80994c:	21000715 	stw	r4,28(r4)
  809950:	f800283a 	ret

00809954 <__sfp_lock_acquire>:
  809954:	f800283a 	ret

00809958 <__sfp_lock_release>:
  809958:	f800283a 	ret

0080995c <__sinit_lock_acquire>:
  80995c:	f800283a 	ret

00809960 <__sinit_lock_release>:
  809960:	f800283a 	ret

00809964 <__sinit>:
  809964:	20800e17 	ldw	r2,56(r4)
  809968:	defffd04 	addi	sp,sp,-12
  80996c:	dc400115 	stw	r17,4(sp)
  809970:	dc000015 	stw	r16,0(sp)
  809974:	dfc00215 	stw	ra,8(sp)
  809978:	04400044 	movi	r17,1
  80997c:	01400104 	movi	r5,4
  809980:	000d883a 	mov	r6,zero
  809984:	2021883a 	mov	r16,r4
  809988:	2200bb04 	addi	r8,r4,748
  80998c:	200f883a 	mov	r7,r4
  809990:	10000526 	beq	r2,zero,8099a8 <__sinit+0x44>
  809994:	dfc00217 	ldw	ra,8(sp)
  809998:	dc400117 	ldw	r17,4(sp)
  80999c:	dc000017 	ldw	r16,0(sp)
  8099a0:	dec00304 	addi	sp,sp,12
  8099a4:	f800283a 	ret
  8099a8:	21000117 	ldw	r4,4(r4)
  8099ac:	00802074 	movhi	r2,129
  8099b0:	10a69204 	addi	r2,r2,-26040
  8099b4:	00c000c4 	movi	r3,3
  8099b8:	80800f15 	stw	r2,60(r16)
  8099bc:	80c0b915 	stw	r3,740(r16)
  8099c0:	8200ba15 	stw	r8,744(r16)
  8099c4:	84400e15 	stw	r17,56(r16)
  8099c8:	8000b815 	stw	zero,736(r16)
  8099cc:	08098fc0 	call	8098fc <std>
  8099d0:	81000217 	ldw	r4,8(r16)
  8099d4:	880d883a 	mov	r6,r17
  8099d8:	800f883a 	mov	r7,r16
  8099dc:	01400284 	movi	r5,10
  8099e0:	08098fc0 	call	8098fc <std>
  8099e4:	81000317 	ldw	r4,12(r16)
  8099e8:	800f883a 	mov	r7,r16
  8099ec:	01400484 	movi	r5,18
  8099f0:	01800084 	movi	r6,2
  8099f4:	dfc00217 	ldw	ra,8(sp)
  8099f8:	dc400117 	ldw	r17,4(sp)
  8099fc:	dc000017 	ldw	r16,0(sp)
  809a00:	dec00304 	addi	sp,sp,12
  809a04:	08098fc1 	jmpi	8098fc <std>

00809a08 <__fp_lock>:
  809a08:	0005883a 	mov	r2,zero
  809a0c:	f800283a 	ret

00809a10 <__fp_unlock>:
  809a10:	0005883a 	mov	r2,zero
  809a14:	f800283a 	ret

00809a18 <__fp_unlock_all>:
  809a18:	00802074 	movhi	r2,129
  809a1c:	1091b004 	addi	r2,r2,18112
  809a20:	11000017 	ldw	r4,0(r2)
  809a24:	01402074 	movhi	r5,129
  809a28:	29668404 	addi	r5,r5,-26096
  809a2c:	080a5941 	jmpi	80a594 <_fwalk>

00809a30 <__fp_lock_all>:
  809a30:	00802074 	movhi	r2,129
  809a34:	1091b004 	addi	r2,r2,18112
  809a38:	11000017 	ldw	r4,0(r2)
  809a3c:	01402074 	movhi	r5,129
  809a40:	29668204 	addi	r5,r5,-26104
  809a44:	080a5941 	jmpi	80a594 <_fwalk>

00809a48 <_cleanup_r>:
  809a48:	01402074 	movhi	r5,129
  809a4c:	29749004 	addi	r5,r5,-11712
  809a50:	080a5941 	jmpi	80a594 <_fwalk>

00809a54 <_cleanup>:
  809a54:	00802074 	movhi	r2,129
  809a58:	1091b104 	addi	r2,r2,18116
  809a5c:	11000017 	ldw	r4,0(r2)
  809a60:	0809a481 	jmpi	809a48 <_cleanup_r>

00809a64 <__sfmoreglue>:
  809a64:	defffc04 	addi	sp,sp,-16
  809a68:	dc000015 	stw	r16,0(sp)
  809a6c:	2821883a 	mov	r16,r5
  809a70:	dc400115 	stw	r17,4(sp)
  809a74:	01401704 	movi	r5,92
  809a78:	2023883a 	mov	r17,r4
  809a7c:	8009883a 	mov	r4,r16
  809a80:	dfc00315 	stw	ra,12(sp)
  809a84:	dcc00215 	stw	r19,8(sp)
  809a88:	080eb4c0 	call	80eb4c <__mulsi3>
  809a8c:	11400304 	addi	r5,r2,12
  809a90:	8809883a 	mov	r4,r17
  809a94:	1027883a 	mov	r19,r2
  809a98:	080a8a40 	call	80a8a4 <_malloc_r>
  809a9c:	10c00304 	addi	r3,r2,12
  809aa0:	1023883a 	mov	r17,r2
  809aa4:	1809883a 	mov	r4,r3
  809aa8:	980d883a 	mov	r6,r19
  809aac:	000b883a 	mov	r5,zero
  809ab0:	10000b26 	beq	r2,zero,809ae0 <__sfmoreglue+0x7c>
  809ab4:	14000115 	stw	r16,4(r2)
  809ab8:	10c00215 	stw	r3,8(r2)
  809abc:	10000015 	stw	zero,0(r2)
  809ac0:	080b2480 	call	80b248 <memset>
  809ac4:	8805883a 	mov	r2,r17
  809ac8:	dfc00317 	ldw	ra,12(sp)
  809acc:	dcc00217 	ldw	r19,8(sp)
  809ad0:	dc400117 	ldw	r17,4(sp)
  809ad4:	dc000017 	ldw	r16,0(sp)
  809ad8:	dec00404 	addi	sp,sp,16
  809adc:	f800283a 	ret
  809ae0:	0023883a 	mov	r17,zero
  809ae4:	8805883a 	mov	r2,r17
  809ae8:	dfc00317 	ldw	ra,12(sp)
  809aec:	dcc00217 	ldw	r19,8(sp)
  809af0:	dc400117 	ldw	r17,4(sp)
  809af4:	dc000017 	ldw	r16,0(sp)
  809af8:	dec00404 	addi	sp,sp,16
  809afc:	f800283a 	ret

00809b00 <__sfp>:
  809b00:	defffd04 	addi	sp,sp,-12
  809b04:	00802074 	movhi	r2,129
  809b08:	1091b104 	addi	r2,r2,18116
  809b0c:	dc000015 	stw	r16,0(sp)
  809b10:	14000017 	ldw	r16,0(r2)
  809b14:	dc400115 	stw	r17,4(sp)
  809b18:	dfc00215 	stw	ra,8(sp)
  809b1c:	80800e17 	ldw	r2,56(r16)
  809b20:	2023883a 	mov	r17,r4
  809b24:	10002626 	beq	r2,zero,809bc0 <__sfp+0xc0>
  809b28:	8400b804 	addi	r16,r16,736
  809b2c:	80800117 	ldw	r2,4(r16)
  809b30:	81000217 	ldw	r4,8(r16)
  809b34:	10ffffc4 	addi	r3,r2,-1
  809b38:	18000916 	blt	r3,zero,809b60 <__sfp+0x60>
  809b3c:	2080030f 	ldh	r2,12(r4)
  809b40:	10000b26 	beq	r2,zero,809b70 <__sfp+0x70>
  809b44:	017fffc4 	movi	r5,-1
  809b48:	00000206 	br	809b54 <__sfp+0x54>
  809b4c:	2080030f 	ldh	r2,12(r4)
  809b50:	10000726 	beq	r2,zero,809b70 <__sfp+0x70>
  809b54:	18ffffc4 	addi	r3,r3,-1
  809b58:	21001704 	addi	r4,r4,92
  809b5c:	197ffb1e 	bne	r3,r5,809b4c <__sfp+0x4c>
  809b60:	80800017 	ldw	r2,0(r16)
  809b64:	10001926 	beq	r2,zero,809bcc <__sfp+0xcc>
  809b68:	1021883a 	mov	r16,r2
  809b6c:	003fef06 	br	809b2c <__sfp+0x2c>
  809b70:	00bfffc4 	movi	r2,-1
  809b74:	00c00044 	movi	r3,1
  809b78:	2080038d 	sth	r2,14(r4)
  809b7c:	20c0030d 	sth	r3,12(r4)
  809b80:	20000015 	stw	zero,0(r4)
  809b84:	20000215 	stw	zero,8(r4)
  809b88:	20000115 	stw	zero,4(r4)
  809b8c:	20000415 	stw	zero,16(r4)
  809b90:	20000515 	stw	zero,20(r4)
  809b94:	20000615 	stw	zero,24(r4)
  809b98:	20000c15 	stw	zero,48(r4)
  809b9c:	20000d15 	stw	zero,52(r4)
  809ba0:	20001115 	stw	zero,68(r4)
  809ba4:	20001215 	stw	zero,72(r4)
  809ba8:	2005883a 	mov	r2,r4
  809bac:	dfc00217 	ldw	ra,8(sp)
  809bb0:	dc400117 	ldw	r17,4(sp)
  809bb4:	dc000017 	ldw	r16,0(sp)
  809bb8:	dec00304 	addi	sp,sp,12
  809bbc:	f800283a 	ret
  809bc0:	8009883a 	mov	r4,r16
  809bc4:	08099640 	call	809964 <__sinit>
  809bc8:	003fd706 	br	809b28 <__sfp+0x28>
  809bcc:	8809883a 	mov	r4,r17
  809bd0:	01400104 	movi	r5,4
  809bd4:	0809a640 	call	809a64 <__sfmoreglue>
  809bd8:	80800015 	stw	r2,0(r16)
  809bdc:	103fe21e 	bne	r2,zero,809b68 <__sfp+0x68>
  809be0:	00800304 	movi	r2,12
  809be4:	0009883a 	mov	r4,zero
  809be8:	88800015 	stw	r2,0(r17)
  809bec:	003fee06 	br	809ba8 <__sfp+0xa8>

00809bf0 <_malloc_trim_r>:
  809bf0:	defffb04 	addi	sp,sp,-20
  809bf4:	dcc00315 	stw	r19,12(sp)
  809bf8:	04c02074 	movhi	r19,129
  809bfc:	9ccc0e04 	addi	r19,r19,12344
  809c00:	dc800215 	stw	r18,8(sp)
  809c04:	dc400115 	stw	r17,4(sp)
  809c08:	dc000015 	stw	r16,0(sp)
  809c0c:	2823883a 	mov	r17,r5
  809c10:	2025883a 	mov	r18,r4
  809c14:	dfc00415 	stw	ra,16(sp)
  809c18:	080f4d80 	call	80f4d8 <__malloc_lock>
  809c1c:	98800217 	ldw	r2,8(r19)
  809c20:	9009883a 	mov	r4,r18
  809c24:	000b883a 	mov	r5,zero
  809c28:	10c00117 	ldw	r3,4(r2)
  809c2c:	00bfff04 	movi	r2,-4
  809c30:	18a0703a 	and	r16,r3,r2
  809c34:	8463c83a 	sub	r17,r16,r17
  809c38:	8c43fbc4 	addi	r17,r17,4079
  809c3c:	8822d33a 	srli	r17,r17,12
  809c40:	0083ffc4 	movi	r2,4095
  809c44:	8c7fffc4 	addi	r17,r17,-1
  809c48:	8822933a 	slli	r17,r17,12
  809c4c:	1440060e 	bge	r2,r17,809c68 <_malloc_trim_r+0x78>
  809c50:	080cbbc0 	call	80cbbc <_sbrk_r>
  809c54:	98c00217 	ldw	r3,8(r19)
  809c58:	9009883a 	mov	r4,r18
  809c5c:	044bc83a 	sub	r5,zero,r17
  809c60:	80c7883a 	add	r3,r16,r3
  809c64:	10c00926 	beq	r2,r3,809c8c <_malloc_trim_r+0x9c>
  809c68:	080f4f80 	call	80f4f8 <__malloc_unlock>
  809c6c:	0005883a 	mov	r2,zero
  809c70:	dfc00417 	ldw	ra,16(sp)
  809c74:	dcc00317 	ldw	r19,12(sp)
  809c78:	dc800217 	ldw	r18,8(sp)
  809c7c:	dc400117 	ldw	r17,4(sp)
  809c80:	dc000017 	ldw	r16,0(sp)
  809c84:	dec00504 	addi	sp,sp,20
  809c88:	f800283a 	ret
  809c8c:	9009883a 	mov	r4,r18
  809c90:	080cbbc0 	call	80cbbc <_sbrk_r>
  809c94:	844dc83a 	sub	r6,r16,r17
  809c98:	00ffffc4 	movi	r3,-1
  809c9c:	9009883a 	mov	r4,r18
  809ca0:	000b883a 	mov	r5,zero
  809ca4:	01c02074 	movhi	r7,129
  809ca8:	39d1d704 	addi	r7,r7,18268
  809cac:	31800054 	ori	r6,r6,1
  809cb0:	10c00926 	beq	r2,r3,809cd8 <_malloc_trim_r+0xe8>
  809cb4:	38800017 	ldw	r2,0(r7)
  809cb8:	98c00217 	ldw	r3,8(r19)
  809cbc:	9009883a 	mov	r4,r18
  809cc0:	1445c83a 	sub	r2,r2,r17
  809cc4:	38800015 	stw	r2,0(r7)
  809cc8:	19800115 	stw	r6,4(r3)
  809ccc:	080f4f80 	call	80f4f8 <__malloc_unlock>
  809cd0:	00800044 	movi	r2,1
  809cd4:	003fe606 	br	809c70 <_malloc_trim_r+0x80>
  809cd8:	080cbbc0 	call	80cbbc <_sbrk_r>
  809cdc:	99800217 	ldw	r6,8(r19)
  809ce0:	100f883a 	mov	r7,r2
  809ce4:	9009883a 	mov	r4,r18
  809ce8:	1187c83a 	sub	r3,r2,r6
  809cec:	008003c4 	movi	r2,15
  809cf0:	19400054 	ori	r5,r3,1
  809cf4:	10ffdc0e 	bge	r2,r3,809c68 <_malloc_trim_r+0x78>
  809cf8:	00802074 	movhi	r2,129
  809cfc:	1091b504 	addi	r2,r2,18132
  809d00:	10c00017 	ldw	r3,0(r2)
  809d04:	00802074 	movhi	r2,129
  809d08:	1091d704 	addi	r2,r2,18268
  809d0c:	31400115 	stw	r5,4(r6)
  809d10:	38c7c83a 	sub	r3,r7,r3
  809d14:	10c00015 	stw	r3,0(r2)
  809d18:	003fd306 	br	809c68 <_malloc_trim_r+0x78>

00809d1c <_free_r>:
  809d1c:	defffd04 	addi	sp,sp,-12
  809d20:	dc400115 	stw	r17,4(sp)
  809d24:	dc000015 	stw	r16,0(sp)
  809d28:	dfc00215 	stw	ra,8(sp)
  809d2c:	2821883a 	mov	r16,r5
  809d30:	2023883a 	mov	r17,r4
  809d34:	28005a26 	beq	r5,zero,809ea0 <_free_r+0x184>
  809d38:	080f4d80 	call	80f4d8 <__malloc_lock>
  809d3c:	823ffe04 	addi	r8,r16,-8
  809d40:	41400117 	ldw	r5,4(r8)
  809d44:	00bfff84 	movi	r2,-2
  809d48:	02802074 	movhi	r10,129
  809d4c:	528c0e04 	addi	r10,r10,12344
  809d50:	288e703a 	and	r7,r5,r2
  809d54:	41cd883a 	add	r6,r8,r7
  809d58:	30c00117 	ldw	r3,4(r6)
  809d5c:	51000217 	ldw	r4,8(r10)
  809d60:	00bfff04 	movi	r2,-4
  809d64:	1892703a 	and	r9,r3,r2
  809d68:	5017883a 	mov	r11,r10
  809d6c:	31006726 	beq	r6,r4,809f0c <_free_r+0x1f0>
  809d70:	2880004c 	andi	r2,r5,1
  809d74:	1005003a 	cmpeq	r2,r2,zero
  809d78:	32400115 	stw	r9,4(r6)
  809d7c:	10001a1e 	bne	r2,zero,809de8 <_free_r+0xcc>
  809d80:	000b883a 	mov	r5,zero
  809d84:	3247883a 	add	r3,r6,r9
  809d88:	18800117 	ldw	r2,4(r3)
  809d8c:	1080004c 	andi	r2,r2,1
  809d90:	1000231e 	bne	r2,zero,809e20 <_free_r+0x104>
  809d94:	280ac03a 	cmpne	r5,r5,zero
  809d98:	3a4f883a 	add	r7,r7,r9
  809d9c:	2800451e 	bne	r5,zero,809eb4 <_free_r+0x198>
  809da0:	31000217 	ldw	r4,8(r6)
  809da4:	00802074 	movhi	r2,129
  809da8:	108c1004 	addi	r2,r2,12352
  809dac:	20807b26 	beq	r4,r2,809f9c <_free_r+0x280>
  809db0:	30800317 	ldw	r2,12(r6)
  809db4:	3a07883a 	add	r3,r7,r8
  809db8:	19c00015 	stw	r7,0(r3)
  809dbc:	11000215 	stw	r4,8(r2)
  809dc0:	20800315 	stw	r2,12(r4)
  809dc4:	38800054 	ori	r2,r7,1
  809dc8:	40800115 	stw	r2,4(r8)
  809dcc:	28001a26 	beq	r5,zero,809e38 <_free_r+0x11c>
  809dd0:	8809883a 	mov	r4,r17
  809dd4:	dfc00217 	ldw	ra,8(sp)
  809dd8:	dc400117 	ldw	r17,4(sp)
  809ddc:	dc000017 	ldw	r16,0(sp)
  809de0:	dec00304 	addi	sp,sp,12
  809de4:	080f4f81 	jmpi	80f4f8 <__malloc_unlock>
  809de8:	80bffe17 	ldw	r2,-8(r16)
  809dec:	50c00204 	addi	r3,r10,8
  809df0:	4091c83a 	sub	r8,r8,r2
  809df4:	41000217 	ldw	r4,8(r8)
  809df8:	388f883a 	add	r7,r7,r2
  809dfc:	20c06126 	beq	r4,r3,809f84 <_free_r+0x268>
  809e00:	40800317 	ldw	r2,12(r8)
  809e04:	3247883a 	add	r3,r6,r9
  809e08:	000b883a 	mov	r5,zero
  809e0c:	11000215 	stw	r4,8(r2)
  809e10:	20800315 	stw	r2,12(r4)
  809e14:	18800117 	ldw	r2,4(r3)
  809e18:	1080004c 	andi	r2,r2,1
  809e1c:	103fdd26 	beq	r2,zero,809d94 <_free_r+0x78>
  809e20:	38800054 	ori	r2,r7,1
  809e24:	3a07883a 	add	r3,r7,r8
  809e28:	280ac03a 	cmpne	r5,r5,zero
  809e2c:	40800115 	stw	r2,4(r8)
  809e30:	19c00015 	stw	r7,0(r3)
  809e34:	283fe61e 	bne	r5,zero,809dd0 <_free_r+0xb4>
  809e38:	00807fc4 	movi	r2,511
  809e3c:	11c01f2e 	bgeu	r2,r7,809ebc <_free_r+0x1a0>
  809e40:	3806d27a 	srli	r3,r7,9
  809e44:	1800481e 	bne	r3,zero,809f68 <_free_r+0x24c>
  809e48:	3804d0fa 	srli	r2,r7,3
  809e4c:	100690fa 	slli	r3,r2,3
  809e50:	1acd883a 	add	r6,r3,r11
  809e54:	31400217 	ldw	r5,8(r6)
  809e58:	31405926 	beq	r6,r5,809fc0 <_free_r+0x2a4>
  809e5c:	28800117 	ldw	r2,4(r5)
  809e60:	00ffff04 	movi	r3,-4
  809e64:	10c4703a 	and	r2,r2,r3
  809e68:	3880022e 	bgeu	r7,r2,809e74 <_free_r+0x158>
  809e6c:	29400217 	ldw	r5,8(r5)
  809e70:	317ffa1e 	bne	r6,r5,809e5c <_free_r+0x140>
  809e74:	29800317 	ldw	r6,12(r5)
  809e78:	41800315 	stw	r6,12(r8)
  809e7c:	41400215 	stw	r5,8(r8)
  809e80:	8809883a 	mov	r4,r17
  809e84:	2a000315 	stw	r8,12(r5)
  809e88:	32000215 	stw	r8,8(r6)
  809e8c:	dfc00217 	ldw	ra,8(sp)
  809e90:	dc400117 	ldw	r17,4(sp)
  809e94:	dc000017 	ldw	r16,0(sp)
  809e98:	dec00304 	addi	sp,sp,12
  809e9c:	080f4f81 	jmpi	80f4f8 <__malloc_unlock>
  809ea0:	dfc00217 	ldw	ra,8(sp)
  809ea4:	dc400117 	ldw	r17,4(sp)
  809ea8:	dc000017 	ldw	r16,0(sp)
  809eac:	dec00304 	addi	sp,sp,12
  809eb0:	f800283a 	ret
  809eb4:	31000217 	ldw	r4,8(r6)
  809eb8:	003fbd06 	br	809db0 <_free_r+0x94>
  809ebc:	3806d0fa 	srli	r3,r7,3
  809ec0:	00800044 	movi	r2,1
  809ec4:	51400117 	ldw	r5,4(r10)
  809ec8:	180890fa 	slli	r4,r3,3
  809ecc:	1807d0ba 	srai	r3,r3,2
  809ed0:	22c9883a 	add	r4,r4,r11
  809ed4:	21800217 	ldw	r6,8(r4)
  809ed8:	10c4983a 	sll	r2,r2,r3
  809edc:	41000315 	stw	r4,12(r8)
  809ee0:	41800215 	stw	r6,8(r8)
  809ee4:	288ab03a 	or	r5,r5,r2
  809ee8:	22000215 	stw	r8,8(r4)
  809eec:	8809883a 	mov	r4,r17
  809ef0:	51400115 	stw	r5,4(r10)
  809ef4:	32000315 	stw	r8,12(r6)
  809ef8:	dfc00217 	ldw	ra,8(sp)
  809efc:	dc400117 	ldw	r17,4(sp)
  809f00:	dc000017 	ldw	r16,0(sp)
  809f04:	dec00304 	addi	sp,sp,12
  809f08:	080f4f81 	jmpi	80f4f8 <__malloc_unlock>
  809f0c:	2880004c 	andi	r2,r5,1
  809f10:	3a4d883a 	add	r6,r7,r9
  809f14:	1000071e 	bne	r2,zero,809f34 <_free_r+0x218>
  809f18:	80bffe17 	ldw	r2,-8(r16)
  809f1c:	4091c83a 	sub	r8,r8,r2
  809f20:	41000317 	ldw	r4,12(r8)
  809f24:	40c00217 	ldw	r3,8(r8)
  809f28:	308d883a 	add	r6,r6,r2
  809f2c:	20c00215 	stw	r3,8(r4)
  809f30:	19000315 	stw	r4,12(r3)
  809f34:	00802074 	movhi	r2,129
  809f38:	1091b404 	addi	r2,r2,18128
  809f3c:	11000017 	ldw	r4,0(r2)
  809f40:	30c00054 	ori	r3,r6,1
  809f44:	52000215 	stw	r8,8(r10)
  809f48:	40c00115 	stw	r3,4(r8)
  809f4c:	313fa036 	bltu	r6,r4,809dd0 <_free_r+0xb4>
  809f50:	00802074 	movhi	r2,129
  809f54:	1091cd04 	addi	r2,r2,18228
  809f58:	11400017 	ldw	r5,0(r2)
  809f5c:	8809883a 	mov	r4,r17
  809f60:	0809bf00 	call	809bf0 <_malloc_trim_r>
  809f64:	003f9a06 	br	809dd0 <_free_r+0xb4>
  809f68:	00800104 	movi	r2,4
  809f6c:	10c0072e 	bgeu	r2,r3,809f8c <_free_r+0x270>
  809f70:	00800504 	movi	r2,20
  809f74:	10c01936 	bltu	r2,r3,809fdc <_free_r+0x2c0>
  809f78:	188016c4 	addi	r2,r3,91
  809f7c:	100690fa 	slli	r3,r2,3
  809f80:	003fb306 	br	809e50 <_free_r+0x134>
  809f84:	01400044 	movi	r5,1
  809f88:	003f7e06 	br	809d84 <_free_r+0x68>
  809f8c:	3804d1ba 	srli	r2,r7,6
  809f90:	10800e04 	addi	r2,r2,56
  809f94:	100690fa 	slli	r3,r2,3
  809f98:	003fad06 	br	809e50 <_free_r+0x134>
  809f9c:	22000315 	stw	r8,12(r4)
  809fa0:	22000215 	stw	r8,8(r4)
  809fa4:	3a05883a 	add	r2,r7,r8
  809fa8:	38c00054 	ori	r3,r7,1
  809fac:	11c00015 	stw	r7,0(r2)
  809fb0:	41000215 	stw	r4,8(r8)
  809fb4:	40c00115 	stw	r3,4(r8)
  809fb8:	41000315 	stw	r4,12(r8)
  809fbc:	003f8406 	br	809dd0 <_free_r+0xb4>
  809fc0:	1005d0ba 	srai	r2,r2,2
  809fc4:	00c00044 	movi	r3,1
  809fc8:	51000117 	ldw	r4,4(r10)
  809fcc:	1886983a 	sll	r3,r3,r2
  809fd0:	20c8b03a 	or	r4,r4,r3
  809fd4:	51000115 	stw	r4,4(r10)
  809fd8:	003fa706 	br	809e78 <_free_r+0x15c>
  809fdc:	00801504 	movi	r2,84
  809fe0:	10c00436 	bltu	r2,r3,809ff4 <_free_r+0x2d8>
  809fe4:	3804d33a 	srli	r2,r7,12
  809fe8:	10801b84 	addi	r2,r2,110
  809fec:	100690fa 	slli	r3,r2,3
  809ff0:	003f9706 	br	809e50 <_free_r+0x134>
  809ff4:	00805504 	movi	r2,340
  809ff8:	10c00436 	bltu	r2,r3,80a00c <_free_r+0x2f0>
  809ffc:	3804d3fa 	srli	r2,r7,15
  80a000:	10801dc4 	addi	r2,r2,119
  80a004:	100690fa 	slli	r3,r2,3
  80a008:	003f9106 	br	809e50 <_free_r+0x134>
  80a00c:	00815504 	movi	r2,1364
  80a010:	10c0032e 	bgeu	r2,r3,80a020 <_free_r+0x304>
  80a014:	00801f84 	movi	r2,126
  80a018:	00c0fc04 	movi	r3,1008
  80a01c:	003f8c06 	br	809e50 <_free_r+0x134>
  80a020:	3804d4ba 	srli	r2,r7,18
  80a024:	10801f04 	addi	r2,r2,124
  80a028:	100690fa 	slli	r3,r2,3
  80a02c:	003f8806 	br	809e50 <_free_r+0x134>

0080a030 <__sfvwrite_r>:
  80a030:	30800217 	ldw	r2,8(r6)
  80a034:	defff504 	addi	sp,sp,-44
  80a038:	df000915 	stw	fp,36(sp)
  80a03c:	dd800715 	stw	r22,28(sp)
  80a040:	dc800315 	stw	r18,12(sp)
  80a044:	dfc00a15 	stw	ra,40(sp)
  80a048:	ddc00815 	stw	r23,32(sp)
  80a04c:	dd400615 	stw	r21,24(sp)
  80a050:	dd000515 	stw	r20,20(sp)
  80a054:	dcc00415 	stw	r19,16(sp)
  80a058:	dc400215 	stw	r17,8(sp)
  80a05c:	dc000115 	stw	r16,4(sp)
  80a060:	302d883a 	mov	r22,r6
  80a064:	2039883a 	mov	fp,r4
  80a068:	2825883a 	mov	r18,r5
  80a06c:	10001c26 	beq	r2,zero,80a0e0 <__sfvwrite_r+0xb0>
  80a070:	29c0030b 	ldhu	r7,12(r5)
  80a074:	3880020c 	andi	r2,r7,8
  80a078:	10002726 	beq	r2,zero,80a118 <__sfvwrite_r+0xe8>
  80a07c:	28800417 	ldw	r2,16(r5)
  80a080:	10002526 	beq	r2,zero,80a118 <__sfvwrite_r+0xe8>
  80a084:	3880008c 	andi	r2,r7,2
  80a088:	b5400017 	ldw	r21,0(r22)
  80a08c:	10002826 	beq	r2,zero,80a130 <__sfvwrite_r+0x100>
  80a090:	0021883a 	mov	r16,zero
  80a094:	0023883a 	mov	r17,zero
  80a098:	880d883a 	mov	r6,r17
  80a09c:	e009883a 	mov	r4,fp
  80a0a0:	00810004 	movi	r2,1024
  80a0a4:	80006e26 	beq	r16,zero,80a260 <__sfvwrite_r+0x230>
  80a0a8:	800f883a 	mov	r7,r16
  80a0ac:	91400717 	ldw	r5,28(r18)
  80a0b0:	1400012e 	bgeu	r2,r16,80a0b8 <__sfvwrite_r+0x88>
  80a0b4:	100f883a 	mov	r7,r2
  80a0b8:	90c00917 	ldw	r3,36(r18)
  80a0bc:	183ee83a 	callr	r3
  80a0c0:	1007883a 	mov	r3,r2
  80a0c4:	80a1c83a 	sub	r16,r16,r2
  80a0c8:	88a3883a 	add	r17,r17,r2
  80a0cc:	00806d0e 	bge	zero,r2,80a284 <__sfvwrite_r+0x254>
  80a0d0:	b0800217 	ldw	r2,8(r22)
  80a0d4:	10c5c83a 	sub	r2,r2,r3
  80a0d8:	b0800215 	stw	r2,8(r22)
  80a0dc:	103fee1e 	bne	r2,zero,80a098 <__sfvwrite_r+0x68>
  80a0e0:	0009883a 	mov	r4,zero
  80a0e4:	2005883a 	mov	r2,r4
  80a0e8:	dfc00a17 	ldw	ra,40(sp)
  80a0ec:	df000917 	ldw	fp,36(sp)
  80a0f0:	ddc00817 	ldw	r23,32(sp)
  80a0f4:	dd800717 	ldw	r22,28(sp)
  80a0f8:	dd400617 	ldw	r21,24(sp)
  80a0fc:	dd000517 	ldw	r20,20(sp)
  80a100:	dcc00417 	ldw	r19,16(sp)
  80a104:	dc800317 	ldw	r18,12(sp)
  80a108:	dc400217 	ldw	r17,8(sp)
  80a10c:	dc000117 	ldw	r16,4(sp)
  80a110:	dec00b04 	addi	sp,sp,44
  80a114:	f800283a 	ret
  80a118:	0807d980 	call	807d98 <__swsetup_r>
  80a11c:	1000e41e 	bne	r2,zero,80a4b0 <__sfvwrite_r+0x480>
  80a120:	91c0030b 	ldhu	r7,12(r18)
  80a124:	b5400017 	ldw	r21,0(r22)
  80a128:	3880008c 	andi	r2,r7,2
  80a12c:	103fd81e 	bne	r2,zero,80a090 <__sfvwrite_r+0x60>
  80a130:	3880004c 	andi	r2,r7,1
  80a134:	1005003a 	cmpeq	r2,r2,zero
  80a138:	10005726 	beq	r2,zero,80a298 <__sfvwrite_r+0x268>
  80a13c:	0029883a 	mov	r20,zero
  80a140:	002f883a 	mov	r23,zero
  80a144:	a0004226 	beq	r20,zero,80a250 <__sfvwrite_r+0x220>
  80a148:	3880800c 	andi	r2,r7,512
  80a14c:	94000217 	ldw	r16,8(r18)
  80a150:	10008b26 	beq	r2,zero,80a380 <__sfvwrite_r+0x350>
  80a154:	800d883a 	mov	r6,r16
  80a158:	a400a536 	bltu	r20,r16,80a3f0 <__sfvwrite_r+0x3c0>
  80a15c:	3881200c 	andi	r2,r7,1152
  80a160:	10002726 	beq	r2,zero,80a200 <__sfvwrite_r+0x1d0>
  80a164:	90800517 	ldw	r2,20(r18)
  80a168:	92000417 	ldw	r8,16(r18)
  80a16c:	91400017 	ldw	r5,0(r18)
  80a170:	1087883a 	add	r3,r2,r2
  80a174:	1887883a 	add	r3,r3,r2
  80a178:	1808d7fa 	srli	r4,r3,31
  80a17c:	2a21c83a 	sub	r16,r5,r8
  80a180:	80800044 	addi	r2,r16,1
  80a184:	20c9883a 	add	r4,r4,r3
  80a188:	2027d07a 	srai	r19,r4,1
  80a18c:	a085883a 	add	r2,r20,r2
  80a190:	980d883a 	mov	r6,r19
  80a194:	9880022e 	bgeu	r19,r2,80a1a0 <__sfvwrite_r+0x170>
  80a198:	1027883a 	mov	r19,r2
  80a19c:	100d883a 	mov	r6,r2
  80a1a0:	3881000c 	andi	r2,r7,1024
  80a1a4:	1000b826 	beq	r2,zero,80a488 <__sfvwrite_r+0x458>
  80a1a8:	300b883a 	mov	r5,r6
  80a1ac:	e009883a 	mov	r4,fp
  80a1b0:	080a8a40 	call	80a8a4 <_malloc_r>
  80a1b4:	10003126 	beq	r2,zero,80a27c <__sfvwrite_r+0x24c>
  80a1b8:	91400417 	ldw	r5,16(r18)
  80a1bc:	1009883a 	mov	r4,r2
  80a1c0:	800d883a 	mov	r6,r16
  80a1c4:	1023883a 	mov	r17,r2
  80a1c8:	080b0c80 	call	80b0c8 <memcpy>
  80a1cc:	90c0030b 	ldhu	r3,12(r18)
  80a1d0:	00beffc4 	movi	r2,-1025
  80a1d4:	1886703a 	and	r3,r3,r2
  80a1d8:	18c02014 	ori	r3,r3,128
  80a1dc:	90c0030d 	sth	r3,12(r18)
  80a1e0:	9c07c83a 	sub	r3,r19,r16
  80a1e4:	8c05883a 	add	r2,r17,r16
  80a1e8:	a00d883a 	mov	r6,r20
  80a1ec:	a021883a 	mov	r16,r20
  80a1f0:	90800015 	stw	r2,0(r18)
  80a1f4:	90c00215 	stw	r3,8(r18)
  80a1f8:	94400415 	stw	r17,16(r18)
  80a1fc:	94c00515 	stw	r19,20(r18)
  80a200:	91000017 	ldw	r4,0(r18)
  80a204:	b80b883a 	mov	r5,r23
  80a208:	a023883a 	mov	r17,r20
  80a20c:	080b1680 	call	80b168 <memmove>
  80a210:	90c00217 	ldw	r3,8(r18)
  80a214:	90800017 	ldw	r2,0(r18)
  80a218:	a027883a 	mov	r19,r20
  80a21c:	1c07c83a 	sub	r3,r3,r16
  80a220:	1405883a 	add	r2,r2,r16
  80a224:	90c00215 	stw	r3,8(r18)
  80a228:	a021883a 	mov	r16,r20
  80a22c:	90800015 	stw	r2,0(r18)
  80a230:	b0800217 	ldw	r2,8(r22)
  80a234:	1405c83a 	sub	r2,r2,r16
  80a238:	b0800215 	stw	r2,8(r22)
  80a23c:	103fa826 	beq	r2,zero,80a0e0 <__sfvwrite_r+0xb0>
  80a240:	a469c83a 	sub	r20,r20,r17
  80a244:	91c0030b 	ldhu	r7,12(r18)
  80a248:	bcef883a 	add	r23,r23,r19
  80a24c:	a03fbe1e 	bne	r20,zero,80a148 <__sfvwrite_r+0x118>
  80a250:	adc00017 	ldw	r23,0(r21)
  80a254:	ad000117 	ldw	r20,4(r21)
  80a258:	ad400204 	addi	r21,r21,8
  80a25c:	003fb906 	br	80a144 <__sfvwrite_r+0x114>
  80a260:	ac400017 	ldw	r17,0(r21)
  80a264:	ac000117 	ldw	r16,4(r21)
  80a268:	ad400204 	addi	r21,r21,8
  80a26c:	003f8a06 	br	80a098 <__sfvwrite_r+0x68>
  80a270:	91400417 	ldw	r5,16(r18)
  80a274:	e009883a 	mov	r4,fp
  80a278:	0809d1c0 	call	809d1c <_free_r>
  80a27c:	00800304 	movi	r2,12
  80a280:	e0800015 	stw	r2,0(fp)
  80a284:	9080030b 	ldhu	r2,12(r18)
  80a288:	013fffc4 	movi	r4,-1
  80a28c:	10801014 	ori	r2,r2,64
  80a290:	9080030d 	sth	r2,12(r18)
  80a294:	003f9306 	br	80a0e4 <__sfvwrite_r+0xb4>
  80a298:	0027883a 	mov	r19,zero
  80a29c:	002f883a 	mov	r23,zero
  80a2a0:	d8000015 	stw	zero,0(sp)
  80a2a4:	0029883a 	mov	r20,zero
  80a2a8:	98001e26 	beq	r19,zero,80a324 <__sfvwrite_r+0x2f4>
  80a2ac:	d8c00017 	ldw	r3,0(sp)
  80a2b0:	1804c03a 	cmpne	r2,r3,zero
  80a2b4:	10005e26 	beq	r2,zero,80a430 <__sfvwrite_r+0x400>
  80a2b8:	9821883a 	mov	r16,r19
  80a2bc:	a4c0012e 	bgeu	r20,r19,80a2c4 <__sfvwrite_r+0x294>
  80a2c0:	a021883a 	mov	r16,r20
  80a2c4:	91000017 	ldw	r4,0(r18)
  80a2c8:	90800417 	ldw	r2,16(r18)
  80a2cc:	91800217 	ldw	r6,8(r18)
  80a2d0:	91c00517 	ldw	r7,20(r18)
  80a2d4:	1100022e 	bgeu	r2,r4,80a2e0 <__sfvwrite_r+0x2b0>
  80a2d8:	31e3883a 	add	r17,r6,r7
  80a2dc:	8c001616 	blt	r17,r16,80a338 <__sfvwrite_r+0x308>
  80a2e0:	81c03816 	blt	r16,r7,80a3c4 <__sfvwrite_r+0x394>
  80a2e4:	90c00917 	ldw	r3,36(r18)
  80a2e8:	91400717 	ldw	r5,28(r18)
  80a2ec:	e009883a 	mov	r4,fp
  80a2f0:	b80d883a 	mov	r6,r23
  80a2f4:	183ee83a 	callr	r3
  80a2f8:	1023883a 	mov	r17,r2
  80a2fc:	00bfe10e 	bge	zero,r2,80a284 <__sfvwrite_r+0x254>
  80a300:	a469c83a 	sub	r20,r20,r17
  80a304:	a0001826 	beq	r20,zero,80a368 <__sfvwrite_r+0x338>
  80a308:	b0800217 	ldw	r2,8(r22)
  80a30c:	1445c83a 	sub	r2,r2,r17
  80a310:	b0800215 	stw	r2,8(r22)
  80a314:	103f7226 	beq	r2,zero,80a0e0 <__sfvwrite_r+0xb0>
  80a318:	9c67c83a 	sub	r19,r19,r17
  80a31c:	bc6f883a 	add	r23,r23,r17
  80a320:	983fe21e 	bne	r19,zero,80a2ac <__sfvwrite_r+0x27c>
  80a324:	adc00017 	ldw	r23,0(r21)
  80a328:	acc00117 	ldw	r19,4(r21)
  80a32c:	ad400204 	addi	r21,r21,8
  80a330:	d8000015 	stw	zero,0(sp)
  80a334:	003fdc06 	br	80a2a8 <__sfvwrite_r+0x278>
  80a338:	b80b883a 	mov	r5,r23
  80a33c:	880d883a 	mov	r6,r17
  80a340:	080b1680 	call	80b168 <memmove>
  80a344:	90c00017 	ldw	r3,0(r18)
  80a348:	e009883a 	mov	r4,fp
  80a34c:	900b883a 	mov	r5,r18
  80a350:	1c47883a 	add	r3,r3,r17
  80a354:	90c00015 	stw	r3,0(r18)
  80a358:	08096cc0 	call	8096cc <_fflush_r>
  80a35c:	103fc91e 	bne	r2,zero,80a284 <__sfvwrite_r+0x254>
  80a360:	a469c83a 	sub	r20,r20,r17
  80a364:	a03fe81e 	bne	r20,zero,80a308 <__sfvwrite_r+0x2d8>
  80a368:	e009883a 	mov	r4,fp
  80a36c:	900b883a 	mov	r5,r18
  80a370:	08096cc0 	call	8096cc <_fflush_r>
  80a374:	103fc31e 	bne	r2,zero,80a284 <__sfvwrite_r+0x254>
  80a378:	d8000015 	stw	zero,0(sp)
  80a37c:	003fe206 	br	80a308 <__sfvwrite_r+0x2d8>
  80a380:	91000017 	ldw	r4,0(r18)
  80a384:	90800417 	ldw	r2,16(r18)
  80a388:	1100022e 	bgeu	r2,r4,80a394 <__sfvwrite_r+0x364>
  80a38c:	8023883a 	mov	r17,r16
  80a390:	85003136 	bltu	r16,r20,80a458 <__sfvwrite_r+0x428>
  80a394:	91c00517 	ldw	r7,20(r18)
  80a398:	a1c01836 	bltu	r20,r7,80a3fc <__sfvwrite_r+0x3cc>
  80a39c:	90c00917 	ldw	r3,36(r18)
  80a3a0:	91400717 	ldw	r5,28(r18)
  80a3a4:	e009883a 	mov	r4,fp
  80a3a8:	b80d883a 	mov	r6,r23
  80a3ac:	183ee83a 	callr	r3
  80a3b0:	1021883a 	mov	r16,r2
  80a3b4:	00bfb30e 	bge	zero,r2,80a284 <__sfvwrite_r+0x254>
  80a3b8:	1023883a 	mov	r17,r2
  80a3bc:	1027883a 	mov	r19,r2
  80a3c0:	003f9b06 	br	80a230 <__sfvwrite_r+0x200>
  80a3c4:	b80b883a 	mov	r5,r23
  80a3c8:	800d883a 	mov	r6,r16
  80a3cc:	080b1680 	call	80b168 <memmove>
  80a3d0:	90c00217 	ldw	r3,8(r18)
  80a3d4:	90800017 	ldw	r2,0(r18)
  80a3d8:	8023883a 	mov	r17,r16
  80a3dc:	1c07c83a 	sub	r3,r3,r16
  80a3e0:	1405883a 	add	r2,r2,r16
  80a3e4:	90c00215 	stw	r3,8(r18)
  80a3e8:	90800015 	stw	r2,0(r18)
  80a3ec:	003fc406 	br	80a300 <__sfvwrite_r+0x2d0>
  80a3f0:	a00d883a 	mov	r6,r20
  80a3f4:	a021883a 	mov	r16,r20
  80a3f8:	003f8106 	br	80a200 <__sfvwrite_r+0x1d0>
  80a3fc:	b80b883a 	mov	r5,r23
  80a400:	a00d883a 	mov	r6,r20
  80a404:	080b1680 	call	80b168 <memmove>
  80a408:	90c00217 	ldw	r3,8(r18)
  80a40c:	90800017 	ldw	r2,0(r18)
  80a410:	a021883a 	mov	r16,r20
  80a414:	1d07c83a 	sub	r3,r3,r20
  80a418:	1505883a 	add	r2,r2,r20
  80a41c:	a023883a 	mov	r17,r20
  80a420:	a027883a 	mov	r19,r20
  80a424:	90c00215 	stw	r3,8(r18)
  80a428:	90800015 	stw	r2,0(r18)
  80a42c:	003f8006 	br	80a230 <__sfvwrite_r+0x200>
  80a430:	b809883a 	mov	r4,r23
  80a434:	01400284 	movi	r5,10
  80a438:	980d883a 	mov	r6,r19
  80a43c:	080afe40 	call	80afe4 <memchr>
  80a440:	10001726 	beq	r2,zero,80a4a0 <__sfvwrite_r+0x470>
  80a444:	15c5c83a 	sub	r2,r2,r23
  80a448:	15000044 	addi	r20,r2,1
  80a44c:	00800044 	movi	r2,1
  80a450:	d8800015 	stw	r2,0(sp)
  80a454:	003f9806 	br	80a2b8 <__sfvwrite_r+0x288>
  80a458:	b80b883a 	mov	r5,r23
  80a45c:	800d883a 	mov	r6,r16
  80a460:	080b1680 	call	80b168 <memmove>
  80a464:	90c00017 	ldw	r3,0(r18)
  80a468:	e009883a 	mov	r4,fp
  80a46c:	900b883a 	mov	r5,r18
  80a470:	1c07883a 	add	r3,r3,r16
  80a474:	90c00015 	stw	r3,0(r18)
  80a478:	8027883a 	mov	r19,r16
  80a47c:	08096cc0 	call	8096cc <_fflush_r>
  80a480:	103f6b26 	beq	r2,zero,80a230 <__sfvwrite_r+0x200>
  80a484:	003f7f06 	br	80a284 <__sfvwrite_r+0x254>
  80a488:	400b883a 	mov	r5,r8
  80a48c:	e009883a 	mov	r4,fp
  80a490:	080c5580 	call	80c558 <_realloc_r>
  80a494:	103f7626 	beq	r2,zero,80a270 <__sfvwrite_r+0x240>
  80a498:	1023883a 	mov	r17,r2
  80a49c:	003f5006 	br	80a1e0 <__sfvwrite_r+0x1b0>
  80a4a0:	00c00044 	movi	r3,1
  80a4a4:	9d000044 	addi	r20,r19,1
  80a4a8:	d8c00015 	stw	r3,0(sp)
  80a4ac:	003f8206 	br	80a2b8 <__sfvwrite_r+0x288>
  80a4b0:	9080030b 	ldhu	r2,12(r18)
  80a4b4:	00c00244 	movi	r3,9
  80a4b8:	013fffc4 	movi	r4,-1
  80a4bc:	10801014 	ori	r2,r2,64
  80a4c0:	9080030d 	sth	r2,12(r18)
  80a4c4:	e0c00015 	stw	r3,0(fp)
  80a4c8:	003f0606 	br	80a0e4 <__sfvwrite_r+0xb4>

0080a4cc <_fwalk_reent>:
  80a4cc:	defff704 	addi	sp,sp,-36
  80a4d0:	dcc00315 	stw	r19,12(sp)
  80a4d4:	24c0b804 	addi	r19,r4,736
  80a4d8:	dd800615 	stw	r22,24(sp)
  80a4dc:	dd400515 	stw	r21,20(sp)
  80a4e0:	dfc00815 	stw	ra,32(sp)
  80a4e4:	ddc00715 	stw	r23,28(sp)
  80a4e8:	dd000415 	stw	r20,16(sp)
  80a4ec:	dc800215 	stw	r18,8(sp)
  80a4f0:	dc400115 	stw	r17,4(sp)
  80a4f4:	dc000015 	stw	r16,0(sp)
  80a4f8:	202b883a 	mov	r21,r4
  80a4fc:	282d883a 	mov	r22,r5
  80a500:	08099540 	call	809954 <__sfp_lock_acquire>
  80a504:	98002126 	beq	r19,zero,80a58c <_fwalk_reent+0xc0>
  80a508:	002f883a 	mov	r23,zero
  80a50c:	9c800117 	ldw	r18,4(r19)
  80a510:	9c000217 	ldw	r16,8(r19)
  80a514:	90bfffc4 	addi	r2,r18,-1
  80a518:	10000d16 	blt	r2,zero,80a550 <_fwalk_reent+0x84>
  80a51c:	0023883a 	mov	r17,zero
  80a520:	053fffc4 	movi	r20,-1
  80a524:	8080030f 	ldh	r2,12(r16)
  80a528:	8c400044 	addi	r17,r17,1
  80a52c:	10000626 	beq	r2,zero,80a548 <_fwalk_reent+0x7c>
  80a530:	8080038f 	ldh	r2,14(r16)
  80a534:	800b883a 	mov	r5,r16
  80a538:	a809883a 	mov	r4,r21
  80a53c:	15000226 	beq	r2,r20,80a548 <_fwalk_reent+0x7c>
  80a540:	b03ee83a 	callr	r22
  80a544:	b8aeb03a 	or	r23,r23,r2
  80a548:	84001704 	addi	r16,r16,92
  80a54c:	947ff51e 	bne	r18,r17,80a524 <_fwalk_reent+0x58>
  80a550:	9cc00017 	ldw	r19,0(r19)
  80a554:	983fed1e 	bne	r19,zero,80a50c <_fwalk_reent+0x40>
  80a558:	08099580 	call	809958 <__sfp_lock_release>
  80a55c:	b805883a 	mov	r2,r23
  80a560:	dfc00817 	ldw	ra,32(sp)
  80a564:	ddc00717 	ldw	r23,28(sp)
  80a568:	dd800617 	ldw	r22,24(sp)
  80a56c:	dd400517 	ldw	r21,20(sp)
  80a570:	dd000417 	ldw	r20,16(sp)
  80a574:	dcc00317 	ldw	r19,12(sp)
  80a578:	dc800217 	ldw	r18,8(sp)
  80a57c:	dc400117 	ldw	r17,4(sp)
  80a580:	dc000017 	ldw	r16,0(sp)
  80a584:	dec00904 	addi	sp,sp,36
  80a588:	f800283a 	ret
  80a58c:	002f883a 	mov	r23,zero
  80a590:	003ff106 	br	80a558 <_fwalk_reent+0x8c>

0080a594 <_fwalk>:
  80a594:	defff804 	addi	sp,sp,-32
  80a598:	dcc00315 	stw	r19,12(sp)
  80a59c:	24c0b804 	addi	r19,r4,736
  80a5a0:	dd400515 	stw	r21,20(sp)
  80a5a4:	dfc00715 	stw	ra,28(sp)
  80a5a8:	dd800615 	stw	r22,24(sp)
  80a5ac:	dd000415 	stw	r20,16(sp)
  80a5b0:	dc800215 	stw	r18,8(sp)
  80a5b4:	dc400115 	stw	r17,4(sp)
  80a5b8:	dc000015 	stw	r16,0(sp)
  80a5bc:	282b883a 	mov	r21,r5
  80a5c0:	08099540 	call	809954 <__sfp_lock_acquire>
  80a5c4:	98001f26 	beq	r19,zero,80a644 <_fwalk+0xb0>
  80a5c8:	002d883a 	mov	r22,zero
  80a5cc:	9c800117 	ldw	r18,4(r19)
  80a5d0:	9c000217 	ldw	r16,8(r19)
  80a5d4:	90bfffc4 	addi	r2,r18,-1
  80a5d8:	10000c16 	blt	r2,zero,80a60c <_fwalk+0x78>
  80a5dc:	0023883a 	mov	r17,zero
  80a5e0:	053fffc4 	movi	r20,-1
  80a5e4:	8080030f 	ldh	r2,12(r16)
  80a5e8:	8c400044 	addi	r17,r17,1
  80a5ec:	10000526 	beq	r2,zero,80a604 <_fwalk+0x70>
  80a5f0:	8080038f 	ldh	r2,14(r16)
  80a5f4:	8009883a 	mov	r4,r16
  80a5f8:	15000226 	beq	r2,r20,80a604 <_fwalk+0x70>
  80a5fc:	a83ee83a 	callr	r21
  80a600:	b0acb03a 	or	r22,r22,r2
  80a604:	84001704 	addi	r16,r16,92
  80a608:	947ff61e 	bne	r18,r17,80a5e4 <_fwalk+0x50>
  80a60c:	9cc00017 	ldw	r19,0(r19)
  80a610:	983fee1e 	bne	r19,zero,80a5cc <_fwalk+0x38>
  80a614:	08099580 	call	809958 <__sfp_lock_release>
  80a618:	b005883a 	mov	r2,r22
  80a61c:	dfc00717 	ldw	ra,28(sp)
  80a620:	dd800617 	ldw	r22,24(sp)
  80a624:	dd400517 	ldw	r21,20(sp)
  80a628:	dd000417 	ldw	r20,16(sp)
  80a62c:	dcc00317 	ldw	r19,12(sp)
  80a630:	dc800217 	ldw	r18,8(sp)
  80a634:	dc400117 	ldw	r17,4(sp)
  80a638:	dc000017 	ldw	r16,0(sp)
  80a63c:	dec00804 	addi	sp,sp,32
  80a640:	f800283a 	ret
  80a644:	002d883a 	mov	r22,zero
  80a648:	003ff206 	br	80a614 <_fwalk+0x80>

0080a64c <__locale_charset>:
  80a64c:	d0a00917 	ldw	r2,-32732(gp)
  80a650:	f800283a 	ret

0080a654 <_localeconv_r>:
  80a654:	00802074 	movhi	r2,129
  80a658:	1089f304 	addi	r2,r2,10188
  80a65c:	f800283a 	ret

0080a660 <localeconv>:
  80a660:	00802074 	movhi	r2,129
  80a664:	1091b004 	addi	r2,r2,18112
  80a668:	11000017 	ldw	r4,0(r2)
  80a66c:	080a6541 	jmpi	80a654 <_localeconv_r>

0080a670 <_setlocale_r>:
  80a670:	defffc04 	addi	sp,sp,-16
  80a674:	00c02074 	movhi	r3,129
  80a678:	18c9ee04 	addi	r3,r3,10168
  80a67c:	dc800215 	stw	r18,8(sp)
  80a680:	dc400115 	stw	r17,4(sp)
  80a684:	dc000015 	stw	r16,0(sp)
  80a688:	2023883a 	mov	r17,r4
  80a68c:	2825883a 	mov	r18,r5
  80a690:	dfc00315 	stw	ra,12(sp)
  80a694:	3021883a 	mov	r16,r6
  80a698:	3009883a 	mov	r4,r6
  80a69c:	180b883a 	mov	r5,r3
  80a6a0:	30000926 	beq	r6,zero,80a6c8 <_setlocale_r+0x58>
  80a6a4:	080cd780 	call	80cd78 <strcmp>
  80a6a8:	8009883a 	mov	r4,r16
  80a6ac:	01402074 	movhi	r5,129
  80a6b0:	29493904 	addi	r5,r5,9444
  80a6b4:	10000b1e 	bne	r2,zero,80a6e4 <_setlocale_r+0x74>
  80a6b8:	8c000d15 	stw	r16,52(r17)
  80a6bc:	8c800c15 	stw	r18,48(r17)
  80a6c0:	00c02074 	movhi	r3,129
  80a6c4:	18c9ee04 	addi	r3,r3,10168
  80a6c8:	1805883a 	mov	r2,r3
  80a6cc:	dfc00317 	ldw	ra,12(sp)
  80a6d0:	dc800217 	ldw	r18,8(sp)
  80a6d4:	dc400117 	ldw	r17,4(sp)
  80a6d8:	dc000017 	ldw	r16,0(sp)
  80a6dc:	dec00404 	addi	sp,sp,16
  80a6e0:	f800283a 	ret
  80a6e4:	080cd780 	call	80cd78 <strcmp>
  80a6e8:	0007883a 	mov	r3,zero
  80a6ec:	103ff226 	beq	r2,zero,80a6b8 <_setlocale_r+0x48>
  80a6f0:	003ff506 	br	80a6c8 <_setlocale_r+0x58>

0080a6f4 <setlocale>:
  80a6f4:	01802074 	movhi	r6,129
  80a6f8:	3191b004 	addi	r6,r6,18112
  80a6fc:	2007883a 	mov	r3,r4
  80a700:	31000017 	ldw	r4,0(r6)
  80a704:	280d883a 	mov	r6,r5
  80a708:	180b883a 	mov	r5,r3
  80a70c:	080a6701 	jmpi	80a670 <_setlocale_r>

0080a710 <__smakebuf_r>:
  80a710:	2880030b 	ldhu	r2,12(r5)
  80a714:	deffed04 	addi	sp,sp,-76
  80a718:	dc401015 	stw	r17,64(sp)
  80a71c:	1080008c 	andi	r2,r2,2
  80a720:	dc000f15 	stw	r16,60(sp)
  80a724:	dfc01215 	stw	ra,72(sp)
  80a728:	dc801115 	stw	r18,68(sp)
  80a72c:	2821883a 	mov	r16,r5
  80a730:	2023883a 	mov	r17,r4
  80a734:	10000b26 	beq	r2,zero,80a764 <__smakebuf_r+0x54>
  80a738:	28c010c4 	addi	r3,r5,67
  80a73c:	00800044 	movi	r2,1
  80a740:	28800515 	stw	r2,20(r5)
  80a744:	28c00415 	stw	r3,16(r5)
  80a748:	28c00015 	stw	r3,0(r5)
  80a74c:	dfc01217 	ldw	ra,72(sp)
  80a750:	dc801117 	ldw	r18,68(sp)
  80a754:	dc401017 	ldw	r17,64(sp)
  80a758:	dc000f17 	ldw	r16,60(sp)
  80a75c:	dec01304 	addi	sp,sp,76
  80a760:	f800283a 	ret
  80a764:	2940038f 	ldh	r5,14(r5)
  80a768:	28002116 	blt	r5,zero,80a7f0 <__smakebuf_r+0xe0>
  80a76c:	d80d883a 	mov	r6,sp
  80a770:	080d2540 	call	80d254 <_fstat_r>
  80a774:	10001e16 	blt	r2,zero,80a7f0 <__smakebuf_r+0xe0>
  80a778:	d8800117 	ldw	r2,4(sp)
  80a77c:	00e00014 	movui	r3,32768
  80a780:	113c000c 	andi	r4,r2,61440
  80a784:	20c03126 	beq	r4,r3,80a84c <__smakebuf_r+0x13c>
  80a788:	8080030b 	ldhu	r2,12(r16)
  80a78c:	00c80004 	movi	r3,8192
  80a790:	10820014 	ori	r2,r2,2048
  80a794:	8080030d 	sth	r2,12(r16)
  80a798:	20c01e26 	beq	r4,r3,80a814 <__smakebuf_r+0x104>
  80a79c:	04810004 	movi	r18,1024
  80a7a0:	8809883a 	mov	r4,r17
  80a7a4:	900b883a 	mov	r5,r18
  80a7a8:	080a8a40 	call	80a8a4 <_malloc_r>
  80a7ac:	1009883a 	mov	r4,r2
  80a7b0:	10003126 	beq	r2,zero,80a878 <__smakebuf_r+0x168>
  80a7b4:	80c0030b 	ldhu	r3,12(r16)
  80a7b8:	00802074 	movhi	r2,129
  80a7bc:	10a69204 	addi	r2,r2,-26040
  80a7c0:	88800f15 	stw	r2,60(r17)
  80a7c4:	18c02014 	ori	r3,r3,128
  80a7c8:	84800515 	stw	r18,20(r16)
  80a7cc:	80c0030d 	sth	r3,12(r16)
  80a7d0:	81000415 	stw	r4,16(r16)
  80a7d4:	81000015 	stw	r4,0(r16)
  80a7d8:	dfc01217 	ldw	ra,72(sp)
  80a7dc:	dc801117 	ldw	r18,68(sp)
  80a7e0:	dc401017 	ldw	r17,64(sp)
  80a7e4:	dc000f17 	ldw	r16,60(sp)
  80a7e8:	dec01304 	addi	sp,sp,76
  80a7ec:	f800283a 	ret
  80a7f0:	80c0030b 	ldhu	r3,12(r16)
  80a7f4:	1880200c 	andi	r2,r3,128
  80a7f8:	10000426 	beq	r2,zero,80a80c <__smakebuf_r+0xfc>
  80a7fc:	04801004 	movi	r18,64
  80a800:	18820014 	ori	r2,r3,2048
  80a804:	8080030d 	sth	r2,12(r16)
  80a808:	003fe506 	br	80a7a0 <__smakebuf_r+0x90>
  80a80c:	04810004 	movi	r18,1024
  80a810:	003ffb06 	br	80a800 <__smakebuf_r+0xf0>
  80a814:	8140038f 	ldh	r5,14(r16)
  80a818:	8809883a 	mov	r4,r17
  80a81c:	080d2c80 	call	80d2c8 <_isatty_r>
  80a820:	103fde26 	beq	r2,zero,80a79c <__smakebuf_r+0x8c>
  80a824:	8080030b 	ldhu	r2,12(r16)
  80a828:	80c010c4 	addi	r3,r16,67
  80a82c:	04810004 	movi	r18,1024
  80a830:	10800054 	ori	r2,r2,1
  80a834:	8080030d 	sth	r2,12(r16)
  80a838:	00800044 	movi	r2,1
  80a83c:	80c00415 	stw	r3,16(r16)
  80a840:	80800515 	stw	r2,20(r16)
  80a844:	80c00015 	stw	r3,0(r16)
  80a848:	003fd506 	br	80a7a0 <__smakebuf_r+0x90>
  80a84c:	80c00a17 	ldw	r3,40(r16)
  80a850:	00802074 	movhi	r2,129
  80a854:	10b30d04 	addi	r2,r2,-13260
  80a858:	18bfcb1e 	bne	r3,r2,80a788 <__smakebuf_r+0x78>
  80a85c:	8080030b 	ldhu	r2,12(r16)
  80a860:	00c10004 	movi	r3,1024
  80a864:	1825883a 	mov	r18,r3
  80a868:	10c4b03a 	or	r2,r2,r3
  80a86c:	8080030d 	sth	r2,12(r16)
  80a870:	80c01315 	stw	r3,76(r16)
  80a874:	003fca06 	br	80a7a0 <__smakebuf_r+0x90>
  80a878:	8100030b 	ldhu	r4,12(r16)
  80a87c:	2080800c 	andi	r2,r4,512
  80a880:	103fb21e 	bne	r2,zero,80a74c <__smakebuf_r+0x3c>
  80a884:	80c010c4 	addi	r3,r16,67
  80a888:	21000094 	ori	r4,r4,2
  80a88c:	00800044 	movi	r2,1
  80a890:	80800515 	stw	r2,20(r16)
  80a894:	8100030d 	sth	r4,12(r16)
  80a898:	80c00415 	stw	r3,16(r16)
  80a89c:	80c00015 	stw	r3,0(r16)
  80a8a0:	003faa06 	br	80a74c <__smakebuf_r+0x3c>

0080a8a4 <_malloc_r>:
  80a8a4:	defff604 	addi	sp,sp,-40
  80a8a8:	28c002c4 	addi	r3,r5,11
  80a8ac:	00800584 	movi	r2,22
  80a8b0:	dc800215 	stw	r18,8(sp)
  80a8b4:	dfc00915 	stw	ra,36(sp)
  80a8b8:	df000815 	stw	fp,32(sp)
  80a8bc:	ddc00715 	stw	r23,28(sp)
  80a8c0:	dd800615 	stw	r22,24(sp)
  80a8c4:	dd400515 	stw	r21,20(sp)
  80a8c8:	dd000415 	stw	r20,16(sp)
  80a8cc:	dcc00315 	stw	r19,12(sp)
  80a8d0:	dc400115 	stw	r17,4(sp)
  80a8d4:	dc000015 	stw	r16,0(sp)
  80a8d8:	2025883a 	mov	r18,r4
  80a8dc:	10c01236 	bltu	r2,r3,80a928 <_malloc_r+0x84>
  80a8e0:	04400404 	movi	r17,16
  80a8e4:	8940142e 	bgeu	r17,r5,80a938 <_malloc_r+0x94>
  80a8e8:	00800304 	movi	r2,12
  80a8ec:	0007883a 	mov	r3,zero
  80a8f0:	90800015 	stw	r2,0(r18)
  80a8f4:	1805883a 	mov	r2,r3
  80a8f8:	dfc00917 	ldw	ra,36(sp)
  80a8fc:	df000817 	ldw	fp,32(sp)
  80a900:	ddc00717 	ldw	r23,28(sp)
  80a904:	dd800617 	ldw	r22,24(sp)
  80a908:	dd400517 	ldw	r21,20(sp)
  80a90c:	dd000417 	ldw	r20,16(sp)
  80a910:	dcc00317 	ldw	r19,12(sp)
  80a914:	dc800217 	ldw	r18,8(sp)
  80a918:	dc400117 	ldw	r17,4(sp)
  80a91c:	dc000017 	ldw	r16,0(sp)
  80a920:	dec00a04 	addi	sp,sp,40
  80a924:	f800283a 	ret
  80a928:	00bffe04 	movi	r2,-8
  80a92c:	18a2703a 	and	r17,r3,r2
  80a930:	883fed16 	blt	r17,zero,80a8e8 <_malloc_r+0x44>
  80a934:	897fec36 	bltu	r17,r5,80a8e8 <_malloc_r+0x44>
  80a938:	9009883a 	mov	r4,r18
  80a93c:	080f4d80 	call	80f4d8 <__malloc_lock>
  80a940:	00807dc4 	movi	r2,503
  80a944:	14402b2e 	bgeu	r2,r17,80a9f4 <_malloc_r+0x150>
  80a948:	8806d27a 	srli	r3,r17,9
  80a94c:	18003f1e 	bne	r3,zero,80aa4c <_malloc_r+0x1a8>
  80a950:	880cd0fa 	srli	r6,r17,3
  80a954:	300490fa 	slli	r2,r6,3
  80a958:	02c02074 	movhi	r11,129
  80a95c:	5acc0e04 	addi	r11,r11,12344
  80a960:	12cb883a 	add	r5,r2,r11
  80a964:	2c000317 	ldw	r16,12(r5)
  80a968:	580f883a 	mov	r7,r11
  80a96c:	2c00041e 	bne	r5,r16,80a980 <_malloc_r+0xdc>
  80a970:	00000a06 	br	80a99c <_malloc_r+0xf8>
  80a974:	1800860e 	bge	r3,zero,80ab90 <_malloc_r+0x2ec>
  80a978:	84000317 	ldw	r16,12(r16)
  80a97c:	2c000726 	beq	r5,r16,80a99c <_malloc_r+0xf8>
  80a980:	80800117 	ldw	r2,4(r16)
  80a984:	00ffff04 	movi	r3,-4
  80a988:	10c8703a 	and	r4,r2,r3
  80a98c:	2447c83a 	sub	r3,r4,r17
  80a990:	008003c4 	movi	r2,15
  80a994:	10fff70e 	bge	r2,r3,80a974 <_malloc_r+0xd0>
  80a998:	31bfffc4 	addi	r6,r6,-1
  80a99c:	32400044 	addi	r9,r6,1
  80a9a0:	02802074 	movhi	r10,129
  80a9a4:	528c1004 	addi	r10,r10,12352
  80a9a8:	54000217 	ldw	r16,8(r10)
  80a9ac:	8280a026 	beq	r16,r10,80ac30 <_malloc_r+0x38c>
  80a9b0:	80800117 	ldw	r2,4(r16)
  80a9b4:	00ffff04 	movi	r3,-4
  80a9b8:	10ca703a 	and	r5,r2,r3
  80a9bc:	2c4dc83a 	sub	r6,r5,r17
  80a9c0:	008003c4 	movi	r2,15
  80a9c4:	11808316 	blt	r2,r6,80abd4 <_malloc_r+0x330>
  80a9c8:	52800315 	stw	r10,12(r10)
  80a9cc:	52800215 	stw	r10,8(r10)
  80a9d0:	30002916 	blt	r6,zero,80aa78 <_malloc_r+0x1d4>
  80a9d4:	8147883a 	add	r3,r16,r5
  80a9d8:	18800117 	ldw	r2,4(r3)
  80a9dc:	9009883a 	mov	r4,r18
  80a9e0:	10800054 	ori	r2,r2,1
  80a9e4:	18800115 	stw	r2,4(r3)
  80a9e8:	080f4f80 	call	80f4f8 <__malloc_unlock>
  80a9ec:	80c00204 	addi	r3,r16,8
  80a9f0:	003fc006 	br	80a8f4 <_malloc_r+0x50>
  80a9f4:	02c02074 	movhi	r11,129
  80a9f8:	5acc0e04 	addi	r11,r11,12344
  80a9fc:	8ac5883a 	add	r2,r17,r11
  80aa00:	14000317 	ldw	r16,12(r2)
  80aa04:	580f883a 	mov	r7,r11
  80aa08:	8806d0fa 	srli	r3,r17,3
  80aa0c:	14006c26 	beq	r2,r16,80abc0 <_malloc_r+0x31c>
  80aa10:	80c00117 	ldw	r3,4(r16)
  80aa14:	00bfff04 	movi	r2,-4
  80aa18:	81800317 	ldw	r6,12(r16)
  80aa1c:	1886703a 	and	r3,r3,r2
  80aa20:	80c7883a 	add	r3,r16,r3
  80aa24:	18800117 	ldw	r2,4(r3)
  80aa28:	81400217 	ldw	r5,8(r16)
  80aa2c:	9009883a 	mov	r4,r18
  80aa30:	10800054 	ori	r2,r2,1
  80aa34:	18800115 	stw	r2,4(r3)
  80aa38:	31400215 	stw	r5,8(r6)
  80aa3c:	29800315 	stw	r6,12(r5)
  80aa40:	080f4f80 	call	80f4f8 <__malloc_unlock>
  80aa44:	80c00204 	addi	r3,r16,8
  80aa48:	003faa06 	br	80a8f4 <_malloc_r+0x50>
  80aa4c:	00800104 	movi	r2,4
  80aa50:	10c0052e 	bgeu	r2,r3,80aa68 <_malloc_r+0x1c4>
  80aa54:	00800504 	movi	r2,20
  80aa58:	10c07836 	bltu	r2,r3,80ac3c <_malloc_r+0x398>
  80aa5c:	198016c4 	addi	r6,r3,91
  80aa60:	300490fa 	slli	r2,r6,3
  80aa64:	003fbc06 	br	80a958 <_malloc_r+0xb4>
  80aa68:	8804d1ba 	srli	r2,r17,6
  80aa6c:	11800e04 	addi	r6,r2,56
  80aa70:	300490fa 	slli	r2,r6,3
  80aa74:	003fb806 	br	80a958 <_malloc_r+0xb4>
  80aa78:	00807fc4 	movi	r2,511
  80aa7c:	1140bb36 	bltu	r2,r5,80ad6c <_malloc_r+0x4c8>
  80aa80:	2806d0fa 	srli	r3,r5,3
  80aa84:	573ffe04 	addi	fp,r10,-8
  80aa88:	00800044 	movi	r2,1
  80aa8c:	180890fa 	slli	r4,r3,3
  80aa90:	1807d0ba 	srai	r3,r3,2
  80aa94:	e1c00117 	ldw	r7,4(fp)
  80aa98:	5909883a 	add	r4,r11,r4
  80aa9c:	21400217 	ldw	r5,8(r4)
  80aaa0:	10c4983a 	sll	r2,r2,r3
  80aaa4:	81000315 	stw	r4,12(r16)
  80aaa8:	81400215 	stw	r5,8(r16)
  80aaac:	388eb03a 	or	r7,r7,r2
  80aab0:	2c000315 	stw	r16,12(r5)
  80aab4:	24000215 	stw	r16,8(r4)
  80aab8:	e1c00115 	stw	r7,4(fp)
  80aabc:	4807883a 	mov	r3,r9
  80aac0:	4800cd16 	blt	r9,zero,80adf8 <_malloc_r+0x554>
  80aac4:	1807d0ba 	srai	r3,r3,2
  80aac8:	00800044 	movi	r2,1
  80aacc:	10c8983a 	sll	r4,r2,r3
  80aad0:	39004436 	bltu	r7,r4,80abe4 <_malloc_r+0x340>
  80aad4:	21c4703a 	and	r2,r4,r7
  80aad8:	10000a1e 	bne	r2,zero,80ab04 <_malloc_r+0x260>
  80aadc:	2109883a 	add	r4,r4,r4
  80aae0:	00bfff04 	movi	r2,-4
  80aae4:	4884703a 	and	r2,r9,r2
  80aae8:	3906703a 	and	r3,r7,r4
  80aaec:	12400104 	addi	r9,r2,4
  80aaf0:	1800041e 	bne	r3,zero,80ab04 <_malloc_r+0x260>
  80aaf4:	2109883a 	add	r4,r4,r4
  80aaf8:	3904703a 	and	r2,r7,r4
  80aafc:	4a400104 	addi	r9,r9,4
  80ab00:	103ffc26 	beq	r2,zero,80aaf4 <_malloc_r+0x250>
  80ab04:	480490fa 	slli	r2,r9,3
  80ab08:	4819883a 	mov	r12,r9
  80ab0c:	023fff04 	movi	r8,-4
  80ab10:	589b883a 	add	r13,r11,r2
  80ab14:	6807883a 	mov	r3,r13
  80ab18:	014003c4 	movi	r5,15
  80ab1c:	1c000317 	ldw	r16,12(r3)
  80ab20:	1c00041e 	bne	r3,r16,80ab34 <_malloc_r+0x290>
  80ab24:	0000a706 	br	80adc4 <_malloc_r+0x520>
  80ab28:	3000ab0e 	bge	r6,zero,80add8 <_malloc_r+0x534>
  80ab2c:	84000317 	ldw	r16,12(r16)
  80ab30:	1c00a426 	beq	r3,r16,80adc4 <_malloc_r+0x520>
  80ab34:	80800117 	ldw	r2,4(r16)
  80ab38:	1204703a 	and	r2,r2,r8
  80ab3c:	144dc83a 	sub	r6,r2,r17
  80ab40:	29bff90e 	bge	r5,r6,80ab28 <_malloc_r+0x284>
  80ab44:	81000317 	ldw	r4,12(r16)
  80ab48:	80c00217 	ldw	r3,8(r16)
  80ab4c:	89400054 	ori	r5,r17,1
  80ab50:	8445883a 	add	r2,r16,r17
  80ab54:	20c00215 	stw	r3,8(r4)
  80ab58:	19000315 	stw	r4,12(r3)
  80ab5c:	81400115 	stw	r5,4(r16)
  80ab60:	1187883a 	add	r3,r2,r6
  80ab64:	31000054 	ori	r4,r6,1
  80ab68:	50800315 	stw	r2,12(r10)
  80ab6c:	50800215 	stw	r2,8(r10)
  80ab70:	19800015 	stw	r6,0(r3)
  80ab74:	11000115 	stw	r4,4(r2)
  80ab78:	12800215 	stw	r10,8(r2)
  80ab7c:	12800315 	stw	r10,12(r2)
  80ab80:	9009883a 	mov	r4,r18
  80ab84:	080f4f80 	call	80f4f8 <__malloc_unlock>
  80ab88:	80c00204 	addi	r3,r16,8
  80ab8c:	003f5906 	br	80a8f4 <_malloc_r+0x50>
  80ab90:	8109883a 	add	r4,r16,r4
  80ab94:	20800117 	ldw	r2,4(r4)
  80ab98:	80c00217 	ldw	r3,8(r16)
  80ab9c:	81400317 	ldw	r5,12(r16)
  80aba0:	10800054 	ori	r2,r2,1
  80aba4:	20800115 	stw	r2,4(r4)
  80aba8:	28c00215 	stw	r3,8(r5)
  80abac:	19400315 	stw	r5,12(r3)
  80abb0:	9009883a 	mov	r4,r18
  80abb4:	080f4f80 	call	80f4f8 <__malloc_unlock>
  80abb8:	80c00204 	addi	r3,r16,8
  80abbc:	003f4d06 	br	80a8f4 <_malloc_r+0x50>
  80abc0:	80800204 	addi	r2,r16,8
  80abc4:	14000317 	ldw	r16,12(r2)
  80abc8:	143f911e 	bne	r2,r16,80aa10 <_malloc_r+0x16c>
  80abcc:	1a400084 	addi	r9,r3,2
  80abd0:	003f7306 	br	80a9a0 <_malloc_r+0xfc>
  80abd4:	88c00054 	ori	r3,r17,1
  80abd8:	8445883a 	add	r2,r16,r17
  80abdc:	80c00115 	stw	r3,4(r16)
  80abe0:	003fdf06 	br	80ab60 <_malloc_r+0x2bc>
  80abe4:	e4000217 	ldw	r16,8(fp)
  80abe8:	00bfff04 	movi	r2,-4
  80abec:	80c00117 	ldw	r3,4(r16)
  80abf0:	802d883a 	mov	r22,r16
  80abf4:	18aa703a 	and	r21,r3,r2
  80abf8:	ac401636 	bltu	r21,r17,80ac54 <_malloc_r+0x3b0>
  80abfc:	ac49c83a 	sub	r4,r21,r17
  80ac00:	008003c4 	movi	r2,15
  80ac04:	1100130e 	bge	r2,r4,80ac54 <_malloc_r+0x3b0>
  80ac08:	88800054 	ori	r2,r17,1
  80ac0c:	8447883a 	add	r3,r16,r17
  80ac10:	80800115 	stw	r2,4(r16)
  80ac14:	20800054 	ori	r2,r4,1
  80ac18:	18800115 	stw	r2,4(r3)
  80ac1c:	e0c00215 	stw	r3,8(fp)
  80ac20:	9009883a 	mov	r4,r18
  80ac24:	080f4f80 	call	80f4f8 <__malloc_unlock>
  80ac28:	80c00204 	addi	r3,r16,8
  80ac2c:	003f3106 	br	80a8f4 <_malloc_r+0x50>
  80ac30:	39c00117 	ldw	r7,4(r7)
  80ac34:	573ffe04 	addi	fp,r10,-8
  80ac38:	003fa006 	br	80aabc <_malloc_r+0x218>
  80ac3c:	00801504 	movi	r2,84
  80ac40:	10c06736 	bltu	r2,r3,80ade0 <_malloc_r+0x53c>
  80ac44:	8804d33a 	srli	r2,r17,12
  80ac48:	11801b84 	addi	r6,r2,110
  80ac4c:	300490fa 	slli	r2,r6,3
  80ac50:	003f4106 	br	80a958 <_malloc_r+0xb4>
  80ac54:	d0a02317 	ldw	r2,-32628(gp)
  80ac58:	d0e00b17 	ldw	r3,-32724(gp)
  80ac5c:	053fffc4 	movi	r20,-1
  80ac60:	10800404 	addi	r2,r2,16
  80ac64:	88a7883a 	add	r19,r17,r2
  80ac68:	1d000326 	beq	r3,r20,80ac78 <_malloc_r+0x3d4>
  80ac6c:	98c3ffc4 	addi	r3,r19,4095
  80ac70:	00bc0004 	movi	r2,-4096
  80ac74:	18a6703a 	and	r19,r3,r2
  80ac78:	9009883a 	mov	r4,r18
  80ac7c:	980b883a 	mov	r5,r19
  80ac80:	080cbbc0 	call	80cbbc <_sbrk_r>
  80ac84:	1009883a 	mov	r4,r2
  80ac88:	15000426 	beq	r2,r20,80ac9c <_malloc_r+0x3f8>
  80ac8c:	854b883a 	add	r5,r16,r21
  80ac90:	1029883a 	mov	r20,r2
  80ac94:	11405a2e 	bgeu	r2,r5,80ae00 <_malloc_r+0x55c>
  80ac98:	87000c26 	beq	r16,fp,80accc <_malloc_r+0x428>
  80ac9c:	e4000217 	ldw	r16,8(fp)
  80aca0:	80c00117 	ldw	r3,4(r16)
  80aca4:	00bfff04 	movi	r2,-4
  80aca8:	1884703a 	and	r2,r3,r2
  80acac:	14400336 	bltu	r2,r17,80acbc <_malloc_r+0x418>
  80acb0:	1449c83a 	sub	r4,r2,r17
  80acb4:	008003c4 	movi	r2,15
  80acb8:	113fd316 	blt	r2,r4,80ac08 <_malloc_r+0x364>
  80acbc:	9009883a 	mov	r4,r18
  80acc0:	080f4f80 	call	80f4f8 <__malloc_unlock>
  80acc4:	0007883a 	mov	r3,zero
  80acc8:	003f0a06 	br	80a8f4 <_malloc_r+0x50>
  80accc:	05c02074 	movhi	r23,129
  80acd0:	bdd1d704 	addi	r23,r23,18268
  80acd4:	b8800017 	ldw	r2,0(r23)
  80acd8:	988d883a 	add	r6,r19,r2
  80acdc:	b9800015 	stw	r6,0(r23)
  80ace0:	d0e00b17 	ldw	r3,-32724(gp)
  80ace4:	00bfffc4 	movi	r2,-1
  80ace8:	18808e26 	beq	r3,r2,80af24 <_malloc_r+0x680>
  80acec:	2145c83a 	sub	r2,r4,r5
  80acf0:	3085883a 	add	r2,r6,r2
  80acf4:	b8800015 	stw	r2,0(r23)
  80acf8:	20c001cc 	andi	r3,r4,7
  80acfc:	18005f1e 	bne	r3,zero,80ae7c <_malloc_r+0x5d8>
  80ad00:	000b883a 	mov	r5,zero
  80ad04:	a4c5883a 	add	r2,r20,r19
  80ad08:	1083ffcc 	andi	r2,r2,4095
  80ad0c:	00c40004 	movi	r3,4096
  80ad10:	1887c83a 	sub	r3,r3,r2
  80ad14:	28e7883a 	add	r19,r5,r3
  80ad18:	9009883a 	mov	r4,r18
  80ad1c:	980b883a 	mov	r5,r19
  80ad20:	080cbbc0 	call	80cbbc <_sbrk_r>
  80ad24:	1007883a 	mov	r3,r2
  80ad28:	00bfffc4 	movi	r2,-1
  80ad2c:	18807a26 	beq	r3,r2,80af18 <_malloc_r+0x674>
  80ad30:	1d05c83a 	sub	r2,r3,r20
  80ad34:	9885883a 	add	r2,r19,r2
  80ad38:	10c00054 	ori	r3,r2,1
  80ad3c:	b8800017 	ldw	r2,0(r23)
  80ad40:	a021883a 	mov	r16,r20
  80ad44:	a0c00115 	stw	r3,4(r20)
  80ad48:	9885883a 	add	r2,r19,r2
  80ad4c:	b8800015 	stw	r2,0(r23)
  80ad50:	e5000215 	stw	r20,8(fp)
  80ad54:	b7003626 	beq	r22,fp,80ae30 <_malloc_r+0x58c>
  80ad58:	018003c4 	movi	r6,15
  80ad5c:	35404b36 	bltu	r6,r21,80ae8c <_malloc_r+0x5e8>
  80ad60:	00800044 	movi	r2,1
  80ad64:	a0800115 	stw	r2,4(r20)
  80ad68:	003fcd06 	br	80aca0 <_malloc_r+0x3fc>
  80ad6c:	2808d27a 	srli	r4,r5,9
  80ad70:	2000371e 	bne	r4,zero,80ae50 <_malloc_r+0x5ac>
  80ad74:	2808d0fa 	srli	r4,r5,3
  80ad78:	200690fa 	slli	r3,r4,3
  80ad7c:	1ad1883a 	add	r8,r3,r11
  80ad80:	41800217 	ldw	r6,8(r8)
  80ad84:	41805b26 	beq	r8,r6,80aef4 <_malloc_r+0x650>
  80ad88:	30800117 	ldw	r2,4(r6)
  80ad8c:	00ffff04 	movi	r3,-4
  80ad90:	10c4703a 	and	r2,r2,r3
  80ad94:	2880022e 	bgeu	r5,r2,80ada0 <_malloc_r+0x4fc>
  80ad98:	31800217 	ldw	r6,8(r6)
  80ad9c:	41bffa1e 	bne	r8,r6,80ad88 <_malloc_r+0x4e4>
  80ada0:	32000317 	ldw	r8,12(r6)
  80ada4:	39c00117 	ldw	r7,4(r7)
  80ada8:	82000315 	stw	r8,12(r16)
  80adac:	81800215 	stw	r6,8(r16)
  80adb0:	07002074 	movhi	fp,129
  80adb4:	e70c0e04 	addi	fp,fp,12344
  80adb8:	34000315 	stw	r16,12(r6)
  80adbc:	44000215 	stw	r16,8(r8)
  80adc0:	003f3e06 	br	80aabc <_malloc_r+0x218>
  80adc4:	63000044 	addi	r12,r12,1
  80adc8:	608000cc 	andi	r2,r12,3
  80adcc:	10005d26 	beq	r2,zero,80af44 <_malloc_r+0x6a0>
  80add0:	18c00204 	addi	r3,r3,8
  80add4:	003f5106 	br	80ab1c <_malloc_r+0x278>
  80add8:	8089883a 	add	r4,r16,r2
  80addc:	003f6d06 	br	80ab94 <_malloc_r+0x2f0>
  80ade0:	00805504 	movi	r2,340
  80ade4:	10c02036 	bltu	r2,r3,80ae68 <_malloc_r+0x5c4>
  80ade8:	8804d3fa 	srli	r2,r17,15
  80adec:	11801dc4 	addi	r6,r2,119
  80adf0:	300490fa 	slli	r2,r6,3
  80adf4:	003ed806 	br	80a958 <_malloc_r+0xb4>
  80adf8:	48c000c4 	addi	r3,r9,3
  80adfc:	003f3106 	br	80aac4 <_malloc_r+0x220>
  80ae00:	05c02074 	movhi	r23,129
  80ae04:	bdd1d704 	addi	r23,r23,18268
  80ae08:	b8800017 	ldw	r2,0(r23)
  80ae0c:	988d883a 	add	r6,r19,r2
  80ae10:	b9800015 	stw	r6,0(r23)
  80ae14:	293fb21e 	bne	r5,r4,80ace0 <_malloc_r+0x43c>
  80ae18:	2083ffcc 	andi	r2,r4,4095
  80ae1c:	103fb01e 	bne	r2,zero,80ace0 <_malloc_r+0x43c>
  80ae20:	e4000217 	ldw	r16,8(fp)
  80ae24:	9d45883a 	add	r2,r19,r21
  80ae28:	10800054 	ori	r2,r2,1
  80ae2c:	80800115 	stw	r2,4(r16)
  80ae30:	b8c00017 	ldw	r3,0(r23)
  80ae34:	d0a02417 	ldw	r2,-32624(gp)
  80ae38:	10c0012e 	bgeu	r2,r3,80ae40 <_malloc_r+0x59c>
  80ae3c:	d0e02415 	stw	r3,-32624(gp)
  80ae40:	d0a02517 	ldw	r2,-32620(gp)
  80ae44:	10ff962e 	bgeu	r2,r3,80aca0 <_malloc_r+0x3fc>
  80ae48:	d0e02515 	stw	r3,-32620(gp)
  80ae4c:	003f9406 	br	80aca0 <_malloc_r+0x3fc>
  80ae50:	00800104 	movi	r2,4
  80ae54:	11001e36 	bltu	r2,r4,80aed0 <_malloc_r+0x62c>
  80ae58:	2804d1ba 	srli	r2,r5,6
  80ae5c:	11000e04 	addi	r4,r2,56
  80ae60:	200690fa 	slli	r3,r4,3
  80ae64:	003fc506 	br	80ad7c <_malloc_r+0x4d8>
  80ae68:	00815504 	movi	r2,1364
  80ae6c:	10c01d2e 	bgeu	r2,r3,80aee4 <_malloc_r+0x640>
  80ae70:	01801f84 	movi	r6,126
  80ae74:	0080fc04 	movi	r2,1008
  80ae78:	003eb706 	br	80a958 <_malloc_r+0xb4>
  80ae7c:	00800204 	movi	r2,8
  80ae80:	10cbc83a 	sub	r5,r2,r3
  80ae84:	2169883a 	add	r20,r4,r5
  80ae88:	003f9e06 	br	80ad04 <_malloc_r+0x460>
  80ae8c:	00bffe04 	movi	r2,-8
  80ae90:	a93ffd04 	addi	r4,r21,-12
  80ae94:	2088703a 	and	r4,r4,r2
  80ae98:	b10b883a 	add	r5,r22,r4
  80ae9c:	00c00144 	movi	r3,5
  80aea0:	28c00215 	stw	r3,8(r5)
  80aea4:	28c00115 	stw	r3,4(r5)
  80aea8:	b0800117 	ldw	r2,4(r22)
  80aeac:	1080004c 	andi	r2,r2,1
  80aeb0:	2084b03a 	or	r2,r4,r2
  80aeb4:	b0800115 	stw	r2,4(r22)
  80aeb8:	313fdd2e 	bgeu	r6,r4,80ae30 <_malloc_r+0x58c>
  80aebc:	b1400204 	addi	r5,r22,8
  80aec0:	9009883a 	mov	r4,r18
  80aec4:	0809d1c0 	call	809d1c <_free_r>
  80aec8:	e4000217 	ldw	r16,8(fp)
  80aecc:	003fd806 	br	80ae30 <_malloc_r+0x58c>
  80aed0:	00800504 	movi	r2,20
  80aed4:	11001536 	bltu	r2,r4,80af2c <_malloc_r+0x688>
  80aed8:	210016c4 	addi	r4,r4,91
  80aedc:	200690fa 	slli	r3,r4,3
  80aee0:	003fa606 	br	80ad7c <_malloc_r+0x4d8>
  80aee4:	8804d4ba 	srli	r2,r17,18
  80aee8:	11801f04 	addi	r6,r2,124
  80aeec:	300490fa 	slli	r2,r6,3
  80aef0:	003e9906 	br	80a958 <_malloc_r+0xb4>
  80aef4:	2009d0ba 	srai	r4,r4,2
  80aef8:	01402074 	movhi	r5,129
  80aefc:	294c0e04 	addi	r5,r5,12344
  80af00:	00c00044 	movi	r3,1
  80af04:	28800117 	ldw	r2,4(r5)
  80af08:	1906983a 	sll	r3,r3,r4
  80af0c:	10c4b03a 	or	r2,r2,r3
  80af10:	28800115 	stw	r2,4(r5)
  80af14:	003fa306 	br	80ada4 <_malloc_r+0x500>
  80af18:	0027883a 	mov	r19,zero
  80af1c:	00c00044 	movi	r3,1
  80af20:	003f8606 	br	80ad3c <_malloc_r+0x498>
  80af24:	d1200b15 	stw	r4,-32724(gp)
  80af28:	003f7306 	br	80acf8 <_malloc_r+0x454>
  80af2c:	00801504 	movi	r2,84
  80af30:	11001936 	bltu	r2,r4,80af98 <_malloc_r+0x6f4>
  80af34:	2804d33a 	srli	r2,r5,12
  80af38:	11001b84 	addi	r4,r2,110
  80af3c:	200690fa 	slli	r3,r4,3
  80af40:	003f8e06 	br	80ad7c <_malloc_r+0x4d8>
  80af44:	480b883a 	mov	r5,r9
  80af48:	6807883a 	mov	r3,r13
  80af4c:	288000cc 	andi	r2,r5,3
  80af50:	18fffe04 	addi	r3,r3,-8
  80af54:	297fffc4 	addi	r5,r5,-1
  80af58:	10001526 	beq	r2,zero,80afb0 <_malloc_r+0x70c>
  80af5c:	18800217 	ldw	r2,8(r3)
  80af60:	10fffa26 	beq	r2,r3,80af4c <_malloc_r+0x6a8>
  80af64:	2109883a 	add	r4,r4,r4
  80af68:	393f1e36 	bltu	r7,r4,80abe4 <_malloc_r+0x340>
  80af6c:	203f1d26 	beq	r4,zero,80abe4 <_malloc_r+0x340>
  80af70:	21c4703a 	and	r2,r4,r7
  80af74:	10000226 	beq	r2,zero,80af80 <_malloc_r+0x6dc>
  80af78:	6013883a 	mov	r9,r12
  80af7c:	003ee106 	br	80ab04 <_malloc_r+0x260>
  80af80:	2109883a 	add	r4,r4,r4
  80af84:	3904703a 	and	r2,r7,r4
  80af88:	63000104 	addi	r12,r12,4
  80af8c:	103ffc26 	beq	r2,zero,80af80 <_malloc_r+0x6dc>
  80af90:	6013883a 	mov	r9,r12
  80af94:	003edb06 	br	80ab04 <_malloc_r+0x260>
  80af98:	00805504 	movi	r2,340
  80af9c:	11000836 	bltu	r2,r4,80afc0 <_malloc_r+0x71c>
  80afa0:	2804d3fa 	srli	r2,r5,15
  80afa4:	11001dc4 	addi	r4,r2,119
  80afa8:	200690fa 	slli	r3,r4,3
  80afac:	003f7306 	br	80ad7c <_malloc_r+0x4d8>
  80afb0:	0104303a 	nor	r2,zero,r4
  80afb4:	388e703a 	and	r7,r7,r2
  80afb8:	e1c00115 	stw	r7,4(fp)
  80afbc:	003fe906 	br	80af64 <_malloc_r+0x6c0>
  80afc0:	00815504 	movi	r2,1364
  80afc4:	1100032e 	bgeu	r2,r4,80afd4 <_malloc_r+0x730>
  80afc8:	01001f84 	movi	r4,126
  80afcc:	00c0fc04 	movi	r3,1008
  80afd0:	003f6a06 	br	80ad7c <_malloc_r+0x4d8>
  80afd4:	2804d4ba 	srli	r2,r5,18
  80afd8:	11001f04 	addi	r4,r2,124
  80afdc:	200690fa 	slli	r3,r4,3
  80afe0:	003f6606 	br	80ad7c <_malloc_r+0x4d8>

0080afe4 <memchr>:
  80afe4:	008000c4 	movi	r2,3
  80afe8:	29403fcc 	andi	r5,r5,255
  80afec:	2007883a 	mov	r3,r4
  80aff0:	1180022e 	bgeu	r2,r6,80affc <memchr+0x18>
  80aff4:	2084703a 	and	r2,r4,r2
  80aff8:	10000b26 	beq	r2,zero,80b028 <memchr+0x44>
  80affc:	313fffc4 	addi	r4,r6,-1
  80b000:	3000051e 	bne	r6,zero,80b018 <memchr+0x34>
  80b004:	00002c06 	br	80b0b8 <memchr+0xd4>
  80b008:	213fffc4 	addi	r4,r4,-1
  80b00c:	00bfffc4 	movi	r2,-1
  80b010:	18c00044 	addi	r3,r3,1
  80b014:	20802826 	beq	r4,r2,80b0b8 <memchr+0xd4>
  80b018:	18800003 	ldbu	r2,0(r3)
  80b01c:	28bffa1e 	bne	r5,r2,80b008 <memchr+0x24>
  80b020:	1805883a 	mov	r2,r3
  80b024:	f800283a 	ret
  80b028:	0011883a 	mov	r8,zero
  80b02c:	0007883a 	mov	r3,zero
  80b030:	01c00104 	movi	r7,4
  80b034:	4004923a 	slli	r2,r8,8
  80b038:	18c00044 	addi	r3,r3,1
  80b03c:	1151883a 	add	r8,r2,r5
  80b040:	19fffc1e 	bne	r3,r7,80b034 <memchr+0x50>
  80b044:	02bfbff4 	movhi	r10,65279
  80b048:	52bfbfc4 	addi	r10,r10,-257
  80b04c:	02602074 	movhi	r9,32897
  80b050:	4a602004 	addi	r9,r9,-32640
  80b054:	02c000c4 	movi	r11,3
  80b058:	20800017 	ldw	r2,0(r4)
  80b05c:	31bfff04 	addi	r6,r6,-4
  80b060:	200f883a 	mov	r7,r4
  80b064:	1204f03a 	xor	r2,r2,r8
  80b068:	1287883a 	add	r3,r2,r10
  80b06c:	1a46703a 	and	r3,r3,r9
  80b070:	0084303a 	nor	r2,zero,r2
  80b074:	10c4703a 	and	r2,r2,r3
  80b078:	10000b26 	beq	r2,zero,80b0a8 <memchr+0xc4>
  80b07c:	20800003 	ldbu	r2,0(r4)
  80b080:	28800f26 	beq	r5,r2,80b0c0 <memchr+0xdc>
  80b084:	20800043 	ldbu	r2,1(r4)
  80b088:	21c00044 	addi	r7,r4,1
  80b08c:	28800c26 	beq	r5,r2,80b0c0 <memchr+0xdc>
  80b090:	20800083 	ldbu	r2,2(r4)
  80b094:	21c00084 	addi	r7,r4,2
  80b098:	28800926 	beq	r5,r2,80b0c0 <memchr+0xdc>
  80b09c:	208000c3 	ldbu	r2,3(r4)
  80b0a0:	21c000c4 	addi	r7,r4,3
  80b0a4:	28800626 	beq	r5,r2,80b0c0 <memchr+0xdc>
  80b0a8:	21000104 	addi	r4,r4,4
  80b0ac:	59bfea36 	bltu	r11,r6,80b058 <memchr+0x74>
  80b0b0:	2007883a 	mov	r3,r4
  80b0b4:	003fd106 	br	80affc <memchr+0x18>
  80b0b8:	0005883a 	mov	r2,zero
  80b0bc:	f800283a 	ret
  80b0c0:	3805883a 	mov	r2,r7
  80b0c4:	f800283a 	ret

0080b0c8 <memcpy>:
  80b0c8:	01c003c4 	movi	r7,15
  80b0cc:	2007883a 	mov	r3,r4
  80b0d0:	3980032e 	bgeu	r7,r6,80b0e0 <memcpy+0x18>
  80b0d4:	2904b03a 	or	r2,r5,r4
  80b0d8:	108000cc 	andi	r2,r2,3
  80b0dc:	10000926 	beq	r2,zero,80b104 <memcpy+0x3c>
  80b0e0:	30000626 	beq	r6,zero,80b0fc <memcpy+0x34>
  80b0e4:	30cd883a 	add	r6,r6,r3
  80b0e8:	28800003 	ldbu	r2,0(r5)
  80b0ec:	29400044 	addi	r5,r5,1
  80b0f0:	18800005 	stb	r2,0(r3)
  80b0f4:	18c00044 	addi	r3,r3,1
  80b0f8:	30fffb1e 	bne	r6,r3,80b0e8 <memcpy+0x20>
  80b0fc:	2005883a 	mov	r2,r4
  80b100:	f800283a 	ret
  80b104:	3811883a 	mov	r8,r7
  80b108:	200f883a 	mov	r7,r4
  80b10c:	28c00017 	ldw	r3,0(r5)
  80b110:	31bffc04 	addi	r6,r6,-16
  80b114:	38c00015 	stw	r3,0(r7)
  80b118:	28800117 	ldw	r2,4(r5)
  80b11c:	38800115 	stw	r2,4(r7)
  80b120:	28c00217 	ldw	r3,8(r5)
  80b124:	38c00215 	stw	r3,8(r7)
  80b128:	28800317 	ldw	r2,12(r5)
  80b12c:	29400404 	addi	r5,r5,16
  80b130:	38800315 	stw	r2,12(r7)
  80b134:	39c00404 	addi	r7,r7,16
  80b138:	41bff436 	bltu	r8,r6,80b10c <memcpy+0x44>
  80b13c:	008000c4 	movi	r2,3
  80b140:	1180072e 	bgeu	r2,r6,80b160 <memcpy+0x98>
  80b144:	1007883a 	mov	r3,r2
  80b148:	28800017 	ldw	r2,0(r5)
  80b14c:	31bfff04 	addi	r6,r6,-4
  80b150:	29400104 	addi	r5,r5,4
  80b154:	38800015 	stw	r2,0(r7)
  80b158:	39c00104 	addi	r7,r7,4
  80b15c:	19bffa36 	bltu	r3,r6,80b148 <memcpy+0x80>
  80b160:	3807883a 	mov	r3,r7
  80b164:	003fde06 	br	80b0e0 <memcpy+0x18>

0080b168 <memmove>:
  80b168:	2807883a 	mov	r3,r5
  80b16c:	2011883a 	mov	r8,r4
  80b170:	29000c2e 	bgeu	r5,r4,80b1a4 <memmove+0x3c>
  80b174:	298f883a 	add	r7,r5,r6
  80b178:	21c00a2e 	bgeu	r4,r7,80b1a4 <memmove+0x3c>
  80b17c:	30000726 	beq	r6,zero,80b19c <memmove+0x34>
  80b180:	2187883a 	add	r3,r4,r6
  80b184:	198dc83a 	sub	r6,r3,r6
  80b188:	39ffffc4 	addi	r7,r7,-1
  80b18c:	38800003 	ldbu	r2,0(r7)
  80b190:	18ffffc4 	addi	r3,r3,-1
  80b194:	18800005 	stb	r2,0(r3)
  80b198:	19bffb1e 	bne	r3,r6,80b188 <memmove+0x20>
  80b19c:	2005883a 	mov	r2,r4
  80b1a0:	f800283a 	ret
  80b1a4:	01c003c4 	movi	r7,15
  80b1a8:	39800a36 	bltu	r7,r6,80b1d4 <memmove+0x6c>
  80b1ac:	303ffb26 	beq	r6,zero,80b19c <memmove+0x34>
  80b1b0:	400f883a 	mov	r7,r8
  80b1b4:	320d883a 	add	r6,r6,r8
  80b1b8:	28800003 	ldbu	r2,0(r5)
  80b1bc:	29400044 	addi	r5,r5,1
  80b1c0:	38800005 	stb	r2,0(r7)
  80b1c4:	39c00044 	addi	r7,r7,1
  80b1c8:	39bffb1e 	bne	r7,r6,80b1b8 <memmove+0x50>
  80b1cc:	2005883a 	mov	r2,r4
  80b1d0:	f800283a 	ret
  80b1d4:	1904b03a 	or	r2,r3,r4
  80b1d8:	108000cc 	andi	r2,r2,3
  80b1dc:	103ff31e 	bne	r2,zero,80b1ac <memmove+0x44>
  80b1e0:	3811883a 	mov	r8,r7
  80b1e4:	180b883a 	mov	r5,r3
  80b1e8:	200f883a 	mov	r7,r4
  80b1ec:	28c00017 	ldw	r3,0(r5)
  80b1f0:	31bffc04 	addi	r6,r6,-16
  80b1f4:	38c00015 	stw	r3,0(r7)
  80b1f8:	28800117 	ldw	r2,4(r5)
  80b1fc:	38800115 	stw	r2,4(r7)
  80b200:	28c00217 	ldw	r3,8(r5)
  80b204:	38c00215 	stw	r3,8(r7)
  80b208:	28800317 	ldw	r2,12(r5)
  80b20c:	29400404 	addi	r5,r5,16
  80b210:	38800315 	stw	r2,12(r7)
  80b214:	39c00404 	addi	r7,r7,16
  80b218:	41bff436 	bltu	r8,r6,80b1ec <memmove+0x84>
  80b21c:	008000c4 	movi	r2,3
  80b220:	1180072e 	bgeu	r2,r6,80b240 <memmove+0xd8>
  80b224:	1007883a 	mov	r3,r2
  80b228:	28800017 	ldw	r2,0(r5)
  80b22c:	31bfff04 	addi	r6,r6,-4
  80b230:	29400104 	addi	r5,r5,4
  80b234:	38800015 	stw	r2,0(r7)
  80b238:	39c00104 	addi	r7,r7,4
  80b23c:	19bffa36 	bltu	r3,r6,80b228 <memmove+0xc0>
  80b240:	3811883a 	mov	r8,r7
  80b244:	003fd906 	br	80b1ac <memmove+0x44>

0080b248 <memset>:
  80b248:	008000c4 	movi	r2,3
  80b24c:	29403fcc 	andi	r5,r5,255
  80b250:	2007883a 	mov	r3,r4
  80b254:	1180022e 	bgeu	r2,r6,80b260 <memset+0x18>
  80b258:	2084703a 	and	r2,r4,r2
  80b25c:	10000826 	beq	r2,zero,80b280 <memset+0x38>
  80b260:	30000526 	beq	r6,zero,80b278 <memset+0x30>
  80b264:	2805883a 	mov	r2,r5
  80b268:	30cd883a 	add	r6,r6,r3
  80b26c:	18800005 	stb	r2,0(r3)
  80b270:	18c00044 	addi	r3,r3,1
  80b274:	19bffd1e 	bne	r3,r6,80b26c <memset+0x24>
  80b278:	2005883a 	mov	r2,r4
  80b27c:	f800283a 	ret
  80b280:	2804923a 	slli	r2,r5,8
  80b284:	020003c4 	movi	r8,15
  80b288:	200f883a 	mov	r7,r4
  80b28c:	2884b03a 	or	r2,r5,r2
  80b290:	1006943a 	slli	r3,r2,16
  80b294:	10c6b03a 	or	r3,r2,r3
  80b298:	41800a2e 	bgeu	r8,r6,80b2c4 <memset+0x7c>
  80b29c:	4005883a 	mov	r2,r8
  80b2a0:	31bffc04 	addi	r6,r6,-16
  80b2a4:	38c00015 	stw	r3,0(r7)
  80b2a8:	38c00115 	stw	r3,4(r7)
  80b2ac:	38c00215 	stw	r3,8(r7)
  80b2b0:	38c00315 	stw	r3,12(r7)
  80b2b4:	39c00404 	addi	r7,r7,16
  80b2b8:	11bff936 	bltu	r2,r6,80b2a0 <memset+0x58>
  80b2bc:	008000c4 	movi	r2,3
  80b2c0:	1180052e 	bgeu	r2,r6,80b2d8 <memset+0x90>
  80b2c4:	31bfff04 	addi	r6,r6,-4
  80b2c8:	008000c4 	movi	r2,3
  80b2cc:	38c00015 	stw	r3,0(r7)
  80b2d0:	39c00104 	addi	r7,r7,4
  80b2d4:	11bffb36 	bltu	r2,r6,80b2c4 <memset+0x7c>
  80b2d8:	3807883a 	mov	r3,r7
  80b2dc:	003fe006 	br	80b260 <memset+0x18>

0080b2e0 <_Bfree>:
  80b2e0:	28000826 	beq	r5,zero,80b304 <_Bfree+0x24>
  80b2e4:	28800117 	ldw	r2,4(r5)
  80b2e8:	21001317 	ldw	r4,76(r4)
  80b2ec:	1085883a 	add	r2,r2,r2
  80b2f0:	1085883a 	add	r2,r2,r2
  80b2f4:	1105883a 	add	r2,r2,r4
  80b2f8:	10c00017 	ldw	r3,0(r2)
  80b2fc:	28c00015 	stw	r3,0(r5)
  80b300:	11400015 	stw	r5,0(r2)
  80b304:	f800283a 	ret

0080b308 <__hi0bits>:
  80b308:	20bfffec 	andhi	r2,r4,65535
  80b30c:	10001426 	beq	r2,zero,80b360 <__hi0bits+0x58>
  80b310:	0007883a 	mov	r3,zero
  80b314:	20bfc02c 	andhi	r2,r4,65280
  80b318:	1000021e 	bne	r2,zero,80b324 <__hi0bits+0x1c>
  80b31c:	2008923a 	slli	r4,r4,8
  80b320:	18c00204 	addi	r3,r3,8
  80b324:	20bc002c 	andhi	r2,r4,61440
  80b328:	1000021e 	bne	r2,zero,80b334 <__hi0bits+0x2c>
  80b32c:	2008913a 	slli	r4,r4,4
  80b330:	18c00104 	addi	r3,r3,4
  80b334:	20b0002c 	andhi	r2,r4,49152
  80b338:	1000031e 	bne	r2,zero,80b348 <__hi0bits+0x40>
  80b33c:	2105883a 	add	r2,r4,r4
  80b340:	18c00084 	addi	r3,r3,2
  80b344:	1089883a 	add	r4,r2,r2
  80b348:	20000316 	blt	r4,zero,80b358 <__hi0bits+0x50>
  80b34c:	2090002c 	andhi	r2,r4,16384
  80b350:	10000626 	beq	r2,zero,80b36c <__hi0bits+0x64>
  80b354:	18c00044 	addi	r3,r3,1
  80b358:	1805883a 	mov	r2,r3
  80b35c:	f800283a 	ret
  80b360:	2008943a 	slli	r4,r4,16
  80b364:	00c00404 	movi	r3,16
  80b368:	003fea06 	br	80b314 <__hi0bits+0xc>
  80b36c:	00c00804 	movi	r3,32
  80b370:	1805883a 	mov	r2,r3
  80b374:	f800283a 	ret

0080b378 <__lo0bits>:
  80b378:	20c00017 	ldw	r3,0(r4)
  80b37c:	188001cc 	andi	r2,r3,7
  80b380:	10000a26 	beq	r2,zero,80b3ac <__lo0bits+0x34>
  80b384:	1880004c 	andi	r2,r3,1
  80b388:	1005003a 	cmpeq	r2,r2,zero
  80b38c:	10002126 	beq	r2,zero,80b414 <__lo0bits+0x9c>
  80b390:	1880008c 	andi	r2,r3,2
  80b394:	1000251e 	bne	r2,zero,80b42c <__lo0bits+0xb4>
  80b398:	1804d0ba 	srli	r2,r3,2
  80b39c:	01400084 	movi	r5,2
  80b3a0:	20800015 	stw	r2,0(r4)
  80b3a4:	2805883a 	mov	r2,r5
  80b3a8:	f800283a 	ret
  80b3ac:	18bfffcc 	andi	r2,r3,65535
  80b3b0:	10001526 	beq	r2,zero,80b408 <__lo0bits+0x90>
  80b3b4:	000b883a 	mov	r5,zero
  80b3b8:	18803fcc 	andi	r2,r3,255
  80b3bc:	1000021e 	bne	r2,zero,80b3c8 <__lo0bits+0x50>
  80b3c0:	1806d23a 	srli	r3,r3,8
  80b3c4:	29400204 	addi	r5,r5,8
  80b3c8:	188003cc 	andi	r2,r3,15
  80b3cc:	1000021e 	bne	r2,zero,80b3d8 <__lo0bits+0x60>
  80b3d0:	1806d13a 	srli	r3,r3,4
  80b3d4:	29400104 	addi	r5,r5,4
  80b3d8:	188000cc 	andi	r2,r3,3
  80b3dc:	1000021e 	bne	r2,zero,80b3e8 <__lo0bits+0x70>
  80b3e0:	1806d0ba 	srli	r3,r3,2
  80b3e4:	29400084 	addi	r5,r5,2
  80b3e8:	1880004c 	andi	r2,r3,1
  80b3ec:	1000031e 	bne	r2,zero,80b3fc <__lo0bits+0x84>
  80b3f0:	1806d07a 	srli	r3,r3,1
  80b3f4:	18000a26 	beq	r3,zero,80b420 <__lo0bits+0xa8>
  80b3f8:	29400044 	addi	r5,r5,1
  80b3fc:	2805883a 	mov	r2,r5
  80b400:	20c00015 	stw	r3,0(r4)
  80b404:	f800283a 	ret
  80b408:	1806d43a 	srli	r3,r3,16
  80b40c:	01400404 	movi	r5,16
  80b410:	003fe906 	br	80b3b8 <__lo0bits+0x40>
  80b414:	000b883a 	mov	r5,zero
  80b418:	2805883a 	mov	r2,r5
  80b41c:	f800283a 	ret
  80b420:	01400804 	movi	r5,32
  80b424:	2805883a 	mov	r2,r5
  80b428:	f800283a 	ret
  80b42c:	1804d07a 	srli	r2,r3,1
  80b430:	01400044 	movi	r5,1
  80b434:	20800015 	stw	r2,0(r4)
  80b438:	003fda06 	br	80b3a4 <__lo0bits+0x2c>

0080b43c <__mcmp>:
  80b43c:	20800417 	ldw	r2,16(r4)
  80b440:	28c00417 	ldw	r3,16(r5)
  80b444:	10cfc83a 	sub	r7,r2,r3
  80b448:	38000c1e 	bne	r7,zero,80b47c <__mcmp+0x40>
  80b44c:	18c5883a 	add	r2,r3,r3
  80b450:	1085883a 	add	r2,r2,r2
  80b454:	10c00504 	addi	r3,r2,20
  80b458:	21000504 	addi	r4,r4,20
  80b45c:	28cb883a 	add	r5,r5,r3
  80b460:	2085883a 	add	r2,r4,r2
  80b464:	10bfff04 	addi	r2,r2,-4
  80b468:	297fff04 	addi	r5,r5,-4
  80b46c:	11800017 	ldw	r6,0(r2)
  80b470:	28c00017 	ldw	r3,0(r5)
  80b474:	30c0031e 	bne	r6,r3,80b484 <__mcmp+0x48>
  80b478:	20bffa36 	bltu	r4,r2,80b464 <__mcmp+0x28>
  80b47c:	3805883a 	mov	r2,r7
  80b480:	f800283a 	ret
  80b484:	30c00336 	bltu	r6,r3,80b494 <__mcmp+0x58>
  80b488:	01c00044 	movi	r7,1
  80b48c:	3805883a 	mov	r2,r7
  80b490:	f800283a 	ret
  80b494:	01ffffc4 	movi	r7,-1
  80b498:	003ff806 	br	80b47c <__mcmp+0x40>

0080b49c <__ulp>:
  80b49c:	295ffc2c 	andhi	r5,r5,32752
  80b4a0:	013f3034 	movhi	r4,64704
  80b4a4:	290b883a 	add	r5,r5,r4
  80b4a8:	0145c83a 	sub	r2,zero,r5
  80b4ac:	1007d53a 	srai	r3,r2,20
  80b4b0:	000d883a 	mov	r6,zero
  80b4b4:	0140040e 	bge	zero,r5,80b4c8 <__ulp+0x2c>
  80b4b8:	280f883a 	mov	r7,r5
  80b4bc:	3807883a 	mov	r3,r7
  80b4c0:	3005883a 	mov	r2,r6
  80b4c4:	f800283a 	ret
  80b4c8:	008004c4 	movi	r2,19
  80b4cc:	193ffb04 	addi	r4,r3,-20
  80b4d0:	10c00c0e 	bge	r2,r3,80b504 <__ulp+0x68>
  80b4d4:	008007c4 	movi	r2,31
  80b4d8:	1107c83a 	sub	r3,r2,r4
  80b4dc:	00800784 	movi	r2,30
  80b4e0:	01400044 	movi	r5,1
  80b4e4:	11000216 	blt	r2,r4,80b4f0 <__ulp+0x54>
  80b4e8:	00800044 	movi	r2,1
  80b4ec:	10ca983a 	sll	r5,r2,r3
  80b4f0:	000f883a 	mov	r7,zero
  80b4f4:	280d883a 	mov	r6,r5
  80b4f8:	3807883a 	mov	r3,r7
  80b4fc:	3005883a 	mov	r2,r6
  80b500:	f800283a 	ret
  80b504:	00800234 	movhi	r2,8
  80b508:	10cfd83a 	sra	r7,r2,r3
  80b50c:	000d883a 	mov	r6,zero
  80b510:	3005883a 	mov	r2,r6
  80b514:	3807883a 	mov	r3,r7
  80b518:	f800283a 	ret

0080b51c <__b2d>:
  80b51c:	20800417 	ldw	r2,16(r4)
  80b520:	defff904 	addi	sp,sp,-28
  80b524:	dd000415 	stw	r20,16(sp)
  80b528:	1085883a 	add	r2,r2,r2
  80b52c:	25000504 	addi	r20,r4,20
  80b530:	1085883a 	add	r2,r2,r2
  80b534:	dc000015 	stw	r16,0(sp)
  80b538:	a0a1883a 	add	r16,r20,r2
  80b53c:	dd400515 	stw	r21,20(sp)
  80b540:	857fff17 	ldw	r21,-4(r16)
  80b544:	dc400115 	stw	r17,4(sp)
  80b548:	dfc00615 	stw	ra,24(sp)
  80b54c:	a809883a 	mov	r4,r21
  80b550:	2823883a 	mov	r17,r5
  80b554:	dcc00315 	stw	r19,12(sp)
  80b558:	dc800215 	stw	r18,8(sp)
  80b55c:	080b3080 	call	80b308 <__hi0bits>
  80b560:	100b883a 	mov	r5,r2
  80b564:	00800804 	movi	r2,32
  80b568:	1145c83a 	sub	r2,r2,r5
  80b56c:	88800015 	stw	r2,0(r17)
  80b570:	00800284 	movi	r2,10
  80b574:	80ffff04 	addi	r3,r16,-4
  80b578:	11401416 	blt	r2,r5,80b5cc <__b2d+0xb0>
  80b57c:	008002c4 	movi	r2,11
  80b580:	1149c83a 	sub	r4,r2,r5
  80b584:	a0c02736 	bltu	r20,r3,80b624 <__b2d+0x108>
  80b588:	000d883a 	mov	r6,zero
  80b58c:	28800544 	addi	r2,r5,21
  80b590:	a906d83a 	srl	r3,r21,r4
  80b594:	a884983a 	sll	r2,r21,r2
  80b598:	1ccffc34 	orhi	r19,r3,16368
  80b59c:	11a4b03a 	or	r18,r2,r6
  80b5a0:	9005883a 	mov	r2,r18
  80b5a4:	9807883a 	mov	r3,r19
  80b5a8:	dfc00617 	ldw	ra,24(sp)
  80b5ac:	dd400517 	ldw	r21,20(sp)
  80b5b0:	dd000417 	ldw	r20,16(sp)
  80b5b4:	dcc00317 	ldw	r19,12(sp)
  80b5b8:	dc800217 	ldw	r18,8(sp)
  80b5bc:	dc400117 	ldw	r17,4(sp)
  80b5c0:	dc000017 	ldw	r16,0(sp)
  80b5c4:	dec00704 	addi	sp,sp,28
  80b5c8:	f800283a 	ret
  80b5cc:	a0c00e36 	bltu	r20,r3,80b608 <__b2d+0xec>
  80b5d0:	293ffd44 	addi	r4,r5,-11
  80b5d4:	000d883a 	mov	r6,zero
  80b5d8:	20000f26 	beq	r4,zero,80b618 <__b2d+0xfc>
  80b5dc:	00800804 	movi	r2,32
  80b5e0:	110bc83a 	sub	r5,r2,r4
  80b5e4:	a0c01236 	bltu	r20,r3,80b630 <__b2d+0x114>
  80b5e8:	000f883a 	mov	r7,zero
  80b5ec:	a904983a 	sll	r2,r21,r4
  80b5f0:	3146d83a 	srl	r3,r6,r5
  80b5f4:	3108983a 	sll	r4,r6,r4
  80b5f8:	108ffc34 	orhi	r2,r2,16368
  80b5fc:	18a6b03a 	or	r19,r3,r2
  80b600:	3924b03a 	or	r18,r7,r4
  80b604:	003fe606 	br	80b5a0 <__b2d+0x84>
  80b608:	293ffd44 	addi	r4,r5,-11
  80b60c:	81bffe17 	ldw	r6,-8(r16)
  80b610:	80fffe04 	addi	r3,r16,-8
  80b614:	203ff11e 	bne	r4,zero,80b5dc <__b2d+0xc0>
  80b618:	accffc34 	orhi	r19,r21,16368
  80b61c:	3025883a 	mov	r18,r6
  80b620:	003fdf06 	br	80b5a0 <__b2d+0x84>
  80b624:	18bfff17 	ldw	r2,-4(r3)
  80b628:	110cd83a 	srl	r6,r2,r4
  80b62c:	003fd706 	br	80b58c <__b2d+0x70>
  80b630:	18bfff17 	ldw	r2,-4(r3)
  80b634:	114ed83a 	srl	r7,r2,r5
  80b638:	003fec06 	br	80b5ec <__b2d+0xd0>

0080b63c <__ratio>:
  80b63c:	defff904 	addi	sp,sp,-28
  80b640:	dc400215 	stw	r17,8(sp)
  80b644:	2823883a 	mov	r17,r5
  80b648:	d80b883a 	mov	r5,sp
  80b64c:	dfc00615 	stw	ra,24(sp)
  80b650:	dd000515 	stw	r20,20(sp)
  80b654:	dcc00415 	stw	r19,16(sp)
  80b658:	dc800315 	stw	r18,12(sp)
  80b65c:	2025883a 	mov	r18,r4
  80b660:	080b51c0 	call	80b51c <__b2d>
  80b664:	8809883a 	mov	r4,r17
  80b668:	d9400104 	addi	r5,sp,4
  80b66c:	1027883a 	mov	r19,r2
  80b670:	1829883a 	mov	r20,r3
  80b674:	080b51c0 	call	80b51c <__b2d>
  80b678:	89000417 	ldw	r4,16(r17)
  80b67c:	91c00417 	ldw	r7,16(r18)
  80b680:	d9800117 	ldw	r6,4(sp)
  80b684:	180b883a 	mov	r5,r3
  80b688:	390fc83a 	sub	r7,r7,r4
  80b68c:	1009883a 	mov	r4,r2
  80b690:	d8800017 	ldw	r2,0(sp)
  80b694:	380e917a 	slli	r7,r7,5
  80b698:	2011883a 	mov	r8,r4
  80b69c:	1185c83a 	sub	r2,r2,r6
  80b6a0:	11c5883a 	add	r2,r2,r7
  80b6a4:	1006953a 	slli	r3,r2,20
  80b6a8:	2813883a 	mov	r9,r5
  80b6ac:	00800d0e 	bge	zero,r2,80b6e4 <__ratio+0xa8>
  80b6b0:	1d29883a 	add	r20,r3,r20
  80b6b4:	a00b883a 	mov	r5,r20
  80b6b8:	480f883a 	mov	r7,r9
  80b6bc:	9809883a 	mov	r4,r19
  80b6c0:	400d883a 	mov	r6,r8
  80b6c4:	080e4b80 	call	80e4b8 <__divdf3>
  80b6c8:	dfc00617 	ldw	ra,24(sp)
  80b6cc:	dd000517 	ldw	r20,20(sp)
  80b6d0:	dcc00417 	ldw	r19,16(sp)
  80b6d4:	dc800317 	ldw	r18,12(sp)
  80b6d8:	dc400217 	ldw	r17,8(sp)
  80b6dc:	dec00704 	addi	sp,sp,28
  80b6e0:	f800283a 	ret
  80b6e4:	28d3c83a 	sub	r9,r5,r3
  80b6e8:	003ff206 	br	80b6b4 <__ratio+0x78>

0080b6ec <_mprec_log10>:
  80b6ec:	defffe04 	addi	sp,sp,-8
  80b6f0:	008005c4 	movi	r2,23
  80b6f4:	dc000015 	stw	r16,0(sp)
  80b6f8:	dfc00115 	stw	ra,4(sp)
  80b6fc:	2021883a 	mov	r16,r4
  80b700:	11000c16 	blt	r2,r4,80b734 <_mprec_log10+0x48>
  80b704:	200490fa 	slli	r2,r4,3
  80b708:	00c02074 	movhi	r3,129
  80b70c:	18c9ff04 	addi	r3,r3,10236
  80b710:	10c5883a 	add	r2,r2,r3
  80b714:	12400117 	ldw	r9,4(r2)
  80b718:	12000017 	ldw	r8,0(r2)
  80b71c:	4807883a 	mov	r3,r9
  80b720:	4005883a 	mov	r2,r8
  80b724:	dfc00117 	ldw	ra,4(sp)
  80b728:	dc000017 	ldw	r16,0(sp)
  80b72c:	dec00204 	addi	sp,sp,8
  80b730:	f800283a 	ret
  80b734:	0011883a 	mov	r8,zero
  80b738:	024ffc34 	movhi	r9,16368
  80b73c:	0005883a 	mov	r2,zero
  80b740:	00d00934 	movhi	r3,16420
  80b744:	480b883a 	mov	r5,r9
  80b748:	4009883a 	mov	r4,r8
  80b74c:	180f883a 	mov	r7,r3
  80b750:	100d883a 	mov	r6,r2
  80b754:	080e0f40 	call	80e0f4 <__muldf3>
  80b758:	843fffc4 	addi	r16,r16,-1
  80b75c:	1011883a 	mov	r8,r2
  80b760:	1813883a 	mov	r9,r3
  80b764:	803ff51e 	bne	r16,zero,80b73c <_mprec_log10+0x50>
  80b768:	4005883a 	mov	r2,r8
  80b76c:	4807883a 	mov	r3,r9
  80b770:	dfc00117 	ldw	ra,4(sp)
  80b774:	dc000017 	ldw	r16,0(sp)
  80b778:	dec00204 	addi	sp,sp,8
  80b77c:	f800283a 	ret

0080b780 <__copybits>:
  80b780:	297fffc4 	addi	r5,r5,-1
  80b784:	30800417 	ldw	r2,16(r6)
  80b788:	280bd17a 	srai	r5,r5,5
  80b78c:	31800504 	addi	r6,r6,20
  80b790:	1085883a 	add	r2,r2,r2
  80b794:	294b883a 	add	r5,r5,r5
  80b798:	294b883a 	add	r5,r5,r5
  80b79c:	1085883a 	add	r2,r2,r2
  80b7a0:	290b883a 	add	r5,r5,r4
  80b7a4:	3087883a 	add	r3,r6,r2
  80b7a8:	29400104 	addi	r5,r5,4
  80b7ac:	30c0052e 	bgeu	r6,r3,80b7c4 <__copybits+0x44>
  80b7b0:	30800017 	ldw	r2,0(r6)
  80b7b4:	31800104 	addi	r6,r6,4
  80b7b8:	20800015 	stw	r2,0(r4)
  80b7bc:	21000104 	addi	r4,r4,4
  80b7c0:	30fffb36 	bltu	r6,r3,80b7b0 <__copybits+0x30>
  80b7c4:	2140032e 	bgeu	r4,r5,80b7d4 <__copybits+0x54>
  80b7c8:	20000015 	stw	zero,0(r4)
  80b7cc:	21000104 	addi	r4,r4,4
  80b7d0:	217ffd36 	bltu	r4,r5,80b7c8 <__copybits+0x48>
  80b7d4:	f800283a 	ret

0080b7d8 <__any_on>:
  80b7d8:	20800417 	ldw	r2,16(r4)
  80b7dc:	2807d17a 	srai	r3,r5,5
  80b7e0:	21000504 	addi	r4,r4,20
  80b7e4:	10c00d0e 	bge	r2,r3,80b81c <__any_on+0x44>
  80b7e8:	1085883a 	add	r2,r2,r2
  80b7ec:	1085883a 	add	r2,r2,r2
  80b7f0:	208d883a 	add	r6,r4,r2
  80b7f4:	2180182e 	bgeu	r4,r6,80b858 <__any_on+0x80>
  80b7f8:	30bfff17 	ldw	r2,-4(r6)
  80b7fc:	30ffff04 	addi	r3,r6,-4
  80b800:	1000041e 	bne	r2,zero,80b814 <__any_on+0x3c>
  80b804:	20c0142e 	bgeu	r4,r3,80b858 <__any_on+0x80>
  80b808:	18ffff04 	addi	r3,r3,-4
  80b80c:	18800017 	ldw	r2,0(r3)
  80b810:	103ffc26 	beq	r2,zero,80b804 <__any_on+0x2c>
  80b814:	00800044 	movi	r2,1
  80b818:	f800283a 	ret
  80b81c:	18800a0e 	bge	r3,r2,80b848 <__any_on+0x70>
  80b820:	294007cc 	andi	r5,r5,31
  80b824:	28000826 	beq	r5,zero,80b848 <__any_on+0x70>
  80b828:	18c5883a 	add	r2,r3,r3
  80b82c:	1085883a 	add	r2,r2,r2
  80b830:	208d883a 	add	r6,r4,r2
  80b834:	30c00017 	ldw	r3,0(r6)
  80b838:	1944d83a 	srl	r2,r3,r5
  80b83c:	1144983a 	sll	r2,r2,r5
  80b840:	18bff41e 	bne	r3,r2,80b814 <__any_on+0x3c>
  80b844:	003feb06 	br	80b7f4 <__any_on+0x1c>
  80b848:	18c5883a 	add	r2,r3,r3
  80b84c:	1085883a 	add	r2,r2,r2
  80b850:	208d883a 	add	r6,r4,r2
  80b854:	003fe706 	br	80b7f4 <__any_on+0x1c>
  80b858:	0005883a 	mov	r2,zero
  80b85c:	f800283a 	ret

0080b860 <_Balloc>:
  80b860:	20c01317 	ldw	r3,76(r4)
  80b864:	defffb04 	addi	sp,sp,-20
  80b868:	dcc00315 	stw	r19,12(sp)
  80b86c:	dc800215 	stw	r18,8(sp)
  80b870:	dfc00415 	stw	ra,16(sp)
  80b874:	2825883a 	mov	r18,r5
  80b878:	dc400115 	stw	r17,4(sp)
  80b87c:	dc000015 	stw	r16,0(sp)
  80b880:	2027883a 	mov	r19,r4
  80b884:	01800404 	movi	r6,16
  80b888:	01400104 	movi	r5,4
  80b88c:	18001726 	beq	r3,zero,80b8ec <_Balloc+0x8c>
  80b890:	01400044 	movi	r5,1
  80b894:	9485883a 	add	r2,r18,r18
  80b898:	2ca2983a 	sll	r17,r5,r18
  80b89c:	1085883a 	add	r2,r2,r2
  80b8a0:	10c7883a 	add	r3,r2,r3
  80b8a4:	1c000017 	ldw	r16,0(r3)
  80b8a8:	8c4d883a 	add	r6,r17,r17
  80b8ac:	318d883a 	add	r6,r6,r6
  80b8b0:	9809883a 	mov	r4,r19
  80b8b4:	31800504 	addi	r6,r6,20
  80b8b8:	80001226 	beq	r16,zero,80b904 <_Balloc+0xa4>
  80b8bc:	80800017 	ldw	r2,0(r16)
  80b8c0:	18800015 	stw	r2,0(r3)
  80b8c4:	80000415 	stw	zero,16(r16)
  80b8c8:	80000315 	stw	zero,12(r16)
  80b8cc:	8005883a 	mov	r2,r16
  80b8d0:	dfc00417 	ldw	ra,16(sp)
  80b8d4:	dcc00317 	ldw	r19,12(sp)
  80b8d8:	dc800217 	ldw	r18,8(sp)
  80b8dc:	dc400117 	ldw	r17,4(sp)
  80b8e0:	dc000017 	ldw	r16,0(sp)
  80b8e4:	dec00504 	addi	sp,sp,20
  80b8e8:	f800283a 	ret
  80b8ec:	080cff80 	call	80cff8 <_calloc_r>
  80b8f0:	1007883a 	mov	r3,r2
  80b8f4:	0021883a 	mov	r16,zero
  80b8f8:	98801315 	stw	r2,76(r19)
  80b8fc:	103fe41e 	bne	r2,zero,80b890 <_Balloc+0x30>
  80b900:	003ff206 	br	80b8cc <_Balloc+0x6c>
  80b904:	080cff80 	call	80cff8 <_calloc_r>
  80b908:	103ff026 	beq	r2,zero,80b8cc <_Balloc+0x6c>
  80b90c:	1021883a 	mov	r16,r2
  80b910:	14800115 	stw	r18,4(r2)
  80b914:	14400215 	stw	r17,8(r2)
  80b918:	003fea06 	br	80b8c4 <_Balloc+0x64>

0080b91c <__d2b>:
  80b91c:	defff504 	addi	sp,sp,-44
  80b920:	dcc00515 	stw	r19,20(sp)
  80b924:	04c00044 	movi	r19,1
  80b928:	dc000215 	stw	r16,8(sp)
  80b92c:	2821883a 	mov	r16,r5
  80b930:	980b883a 	mov	r5,r19
  80b934:	ddc00915 	stw	r23,36(sp)
  80b938:	dd800815 	stw	r22,32(sp)
  80b93c:	dd400715 	stw	r21,28(sp)
  80b940:	dd000615 	stw	r20,24(sp)
  80b944:	dc800415 	stw	r18,16(sp)
  80b948:	dc400315 	stw	r17,12(sp)
  80b94c:	dfc00a15 	stw	ra,40(sp)
  80b950:	3023883a 	mov	r17,r6
  80b954:	382d883a 	mov	r22,r7
  80b958:	ddc00b17 	ldw	r23,44(sp)
  80b95c:	080b8600 	call	80b860 <_Balloc>
  80b960:	1025883a 	mov	r18,r2
  80b964:	00a00034 	movhi	r2,32768
  80b968:	10bfffc4 	addi	r2,r2,-1
  80b96c:	8888703a 	and	r4,r17,r2
  80b970:	202ad53a 	srli	r21,r4,20
  80b974:	00800434 	movhi	r2,16
  80b978:	10bfffc4 	addi	r2,r2,-1
  80b97c:	8886703a 	and	r3,r17,r2
  80b980:	a829003a 	cmpeq	r20,r21,zero
  80b984:	800b883a 	mov	r5,r16
  80b988:	d8c00115 	stw	r3,4(sp)
  80b98c:	94000504 	addi	r16,r18,20
  80b990:	a000021e 	bne	r20,zero,80b99c <__d2b+0x80>
  80b994:	18c00434 	orhi	r3,r3,16
  80b998:	d8c00115 	stw	r3,4(sp)
  80b99c:	28002726 	beq	r5,zero,80ba3c <__d2b+0x120>
  80b9a0:	d809883a 	mov	r4,sp
  80b9a4:	d9400015 	stw	r5,0(sp)
  80b9a8:	080b3780 	call	80b378 <__lo0bits>
  80b9ac:	100d883a 	mov	r6,r2
  80b9b0:	10003526 	beq	r2,zero,80ba88 <__d2b+0x16c>
  80b9b4:	d8c00117 	ldw	r3,4(sp)
  80b9b8:	00800804 	movi	r2,32
  80b9bc:	1185c83a 	sub	r2,r2,r6
  80b9c0:	d9000017 	ldw	r4,0(sp)
  80b9c4:	1886983a 	sll	r3,r3,r2
  80b9c8:	1906b03a 	or	r3,r3,r4
  80b9cc:	90c00515 	stw	r3,20(r18)
  80b9d0:	d8c00117 	ldw	r3,4(sp)
  80b9d4:	1986d83a 	srl	r3,r3,r6
  80b9d8:	d8c00115 	stw	r3,4(sp)
  80b9dc:	180b003a 	cmpeq	r5,r3,zero
  80b9e0:	00800084 	movi	r2,2
  80b9e4:	114bc83a 	sub	r5,r2,r5
  80b9e8:	80c00115 	stw	r3,4(r16)
  80b9ec:	91400415 	stw	r5,16(r18)
  80b9f0:	a0001a1e 	bne	r20,zero,80ba5c <__d2b+0x140>
  80b9f4:	3545883a 	add	r2,r6,r21
  80b9f8:	10bef344 	addi	r2,r2,-1075
  80b9fc:	00c00d44 	movi	r3,53
  80ba00:	b0800015 	stw	r2,0(r22)
  80ba04:	1987c83a 	sub	r3,r3,r6
  80ba08:	b8c00015 	stw	r3,0(r23)
  80ba0c:	9005883a 	mov	r2,r18
  80ba10:	dfc00a17 	ldw	ra,40(sp)
  80ba14:	ddc00917 	ldw	r23,36(sp)
  80ba18:	dd800817 	ldw	r22,32(sp)
  80ba1c:	dd400717 	ldw	r21,28(sp)
  80ba20:	dd000617 	ldw	r20,24(sp)
  80ba24:	dcc00517 	ldw	r19,20(sp)
  80ba28:	dc800417 	ldw	r18,16(sp)
  80ba2c:	dc400317 	ldw	r17,12(sp)
  80ba30:	dc000217 	ldw	r16,8(sp)
  80ba34:	dec00b04 	addi	sp,sp,44
  80ba38:	f800283a 	ret
  80ba3c:	d9000104 	addi	r4,sp,4
  80ba40:	080b3780 	call	80b378 <__lo0bits>
  80ba44:	11800804 	addi	r6,r2,32
  80ba48:	d8800117 	ldw	r2,4(sp)
  80ba4c:	94c00415 	stw	r19,16(r18)
  80ba50:	980b883a 	mov	r5,r19
  80ba54:	90800515 	stw	r2,20(r18)
  80ba58:	a03fe626 	beq	r20,zero,80b9f4 <__d2b+0xd8>
  80ba5c:	2945883a 	add	r2,r5,r5
  80ba60:	1085883a 	add	r2,r2,r2
  80ba64:	1405883a 	add	r2,r2,r16
  80ba68:	113fff17 	ldw	r4,-4(r2)
  80ba6c:	30fef384 	addi	r3,r6,-1074
  80ba70:	2820917a 	slli	r16,r5,5
  80ba74:	b0c00015 	stw	r3,0(r22)
  80ba78:	080b3080 	call	80b308 <__hi0bits>
  80ba7c:	80a1c83a 	sub	r16,r16,r2
  80ba80:	bc000015 	stw	r16,0(r23)
  80ba84:	003fe106 	br	80ba0c <__d2b+0xf0>
  80ba88:	d8800017 	ldw	r2,0(sp)
  80ba8c:	90800515 	stw	r2,20(r18)
  80ba90:	d8c00117 	ldw	r3,4(sp)
  80ba94:	003fd106 	br	80b9dc <__d2b+0xc0>

0080ba98 <__mdiff>:
  80ba98:	defffb04 	addi	sp,sp,-20
  80ba9c:	dc000015 	stw	r16,0(sp)
  80baa0:	2821883a 	mov	r16,r5
  80baa4:	dc800215 	stw	r18,8(sp)
  80baa8:	300b883a 	mov	r5,r6
  80baac:	2025883a 	mov	r18,r4
  80bab0:	8009883a 	mov	r4,r16
  80bab4:	dc400115 	stw	r17,4(sp)
  80bab8:	dfc00415 	stw	ra,16(sp)
  80babc:	dcc00315 	stw	r19,12(sp)
  80bac0:	3023883a 	mov	r17,r6
  80bac4:	080b43c0 	call	80b43c <__mcmp>
  80bac8:	10004226 	beq	r2,zero,80bbd4 <__mdiff+0x13c>
  80bacc:	10005016 	blt	r2,zero,80bc10 <__mdiff+0x178>
  80bad0:	0027883a 	mov	r19,zero
  80bad4:	81400117 	ldw	r5,4(r16)
  80bad8:	9009883a 	mov	r4,r18
  80badc:	080b8600 	call	80b860 <_Balloc>
  80bae0:	1019883a 	mov	r12,r2
  80bae4:	82800417 	ldw	r10,16(r16)
  80bae8:	88800417 	ldw	r2,16(r17)
  80baec:	81800504 	addi	r6,r16,20
  80baf0:	5287883a 	add	r3,r10,r10
  80baf4:	1085883a 	add	r2,r2,r2
  80baf8:	18c7883a 	add	r3,r3,r3
  80bafc:	1085883a 	add	r2,r2,r2
  80bb00:	8a000504 	addi	r8,r17,20
  80bb04:	64c00315 	stw	r19,12(r12)
  80bb08:	30db883a 	add	r13,r6,r3
  80bb0c:	4097883a 	add	r11,r8,r2
  80bb10:	61c00504 	addi	r7,r12,20
  80bb14:	0013883a 	mov	r9,zero
  80bb18:	31000017 	ldw	r4,0(r6)
  80bb1c:	41400017 	ldw	r5,0(r8)
  80bb20:	42000104 	addi	r8,r8,4
  80bb24:	20bfffcc 	andi	r2,r4,65535
  80bb28:	28ffffcc 	andi	r3,r5,65535
  80bb2c:	10c5c83a 	sub	r2,r2,r3
  80bb30:	1245883a 	add	r2,r2,r9
  80bb34:	2008d43a 	srli	r4,r4,16
  80bb38:	280ad43a 	srli	r5,r5,16
  80bb3c:	1007d43a 	srai	r3,r2,16
  80bb40:	3880000d 	sth	r2,0(r7)
  80bb44:	2149c83a 	sub	r4,r4,r5
  80bb48:	20c9883a 	add	r4,r4,r3
  80bb4c:	3900008d 	sth	r4,2(r7)
  80bb50:	31800104 	addi	r6,r6,4
  80bb54:	39c00104 	addi	r7,r7,4
  80bb58:	2013d43a 	srai	r9,r4,16
  80bb5c:	42ffee36 	bltu	r8,r11,80bb18 <__mdiff+0x80>
  80bb60:	33400c2e 	bgeu	r6,r13,80bb94 <__mdiff+0xfc>
  80bb64:	30800017 	ldw	r2,0(r6)
  80bb68:	31800104 	addi	r6,r6,4
  80bb6c:	10ffffcc 	andi	r3,r2,65535
  80bb70:	1a47883a 	add	r3,r3,r9
  80bb74:	1004d43a 	srli	r2,r2,16
  80bb78:	1809d43a 	srai	r4,r3,16
  80bb7c:	38c0000d 	sth	r3,0(r7)
  80bb80:	1105883a 	add	r2,r2,r4
  80bb84:	3880008d 	sth	r2,2(r7)
  80bb88:	1013d43a 	srai	r9,r2,16
  80bb8c:	39c00104 	addi	r7,r7,4
  80bb90:	337ff436 	bltu	r6,r13,80bb64 <__mdiff+0xcc>
  80bb94:	38bfff17 	ldw	r2,-4(r7)
  80bb98:	38ffff04 	addi	r3,r7,-4
  80bb9c:	1000041e 	bne	r2,zero,80bbb0 <__mdiff+0x118>
  80bba0:	18ffff04 	addi	r3,r3,-4
  80bba4:	18800017 	ldw	r2,0(r3)
  80bba8:	52bfffc4 	addi	r10,r10,-1
  80bbac:	103ffc26 	beq	r2,zero,80bba0 <__mdiff+0x108>
  80bbb0:	6005883a 	mov	r2,r12
  80bbb4:	62800415 	stw	r10,16(r12)
  80bbb8:	dfc00417 	ldw	ra,16(sp)
  80bbbc:	dcc00317 	ldw	r19,12(sp)
  80bbc0:	dc800217 	ldw	r18,8(sp)
  80bbc4:	dc400117 	ldw	r17,4(sp)
  80bbc8:	dc000017 	ldw	r16,0(sp)
  80bbcc:	dec00504 	addi	sp,sp,20
  80bbd0:	f800283a 	ret
  80bbd4:	9009883a 	mov	r4,r18
  80bbd8:	000b883a 	mov	r5,zero
  80bbdc:	080b8600 	call	80b860 <_Balloc>
  80bbe0:	1019883a 	mov	r12,r2
  80bbe4:	00800044 	movi	r2,1
  80bbe8:	60800415 	stw	r2,16(r12)
  80bbec:	6005883a 	mov	r2,r12
  80bbf0:	60000515 	stw	zero,20(r12)
  80bbf4:	dfc00417 	ldw	ra,16(sp)
  80bbf8:	dcc00317 	ldw	r19,12(sp)
  80bbfc:	dc800217 	ldw	r18,8(sp)
  80bc00:	dc400117 	ldw	r17,4(sp)
  80bc04:	dc000017 	ldw	r16,0(sp)
  80bc08:	dec00504 	addi	sp,sp,20
  80bc0c:	f800283a 	ret
  80bc10:	880d883a 	mov	r6,r17
  80bc14:	04c00044 	movi	r19,1
  80bc18:	8023883a 	mov	r17,r16
  80bc1c:	3021883a 	mov	r16,r6
  80bc20:	003fac06 	br	80bad4 <__mdiff+0x3c>

0080bc24 <__lshift>:
  80bc24:	defff904 	addi	sp,sp,-28
  80bc28:	28800417 	ldw	r2,16(r5)
  80bc2c:	dc000015 	stw	r16,0(sp)
  80bc30:	3021d17a 	srai	r16,r6,5
  80bc34:	28c00217 	ldw	r3,8(r5)
  80bc38:	10800044 	addi	r2,r2,1
  80bc3c:	dc400115 	stw	r17,4(sp)
  80bc40:	80a3883a 	add	r17,r16,r2
  80bc44:	dd400515 	stw	r21,20(sp)
  80bc48:	dd000415 	stw	r20,16(sp)
  80bc4c:	dc800215 	stw	r18,8(sp)
  80bc50:	dfc00615 	stw	ra,24(sp)
  80bc54:	2825883a 	mov	r18,r5
  80bc58:	dcc00315 	stw	r19,12(sp)
  80bc5c:	3029883a 	mov	r20,r6
  80bc60:	202b883a 	mov	r21,r4
  80bc64:	29400117 	ldw	r5,4(r5)
  80bc68:	1c40030e 	bge	r3,r17,80bc78 <__lshift+0x54>
  80bc6c:	18c7883a 	add	r3,r3,r3
  80bc70:	29400044 	addi	r5,r5,1
  80bc74:	1c7ffd16 	blt	r3,r17,80bc6c <__lshift+0x48>
  80bc78:	a809883a 	mov	r4,r21
  80bc7c:	080b8600 	call	80b860 <_Balloc>
  80bc80:	1027883a 	mov	r19,r2
  80bc84:	11400504 	addi	r5,r2,20
  80bc88:	0400090e 	bge	zero,r16,80bcb0 <__lshift+0x8c>
  80bc8c:	2805883a 	mov	r2,r5
  80bc90:	0007883a 	mov	r3,zero
  80bc94:	18c00044 	addi	r3,r3,1
  80bc98:	10000015 	stw	zero,0(r2)
  80bc9c:	10800104 	addi	r2,r2,4
  80bca0:	80fffc1e 	bne	r16,r3,80bc94 <__lshift+0x70>
  80bca4:	8405883a 	add	r2,r16,r16
  80bca8:	1085883a 	add	r2,r2,r2
  80bcac:	288b883a 	add	r5,r5,r2
  80bcb0:	90800417 	ldw	r2,16(r18)
  80bcb4:	91000504 	addi	r4,r18,20
  80bcb8:	a18007cc 	andi	r6,r20,31
  80bcbc:	1085883a 	add	r2,r2,r2
  80bcc0:	1085883a 	add	r2,r2,r2
  80bcc4:	208f883a 	add	r7,r4,r2
  80bcc8:	30001e26 	beq	r6,zero,80bd44 <__lshift+0x120>
  80bccc:	00800804 	movi	r2,32
  80bcd0:	1191c83a 	sub	r8,r2,r6
  80bcd4:	0007883a 	mov	r3,zero
  80bcd8:	20800017 	ldw	r2,0(r4)
  80bcdc:	1184983a 	sll	r2,r2,r6
  80bce0:	1884b03a 	or	r2,r3,r2
  80bce4:	28800015 	stw	r2,0(r5)
  80bce8:	20c00017 	ldw	r3,0(r4)
  80bcec:	21000104 	addi	r4,r4,4
  80bcf0:	29400104 	addi	r5,r5,4
  80bcf4:	1a06d83a 	srl	r3,r3,r8
  80bcf8:	21fff736 	bltu	r4,r7,80bcd8 <__lshift+0xb4>
  80bcfc:	28c00015 	stw	r3,0(r5)
  80bd00:	18000126 	beq	r3,zero,80bd08 <__lshift+0xe4>
  80bd04:	8c400044 	addi	r17,r17,1
  80bd08:	88bfffc4 	addi	r2,r17,-1
  80bd0c:	98800415 	stw	r2,16(r19)
  80bd10:	a809883a 	mov	r4,r21
  80bd14:	900b883a 	mov	r5,r18
  80bd18:	080b2e00 	call	80b2e0 <_Bfree>
  80bd1c:	9805883a 	mov	r2,r19
  80bd20:	dfc00617 	ldw	ra,24(sp)
  80bd24:	dd400517 	ldw	r21,20(sp)
  80bd28:	dd000417 	ldw	r20,16(sp)
  80bd2c:	dcc00317 	ldw	r19,12(sp)
  80bd30:	dc800217 	ldw	r18,8(sp)
  80bd34:	dc400117 	ldw	r17,4(sp)
  80bd38:	dc000017 	ldw	r16,0(sp)
  80bd3c:	dec00704 	addi	sp,sp,28
  80bd40:	f800283a 	ret
  80bd44:	20800017 	ldw	r2,0(r4)
  80bd48:	21000104 	addi	r4,r4,4
  80bd4c:	28800015 	stw	r2,0(r5)
  80bd50:	29400104 	addi	r5,r5,4
  80bd54:	21ffec2e 	bgeu	r4,r7,80bd08 <__lshift+0xe4>
  80bd58:	20800017 	ldw	r2,0(r4)
  80bd5c:	21000104 	addi	r4,r4,4
  80bd60:	28800015 	stw	r2,0(r5)
  80bd64:	29400104 	addi	r5,r5,4
  80bd68:	21fff636 	bltu	r4,r7,80bd44 <__lshift+0x120>
  80bd6c:	003fe606 	br	80bd08 <__lshift+0xe4>

0080bd70 <__multiply>:
  80bd70:	defff004 	addi	sp,sp,-64
  80bd74:	dc800815 	stw	r18,32(sp)
  80bd78:	dc400715 	stw	r17,28(sp)
  80bd7c:	2c800417 	ldw	r18,16(r5)
  80bd80:	34400417 	ldw	r17,16(r6)
  80bd84:	dcc00915 	stw	r19,36(sp)
  80bd88:	dc000615 	stw	r16,24(sp)
  80bd8c:	dfc00f15 	stw	ra,60(sp)
  80bd90:	df000e15 	stw	fp,56(sp)
  80bd94:	ddc00d15 	stw	r23,52(sp)
  80bd98:	dd800c15 	stw	r22,48(sp)
  80bd9c:	dd400b15 	stw	r21,44(sp)
  80bda0:	dd000a15 	stw	r20,40(sp)
  80bda4:	2821883a 	mov	r16,r5
  80bda8:	3027883a 	mov	r19,r6
  80bdac:	9440040e 	bge	r18,r17,80bdc0 <__multiply+0x50>
  80bdb0:	8825883a 	mov	r18,r17
  80bdb4:	2c400417 	ldw	r17,16(r5)
  80bdb8:	2827883a 	mov	r19,r5
  80bdbc:	3021883a 	mov	r16,r6
  80bdc0:	80800217 	ldw	r2,8(r16)
  80bdc4:	9447883a 	add	r3,r18,r17
  80bdc8:	d8c00415 	stw	r3,16(sp)
  80bdcc:	81400117 	ldw	r5,4(r16)
  80bdd0:	10c0010e 	bge	r2,r3,80bdd8 <__multiply+0x68>
  80bdd4:	29400044 	addi	r5,r5,1
  80bdd8:	080b8600 	call	80b860 <_Balloc>
  80bddc:	d8800515 	stw	r2,20(sp)
  80bde0:	d9000417 	ldw	r4,16(sp)
  80bde4:	d8c00517 	ldw	r3,20(sp)
  80bde8:	2105883a 	add	r2,r4,r4
  80bdec:	1085883a 	add	r2,r2,r2
  80bdf0:	19000504 	addi	r4,r3,20
  80bdf4:	2085883a 	add	r2,r4,r2
  80bdf8:	d8800315 	stw	r2,12(sp)
  80bdfc:	2080052e 	bgeu	r4,r2,80be14 <__multiply+0xa4>
  80be00:	2005883a 	mov	r2,r4
  80be04:	d8c00317 	ldw	r3,12(sp)
  80be08:	10000015 	stw	zero,0(r2)
  80be0c:	10800104 	addi	r2,r2,4
  80be10:	10fffc36 	bltu	r2,r3,80be04 <__multiply+0x94>
  80be14:	8c45883a 	add	r2,r17,r17
  80be18:	9487883a 	add	r3,r18,r18
  80be1c:	9dc00504 	addi	r23,r19,20
  80be20:	1085883a 	add	r2,r2,r2
  80be24:	84000504 	addi	r16,r16,20
  80be28:	18c7883a 	add	r3,r3,r3
  80be2c:	b885883a 	add	r2,r23,r2
  80be30:	dc000015 	stw	r16,0(sp)
  80be34:	d8800215 	stw	r2,8(sp)
  80be38:	80f9883a 	add	fp,r16,r3
  80be3c:	b880432e 	bgeu	r23,r2,80bf4c <__multiply+0x1dc>
  80be40:	d9000115 	stw	r4,4(sp)
  80be44:	b9000017 	ldw	r4,0(r23)
  80be48:	253fffcc 	andi	r20,r4,65535
  80be4c:	a0001a26 	beq	r20,zero,80beb8 <__multiply+0x148>
  80be50:	dcc00017 	ldw	r19,0(sp)
  80be54:	dc800117 	ldw	r18,4(sp)
  80be58:	002b883a 	mov	r21,zero
  80be5c:	9c400017 	ldw	r17,0(r19)
  80be60:	94000017 	ldw	r16,0(r18)
  80be64:	a009883a 	mov	r4,r20
  80be68:	897fffcc 	andi	r5,r17,65535
  80be6c:	080eb4c0 	call	80eb4c <__mulsi3>
  80be70:	880ad43a 	srli	r5,r17,16
  80be74:	80ffffcc 	andi	r3,r16,65535
  80be78:	a8c7883a 	add	r3,r21,r3
  80be7c:	a009883a 	mov	r4,r20
  80be80:	10e3883a 	add	r17,r2,r3
  80be84:	8020d43a 	srli	r16,r16,16
  80be88:	080eb4c0 	call	80eb4c <__mulsi3>
  80be8c:	8806d43a 	srli	r3,r17,16
  80be90:	1405883a 	add	r2,r2,r16
  80be94:	9cc00104 	addi	r19,r19,4
  80be98:	1887883a 	add	r3,r3,r2
  80be9c:	90c0008d 	sth	r3,2(r18)
  80bea0:	9440000d 	sth	r17,0(r18)
  80bea4:	182ad43a 	srli	r21,r3,16
  80bea8:	94800104 	addi	r18,r18,4
  80beac:	9f3feb36 	bltu	r19,fp,80be5c <__multiply+0xec>
  80beb0:	95400015 	stw	r21,0(r18)
  80beb4:	b9000017 	ldw	r4,0(r23)
  80beb8:	202ad43a 	srli	r21,r4,16
  80bebc:	a8001c26 	beq	r21,zero,80bf30 <__multiply+0x1c0>
  80bec0:	d9000117 	ldw	r4,4(sp)
  80bec4:	dd000017 	ldw	r20,0(sp)
  80bec8:	002d883a 	mov	r22,zero
  80becc:	24c00017 	ldw	r19,0(r4)
  80bed0:	2025883a 	mov	r18,r4
  80bed4:	9823883a 	mov	r17,r19
  80bed8:	a4000017 	ldw	r16,0(r20)
  80bedc:	a809883a 	mov	r4,r21
  80bee0:	a5000104 	addi	r20,r20,4
  80bee4:	817fffcc 	andi	r5,r16,65535
  80bee8:	080eb4c0 	call	80eb4c <__mulsi3>
  80beec:	8806d43a 	srli	r3,r17,16
  80bef0:	800ad43a 	srli	r5,r16,16
  80bef4:	94c0000d 	sth	r19,0(r18)
  80bef8:	b0c7883a 	add	r3,r22,r3
  80befc:	10e1883a 	add	r16,r2,r3
  80bf00:	9400008d 	sth	r16,2(r18)
  80bf04:	a809883a 	mov	r4,r21
  80bf08:	94800104 	addi	r18,r18,4
  80bf0c:	080eb4c0 	call	80eb4c <__mulsi3>
  80bf10:	94400017 	ldw	r17,0(r18)
  80bf14:	8020d43a 	srli	r16,r16,16
  80bf18:	88ffffcc 	andi	r3,r17,65535
  80bf1c:	10c5883a 	add	r2,r2,r3
  80bf20:	80a7883a 	add	r19,r16,r2
  80bf24:	982cd43a 	srli	r22,r19,16
  80bf28:	a73feb36 	bltu	r20,fp,80bed8 <__multiply+0x168>
  80bf2c:	94c00015 	stw	r19,0(r18)
  80bf30:	d8800217 	ldw	r2,8(sp)
  80bf34:	bdc00104 	addi	r23,r23,4
  80bf38:	b880042e 	bgeu	r23,r2,80bf4c <__multiply+0x1dc>
  80bf3c:	d8c00117 	ldw	r3,4(sp)
  80bf40:	18c00104 	addi	r3,r3,4
  80bf44:	d8c00115 	stw	r3,4(sp)
  80bf48:	003fbe06 	br	80be44 <__multiply+0xd4>
  80bf4c:	d9000417 	ldw	r4,16(sp)
  80bf50:	01000c0e 	bge	zero,r4,80bf84 <__multiply+0x214>
  80bf54:	d8c00317 	ldw	r3,12(sp)
  80bf58:	18bfff17 	ldw	r2,-4(r3)
  80bf5c:	18ffff04 	addi	r3,r3,-4
  80bf60:	10000326 	beq	r2,zero,80bf70 <__multiply+0x200>
  80bf64:	00000706 	br	80bf84 <__multiply+0x214>
  80bf68:	18800017 	ldw	r2,0(r3)
  80bf6c:	1000051e 	bne	r2,zero,80bf84 <__multiply+0x214>
  80bf70:	d9000417 	ldw	r4,16(sp)
  80bf74:	18ffff04 	addi	r3,r3,-4
  80bf78:	213fffc4 	addi	r4,r4,-1
  80bf7c:	d9000415 	stw	r4,16(sp)
  80bf80:	203ff91e 	bne	r4,zero,80bf68 <__multiply+0x1f8>
  80bf84:	d8800417 	ldw	r2,16(sp)
  80bf88:	d8c00517 	ldw	r3,20(sp)
  80bf8c:	18800415 	stw	r2,16(r3)
  80bf90:	1805883a 	mov	r2,r3
  80bf94:	dfc00f17 	ldw	ra,60(sp)
  80bf98:	df000e17 	ldw	fp,56(sp)
  80bf9c:	ddc00d17 	ldw	r23,52(sp)
  80bfa0:	dd800c17 	ldw	r22,48(sp)
  80bfa4:	dd400b17 	ldw	r21,44(sp)
  80bfa8:	dd000a17 	ldw	r20,40(sp)
  80bfac:	dcc00917 	ldw	r19,36(sp)
  80bfb0:	dc800817 	ldw	r18,32(sp)
  80bfb4:	dc400717 	ldw	r17,28(sp)
  80bfb8:	dc000617 	ldw	r16,24(sp)
  80bfbc:	dec01004 	addi	sp,sp,64
  80bfc0:	f800283a 	ret

0080bfc4 <__i2b>:
  80bfc4:	defffd04 	addi	sp,sp,-12
  80bfc8:	dc000015 	stw	r16,0(sp)
  80bfcc:	04000044 	movi	r16,1
  80bfd0:	dc800115 	stw	r18,4(sp)
  80bfd4:	2825883a 	mov	r18,r5
  80bfd8:	800b883a 	mov	r5,r16
  80bfdc:	dfc00215 	stw	ra,8(sp)
  80bfe0:	080b8600 	call	80b860 <_Balloc>
  80bfe4:	14000415 	stw	r16,16(r2)
  80bfe8:	14800515 	stw	r18,20(r2)
  80bfec:	dfc00217 	ldw	ra,8(sp)
  80bff0:	dc800117 	ldw	r18,4(sp)
  80bff4:	dc000017 	ldw	r16,0(sp)
  80bff8:	dec00304 	addi	sp,sp,12
  80bffc:	f800283a 	ret

0080c000 <__multadd>:
  80c000:	defff604 	addi	sp,sp,-40
  80c004:	dd800615 	stw	r22,24(sp)
  80c008:	2d800417 	ldw	r22,16(r5)
  80c00c:	df000815 	stw	fp,32(sp)
  80c010:	ddc00715 	stw	r23,28(sp)
  80c014:	dd400515 	stw	r21,20(sp)
  80c018:	dd000415 	stw	r20,16(sp)
  80c01c:	dcc00315 	stw	r19,12(sp)
  80c020:	dc800215 	stw	r18,8(sp)
  80c024:	dfc00915 	stw	ra,36(sp)
  80c028:	dc400115 	stw	r17,4(sp)
  80c02c:	dc000015 	stw	r16,0(sp)
  80c030:	282f883a 	mov	r23,r5
  80c034:	2039883a 	mov	fp,r4
  80c038:	302b883a 	mov	r21,r6
  80c03c:	3829883a 	mov	r20,r7
  80c040:	2c800504 	addi	r18,r5,20
  80c044:	0027883a 	mov	r19,zero
  80c048:	94400017 	ldw	r17,0(r18)
  80c04c:	a80b883a 	mov	r5,r21
  80c050:	9cc00044 	addi	r19,r19,1
  80c054:	893fffcc 	andi	r4,r17,65535
  80c058:	080eb4c0 	call	80eb4c <__mulsi3>
  80c05c:	8808d43a 	srli	r4,r17,16
  80c060:	1521883a 	add	r16,r2,r20
  80c064:	a80b883a 	mov	r5,r21
  80c068:	080eb4c0 	call	80eb4c <__mulsi3>
  80c06c:	8008d43a 	srli	r4,r16,16
  80c070:	843fffcc 	andi	r16,r16,65535
  80c074:	1105883a 	add	r2,r2,r4
  80c078:	1006943a 	slli	r3,r2,16
  80c07c:	1028d43a 	srli	r20,r2,16
  80c080:	1c07883a 	add	r3,r3,r16
  80c084:	90c00015 	stw	r3,0(r18)
  80c088:	94800104 	addi	r18,r18,4
  80c08c:	9dbfee16 	blt	r19,r22,80c048 <__multadd+0x48>
  80c090:	a0000826 	beq	r20,zero,80c0b4 <__multadd+0xb4>
  80c094:	b8800217 	ldw	r2,8(r23)
  80c098:	b080130e 	bge	r22,r2,80c0e8 <__multadd+0xe8>
  80c09c:	b585883a 	add	r2,r22,r22
  80c0a0:	1085883a 	add	r2,r2,r2
  80c0a4:	15c5883a 	add	r2,r2,r23
  80c0a8:	b0c00044 	addi	r3,r22,1
  80c0ac:	15000515 	stw	r20,20(r2)
  80c0b0:	b8c00415 	stw	r3,16(r23)
  80c0b4:	b805883a 	mov	r2,r23
  80c0b8:	dfc00917 	ldw	ra,36(sp)
  80c0bc:	df000817 	ldw	fp,32(sp)
  80c0c0:	ddc00717 	ldw	r23,28(sp)
  80c0c4:	dd800617 	ldw	r22,24(sp)
  80c0c8:	dd400517 	ldw	r21,20(sp)
  80c0cc:	dd000417 	ldw	r20,16(sp)
  80c0d0:	dcc00317 	ldw	r19,12(sp)
  80c0d4:	dc800217 	ldw	r18,8(sp)
  80c0d8:	dc400117 	ldw	r17,4(sp)
  80c0dc:	dc000017 	ldw	r16,0(sp)
  80c0e0:	dec00a04 	addi	sp,sp,40
  80c0e4:	f800283a 	ret
  80c0e8:	b9400117 	ldw	r5,4(r23)
  80c0ec:	e009883a 	mov	r4,fp
  80c0f0:	29400044 	addi	r5,r5,1
  80c0f4:	080b8600 	call	80b860 <_Balloc>
  80c0f8:	b9800417 	ldw	r6,16(r23)
  80c0fc:	b9400304 	addi	r5,r23,12
  80c100:	11000304 	addi	r4,r2,12
  80c104:	318d883a 	add	r6,r6,r6
  80c108:	318d883a 	add	r6,r6,r6
  80c10c:	31800204 	addi	r6,r6,8
  80c110:	1023883a 	mov	r17,r2
  80c114:	080b0c80 	call	80b0c8 <memcpy>
  80c118:	b80b883a 	mov	r5,r23
  80c11c:	e009883a 	mov	r4,fp
  80c120:	080b2e00 	call	80b2e0 <_Bfree>
  80c124:	882f883a 	mov	r23,r17
  80c128:	003fdc06 	br	80c09c <__multadd+0x9c>

0080c12c <__pow5mult>:
  80c12c:	defffa04 	addi	sp,sp,-24
  80c130:	308000cc 	andi	r2,r6,3
  80c134:	dd000415 	stw	r20,16(sp)
  80c138:	dcc00315 	stw	r19,12(sp)
  80c13c:	dc000015 	stw	r16,0(sp)
  80c140:	dfc00515 	stw	ra,20(sp)
  80c144:	dc800215 	stw	r18,8(sp)
  80c148:	dc400115 	stw	r17,4(sp)
  80c14c:	3021883a 	mov	r16,r6
  80c150:	2027883a 	mov	r19,r4
  80c154:	2829883a 	mov	r20,r5
  80c158:	10002b1e 	bne	r2,zero,80c208 <__pow5mult+0xdc>
  80c15c:	8025d0ba 	srai	r18,r16,2
  80c160:	90001b26 	beq	r18,zero,80c1d0 <__pow5mult+0xa4>
  80c164:	9c001217 	ldw	r16,72(r19)
  80c168:	8000081e 	bne	r16,zero,80c18c <__pow5mult+0x60>
  80c16c:	00003006 	br	80c230 <__pow5mult+0x104>
  80c170:	800b883a 	mov	r5,r16
  80c174:	800d883a 	mov	r6,r16
  80c178:	9809883a 	mov	r4,r19
  80c17c:	90001426 	beq	r18,zero,80c1d0 <__pow5mult+0xa4>
  80c180:	80800017 	ldw	r2,0(r16)
  80c184:	10001b26 	beq	r2,zero,80c1f4 <__pow5mult+0xc8>
  80c188:	1021883a 	mov	r16,r2
  80c18c:	9080004c 	andi	r2,r18,1
  80c190:	1005003a 	cmpeq	r2,r2,zero
  80c194:	9025d07a 	srai	r18,r18,1
  80c198:	800d883a 	mov	r6,r16
  80c19c:	9809883a 	mov	r4,r19
  80c1a0:	a00b883a 	mov	r5,r20
  80c1a4:	103ff21e 	bne	r2,zero,80c170 <__pow5mult+0x44>
  80c1a8:	080bd700 	call	80bd70 <__multiply>
  80c1ac:	a00b883a 	mov	r5,r20
  80c1b0:	9809883a 	mov	r4,r19
  80c1b4:	1023883a 	mov	r17,r2
  80c1b8:	080b2e00 	call	80b2e0 <_Bfree>
  80c1bc:	8829883a 	mov	r20,r17
  80c1c0:	800b883a 	mov	r5,r16
  80c1c4:	800d883a 	mov	r6,r16
  80c1c8:	9809883a 	mov	r4,r19
  80c1cc:	903fec1e 	bne	r18,zero,80c180 <__pow5mult+0x54>
  80c1d0:	a005883a 	mov	r2,r20
  80c1d4:	dfc00517 	ldw	ra,20(sp)
  80c1d8:	dd000417 	ldw	r20,16(sp)
  80c1dc:	dcc00317 	ldw	r19,12(sp)
  80c1e0:	dc800217 	ldw	r18,8(sp)
  80c1e4:	dc400117 	ldw	r17,4(sp)
  80c1e8:	dc000017 	ldw	r16,0(sp)
  80c1ec:	dec00604 	addi	sp,sp,24
  80c1f0:	f800283a 	ret
  80c1f4:	080bd700 	call	80bd70 <__multiply>
  80c1f8:	80800015 	stw	r2,0(r16)
  80c1fc:	1021883a 	mov	r16,r2
  80c200:	10000015 	stw	zero,0(r2)
  80c204:	003fe106 	br	80c18c <__pow5mult+0x60>
  80c208:	1085883a 	add	r2,r2,r2
  80c20c:	00c02074 	movhi	r3,129
  80c210:	18ca4504 	addi	r3,r3,10516
  80c214:	1085883a 	add	r2,r2,r2
  80c218:	10c5883a 	add	r2,r2,r3
  80c21c:	11bfff17 	ldw	r6,-4(r2)
  80c220:	000f883a 	mov	r7,zero
  80c224:	080c0000 	call	80c000 <__multadd>
  80c228:	1029883a 	mov	r20,r2
  80c22c:	003fcb06 	br	80c15c <__pow5mult+0x30>
  80c230:	9809883a 	mov	r4,r19
  80c234:	01409c44 	movi	r5,625
  80c238:	080bfc40 	call	80bfc4 <__i2b>
  80c23c:	98801215 	stw	r2,72(r19)
  80c240:	1021883a 	mov	r16,r2
  80c244:	10000015 	stw	zero,0(r2)
  80c248:	003fd006 	br	80c18c <__pow5mult+0x60>

0080c24c <__s2b>:
  80c24c:	defff904 	addi	sp,sp,-28
  80c250:	dcc00315 	stw	r19,12(sp)
  80c254:	dc800215 	stw	r18,8(sp)
  80c258:	2827883a 	mov	r19,r5
  80c25c:	2025883a 	mov	r18,r4
  80c260:	01400244 	movi	r5,9
  80c264:	39000204 	addi	r4,r7,8
  80c268:	dd000415 	stw	r20,16(sp)
  80c26c:	dc400115 	stw	r17,4(sp)
  80c270:	dfc00615 	stw	ra,24(sp)
  80c274:	dd400515 	stw	r21,20(sp)
  80c278:	dc000015 	stw	r16,0(sp)
  80c27c:	3829883a 	mov	r20,r7
  80c280:	3023883a 	mov	r17,r6
  80c284:	080546c0 	call	80546c <__divsi3>
  80c288:	00c00044 	movi	r3,1
  80c28c:	1880350e 	bge	r3,r2,80c364 <__s2b+0x118>
  80c290:	000b883a 	mov	r5,zero
  80c294:	18c7883a 	add	r3,r3,r3
  80c298:	29400044 	addi	r5,r5,1
  80c29c:	18bffd16 	blt	r3,r2,80c294 <__s2b+0x48>
  80c2a0:	9009883a 	mov	r4,r18
  80c2a4:	080b8600 	call	80b860 <_Balloc>
  80c2a8:	1011883a 	mov	r8,r2
  80c2ac:	d8800717 	ldw	r2,28(sp)
  80c2b0:	00c00044 	movi	r3,1
  80c2b4:	01800244 	movi	r6,9
  80c2b8:	40800515 	stw	r2,20(r8)
  80c2bc:	40c00415 	stw	r3,16(r8)
  80c2c0:	3440260e 	bge	r6,r17,80c35c <__s2b+0x110>
  80c2c4:	3021883a 	mov	r16,r6
  80c2c8:	99ab883a 	add	r21,r19,r6
  80c2cc:	9c05883a 	add	r2,r19,r16
  80c2d0:	11c00007 	ldb	r7,0(r2)
  80c2d4:	400b883a 	mov	r5,r8
  80c2d8:	9009883a 	mov	r4,r18
  80c2dc:	39fff404 	addi	r7,r7,-48
  80c2e0:	01800284 	movi	r6,10
  80c2e4:	080c0000 	call	80c000 <__multadd>
  80c2e8:	84000044 	addi	r16,r16,1
  80c2ec:	1011883a 	mov	r8,r2
  80c2f0:	8c3ff61e 	bne	r17,r16,80c2cc <__s2b+0x80>
  80c2f4:	ac45883a 	add	r2,r21,r17
  80c2f8:	117ffe04 	addi	r5,r2,-8
  80c2fc:	880d883a 	mov	r6,r17
  80c300:	35000c0e 	bge	r6,r20,80c334 <__s2b+0xe8>
  80c304:	a185c83a 	sub	r2,r20,r6
  80c308:	2821883a 	mov	r16,r5
  80c30c:	28a3883a 	add	r17,r5,r2
  80c310:	81c00007 	ldb	r7,0(r16)
  80c314:	400b883a 	mov	r5,r8
  80c318:	9009883a 	mov	r4,r18
  80c31c:	39fff404 	addi	r7,r7,-48
  80c320:	01800284 	movi	r6,10
  80c324:	080c0000 	call	80c000 <__multadd>
  80c328:	84000044 	addi	r16,r16,1
  80c32c:	1011883a 	mov	r8,r2
  80c330:	847ff71e 	bne	r16,r17,80c310 <__s2b+0xc4>
  80c334:	4005883a 	mov	r2,r8
  80c338:	dfc00617 	ldw	ra,24(sp)
  80c33c:	dd400517 	ldw	r21,20(sp)
  80c340:	dd000417 	ldw	r20,16(sp)
  80c344:	dcc00317 	ldw	r19,12(sp)
  80c348:	dc800217 	ldw	r18,8(sp)
  80c34c:	dc400117 	ldw	r17,4(sp)
  80c350:	dc000017 	ldw	r16,0(sp)
  80c354:	dec00704 	addi	sp,sp,28
  80c358:	f800283a 	ret
  80c35c:	99400284 	addi	r5,r19,10
  80c360:	003fe706 	br	80c300 <__s2b+0xb4>
  80c364:	000b883a 	mov	r5,zero
  80c368:	003fcd06 	br	80c2a0 <__s2b+0x54>

0080c36c <putc>:
  80c36c:	defffc04 	addi	sp,sp,-16
  80c370:	dc800215 	stw	r18,8(sp)
  80c374:	04802074 	movhi	r18,129
  80c378:	9491b004 	addi	r18,r18,18112
  80c37c:	90c00017 	ldw	r3,0(r18)
  80c380:	dc400115 	stw	r17,4(sp)
  80c384:	dc000015 	stw	r16,0(sp)
  80c388:	dfc00315 	stw	ra,12(sp)
  80c38c:	2023883a 	mov	r17,r4
  80c390:	2821883a 	mov	r16,r5
  80c394:	18000226 	beq	r3,zero,80c3a0 <putc+0x34>
  80c398:	18800e17 	ldw	r2,56(r3)
  80c39c:	10001126 	beq	r2,zero,80c3e4 <putc+0x78>
  80c3a0:	80800217 	ldw	r2,8(r16)
  80c3a4:	10ffffc4 	addi	r3,r2,-1
  80c3a8:	80c00215 	stw	r3,8(r16)
  80c3ac:	18001316 	blt	r3,zero,80c3fc <putc+0x90>
  80c3b0:	80800017 	ldw	r2,0(r16)
  80c3b4:	14400005 	stb	r17,0(r2)
  80c3b8:	80c00017 	ldw	r3,0(r16)
  80c3bc:	18800044 	addi	r2,r3,1
  80c3c0:	18c00003 	ldbu	r3,0(r3)
  80c3c4:	80800015 	stw	r2,0(r16)
  80c3c8:	1805883a 	mov	r2,r3
  80c3cc:	dfc00317 	ldw	ra,12(sp)
  80c3d0:	dc800217 	ldw	r18,8(sp)
  80c3d4:	dc400117 	ldw	r17,4(sp)
  80c3d8:	dc000017 	ldw	r16,0(sp)
  80c3dc:	dec00404 	addi	sp,sp,16
  80c3e0:	f800283a 	ret
  80c3e4:	1809883a 	mov	r4,r3
  80c3e8:	08099640 	call	809964 <__sinit>
  80c3ec:	80800217 	ldw	r2,8(r16)
  80c3f0:	10ffffc4 	addi	r3,r2,-1
  80c3f4:	80c00215 	stw	r3,8(r16)
  80c3f8:	183fed0e 	bge	r3,zero,80c3b0 <putc+0x44>
  80c3fc:	80800617 	ldw	r2,24(r16)
  80c400:	18800f16 	blt	r3,r2,80c440 <putc+0xd4>
  80c404:	80800017 	ldw	r2,0(r16)
  80c408:	14400005 	stb	r17,0(r2)
  80c40c:	81000017 	ldw	r4,0(r16)
  80c410:	00800284 	movi	r2,10
  80c414:	20c00003 	ldbu	r3,0(r4)
  80c418:	18801226 	beq	r3,r2,80c464 <putc+0xf8>
  80c41c:	20800044 	addi	r2,r4,1
  80c420:	80800015 	stw	r2,0(r16)
  80c424:	1805883a 	mov	r2,r3
  80c428:	dfc00317 	ldw	ra,12(sp)
  80c42c:	dc800217 	ldw	r18,8(sp)
  80c430:	dc400117 	ldw	r17,4(sp)
  80c434:	dc000017 	ldw	r16,0(sp)
  80c438:	dec00404 	addi	sp,sp,16
  80c43c:	f800283a 	ret
  80c440:	91000017 	ldw	r4,0(r18)
  80c444:	880b883a 	mov	r5,r17
  80c448:	800d883a 	mov	r6,r16
  80c44c:	dfc00317 	ldw	ra,12(sp)
  80c450:	dc800217 	ldw	r18,8(sp)
  80c454:	dc400117 	ldw	r17,4(sp)
  80c458:	dc000017 	ldw	r16,0(sp)
  80c45c:	dec00404 	addi	sp,sp,16
  80c460:	080ce341 	jmpi	80ce34 <__swbuf_r>
  80c464:	91000017 	ldw	r4,0(r18)
  80c468:	180b883a 	mov	r5,r3
  80c46c:	003ff606 	br	80c448 <putc+0xdc>

0080c470 <_putc_r>:
  80c470:	defffc04 	addi	sp,sp,-16
  80c474:	dc400215 	stw	r17,8(sp)
  80c478:	dc000115 	stw	r16,4(sp)
  80c47c:	dfc00315 	stw	ra,12(sp)
  80c480:	2021883a 	mov	r16,r4
  80c484:	2823883a 	mov	r17,r5
  80c488:	20000226 	beq	r4,zero,80c494 <_putc_r+0x24>
  80c48c:	20800e17 	ldw	r2,56(r4)
  80c490:	10001026 	beq	r2,zero,80c4d4 <_putc_r+0x64>
  80c494:	30800217 	ldw	r2,8(r6)
  80c498:	10ffffc4 	addi	r3,r2,-1
  80c49c:	30c00215 	stw	r3,8(r6)
  80c4a0:	18001316 	blt	r3,zero,80c4f0 <_putc_r+0x80>
  80c4a4:	30800017 	ldw	r2,0(r6)
  80c4a8:	14400005 	stb	r17,0(r2)
  80c4ac:	30c00017 	ldw	r3,0(r6)
  80c4b0:	18800044 	addi	r2,r3,1
  80c4b4:	18c00003 	ldbu	r3,0(r3)
  80c4b8:	30800015 	stw	r2,0(r6)
  80c4bc:	1805883a 	mov	r2,r3
  80c4c0:	dfc00317 	ldw	ra,12(sp)
  80c4c4:	dc400217 	ldw	r17,8(sp)
  80c4c8:	dc000117 	ldw	r16,4(sp)
  80c4cc:	dec00404 	addi	sp,sp,16
  80c4d0:	f800283a 	ret
  80c4d4:	d9800015 	stw	r6,0(sp)
  80c4d8:	08099640 	call	809964 <__sinit>
  80c4dc:	d9800017 	ldw	r6,0(sp)
  80c4e0:	30800217 	ldw	r2,8(r6)
  80c4e4:	10ffffc4 	addi	r3,r2,-1
  80c4e8:	30c00215 	stw	r3,8(r6)
  80c4ec:	183fed0e 	bge	r3,zero,80c4a4 <_putc_r+0x34>
  80c4f0:	30800617 	ldw	r2,24(r6)
  80c4f4:	18800e16 	blt	r3,r2,80c530 <_putc_r+0xc0>
  80c4f8:	30800017 	ldw	r2,0(r6)
  80c4fc:	14400005 	stb	r17,0(r2)
  80c500:	31000017 	ldw	r4,0(r6)
  80c504:	00800284 	movi	r2,10
  80c508:	20c00003 	ldbu	r3,0(r4)
  80c50c:	18800f26 	beq	r3,r2,80c54c <_putc_r+0xdc>
  80c510:	20800044 	addi	r2,r4,1
  80c514:	30800015 	stw	r2,0(r6)
  80c518:	1805883a 	mov	r2,r3
  80c51c:	dfc00317 	ldw	ra,12(sp)
  80c520:	dc400217 	ldw	r17,8(sp)
  80c524:	dc000117 	ldw	r16,4(sp)
  80c528:	dec00404 	addi	sp,sp,16
  80c52c:	f800283a 	ret
  80c530:	8009883a 	mov	r4,r16
  80c534:	880b883a 	mov	r5,r17
  80c538:	dfc00317 	ldw	ra,12(sp)
  80c53c:	dc400217 	ldw	r17,8(sp)
  80c540:	dc000117 	ldw	r16,4(sp)
  80c544:	dec00404 	addi	sp,sp,16
  80c548:	080ce341 	jmpi	80ce34 <__swbuf_r>
  80c54c:	8009883a 	mov	r4,r16
  80c550:	180b883a 	mov	r5,r3
  80c554:	003ff806 	br	80c538 <_putc_r+0xc8>

0080c558 <_realloc_r>:
  80c558:	defff404 	addi	sp,sp,-48
  80c55c:	dd800815 	stw	r22,32(sp)
  80c560:	dc800415 	stw	r18,16(sp)
  80c564:	dc400315 	stw	r17,12(sp)
  80c568:	dfc00b15 	stw	ra,44(sp)
  80c56c:	df000a15 	stw	fp,40(sp)
  80c570:	ddc00915 	stw	r23,36(sp)
  80c574:	dd400715 	stw	r21,28(sp)
  80c578:	dd000615 	stw	r20,24(sp)
  80c57c:	dcc00515 	stw	r19,20(sp)
  80c580:	dc000215 	stw	r16,8(sp)
  80c584:	2825883a 	mov	r18,r5
  80c588:	3023883a 	mov	r17,r6
  80c58c:	202d883a 	mov	r22,r4
  80c590:	2800c926 	beq	r5,zero,80c8b8 <_realloc_r+0x360>
  80c594:	080f4d80 	call	80f4d8 <__malloc_lock>
  80c598:	943ffe04 	addi	r16,r18,-8
  80c59c:	88c002c4 	addi	r3,r17,11
  80c5a0:	00800584 	movi	r2,22
  80c5a4:	82000117 	ldw	r8,4(r16)
  80c5a8:	10c01b2e 	bgeu	r2,r3,80c618 <_realloc_r+0xc0>
  80c5ac:	00bffe04 	movi	r2,-8
  80c5b0:	188e703a 	and	r7,r3,r2
  80c5b4:	3839883a 	mov	fp,r7
  80c5b8:	38001a16 	blt	r7,zero,80c624 <_realloc_r+0xcc>
  80c5bc:	e4401936 	bltu	fp,r17,80c624 <_realloc_r+0xcc>
  80c5c0:	013fff04 	movi	r4,-4
  80c5c4:	4126703a 	and	r19,r8,r4
  80c5c8:	99c02616 	blt	r19,r7,80c664 <_realloc_r+0x10c>
  80c5cc:	802b883a 	mov	r21,r16
  80c5d0:	9829883a 	mov	r20,r19
  80c5d4:	84000204 	addi	r16,r16,8
  80c5d8:	a80f883a 	mov	r7,r21
  80c5dc:	a70dc83a 	sub	r6,r20,fp
  80c5e0:	008003c4 	movi	r2,15
  80c5e4:	1180c136 	bltu	r2,r6,80c8ec <_realloc_r+0x394>
  80c5e8:	38800117 	ldw	r2,4(r7)
  80c5ec:	a549883a 	add	r4,r20,r21
  80c5f0:	1080004c 	andi	r2,r2,1
  80c5f4:	a084b03a 	or	r2,r20,r2
  80c5f8:	38800115 	stw	r2,4(r7)
  80c5fc:	20c00117 	ldw	r3,4(r4)
  80c600:	18c00054 	ori	r3,r3,1
  80c604:	20c00115 	stw	r3,4(r4)
  80c608:	b009883a 	mov	r4,r22
  80c60c:	080f4f80 	call	80f4f8 <__malloc_unlock>
  80c610:	8023883a 	mov	r17,r16
  80c614:	00000606 	br	80c630 <_realloc_r+0xd8>
  80c618:	01c00404 	movi	r7,16
  80c61c:	3839883a 	mov	fp,r7
  80c620:	e47fe72e 	bgeu	fp,r17,80c5c0 <_realloc_r+0x68>
  80c624:	00800304 	movi	r2,12
  80c628:	0023883a 	mov	r17,zero
  80c62c:	b0800015 	stw	r2,0(r22)
  80c630:	8805883a 	mov	r2,r17
  80c634:	dfc00b17 	ldw	ra,44(sp)
  80c638:	df000a17 	ldw	fp,40(sp)
  80c63c:	ddc00917 	ldw	r23,36(sp)
  80c640:	dd800817 	ldw	r22,32(sp)
  80c644:	dd400717 	ldw	r21,28(sp)
  80c648:	dd000617 	ldw	r20,24(sp)
  80c64c:	dcc00517 	ldw	r19,20(sp)
  80c650:	dc800417 	ldw	r18,16(sp)
  80c654:	dc400317 	ldw	r17,12(sp)
  80c658:	dc000217 	ldw	r16,8(sp)
  80c65c:	dec00c04 	addi	sp,sp,48
  80c660:	f800283a 	ret
  80c664:	00802074 	movhi	r2,129
  80c668:	108c0e04 	addi	r2,r2,12344
  80c66c:	12400217 	ldw	r9,8(r2)
  80c670:	84cd883a 	add	r6,r16,r19
  80c674:	802b883a 	mov	r21,r16
  80c678:	3240b926 	beq	r6,r9,80c960 <_realloc_r+0x408>
  80c67c:	31400117 	ldw	r5,4(r6)
  80c680:	00bfff84 	movi	r2,-2
  80c684:	2884703a 	and	r2,r5,r2
  80c688:	1185883a 	add	r2,r2,r6
  80c68c:	10c00117 	ldw	r3,4(r2)
  80c690:	18c0004c 	andi	r3,r3,1
  80c694:	1807003a 	cmpeq	r3,r3,zero
  80c698:	1800a326 	beq	r3,zero,80c928 <_realloc_r+0x3d0>
  80c69c:	2908703a 	and	r4,r5,r4
  80c6a0:	9929883a 	add	r20,r19,r4
  80c6a4:	a1c0a30e 	bge	r20,r7,80c934 <_realloc_r+0x3dc>
  80c6a8:	4080004c 	andi	r2,r8,1
  80c6ac:	1000551e 	bne	r2,zero,80c804 <_realloc_r+0x2ac>
  80c6b0:	80800017 	ldw	r2,0(r16)
  80c6b4:	80afc83a 	sub	r23,r16,r2
  80c6b8:	b8c00117 	ldw	r3,4(r23)
  80c6bc:	00bfff04 	movi	r2,-4
  80c6c0:	1884703a 	and	r2,r3,r2
  80c6c4:	30002e26 	beq	r6,zero,80c780 <_realloc_r+0x228>
  80c6c8:	3240b926 	beq	r6,r9,80c9b0 <_realloc_r+0x458>
  80c6cc:	98a9883a 	add	r20,r19,r2
  80c6d0:	2509883a 	add	r4,r4,r20
  80c6d4:	d9000015 	stw	r4,0(sp)
  80c6d8:	21c02a16 	blt	r4,r7,80c784 <_realloc_r+0x22c>
  80c6dc:	30800317 	ldw	r2,12(r6)
  80c6e0:	30c00217 	ldw	r3,8(r6)
  80c6e4:	01400904 	movi	r5,36
  80c6e8:	99bfff04 	addi	r6,r19,-4
  80c6ec:	18800315 	stw	r2,12(r3)
  80c6f0:	10c00215 	stw	r3,8(r2)
  80c6f4:	b9000317 	ldw	r4,12(r23)
  80c6f8:	b8800217 	ldw	r2,8(r23)
  80c6fc:	b82b883a 	mov	r21,r23
  80c700:	bc000204 	addi	r16,r23,8
  80c704:	20800215 	stw	r2,8(r4)
  80c708:	11000315 	stw	r4,12(r2)
  80c70c:	2980e436 	bltu	r5,r6,80caa0 <_realloc_r+0x548>
  80c710:	008004c4 	movi	r2,19
  80c714:	9009883a 	mov	r4,r18
  80c718:	8011883a 	mov	r8,r16
  80c71c:	11800f2e 	bgeu	r2,r6,80c75c <_realloc_r+0x204>
  80c720:	90800017 	ldw	r2,0(r18)
  80c724:	ba000404 	addi	r8,r23,16
  80c728:	91000204 	addi	r4,r18,8
  80c72c:	b8800215 	stw	r2,8(r23)
  80c730:	90c00117 	ldw	r3,4(r18)
  80c734:	008006c4 	movi	r2,27
  80c738:	b8c00315 	stw	r3,12(r23)
  80c73c:	1180072e 	bgeu	r2,r6,80c75c <_realloc_r+0x204>
  80c740:	90c00217 	ldw	r3,8(r18)
  80c744:	ba000604 	addi	r8,r23,24
  80c748:	91000404 	addi	r4,r18,16
  80c74c:	b8c00415 	stw	r3,16(r23)
  80c750:	90800317 	ldw	r2,12(r18)
  80c754:	b8800515 	stw	r2,20(r23)
  80c758:	3140e726 	beq	r6,r5,80caf8 <_realloc_r+0x5a0>
  80c75c:	20800017 	ldw	r2,0(r4)
  80c760:	dd000017 	ldw	r20,0(sp)
  80c764:	b80f883a 	mov	r7,r23
  80c768:	40800015 	stw	r2,0(r8)
  80c76c:	20c00117 	ldw	r3,4(r4)
  80c770:	40c00115 	stw	r3,4(r8)
  80c774:	20800217 	ldw	r2,8(r4)
  80c778:	40800215 	stw	r2,8(r8)
  80c77c:	003f9706 	br	80c5dc <_realloc_r+0x84>
  80c780:	98a9883a 	add	r20,r19,r2
  80c784:	a1c01f16 	blt	r20,r7,80c804 <_realloc_r+0x2ac>
  80c788:	b8c00317 	ldw	r3,12(r23)
  80c78c:	b8800217 	ldw	r2,8(r23)
  80c790:	99bfff04 	addi	r6,r19,-4
  80c794:	01400904 	movi	r5,36
  80c798:	b82b883a 	mov	r21,r23
  80c79c:	18800215 	stw	r2,8(r3)
  80c7a0:	10c00315 	stw	r3,12(r2)
  80c7a4:	bc000204 	addi	r16,r23,8
  80c7a8:	2980c336 	bltu	r5,r6,80cab8 <_realloc_r+0x560>
  80c7ac:	008004c4 	movi	r2,19
  80c7b0:	9009883a 	mov	r4,r18
  80c7b4:	8011883a 	mov	r8,r16
  80c7b8:	11800f2e 	bgeu	r2,r6,80c7f8 <_realloc_r+0x2a0>
  80c7bc:	90800017 	ldw	r2,0(r18)
  80c7c0:	ba000404 	addi	r8,r23,16
  80c7c4:	91000204 	addi	r4,r18,8
  80c7c8:	b8800215 	stw	r2,8(r23)
  80c7cc:	90c00117 	ldw	r3,4(r18)
  80c7d0:	008006c4 	movi	r2,27
  80c7d4:	b8c00315 	stw	r3,12(r23)
  80c7d8:	1180072e 	bgeu	r2,r6,80c7f8 <_realloc_r+0x2a0>
  80c7dc:	90c00217 	ldw	r3,8(r18)
  80c7e0:	ba000604 	addi	r8,r23,24
  80c7e4:	91000404 	addi	r4,r18,16
  80c7e8:	b8c00415 	stw	r3,16(r23)
  80c7ec:	90800317 	ldw	r2,12(r18)
  80c7f0:	b8800515 	stw	r2,20(r23)
  80c7f4:	3140c726 	beq	r6,r5,80cb14 <_realloc_r+0x5bc>
  80c7f8:	20800017 	ldw	r2,0(r4)
  80c7fc:	b80f883a 	mov	r7,r23
  80c800:	003fd906 	br	80c768 <_realloc_r+0x210>
  80c804:	880b883a 	mov	r5,r17
  80c808:	b009883a 	mov	r4,r22
  80c80c:	080a8a40 	call	80a8a4 <_malloc_r>
  80c810:	1023883a 	mov	r17,r2
  80c814:	10002526 	beq	r2,zero,80c8ac <_realloc_r+0x354>
  80c818:	80800117 	ldw	r2,4(r16)
  80c81c:	00ffff84 	movi	r3,-2
  80c820:	893ffe04 	addi	r4,r17,-8
  80c824:	10c4703a 	and	r2,r2,r3
  80c828:	8085883a 	add	r2,r16,r2
  80c82c:	20809526 	beq	r4,r2,80ca84 <_realloc_r+0x52c>
  80c830:	99bfff04 	addi	r6,r19,-4
  80c834:	01c00904 	movi	r7,36
  80c838:	39804536 	bltu	r7,r6,80c950 <_realloc_r+0x3f8>
  80c83c:	008004c4 	movi	r2,19
  80c840:	9009883a 	mov	r4,r18
  80c844:	880b883a 	mov	r5,r17
  80c848:	11800f2e 	bgeu	r2,r6,80c888 <_realloc_r+0x330>
  80c84c:	90800017 	ldw	r2,0(r18)
  80c850:	89400204 	addi	r5,r17,8
  80c854:	91000204 	addi	r4,r18,8
  80c858:	88800015 	stw	r2,0(r17)
  80c85c:	90c00117 	ldw	r3,4(r18)
  80c860:	008006c4 	movi	r2,27
  80c864:	88c00115 	stw	r3,4(r17)
  80c868:	1180072e 	bgeu	r2,r6,80c888 <_realloc_r+0x330>
  80c86c:	90c00217 	ldw	r3,8(r18)
  80c870:	89400404 	addi	r5,r17,16
  80c874:	91000404 	addi	r4,r18,16
  80c878:	88c00215 	stw	r3,8(r17)
  80c87c:	90800317 	ldw	r2,12(r18)
  80c880:	88800315 	stw	r2,12(r17)
  80c884:	31c09126 	beq	r6,r7,80cacc <_realloc_r+0x574>
  80c888:	20800017 	ldw	r2,0(r4)
  80c88c:	28800015 	stw	r2,0(r5)
  80c890:	20c00117 	ldw	r3,4(r4)
  80c894:	28c00115 	stw	r3,4(r5)
  80c898:	20800217 	ldw	r2,8(r4)
  80c89c:	28800215 	stw	r2,8(r5)
  80c8a0:	900b883a 	mov	r5,r18
  80c8a4:	b009883a 	mov	r4,r22
  80c8a8:	0809d1c0 	call	809d1c <_free_r>
  80c8ac:	b009883a 	mov	r4,r22
  80c8b0:	080f4f80 	call	80f4f8 <__malloc_unlock>
  80c8b4:	003f5e06 	br	80c630 <_realloc_r+0xd8>
  80c8b8:	300b883a 	mov	r5,r6
  80c8bc:	dfc00b17 	ldw	ra,44(sp)
  80c8c0:	df000a17 	ldw	fp,40(sp)
  80c8c4:	ddc00917 	ldw	r23,36(sp)
  80c8c8:	dd800817 	ldw	r22,32(sp)
  80c8cc:	dd400717 	ldw	r21,28(sp)
  80c8d0:	dd000617 	ldw	r20,24(sp)
  80c8d4:	dcc00517 	ldw	r19,20(sp)
  80c8d8:	dc800417 	ldw	r18,16(sp)
  80c8dc:	dc400317 	ldw	r17,12(sp)
  80c8e0:	dc000217 	ldw	r16,8(sp)
  80c8e4:	dec00c04 	addi	sp,sp,48
  80c8e8:	080a8a41 	jmpi	80a8a4 <_malloc_r>
  80c8ec:	38800117 	ldw	r2,4(r7)
  80c8f0:	e54b883a 	add	r5,fp,r21
  80c8f4:	31000054 	ori	r4,r6,1
  80c8f8:	1080004c 	andi	r2,r2,1
  80c8fc:	1704b03a 	or	r2,r2,fp
  80c900:	38800115 	stw	r2,4(r7)
  80c904:	29000115 	stw	r4,4(r5)
  80c908:	2987883a 	add	r3,r5,r6
  80c90c:	18800117 	ldw	r2,4(r3)
  80c910:	29400204 	addi	r5,r5,8
  80c914:	b009883a 	mov	r4,r22
  80c918:	10800054 	ori	r2,r2,1
  80c91c:	18800115 	stw	r2,4(r3)
  80c920:	0809d1c0 	call	809d1c <_free_r>
  80c924:	003f3806 	br	80c608 <_realloc_r+0xb0>
  80c928:	000d883a 	mov	r6,zero
  80c92c:	0009883a 	mov	r4,zero
  80c930:	003f5d06 	br	80c6a8 <_realloc_r+0x150>
  80c934:	30c00217 	ldw	r3,8(r6)
  80c938:	30800317 	ldw	r2,12(r6)
  80c93c:	800f883a 	mov	r7,r16
  80c940:	84000204 	addi	r16,r16,8
  80c944:	10c00215 	stw	r3,8(r2)
  80c948:	18800315 	stw	r2,12(r3)
  80c94c:	003f2306 	br	80c5dc <_realloc_r+0x84>
  80c950:	8809883a 	mov	r4,r17
  80c954:	900b883a 	mov	r5,r18
  80c958:	080b1680 	call	80b168 <memmove>
  80c95c:	003fd006 	br	80c8a0 <_realloc_r+0x348>
  80c960:	30800117 	ldw	r2,4(r6)
  80c964:	e0c00404 	addi	r3,fp,16
  80c968:	1108703a 	and	r4,r2,r4
  80c96c:	9905883a 	add	r2,r19,r4
  80c970:	10ff4d16 	blt	r2,r3,80c6a8 <_realloc_r+0x150>
  80c974:	1705c83a 	sub	r2,r2,fp
  80c978:	870b883a 	add	r5,r16,fp
  80c97c:	10800054 	ori	r2,r2,1
  80c980:	28800115 	stw	r2,4(r5)
  80c984:	80c00117 	ldw	r3,4(r16)
  80c988:	00802074 	movhi	r2,129
  80c98c:	108c0e04 	addi	r2,r2,12344
  80c990:	b009883a 	mov	r4,r22
  80c994:	18c0004c 	andi	r3,r3,1
  80c998:	e0c6b03a 	or	r3,fp,r3
  80c99c:	11400215 	stw	r5,8(r2)
  80c9a0:	80c00115 	stw	r3,4(r16)
  80c9a4:	080f4f80 	call	80f4f8 <__malloc_unlock>
  80c9a8:	84400204 	addi	r17,r16,8
  80c9ac:	003f2006 	br	80c630 <_realloc_r+0xd8>
  80c9b0:	98a9883a 	add	r20,r19,r2
  80c9b4:	2509883a 	add	r4,r4,r20
  80c9b8:	e0800404 	addi	r2,fp,16
  80c9bc:	d9000115 	stw	r4,4(sp)
  80c9c0:	20bf7016 	blt	r4,r2,80c784 <_realloc_r+0x22c>
  80c9c4:	b8c00317 	ldw	r3,12(r23)
  80c9c8:	b8800217 	ldw	r2,8(r23)
  80c9cc:	99bfff04 	addi	r6,r19,-4
  80c9d0:	01400904 	movi	r5,36
  80c9d4:	18800215 	stw	r2,8(r3)
  80c9d8:	10c00315 	stw	r3,12(r2)
  80c9dc:	bc400204 	addi	r17,r23,8
  80c9e0:	29804136 	bltu	r5,r6,80cae8 <_realloc_r+0x590>
  80c9e4:	008004c4 	movi	r2,19
  80c9e8:	9009883a 	mov	r4,r18
  80c9ec:	880f883a 	mov	r7,r17
  80c9f0:	11800f2e 	bgeu	r2,r6,80ca30 <_realloc_r+0x4d8>
  80c9f4:	90800017 	ldw	r2,0(r18)
  80c9f8:	b9c00404 	addi	r7,r23,16
  80c9fc:	91000204 	addi	r4,r18,8
  80ca00:	b8800215 	stw	r2,8(r23)
  80ca04:	90c00117 	ldw	r3,4(r18)
  80ca08:	008006c4 	movi	r2,27
  80ca0c:	b8c00315 	stw	r3,12(r23)
  80ca10:	1180072e 	bgeu	r2,r6,80ca30 <_realloc_r+0x4d8>
  80ca14:	90c00217 	ldw	r3,8(r18)
  80ca18:	b9c00604 	addi	r7,r23,24
  80ca1c:	91000404 	addi	r4,r18,16
  80ca20:	b8c00415 	stw	r3,16(r23)
  80ca24:	90800317 	ldw	r2,12(r18)
  80ca28:	b8800515 	stw	r2,20(r23)
  80ca2c:	31404026 	beq	r6,r5,80cb30 <_realloc_r+0x5d8>
  80ca30:	20800017 	ldw	r2,0(r4)
  80ca34:	38800015 	stw	r2,0(r7)
  80ca38:	20c00117 	ldw	r3,4(r4)
  80ca3c:	38c00115 	stw	r3,4(r7)
  80ca40:	20800217 	ldw	r2,8(r4)
  80ca44:	38800215 	stw	r2,8(r7)
  80ca48:	d8c00117 	ldw	r3,4(sp)
  80ca4c:	bf0b883a 	add	r5,r23,fp
  80ca50:	b009883a 	mov	r4,r22
  80ca54:	1f05c83a 	sub	r2,r3,fp
  80ca58:	10800054 	ori	r2,r2,1
  80ca5c:	28800115 	stw	r2,4(r5)
  80ca60:	b8c00117 	ldw	r3,4(r23)
  80ca64:	00802074 	movhi	r2,129
  80ca68:	108c0e04 	addi	r2,r2,12344
  80ca6c:	11400215 	stw	r5,8(r2)
  80ca70:	18c0004c 	andi	r3,r3,1
  80ca74:	e0c6b03a 	or	r3,fp,r3
  80ca78:	b8c00115 	stw	r3,4(r23)
  80ca7c:	080f4f80 	call	80f4f8 <__malloc_unlock>
  80ca80:	003eeb06 	br	80c630 <_realloc_r+0xd8>
  80ca84:	20800117 	ldw	r2,4(r4)
  80ca88:	00ffff04 	movi	r3,-4
  80ca8c:	800f883a 	mov	r7,r16
  80ca90:	10c4703a 	and	r2,r2,r3
  80ca94:	98a9883a 	add	r20,r19,r2
  80ca98:	84000204 	addi	r16,r16,8
  80ca9c:	003ecf06 	br	80c5dc <_realloc_r+0x84>
  80caa0:	900b883a 	mov	r5,r18
  80caa4:	8009883a 	mov	r4,r16
  80caa8:	080b1680 	call	80b168 <memmove>
  80caac:	dd000017 	ldw	r20,0(sp)
  80cab0:	b80f883a 	mov	r7,r23
  80cab4:	003ec906 	br	80c5dc <_realloc_r+0x84>
  80cab8:	900b883a 	mov	r5,r18
  80cabc:	8009883a 	mov	r4,r16
  80cac0:	080b1680 	call	80b168 <memmove>
  80cac4:	b80f883a 	mov	r7,r23
  80cac8:	003ec406 	br	80c5dc <_realloc_r+0x84>
  80cacc:	90c00417 	ldw	r3,16(r18)
  80cad0:	89400604 	addi	r5,r17,24
  80cad4:	91000604 	addi	r4,r18,24
  80cad8:	88c00415 	stw	r3,16(r17)
  80cadc:	90800517 	ldw	r2,20(r18)
  80cae0:	88800515 	stw	r2,20(r17)
  80cae4:	003f6806 	br	80c888 <_realloc_r+0x330>
  80cae8:	900b883a 	mov	r5,r18
  80caec:	8809883a 	mov	r4,r17
  80caf0:	080b1680 	call	80b168 <memmove>
  80caf4:	003fd406 	br	80ca48 <_realloc_r+0x4f0>
  80caf8:	90c00417 	ldw	r3,16(r18)
  80cafc:	91000604 	addi	r4,r18,24
  80cb00:	ba000804 	addi	r8,r23,32
  80cb04:	b8c00615 	stw	r3,24(r23)
  80cb08:	90800517 	ldw	r2,20(r18)
  80cb0c:	b8800715 	stw	r2,28(r23)
  80cb10:	003f1206 	br	80c75c <_realloc_r+0x204>
  80cb14:	90c00417 	ldw	r3,16(r18)
  80cb18:	91000604 	addi	r4,r18,24
  80cb1c:	ba000804 	addi	r8,r23,32
  80cb20:	b8c00615 	stw	r3,24(r23)
  80cb24:	90800517 	ldw	r2,20(r18)
  80cb28:	b8800715 	stw	r2,28(r23)
  80cb2c:	003f3206 	br	80c7f8 <_realloc_r+0x2a0>
  80cb30:	90c00417 	ldw	r3,16(r18)
  80cb34:	91000604 	addi	r4,r18,24
  80cb38:	b9c00804 	addi	r7,r23,32
  80cb3c:	b8c00615 	stw	r3,24(r23)
  80cb40:	90800517 	ldw	r2,20(r18)
  80cb44:	b8800715 	stw	r2,28(r23)
  80cb48:	003fb906 	br	80ca30 <_realloc_r+0x4d8>

0080cb4c <__isinfd>:
  80cb4c:	200d883a 	mov	r6,r4
  80cb50:	0109c83a 	sub	r4,zero,r4
  80cb54:	2188b03a 	or	r4,r4,r6
  80cb58:	2008d7fa 	srli	r4,r4,31
  80cb5c:	00a00034 	movhi	r2,32768
  80cb60:	10bfffc4 	addi	r2,r2,-1
  80cb64:	1144703a 	and	r2,r2,r5
  80cb68:	2088b03a 	or	r4,r4,r2
  80cb6c:	009ffc34 	movhi	r2,32752
  80cb70:	1105c83a 	sub	r2,r2,r4
  80cb74:	0087c83a 	sub	r3,zero,r2
  80cb78:	10c4b03a 	or	r2,r2,r3
  80cb7c:	1004d7fa 	srli	r2,r2,31
  80cb80:	00c00044 	movi	r3,1
  80cb84:	1885c83a 	sub	r2,r3,r2
  80cb88:	f800283a 	ret

0080cb8c <__isnand>:
  80cb8c:	200d883a 	mov	r6,r4
  80cb90:	0109c83a 	sub	r4,zero,r4
  80cb94:	2188b03a 	or	r4,r4,r6
  80cb98:	2008d7fa 	srli	r4,r4,31
  80cb9c:	00a00034 	movhi	r2,32768
  80cba0:	10bfffc4 	addi	r2,r2,-1
  80cba4:	1144703a 	and	r2,r2,r5
  80cba8:	2088b03a 	or	r4,r4,r2
  80cbac:	009ffc34 	movhi	r2,32752
  80cbb0:	1105c83a 	sub	r2,r2,r4
  80cbb4:	1004d7fa 	srli	r2,r2,31
  80cbb8:	f800283a 	ret

0080cbbc <_sbrk_r>:
  80cbbc:	defffd04 	addi	sp,sp,-12
  80cbc0:	dc000015 	stw	r16,0(sp)
  80cbc4:	04002074 	movhi	r16,129
  80cbc8:	8411d004 	addi	r16,r16,18240
  80cbcc:	dc400115 	stw	r17,4(sp)
  80cbd0:	80000015 	stw	zero,0(r16)
  80cbd4:	2023883a 	mov	r17,r4
  80cbd8:	2809883a 	mov	r4,r5
  80cbdc:	dfc00215 	stw	ra,8(sp)
  80cbe0:	080f9ac0 	call	80f9ac <sbrk>
  80cbe4:	1007883a 	mov	r3,r2
  80cbe8:	00bfffc4 	movi	r2,-1
  80cbec:	18800626 	beq	r3,r2,80cc08 <_sbrk_r+0x4c>
  80cbf0:	1805883a 	mov	r2,r3
  80cbf4:	dfc00217 	ldw	ra,8(sp)
  80cbf8:	dc400117 	ldw	r17,4(sp)
  80cbfc:	dc000017 	ldw	r16,0(sp)
  80cc00:	dec00304 	addi	sp,sp,12
  80cc04:	f800283a 	ret
  80cc08:	80800017 	ldw	r2,0(r16)
  80cc0c:	103ff826 	beq	r2,zero,80cbf0 <_sbrk_r+0x34>
  80cc10:	88800015 	stw	r2,0(r17)
  80cc14:	1805883a 	mov	r2,r3
  80cc18:	dfc00217 	ldw	ra,8(sp)
  80cc1c:	dc400117 	ldw	r17,4(sp)
  80cc20:	dc000017 	ldw	r16,0(sp)
  80cc24:	dec00304 	addi	sp,sp,12
  80cc28:	f800283a 	ret

0080cc2c <__sclose>:
  80cc2c:	2940038f 	ldh	r5,14(r5)
  80cc30:	080d0c01 	jmpi	80d0c0 <_close_r>

0080cc34 <__sseek>:
  80cc34:	defffe04 	addi	sp,sp,-8
  80cc38:	dc000015 	stw	r16,0(sp)
  80cc3c:	2821883a 	mov	r16,r5
  80cc40:	2940038f 	ldh	r5,14(r5)
  80cc44:	dfc00115 	stw	ra,4(sp)
  80cc48:	080d3380 	call	80d338 <_lseek_r>
  80cc4c:	1007883a 	mov	r3,r2
  80cc50:	00bfffc4 	movi	r2,-1
  80cc54:	18800926 	beq	r3,r2,80cc7c <__sseek+0x48>
  80cc58:	8080030b 	ldhu	r2,12(r16)
  80cc5c:	80c01415 	stw	r3,80(r16)
  80cc60:	10840014 	ori	r2,r2,4096
  80cc64:	8080030d 	sth	r2,12(r16)
  80cc68:	1805883a 	mov	r2,r3
  80cc6c:	dfc00117 	ldw	ra,4(sp)
  80cc70:	dc000017 	ldw	r16,0(sp)
  80cc74:	dec00204 	addi	sp,sp,8
  80cc78:	f800283a 	ret
  80cc7c:	8080030b 	ldhu	r2,12(r16)
  80cc80:	10bbffcc 	andi	r2,r2,61439
  80cc84:	8080030d 	sth	r2,12(r16)
  80cc88:	1805883a 	mov	r2,r3
  80cc8c:	dfc00117 	ldw	ra,4(sp)
  80cc90:	dc000017 	ldw	r16,0(sp)
  80cc94:	dec00204 	addi	sp,sp,8
  80cc98:	f800283a 	ret

0080cc9c <__swrite>:
  80cc9c:	2880030b 	ldhu	r2,12(r5)
  80cca0:	defffb04 	addi	sp,sp,-20
  80cca4:	dcc00315 	stw	r19,12(sp)
  80cca8:	1080400c 	andi	r2,r2,256
  80ccac:	dc800215 	stw	r18,8(sp)
  80ccb0:	dc400115 	stw	r17,4(sp)
  80ccb4:	dc000015 	stw	r16,0(sp)
  80ccb8:	3027883a 	mov	r19,r6
  80ccbc:	3825883a 	mov	r18,r7
  80ccc0:	dfc00415 	stw	ra,16(sp)
  80ccc4:	2821883a 	mov	r16,r5
  80ccc8:	000d883a 	mov	r6,zero
  80cccc:	01c00084 	movi	r7,2
  80ccd0:	2023883a 	mov	r17,r4
  80ccd4:	10000226 	beq	r2,zero,80cce0 <__swrite+0x44>
  80ccd8:	2940038f 	ldh	r5,14(r5)
  80ccdc:	080d3380 	call	80d338 <_lseek_r>
  80cce0:	8080030b 	ldhu	r2,12(r16)
  80cce4:	8140038f 	ldh	r5,14(r16)
  80cce8:	8809883a 	mov	r4,r17
  80ccec:	10bbffcc 	andi	r2,r2,61439
  80ccf0:	980d883a 	mov	r6,r19
  80ccf4:	900f883a 	mov	r7,r18
  80ccf8:	8080030d 	sth	r2,12(r16)
  80ccfc:	dfc00417 	ldw	ra,16(sp)
  80cd00:	dcc00317 	ldw	r19,12(sp)
  80cd04:	dc800217 	ldw	r18,8(sp)
  80cd08:	dc400117 	ldw	r17,4(sp)
  80cd0c:	dc000017 	ldw	r16,0(sp)
  80cd10:	dec00504 	addi	sp,sp,20
  80cd14:	080cf801 	jmpi	80cf80 <_write_r>

0080cd18 <__sread>:
  80cd18:	defffe04 	addi	sp,sp,-8
  80cd1c:	dc000015 	stw	r16,0(sp)
  80cd20:	2821883a 	mov	r16,r5
  80cd24:	2940038f 	ldh	r5,14(r5)
  80cd28:	dfc00115 	stw	ra,4(sp)
  80cd2c:	080d3b00 	call	80d3b0 <_read_r>
  80cd30:	1007883a 	mov	r3,r2
  80cd34:	10000816 	blt	r2,zero,80cd58 <__sread+0x40>
  80cd38:	80801417 	ldw	r2,80(r16)
  80cd3c:	10c5883a 	add	r2,r2,r3
  80cd40:	80801415 	stw	r2,80(r16)
  80cd44:	1805883a 	mov	r2,r3
  80cd48:	dfc00117 	ldw	ra,4(sp)
  80cd4c:	dc000017 	ldw	r16,0(sp)
  80cd50:	dec00204 	addi	sp,sp,8
  80cd54:	f800283a 	ret
  80cd58:	8080030b 	ldhu	r2,12(r16)
  80cd5c:	10bbffcc 	andi	r2,r2,61439
  80cd60:	8080030d 	sth	r2,12(r16)
  80cd64:	1805883a 	mov	r2,r3
  80cd68:	dfc00117 	ldw	ra,4(sp)
  80cd6c:	dc000017 	ldw	r16,0(sp)
  80cd70:	dec00204 	addi	sp,sp,8
  80cd74:	f800283a 	ret

0080cd78 <strcmp>:
  80cd78:	2144b03a 	or	r2,r4,r5
  80cd7c:	108000cc 	andi	r2,r2,3
  80cd80:	10001d1e 	bne	r2,zero,80cdf8 <strcmp+0x80>
  80cd84:	200f883a 	mov	r7,r4
  80cd88:	28800017 	ldw	r2,0(r5)
  80cd8c:	21000017 	ldw	r4,0(r4)
  80cd90:	280d883a 	mov	r6,r5
  80cd94:	2080161e 	bne	r4,r2,80cdf0 <strcmp+0x78>
  80cd98:	023fbff4 	movhi	r8,65279
  80cd9c:	423fbfc4 	addi	r8,r8,-257
  80cda0:	2207883a 	add	r3,r4,r8
  80cda4:	01602074 	movhi	r5,32897
  80cda8:	29602004 	addi	r5,r5,-32640
  80cdac:	1946703a 	and	r3,r3,r5
  80cdb0:	0104303a 	nor	r2,zero,r4
  80cdb4:	10c4703a 	and	r2,r2,r3
  80cdb8:	10001c1e 	bne	r2,zero,80ce2c <strcmp+0xb4>
  80cdbc:	4013883a 	mov	r9,r8
  80cdc0:	2811883a 	mov	r8,r5
  80cdc4:	00000106 	br	80cdcc <strcmp+0x54>
  80cdc8:	1800181e 	bne	r3,zero,80ce2c <strcmp+0xb4>
  80cdcc:	39c00104 	addi	r7,r7,4
  80cdd0:	39000017 	ldw	r4,0(r7)
  80cdd4:	31800104 	addi	r6,r6,4
  80cdd8:	31400017 	ldw	r5,0(r6)
  80cddc:	2245883a 	add	r2,r4,r9
  80cde0:	1204703a 	and	r2,r2,r8
  80cde4:	0106303a 	nor	r3,zero,r4
  80cde8:	1886703a 	and	r3,r3,r2
  80cdec:	217ff626 	beq	r4,r5,80cdc8 <strcmp+0x50>
  80cdf0:	3809883a 	mov	r4,r7
  80cdf4:	300b883a 	mov	r5,r6
  80cdf8:	20c00007 	ldb	r3,0(r4)
  80cdfc:	1800051e 	bne	r3,zero,80ce14 <strcmp+0x9c>
  80ce00:	00000606 	br	80ce1c <strcmp+0xa4>
  80ce04:	21000044 	addi	r4,r4,1
  80ce08:	20c00007 	ldb	r3,0(r4)
  80ce0c:	29400044 	addi	r5,r5,1
  80ce10:	18000226 	beq	r3,zero,80ce1c <strcmp+0xa4>
  80ce14:	28800007 	ldb	r2,0(r5)
  80ce18:	18bffa26 	beq	r3,r2,80ce04 <strcmp+0x8c>
  80ce1c:	20c00003 	ldbu	r3,0(r4)
  80ce20:	28800003 	ldbu	r2,0(r5)
  80ce24:	1885c83a 	sub	r2,r3,r2
  80ce28:	f800283a 	ret
  80ce2c:	0005883a 	mov	r2,zero
  80ce30:	f800283a 	ret

0080ce34 <__swbuf_r>:
  80ce34:	defffc04 	addi	sp,sp,-16
  80ce38:	dc400215 	stw	r17,8(sp)
  80ce3c:	dc000115 	stw	r16,4(sp)
  80ce40:	dfc00315 	stw	ra,12(sp)
  80ce44:	2023883a 	mov	r17,r4
  80ce48:	2821883a 	mov	r16,r5
  80ce4c:	20000226 	beq	r4,zero,80ce58 <__swbuf_r+0x24>
  80ce50:	20800e17 	ldw	r2,56(r4)
  80ce54:	10002f26 	beq	r2,zero,80cf14 <__swbuf_r+0xe0>
  80ce58:	3080030b 	ldhu	r2,12(r6)
  80ce5c:	30c00617 	ldw	r3,24(r6)
  80ce60:	1080020c 	andi	r2,r2,8
  80ce64:	30c00215 	stw	r3,8(r6)
  80ce68:	10002226 	beq	r2,zero,80cef4 <__swbuf_r+0xc0>
  80ce6c:	30c00417 	ldw	r3,16(r6)
  80ce70:	18002026 	beq	r3,zero,80cef4 <__swbuf_r+0xc0>
  80ce74:	31000017 	ldw	r4,0(r6)
  80ce78:	30800517 	ldw	r2,20(r6)
  80ce7c:	20c7c83a 	sub	r3,r4,r3
  80ce80:	18802f0e 	bge	r3,r2,80cf40 <__swbuf_r+0x10c>
  80ce84:	19400044 	addi	r5,r3,1
  80ce88:	30800217 	ldw	r2,8(r6)
  80ce8c:	84003fcc 	andi	r16,r16,255
  80ce90:	20c00044 	addi	r3,r4,1
  80ce94:	10bfffc4 	addi	r2,r2,-1
  80ce98:	30800215 	stw	r2,8(r6)
  80ce9c:	24000005 	stb	r16,0(r4)
  80cea0:	30800517 	ldw	r2,20(r6)
  80cea4:	30c00015 	stw	r3,0(r6)
  80cea8:	11400c26 	beq	r2,r5,80cedc <__swbuf_r+0xa8>
  80ceac:	3080030b 	ldhu	r2,12(r6)
  80ceb0:	1080004c 	andi	r2,r2,1
  80ceb4:	1005003a 	cmpeq	r2,r2,zero
  80ceb8:	10000626 	beq	r2,zero,80ced4 <__swbuf_r+0xa0>
  80cebc:	8005883a 	mov	r2,r16
  80cec0:	dfc00317 	ldw	ra,12(sp)
  80cec4:	dc400217 	ldw	r17,8(sp)
  80cec8:	dc000117 	ldw	r16,4(sp)
  80cecc:	dec00404 	addi	sp,sp,16
  80ced0:	f800283a 	ret
  80ced4:	00800284 	movi	r2,10
  80ced8:	80bff81e 	bne	r16,r2,80cebc <__swbuf_r+0x88>
  80cedc:	8809883a 	mov	r4,r17
  80cee0:	300b883a 	mov	r5,r6
  80cee4:	08096cc0 	call	8096cc <_fflush_r>
  80cee8:	103ff426 	beq	r2,zero,80cebc <__swbuf_r+0x88>
  80ceec:	043fffc4 	movi	r16,-1
  80cef0:	003ff206 	br	80cebc <__swbuf_r+0x88>
  80cef4:	300b883a 	mov	r5,r6
  80cef8:	8809883a 	mov	r4,r17
  80cefc:	d9800015 	stw	r6,0(sp)
  80cf00:	0807d980 	call	807d98 <__swsetup_r>
  80cf04:	d9800017 	ldw	r6,0(sp)
  80cf08:	1000061e 	bne	r2,zero,80cf24 <__swbuf_r+0xf0>
  80cf0c:	30c00417 	ldw	r3,16(r6)
  80cf10:	003fd806 	br	80ce74 <__swbuf_r+0x40>
  80cf14:	d9800015 	stw	r6,0(sp)
  80cf18:	08099640 	call	809964 <__sinit>
  80cf1c:	d9800017 	ldw	r6,0(sp)
  80cf20:	003fcd06 	br	80ce58 <__swbuf_r+0x24>
  80cf24:	3080030b 	ldhu	r2,12(r6)
  80cf28:	00c00244 	movi	r3,9
  80cf2c:	043fffc4 	movi	r16,-1
  80cf30:	10801014 	ori	r2,r2,64
  80cf34:	3080030d 	sth	r2,12(r6)
  80cf38:	88c00015 	stw	r3,0(r17)
  80cf3c:	003fdf06 	br	80cebc <__swbuf_r+0x88>
  80cf40:	300b883a 	mov	r5,r6
  80cf44:	8809883a 	mov	r4,r17
  80cf48:	d9800015 	stw	r6,0(sp)
  80cf4c:	08096cc0 	call	8096cc <_fflush_r>
  80cf50:	d9800017 	ldw	r6,0(sp)
  80cf54:	103fe51e 	bne	r2,zero,80ceec <__swbuf_r+0xb8>
  80cf58:	31000017 	ldw	r4,0(r6)
  80cf5c:	01400044 	movi	r5,1
  80cf60:	003fc906 	br	80ce88 <__swbuf_r+0x54>

0080cf64 <__swbuf>:
  80cf64:	01802074 	movhi	r6,129
  80cf68:	3191b004 	addi	r6,r6,18112
  80cf6c:	2007883a 	mov	r3,r4
  80cf70:	31000017 	ldw	r4,0(r6)
  80cf74:	280d883a 	mov	r6,r5
  80cf78:	180b883a 	mov	r5,r3
  80cf7c:	080ce341 	jmpi	80ce34 <__swbuf_r>

0080cf80 <_write_r>:
  80cf80:	defffd04 	addi	sp,sp,-12
  80cf84:	dc000015 	stw	r16,0(sp)
  80cf88:	04002074 	movhi	r16,129
  80cf8c:	8411d004 	addi	r16,r16,18240
  80cf90:	dc400115 	stw	r17,4(sp)
  80cf94:	80000015 	stw	zero,0(r16)
  80cf98:	2023883a 	mov	r17,r4
  80cf9c:	2809883a 	mov	r4,r5
  80cfa0:	300b883a 	mov	r5,r6
  80cfa4:	380d883a 	mov	r6,r7
  80cfa8:	dfc00215 	stw	ra,8(sp)
  80cfac:	080fa980 	call	80fa98 <write>
  80cfb0:	1007883a 	mov	r3,r2
  80cfb4:	00bfffc4 	movi	r2,-1
  80cfb8:	18800626 	beq	r3,r2,80cfd4 <_write_r+0x54>
  80cfbc:	1805883a 	mov	r2,r3
  80cfc0:	dfc00217 	ldw	ra,8(sp)
  80cfc4:	dc400117 	ldw	r17,4(sp)
  80cfc8:	dc000017 	ldw	r16,0(sp)
  80cfcc:	dec00304 	addi	sp,sp,12
  80cfd0:	f800283a 	ret
  80cfd4:	80800017 	ldw	r2,0(r16)
  80cfd8:	103ff826 	beq	r2,zero,80cfbc <_write_r+0x3c>
  80cfdc:	88800015 	stw	r2,0(r17)
  80cfe0:	1805883a 	mov	r2,r3
  80cfe4:	dfc00217 	ldw	ra,8(sp)
  80cfe8:	dc400117 	ldw	r17,4(sp)
  80cfec:	dc000017 	ldw	r16,0(sp)
  80cff0:	dec00304 	addi	sp,sp,12
  80cff4:	f800283a 	ret

0080cff8 <_calloc_r>:
  80cff8:	defffe04 	addi	sp,sp,-8
  80cffc:	dc400015 	stw	r17,0(sp)
  80d000:	2023883a 	mov	r17,r4
  80d004:	2809883a 	mov	r4,r5
  80d008:	300b883a 	mov	r5,r6
  80d00c:	dfc00115 	stw	ra,4(sp)
  80d010:	080eb4c0 	call	80eb4c <__mulsi3>
  80d014:	100b883a 	mov	r5,r2
  80d018:	8809883a 	mov	r4,r17
  80d01c:	080a8a40 	call	80a8a4 <_malloc_r>
  80d020:	1023883a 	mov	r17,r2
  80d024:	01c00904 	movi	r7,36
  80d028:	10000d26 	beq	r2,zero,80d060 <_calloc_r+0x68>
  80d02c:	10ffff17 	ldw	r3,-4(r2)
  80d030:	1009883a 	mov	r4,r2
  80d034:	00bfff04 	movi	r2,-4
  80d038:	1886703a 	and	r3,r3,r2
  80d03c:	1887883a 	add	r3,r3,r2
  80d040:	180d883a 	mov	r6,r3
  80d044:	000b883a 	mov	r5,zero
  80d048:	38c01736 	bltu	r7,r3,80d0a8 <_calloc_r+0xb0>
  80d04c:	008004c4 	movi	r2,19
  80d050:	10c00836 	bltu	r2,r3,80d074 <_calloc_r+0x7c>
  80d054:	20000215 	stw	zero,8(r4)
  80d058:	20000015 	stw	zero,0(r4)
  80d05c:	20000115 	stw	zero,4(r4)
  80d060:	8805883a 	mov	r2,r17
  80d064:	dfc00117 	ldw	ra,4(sp)
  80d068:	dc400017 	ldw	r17,0(sp)
  80d06c:	dec00204 	addi	sp,sp,8
  80d070:	f800283a 	ret
  80d074:	008006c4 	movi	r2,27
  80d078:	88000015 	stw	zero,0(r17)
  80d07c:	88000115 	stw	zero,4(r17)
  80d080:	89000204 	addi	r4,r17,8
  80d084:	10fff32e 	bgeu	r2,r3,80d054 <_calloc_r+0x5c>
  80d088:	88000215 	stw	zero,8(r17)
  80d08c:	88000315 	stw	zero,12(r17)
  80d090:	89000404 	addi	r4,r17,16
  80d094:	19ffef1e 	bne	r3,r7,80d054 <_calloc_r+0x5c>
  80d098:	89000604 	addi	r4,r17,24
  80d09c:	88000415 	stw	zero,16(r17)
  80d0a0:	88000515 	stw	zero,20(r17)
  80d0a4:	003feb06 	br	80d054 <_calloc_r+0x5c>
  80d0a8:	080b2480 	call	80b248 <memset>
  80d0ac:	8805883a 	mov	r2,r17
  80d0b0:	dfc00117 	ldw	ra,4(sp)
  80d0b4:	dc400017 	ldw	r17,0(sp)
  80d0b8:	dec00204 	addi	sp,sp,8
  80d0bc:	f800283a 	ret

0080d0c0 <_close_r>:
  80d0c0:	defffd04 	addi	sp,sp,-12
  80d0c4:	dc000015 	stw	r16,0(sp)
  80d0c8:	04002074 	movhi	r16,129
  80d0cc:	8411d004 	addi	r16,r16,18240
  80d0d0:	dc400115 	stw	r17,4(sp)
  80d0d4:	80000015 	stw	zero,0(r16)
  80d0d8:	2023883a 	mov	r17,r4
  80d0dc:	2809883a 	mov	r4,r5
  80d0e0:	dfc00215 	stw	ra,8(sp)
  80d0e4:	080ed700 	call	80ed70 <close>
  80d0e8:	1007883a 	mov	r3,r2
  80d0ec:	00bfffc4 	movi	r2,-1
  80d0f0:	18800626 	beq	r3,r2,80d10c <_close_r+0x4c>
  80d0f4:	1805883a 	mov	r2,r3
  80d0f8:	dfc00217 	ldw	ra,8(sp)
  80d0fc:	dc400117 	ldw	r17,4(sp)
  80d100:	dc000017 	ldw	r16,0(sp)
  80d104:	dec00304 	addi	sp,sp,12
  80d108:	f800283a 	ret
  80d10c:	80800017 	ldw	r2,0(r16)
  80d110:	103ff826 	beq	r2,zero,80d0f4 <_close_r+0x34>
  80d114:	88800015 	stw	r2,0(r17)
  80d118:	1805883a 	mov	r2,r3
  80d11c:	dfc00217 	ldw	ra,8(sp)
  80d120:	dc400117 	ldw	r17,4(sp)
  80d124:	dc000017 	ldw	r16,0(sp)
  80d128:	dec00304 	addi	sp,sp,12
  80d12c:	f800283a 	ret

0080d130 <_fclose_r>:
  80d130:	defffc04 	addi	sp,sp,-16
  80d134:	dc400115 	stw	r17,4(sp)
  80d138:	dc000015 	stw	r16,0(sp)
  80d13c:	dfc00315 	stw	ra,12(sp)
  80d140:	dc800215 	stw	r18,8(sp)
  80d144:	2821883a 	mov	r16,r5
  80d148:	2023883a 	mov	r17,r4
  80d14c:	28002926 	beq	r5,zero,80d1f4 <_fclose_r+0xc4>
  80d150:	08099540 	call	809954 <__sfp_lock_acquire>
  80d154:	88000226 	beq	r17,zero,80d160 <_fclose_r+0x30>
  80d158:	88800e17 	ldw	r2,56(r17)
  80d15c:	10002d26 	beq	r2,zero,80d214 <_fclose_r+0xe4>
  80d160:	8080030f 	ldh	r2,12(r16)
  80d164:	10002226 	beq	r2,zero,80d1f0 <_fclose_r+0xc0>
  80d168:	8809883a 	mov	r4,r17
  80d16c:	800b883a 	mov	r5,r16
  80d170:	08096cc0 	call	8096cc <_fflush_r>
  80d174:	1025883a 	mov	r18,r2
  80d178:	80800b17 	ldw	r2,44(r16)
  80d17c:	10000426 	beq	r2,zero,80d190 <_fclose_r+0x60>
  80d180:	81400717 	ldw	r5,28(r16)
  80d184:	8809883a 	mov	r4,r17
  80d188:	103ee83a 	callr	r2
  80d18c:	10002a16 	blt	r2,zero,80d238 <_fclose_r+0x108>
  80d190:	8080030b 	ldhu	r2,12(r16)
  80d194:	1080200c 	andi	r2,r2,128
  80d198:	1000231e 	bne	r2,zero,80d228 <_fclose_r+0xf8>
  80d19c:	81400c17 	ldw	r5,48(r16)
  80d1a0:	28000526 	beq	r5,zero,80d1b8 <_fclose_r+0x88>
  80d1a4:	80801004 	addi	r2,r16,64
  80d1a8:	28800226 	beq	r5,r2,80d1b4 <_fclose_r+0x84>
  80d1ac:	8809883a 	mov	r4,r17
  80d1b0:	0809d1c0 	call	809d1c <_free_r>
  80d1b4:	80000c15 	stw	zero,48(r16)
  80d1b8:	81401117 	ldw	r5,68(r16)
  80d1bc:	28000326 	beq	r5,zero,80d1cc <_fclose_r+0x9c>
  80d1c0:	8809883a 	mov	r4,r17
  80d1c4:	0809d1c0 	call	809d1c <_free_r>
  80d1c8:	80001115 	stw	zero,68(r16)
  80d1cc:	8000030d 	sth	zero,12(r16)
  80d1d0:	08099580 	call	809958 <__sfp_lock_release>
  80d1d4:	9005883a 	mov	r2,r18
  80d1d8:	dfc00317 	ldw	ra,12(sp)
  80d1dc:	dc800217 	ldw	r18,8(sp)
  80d1e0:	dc400117 	ldw	r17,4(sp)
  80d1e4:	dc000017 	ldw	r16,0(sp)
  80d1e8:	dec00404 	addi	sp,sp,16
  80d1ec:	f800283a 	ret
  80d1f0:	08099580 	call	809958 <__sfp_lock_release>
  80d1f4:	0025883a 	mov	r18,zero
  80d1f8:	9005883a 	mov	r2,r18
  80d1fc:	dfc00317 	ldw	ra,12(sp)
  80d200:	dc800217 	ldw	r18,8(sp)
  80d204:	dc400117 	ldw	r17,4(sp)
  80d208:	dc000017 	ldw	r16,0(sp)
  80d20c:	dec00404 	addi	sp,sp,16
  80d210:	f800283a 	ret
  80d214:	8809883a 	mov	r4,r17
  80d218:	08099640 	call	809964 <__sinit>
  80d21c:	8080030f 	ldh	r2,12(r16)
  80d220:	103fd11e 	bne	r2,zero,80d168 <_fclose_r+0x38>
  80d224:	003ff206 	br	80d1f0 <_fclose_r+0xc0>
  80d228:	81400417 	ldw	r5,16(r16)
  80d22c:	8809883a 	mov	r4,r17
  80d230:	0809d1c0 	call	809d1c <_free_r>
  80d234:	003fd906 	br	80d19c <_fclose_r+0x6c>
  80d238:	04bfffc4 	movi	r18,-1
  80d23c:	003fd406 	br	80d190 <_fclose_r+0x60>

0080d240 <fclose>:
  80d240:	00802074 	movhi	r2,129
  80d244:	1091b004 	addi	r2,r2,18112
  80d248:	200b883a 	mov	r5,r4
  80d24c:	11000017 	ldw	r4,0(r2)
  80d250:	080d1301 	jmpi	80d130 <_fclose_r>

0080d254 <_fstat_r>:
  80d254:	defffd04 	addi	sp,sp,-12
  80d258:	dc000015 	stw	r16,0(sp)
  80d25c:	04002074 	movhi	r16,129
  80d260:	8411d004 	addi	r16,r16,18240
  80d264:	dc400115 	stw	r17,4(sp)
  80d268:	80000015 	stw	zero,0(r16)
  80d26c:	2023883a 	mov	r17,r4
  80d270:	2809883a 	mov	r4,r5
  80d274:	300b883a 	mov	r5,r6
  80d278:	dfc00215 	stw	ra,8(sp)
  80d27c:	080eefc0 	call	80eefc <fstat>
  80d280:	1007883a 	mov	r3,r2
  80d284:	00bfffc4 	movi	r2,-1
  80d288:	18800626 	beq	r3,r2,80d2a4 <_fstat_r+0x50>
  80d28c:	1805883a 	mov	r2,r3
  80d290:	dfc00217 	ldw	ra,8(sp)
  80d294:	dc400117 	ldw	r17,4(sp)
  80d298:	dc000017 	ldw	r16,0(sp)
  80d29c:	dec00304 	addi	sp,sp,12
  80d2a0:	f800283a 	ret
  80d2a4:	80800017 	ldw	r2,0(r16)
  80d2a8:	103ff826 	beq	r2,zero,80d28c <_fstat_r+0x38>
  80d2ac:	88800015 	stw	r2,0(r17)
  80d2b0:	1805883a 	mov	r2,r3
  80d2b4:	dfc00217 	ldw	ra,8(sp)
  80d2b8:	dc400117 	ldw	r17,4(sp)
  80d2bc:	dc000017 	ldw	r16,0(sp)
  80d2c0:	dec00304 	addi	sp,sp,12
  80d2c4:	f800283a 	ret

0080d2c8 <_isatty_r>:
  80d2c8:	defffd04 	addi	sp,sp,-12
  80d2cc:	dc000015 	stw	r16,0(sp)
  80d2d0:	04002074 	movhi	r16,129
  80d2d4:	8411d004 	addi	r16,r16,18240
  80d2d8:	dc400115 	stw	r17,4(sp)
  80d2dc:	80000015 	stw	zero,0(r16)
  80d2e0:	2023883a 	mov	r17,r4
  80d2e4:	2809883a 	mov	r4,r5
  80d2e8:	dfc00215 	stw	ra,8(sp)
  80d2ec:	080f1f40 	call	80f1f4 <isatty>
  80d2f0:	1007883a 	mov	r3,r2
  80d2f4:	00bfffc4 	movi	r2,-1
  80d2f8:	18800626 	beq	r3,r2,80d314 <_isatty_r+0x4c>
  80d2fc:	1805883a 	mov	r2,r3
  80d300:	dfc00217 	ldw	ra,8(sp)
  80d304:	dc400117 	ldw	r17,4(sp)
  80d308:	dc000017 	ldw	r16,0(sp)
  80d30c:	dec00304 	addi	sp,sp,12
  80d310:	f800283a 	ret
  80d314:	80800017 	ldw	r2,0(r16)
  80d318:	103ff826 	beq	r2,zero,80d2fc <_isatty_r+0x34>
  80d31c:	88800015 	stw	r2,0(r17)
  80d320:	1805883a 	mov	r2,r3
  80d324:	dfc00217 	ldw	ra,8(sp)
  80d328:	dc400117 	ldw	r17,4(sp)
  80d32c:	dc000017 	ldw	r16,0(sp)
  80d330:	dec00304 	addi	sp,sp,12
  80d334:	f800283a 	ret

0080d338 <_lseek_r>:
  80d338:	defffd04 	addi	sp,sp,-12
  80d33c:	dc000015 	stw	r16,0(sp)
  80d340:	04002074 	movhi	r16,129
  80d344:	8411d004 	addi	r16,r16,18240
  80d348:	dc400115 	stw	r17,4(sp)
  80d34c:	80000015 	stw	zero,0(r16)
  80d350:	2023883a 	mov	r17,r4
  80d354:	2809883a 	mov	r4,r5
  80d358:	300b883a 	mov	r5,r6
  80d35c:	380d883a 	mov	r6,r7
  80d360:	dfc00215 	stw	ra,8(sp)
  80d364:	080f3180 	call	80f318 <lseek>
  80d368:	1007883a 	mov	r3,r2
  80d36c:	00bfffc4 	movi	r2,-1
  80d370:	18800626 	beq	r3,r2,80d38c <_lseek_r+0x54>
  80d374:	1805883a 	mov	r2,r3
  80d378:	dfc00217 	ldw	ra,8(sp)
  80d37c:	dc400117 	ldw	r17,4(sp)
  80d380:	dc000017 	ldw	r16,0(sp)
  80d384:	dec00304 	addi	sp,sp,12
  80d388:	f800283a 	ret
  80d38c:	80800017 	ldw	r2,0(r16)
  80d390:	103ff826 	beq	r2,zero,80d374 <_lseek_r+0x3c>
  80d394:	88800015 	stw	r2,0(r17)
  80d398:	1805883a 	mov	r2,r3
  80d39c:	dfc00217 	ldw	ra,8(sp)
  80d3a0:	dc400117 	ldw	r17,4(sp)
  80d3a4:	dc000017 	ldw	r16,0(sp)
  80d3a8:	dec00304 	addi	sp,sp,12
  80d3ac:	f800283a 	ret

0080d3b0 <_read_r>:
  80d3b0:	defffd04 	addi	sp,sp,-12
  80d3b4:	dc000015 	stw	r16,0(sp)
  80d3b8:	04002074 	movhi	r16,129
  80d3bc:	8411d004 	addi	r16,r16,18240
  80d3c0:	dc400115 	stw	r17,4(sp)
  80d3c4:	80000015 	stw	zero,0(r16)
  80d3c8:	2023883a 	mov	r17,r4
  80d3cc:	2809883a 	mov	r4,r5
  80d3d0:	300b883a 	mov	r5,r6
  80d3d4:	380d883a 	mov	r6,r7
  80d3d8:	dfc00215 	stw	ra,8(sp)
  80d3dc:	080f7b00 	call	80f7b0 <read>
  80d3e0:	1007883a 	mov	r3,r2
  80d3e4:	00bfffc4 	movi	r2,-1
  80d3e8:	18800626 	beq	r3,r2,80d404 <_read_r+0x54>
  80d3ec:	1805883a 	mov	r2,r3
  80d3f0:	dfc00217 	ldw	ra,8(sp)
  80d3f4:	dc400117 	ldw	r17,4(sp)
  80d3f8:	dc000017 	ldw	r16,0(sp)
  80d3fc:	dec00304 	addi	sp,sp,12
  80d400:	f800283a 	ret
  80d404:	80800017 	ldw	r2,0(r16)
  80d408:	103ff826 	beq	r2,zero,80d3ec <_read_r+0x3c>
  80d40c:	88800015 	stw	r2,0(r17)
  80d410:	1805883a 	mov	r2,r3
  80d414:	dfc00217 	ldw	ra,8(sp)
  80d418:	dc400117 	ldw	r17,4(sp)
  80d41c:	dc000017 	ldw	r16,0(sp)
  80d420:	dec00304 	addi	sp,sp,12
  80d424:	f800283a 	ret

0080d428 <__udivdi3>:
  80d428:	defff104 	addi	sp,sp,-60
  80d42c:	0015883a 	mov	r10,zero
  80d430:	2005883a 	mov	r2,r4
  80d434:	3011883a 	mov	r8,r6
  80d438:	df000d15 	stw	fp,52(sp)
  80d43c:	dd400a15 	stw	r21,40(sp)
  80d440:	dcc00815 	stw	r19,32(sp)
  80d444:	dfc00e15 	stw	ra,56(sp)
  80d448:	ddc00c15 	stw	r23,48(sp)
  80d44c:	dd800b15 	stw	r22,44(sp)
  80d450:	dd000915 	stw	r20,36(sp)
  80d454:	dc800715 	stw	r18,28(sp)
  80d458:	dc400615 	stw	r17,24(sp)
  80d45c:	dc000515 	stw	r16,20(sp)
  80d460:	da800315 	stw	r10,12(sp)
  80d464:	4027883a 	mov	r19,r8
  80d468:	1039883a 	mov	fp,r2
  80d46c:	282b883a 	mov	r21,r5
  80d470:	da800415 	stw	r10,16(sp)
  80d474:	3800401e 	bne	r7,zero,80d578 <__udivdi3+0x150>
  80d478:	2a006536 	bltu	r5,r8,80d610 <__udivdi3+0x1e8>
  80d47c:	4000b526 	beq	r8,zero,80d754 <__udivdi3+0x32c>
  80d480:	00bfffd4 	movui	r2,65535
  80d484:	14c0ad36 	bltu	r2,r19,80d73c <__udivdi3+0x314>
  80d488:	00803fc4 	movi	r2,255
  80d48c:	14c15e36 	bltu	r2,r19,80da08 <__udivdi3+0x5e0>
  80d490:	000b883a 	mov	r5,zero
  80d494:	0005883a 	mov	r2,zero
  80d498:	9884d83a 	srl	r2,r19,r2
  80d49c:	01002074 	movhi	r4,129
  80d4a0:	2108e904 	addi	r4,r4,9124
  80d4a4:	01800804 	movi	r6,32
  80d4a8:	1105883a 	add	r2,r2,r4
  80d4ac:	10c00003 	ldbu	r3,0(r2)
  80d4b0:	28c7883a 	add	r3,r5,r3
  80d4b4:	30e9c83a 	sub	r20,r6,r3
  80d4b8:	a0010a1e 	bne	r20,zero,80d8e4 <__udivdi3+0x4bc>
  80d4bc:	982ed43a 	srli	r23,r19,16
  80d4c0:	acebc83a 	sub	r21,r21,r19
  80d4c4:	9dbfffcc 	andi	r22,r19,65535
  80d4c8:	05000044 	movi	r20,1
  80d4cc:	a809883a 	mov	r4,r21
  80d4d0:	b80b883a 	mov	r5,r23
  80d4d4:	080552c0 	call	80552c <__udivsi3>
  80d4d8:	100b883a 	mov	r5,r2
  80d4dc:	b009883a 	mov	r4,r22
  80d4e0:	1021883a 	mov	r16,r2
  80d4e4:	080eb4c0 	call	80eb4c <__mulsi3>
  80d4e8:	a809883a 	mov	r4,r21
  80d4ec:	b80b883a 	mov	r5,r23
  80d4f0:	1023883a 	mov	r17,r2
  80d4f4:	08055340 	call	805534 <__umodsi3>
  80d4f8:	1004943a 	slli	r2,r2,16
  80d4fc:	e006d43a 	srli	r3,fp,16
  80d500:	10c4b03a 	or	r2,r2,r3
  80d504:	1440042e 	bgeu	r2,r17,80d518 <__udivdi3+0xf0>
  80d508:	14c5883a 	add	r2,r2,r19
  80d50c:	843fffc4 	addi	r16,r16,-1
  80d510:	14c00136 	bltu	r2,r19,80d518 <__udivdi3+0xf0>
  80d514:	14415c36 	bltu	r2,r17,80da88 <__udivdi3+0x660>
  80d518:	1463c83a 	sub	r17,r2,r17
  80d51c:	8809883a 	mov	r4,r17
  80d520:	b80b883a 	mov	r5,r23
  80d524:	080552c0 	call	80552c <__udivsi3>
  80d528:	100b883a 	mov	r5,r2
  80d52c:	b009883a 	mov	r4,r22
  80d530:	102b883a 	mov	r21,r2
  80d534:	080eb4c0 	call	80eb4c <__mulsi3>
  80d538:	8809883a 	mov	r4,r17
  80d53c:	b80b883a 	mov	r5,r23
  80d540:	1025883a 	mov	r18,r2
  80d544:	08055340 	call	805534 <__umodsi3>
  80d548:	1004943a 	slli	r2,r2,16
  80d54c:	e0ffffcc 	andi	r3,fp,65535
  80d550:	10c4b03a 	or	r2,r2,r3
  80d554:	1480042e 	bgeu	r2,r18,80d568 <__udivdi3+0x140>
  80d558:	9885883a 	add	r2,r19,r2
  80d55c:	ad7fffc4 	addi	r21,r21,-1
  80d560:	14c00136 	bltu	r2,r19,80d568 <__udivdi3+0x140>
  80d564:	14813c36 	bltu	r2,r18,80da58 <__udivdi3+0x630>
  80d568:	8004943a 	slli	r2,r16,16
  80d56c:	a009883a 	mov	r4,r20
  80d570:	a884b03a 	or	r2,r21,r2
  80d574:	00001506 	br	80d5cc <__udivdi3+0x1a4>
  80d578:	380d883a 	mov	r6,r7
  80d57c:	29c06c36 	bltu	r5,r7,80d730 <__udivdi3+0x308>
  80d580:	00bfffd4 	movui	r2,65535
  80d584:	11c06436 	bltu	r2,r7,80d718 <__udivdi3+0x2f0>
  80d588:	00803fc4 	movi	r2,255
  80d58c:	11c11836 	bltu	r2,r7,80d9f0 <__udivdi3+0x5c8>
  80d590:	000b883a 	mov	r5,zero
  80d594:	0005883a 	mov	r2,zero
  80d598:	3084d83a 	srl	r2,r6,r2
  80d59c:	01002074 	movhi	r4,129
  80d5a0:	2108e904 	addi	r4,r4,9124
  80d5a4:	01c00804 	movi	r7,32
  80d5a8:	1105883a 	add	r2,r2,r4
  80d5ac:	10c00003 	ldbu	r3,0(r2)
  80d5b0:	28c7883a 	add	r3,r5,r3
  80d5b4:	38edc83a 	sub	r22,r7,r3
  80d5b8:	b000731e 	bne	r22,zero,80d788 <__udivdi3+0x360>
  80d5bc:	35400136 	bltu	r6,r21,80d5c4 <__udivdi3+0x19c>
  80d5c0:	e4c05b36 	bltu	fp,r19,80d730 <__udivdi3+0x308>
  80d5c4:	00800044 	movi	r2,1
  80d5c8:	0009883a 	mov	r4,zero
  80d5cc:	d8800315 	stw	r2,12(sp)
  80d5d0:	d9400317 	ldw	r5,12(sp)
  80d5d4:	2007883a 	mov	r3,r4
  80d5d8:	d9000415 	stw	r4,16(sp)
  80d5dc:	2805883a 	mov	r2,r5
  80d5e0:	dfc00e17 	ldw	ra,56(sp)
  80d5e4:	df000d17 	ldw	fp,52(sp)
  80d5e8:	ddc00c17 	ldw	r23,48(sp)
  80d5ec:	dd800b17 	ldw	r22,44(sp)
  80d5f0:	dd400a17 	ldw	r21,40(sp)
  80d5f4:	dd000917 	ldw	r20,36(sp)
  80d5f8:	dcc00817 	ldw	r19,32(sp)
  80d5fc:	dc800717 	ldw	r18,28(sp)
  80d600:	dc400617 	ldw	r17,24(sp)
  80d604:	dc000517 	ldw	r16,20(sp)
  80d608:	dec00f04 	addi	sp,sp,60
  80d60c:	f800283a 	ret
  80d610:	00bfffd4 	movui	r2,65535
  80d614:	12005636 	bltu	r2,r8,80d770 <__udivdi3+0x348>
  80d618:	00803fc4 	movi	r2,255
  80d61c:	12010036 	bltu	r2,r8,80da20 <__udivdi3+0x5f8>
  80d620:	000b883a 	mov	r5,zero
  80d624:	0005883a 	mov	r2,zero
  80d628:	9884d83a 	srl	r2,r19,r2
  80d62c:	01002074 	movhi	r4,129
  80d630:	2108e904 	addi	r4,r4,9124
  80d634:	01800804 	movi	r6,32
  80d638:	1105883a 	add	r2,r2,r4
  80d63c:	10c00003 	ldbu	r3,0(r2)
  80d640:	28c7883a 	add	r3,r5,r3
  80d644:	30cbc83a 	sub	r5,r6,r3
  80d648:	28000626 	beq	r5,zero,80d664 <__udivdi3+0x23c>
  80d64c:	3145c83a 	sub	r2,r6,r5
  80d650:	e084d83a 	srl	r2,fp,r2
  80d654:	a946983a 	sll	r3,r21,r5
  80d658:	e178983a 	sll	fp,fp,r5
  80d65c:	9966983a 	sll	r19,r19,r5
  80d660:	18aab03a 	or	r21,r3,r2
  80d664:	982ed43a 	srli	r23,r19,16
  80d668:	a809883a 	mov	r4,r21
  80d66c:	9cbfffcc 	andi	r18,r19,65535
  80d670:	b80b883a 	mov	r5,r23
  80d674:	080552c0 	call	80552c <__udivsi3>
  80d678:	100b883a 	mov	r5,r2
  80d67c:	9009883a 	mov	r4,r18
  80d680:	1021883a 	mov	r16,r2
  80d684:	080eb4c0 	call	80eb4c <__mulsi3>
  80d688:	a809883a 	mov	r4,r21
  80d68c:	b80b883a 	mov	r5,r23
  80d690:	1023883a 	mov	r17,r2
  80d694:	08055340 	call	805534 <__umodsi3>
  80d698:	1004943a 	slli	r2,r2,16
  80d69c:	e006d43a 	srli	r3,fp,16
  80d6a0:	10c4b03a 	or	r2,r2,r3
  80d6a4:	1440042e 	bgeu	r2,r17,80d6b8 <__udivdi3+0x290>
  80d6a8:	14c5883a 	add	r2,r2,r19
  80d6ac:	843fffc4 	addi	r16,r16,-1
  80d6b0:	14c00136 	bltu	r2,r19,80d6b8 <__udivdi3+0x290>
  80d6b4:	1440ea36 	bltu	r2,r17,80da60 <__udivdi3+0x638>
  80d6b8:	1463c83a 	sub	r17,r2,r17
  80d6bc:	8809883a 	mov	r4,r17
  80d6c0:	b80b883a 	mov	r5,r23
  80d6c4:	080552c0 	call	80552c <__udivsi3>
  80d6c8:	100b883a 	mov	r5,r2
  80d6cc:	9009883a 	mov	r4,r18
  80d6d0:	102b883a 	mov	r21,r2
  80d6d4:	080eb4c0 	call	80eb4c <__mulsi3>
  80d6d8:	8809883a 	mov	r4,r17
  80d6dc:	b80b883a 	mov	r5,r23
  80d6e0:	1025883a 	mov	r18,r2
  80d6e4:	08055340 	call	805534 <__umodsi3>
  80d6e8:	1004943a 	slli	r2,r2,16
  80d6ec:	e0ffffcc 	andi	r3,fp,65535
  80d6f0:	10c4b03a 	or	r2,r2,r3
  80d6f4:	1480042e 	bgeu	r2,r18,80d708 <__udivdi3+0x2e0>
  80d6f8:	9885883a 	add	r2,r19,r2
  80d6fc:	ad7fffc4 	addi	r21,r21,-1
  80d700:	14c00136 	bltu	r2,r19,80d708 <__udivdi3+0x2e0>
  80d704:	1480d936 	bltu	r2,r18,80da6c <__udivdi3+0x644>
  80d708:	8004943a 	slli	r2,r16,16
  80d70c:	0009883a 	mov	r4,zero
  80d710:	a884b03a 	or	r2,r21,r2
  80d714:	003fad06 	br	80d5cc <__udivdi3+0x1a4>
  80d718:	00804034 	movhi	r2,256
  80d71c:	10bfffc4 	addi	r2,r2,-1
  80d720:	11c0b636 	bltu	r2,r7,80d9fc <__udivdi3+0x5d4>
  80d724:	01400404 	movi	r5,16
  80d728:	2805883a 	mov	r2,r5
  80d72c:	003f9a06 	br	80d598 <__udivdi3+0x170>
  80d730:	0005883a 	mov	r2,zero
  80d734:	0009883a 	mov	r4,zero
  80d738:	003fa406 	br	80d5cc <__udivdi3+0x1a4>
  80d73c:	00804034 	movhi	r2,256
  80d740:	10bfffc4 	addi	r2,r2,-1
  80d744:	14c0b336 	bltu	r2,r19,80da14 <__udivdi3+0x5ec>
  80d748:	01400404 	movi	r5,16
  80d74c:	2805883a 	mov	r2,r5
  80d750:	003f5106 	br	80d498 <__udivdi3+0x70>
  80d754:	01000044 	movi	r4,1
  80d758:	000b883a 	mov	r5,zero
  80d75c:	080552c0 	call	80552c <__udivsi3>
  80d760:	1027883a 	mov	r19,r2
  80d764:	00bfffd4 	movui	r2,65535
  80d768:	14fff436 	bltu	r2,r19,80d73c <__udivdi3+0x314>
  80d76c:	003f4606 	br	80d488 <__udivdi3+0x60>
  80d770:	00804034 	movhi	r2,256
  80d774:	10bfffc4 	addi	r2,r2,-1
  80d778:	1200ac36 	bltu	r2,r8,80da2c <__udivdi3+0x604>
  80d77c:	01400404 	movi	r5,16
  80d780:	2805883a 	mov	r2,r5
  80d784:	003fa806 	br	80d628 <__udivdi3+0x200>
  80d788:	3d85c83a 	sub	r2,r7,r22
  80d78c:	3588983a 	sll	r4,r6,r22
  80d790:	9886d83a 	srl	r3,r19,r2
  80d794:	a8a2d83a 	srl	r17,r21,r2
  80d798:	e084d83a 	srl	r2,fp,r2
  80d79c:	20eeb03a 	or	r23,r4,r3
  80d7a0:	b824d43a 	srli	r18,r23,16
  80d7a4:	ad86983a 	sll	r3,r21,r22
  80d7a8:	8809883a 	mov	r4,r17
  80d7ac:	900b883a 	mov	r5,r18
  80d7b0:	1886b03a 	or	r3,r3,r2
  80d7b4:	d8c00115 	stw	r3,4(sp)
  80d7b8:	bc3fffcc 	andi	r16,r23,65535
  80d7bc:	080552c0 	call	80552c <__udivsi3>
  80d7c0:	100b883a 	mov	r5,r2
  80d7c4:	8009883a 	mov	r4,r16
  80d7c8:	1029883a 	mov	r20,r2
  80d7cc:	080eb4c0 	call	80eb4c <__mulsi3>
  80d7d0:	900b883a 	mov	r5,r18
  80d7d4:	8809883a 	mov	r4,r17
  80d7d8:	102b883a 	mov	r21,r2
  80d7dc:	08055340 	call	805534 <__umodsi3>
  80d7e0:	d9400117 	ldw	r5,4(sp)
  80d7e4:	1004943a 	slli	r2,r2,16
  80d7e8:	9da6983a 	sll	r19,r19,r22
  80d7ec:	2806d43a 	srli	r3,r5,16
  80d7f0:	10c4b03a 	or	r2,r2,r3
  80d7f4:	1540032e 	bgeu	r2,r21,80d804 <__udivdi3+0x3dc>
  80d7f8:	15c5883a 	add	r2,r2,r23
  80d7fc:	a53fffc4 	addi	r20,r20,-1
  80d800:	15c0912e 	bgeu	r2,r23,80da48 <__udivdi3+0x620>
  80d804:	1563c83a 	sub	r17,r2,r21
  80d808:	8809883a 	mov	r4,r17
  80d80c:	900b883a 	mov	r5,r18
  80d810:	080552c0 	call	80552c <__udivsi3>
  80d814:	100b883a 	mov	r5,r2
  80d818:	8009883a 	mov	r4,r16
  80d81c:	102b883a 	mov	r21,r2
  80d820:	080eb4c0 	call	80eb4c <__mulsi3>
  80d824:	8809883a 	mov	r4,r17
  80d828:	900b883a 	mov	r5,r18
  80d82c:	1021883a 	mov	r16,r2
  80d830:	08055340 	call	805534 <__umodsi3>
  80d834:	da800117 	ldw	r10,4(sp)
  80d838:	1004943a 	slli	r2,r2,16
  80d83c:	50ffffcc 	andi	r3,r10,65535
  80d840:	10c6b03a 	or	r3,r2,r3
  80d844:	1c00032e 	bgeu	r3,r16,80d854 <__udivdi3+0x42c>
  80d848:	1dc7883a 	add	r3,r3,r23
  80d84c:	ad7fffc4 	addi	r21,r21,-1
  80d850:	1dc0792e 	bgeu	r3,r23,80da38 <__udivdi3+0x610>
  80d854:	a004943a 	slli	r2,r20,16
  80d858:	982ed43a 	srli	r23,r19,16
  80d85c:	9cffffcc 	andi	r19,r19,65535
  80d860:	a8a4b03a 	or	r18,r21,r2
  80d864:	947fffcc 	andi	r17,r18,65535
  80d868:	902ad43a 	srli	r21,r18,16
  80d86c:	8809883a 	mov	r4,r17
  80d870:	980b883a 	mov	r5,r19
  80d874:	1c21c83a 	sub	r16,r3,r16
  80d878:	080eb4c0 	call	80eb4c <__mulsi3>
  80d87c:	8809883a 	mov	r4,r17
  80d880:	b80b883a 	mov	r5,r23
  80d884:	1029883a 	mov	r20,r2
  80d888:	080eb4c0 	call	80eb4c <__mulsi3>
  80d88c:	980b883a 	mov	r5,r19
  80d890:	a809883a 	mov	r4,r21
  80d894:	1023883a 	mov	r17,r2
  80d898:	080eb4c0 	call	80eb4c <__mulsi3>
  80d89c:	a809883a 	mov	r4,r21
  80d8a0:	b80b883a 	mov	r5,r23
  80d8a4:	1027883a 	mov	r19,r2
  80d8a8:	080eb4c0 	call	80eb4c <__mulsi3>
  80d8ac:	1009883a 	mov	r4,r2
  80d8b0:	a004d43a 	srli	r2,r20,16
  80d8b4:	8ce3883a 	add	r17,r17,r19
  80d8b8:	1447883a 	add	r3,r2,r17
  80d8bc:	1cc0022e 	bgeu	r3,r19,80d8c8 <__udivdi3+0x4a0>
  80d8c0:	00800074 	movhi	r2,1
  80d8c4:	2089883a 	add	r4,r4,r2
  80d8c8:	1804d43a 	srli	r2,r3,16
  80d8cc:	2085883a 	add	r2,r4,r2
  80d8d0:	80804436 	bltu	r16,r2,80d9e4 <__udivdi3+0x5bc>
  80d8d4:	80803e26 	beq	r16,r2,80d9d0 <__udivdi3+0x5a8>
  80d8d8:	9005883a 	mov	r2,r18
  80d8dc:	0009883a 	mov	r4,zero
  80d8e0:	003f3a06 	br	80d5cc <__udivdi3+0x1a4>
  80d8e4:	9d26983a 	sll	r19,r19,r20
  80d8e8:	3505c83a 	sub	r2,r6,r20
  80d8ec:	a8a2d83a 	srl	r17,r21,r2
  80d8f0:	982ed43a 	srli	r23,r19,16
  80d8f4:	e084d83a 	srl	r2,fp,r2
  80d8f8:	ad06983a 	sll	r3,r21,r20
  80d8fc:	8809883a 	mov	r4,r17
  80d900:	b80b883a 	mov	r5,r23
  80d904:	1886b03a 	or	r3,r3,r2
  80d908:	d8c00015 	stw	r3,0(sp)
  80d90c:	9dbfffcc 	andi	r22,r19,65535
  80d910:	080552c0 	call	80552c <__udivsi3>
  80d914:	100b883a 	mov	r5,r2
  80d918:	b009883a 	mov	r4,r22
  80d91c:	d8800215 	stw	r2,8(sp)
  80d920:	080eb4c0 	call	80eb4c <__mulsi3>
  80d924:	8809883a 	mov	r4,r17
  80d928:	b80b883a 	mov	r5,r23
  80d92c:	102b883a 	mov	r21,r2
  80d930:	08055340 	call	805534 <__umodsi3>
  80d934:	d9000017 	ldw	r4,0(sp)
  80d938:	1004943a 	slli	r2,r2,16
  80d93c:	2006d43a 	srli	r3,r4,16
  80d940:	10c4b03a 	or	r2,r2,r3
  80d944:	1540052e 	bgeu	r2,r21,80d95c <__udivdi3+0x534>
  80d948:	d9400217 	ldw	r5,8(sp)
  80d94c:	14c5883a 	add	r2,r2,r19
  80d950:	297fffc4 	addi	r5,r5,-1
  80d954:	d9400215 	stw	r5,8(sp)
  80d958:	14c0462e 	bgeu	r2,r19,80da74 <__udivdi3+0x64c>
  80d95c:	1563c83a 	sub	r17,r2,r21
  80d960:	8809883a 	mov	r4,r17
  80d964:	b80b883a 	mov	r5,r23
  80d968:	080552c0 	call	80552c <__udivsi3>
  80d96c:	100b883a 	mov	r5,r2
  80d970:	b009883a 	mov	r4,r22
  80d974:	1025883a 	mov	r18,r2
  80d978:	080eb4c0 	call	80eb4c <__mulsi3>
  80d97c:	8809883a 	mov	r4,r17
  80d980:	b80b883a 	mov	r5,r23
  80d984:	1021883a 	mov	r16,r2
  80d988:	08055340 	call	805534 <__umodsi3>
  80d98c:	da800017 	ldw	r10,0(sp)
  80d990:	1004943a 	slli	r2,r2,16
  80d994:	50ffffcc 	andi	r3,r10,65535
  80d998:	10c6b03a 	or	r3,r2,r3
  80d99c:	1c00062e 	bgeu	r3,r16,80d9b8 <__udivdi3+0x590>
  80d9a0:	1cc7883a 	add	r3,r3,r19
  80d9a4:	94bfffc4 	addi	r18,r18,-1
  80d9a8:	1cc00336 	bltu	r3,r19,80d9b8 <__udivdi3+0x590>
  80d9ac:	1c00022e 	bgeu	r3,r16,80d9b8 <__udivdi3+0x590>
  80d9b0:	94bfffc4 	addi	r18,r18,-1
  80d9b4:	1cc7883a 	add	r3,r3,r19
  80d9b8:	d9000217 	ldw	r4,8(sp)
  80d9bc:	e538983a 	sll	fp,fp,r20
  80d9c0:	1c2bc83a 	sub	r21,r3,r16
  80d9c4:	2004943a 	slli	r2,r4,16
  80d9c8:	90a8b03a 	or	r20,r18,r2
  80d9cc:	003ebf06 	br	80d4cc <__udivdi3+0xa4>
  80d9d0:	1804943a 	slli	r2,r3,16
  80d9d4:	e588983a 	sll	r4,fp,r22
  80d9d8:	a0ffffcc 	andi	r3,r20,65535
  80d9dc:	10c5883a 	add	r2,r2,r3
  80d9e0:	20bfbd2e 	bgeu	r4,r2,80d8d8 <__udivdi3+0x4b0>
  80d9e4:	90bfffc4 	addi	r2,r18,-1
  80d9e8:	0009883a 	mov	r4,zero
  80d9ec:	003ef706 	br	80d5cc <__udivdi3+0x1a4>
  80d9f0:	01400204 	movi	r5,8
  80d9f4:	2805883a 	mov	r2,r5
  80d9f8:	003ee706 	br	80d598 <__udivdi3+0x170>
  80d9fc:	01400604 	movi	r5,24
  80da00:	2805883a 	mov	r2,r5
  80da04:	003ee406 	br	80d598 <__udivdi3+0x170>
  80da08:	01400204 	movi	r5,8
  80da0c:	2805883a 	mov	r2,r5
  80da10:	003ea106 	br	80d498 <__udivdi3+0x70>
  80da14:	01400604 	movi	r5,24
  80da18:	2805883a 	mov	r2,r5
  80da1c:	003e9e06 	br	80d498 <__udivdi3+0x70>
  80da20:	01400204 	movi	r5,8
  80da24:	2805883a 	mov	r2,r5
  80da28:	003eff06 	br	80d628 <__udivdi3+0x200>
  80da2c:	01400604 	movi	r5,24
  80da30:	2805883a 	mov	r2,r5
  80da34:	003efc06 	br	80d628 <__udivdi3+0x200>
  80da38:	1c3f862e 	bgeu	r3,r16,80d854 <__udivdi3+0x42c>
  80da3c:	1dc7883a 	add	r3,r3,r23
  80da40:	ad7fffc4 	addi	r21,r21,-1
  80da44:	003f8306 	br	80d854 <__udivdi3+0x42c>
  80da48:	157f6e2e 	bgeu	r2,r21,80d804 <__udivdi3+0x3dc>
  80da4c:	a53fffc4 	addi	r20,r20,-1
  80da50:	15c5883a 	add	r2,r2,r23
  80da54:	003f6b06 	br	80d804 <__udivdi3+0x3dc>
  80da58:	ad7fffc4 	addi	r21,r21,-1
  80da5c:	003ec206 	br	80d568 <__udivdi3+0x140>
  80da60:	843fffc4 	addi	r16,r16,-1
  80da64:	14c5883a 	add	r2,r2,r19
  80da68:	003f1306 	br	80d6b8 <__udivdi3+0x290>
  80da6c:	ad7fffc4 	addi	r21,r21,-1
  80da70:	003f2506 	br	80d708 <__udivdi3+0x2e0>
  80da74:	157fb92e 	bgeu	r2,r21,80d95c <__udivdi3+0x534>
  80da78:	297fffc4 	addi	r5,r5,-1
  80da7c:	14c5883a 	add	r2,r2,r19
  80da80:	d9400215 	stw	r5,8(sp)
  80da84:	003fb506 	br	80d95c <__udivdi3+0x534>
  80da88:	843fffc4 	addi	r16,r16,-1
  80da8c:	14c5883a 	add	r2,r2,r19
  80da90:	003ea106 	br	80d518 <__udivdi3+0xf0>

0080da94 <__umoddi3>:
  80da94:	defff004 	addi	sp,sp,-64
  80da98:	3011883a 	mov	r8,r6
  80da9c:	000d883a 	mov	r6,zero
  80daa0:	dd400b15 	stw	r21,44(sp)
  80daa4:	dcc00915 	stw	r19,36(sp)
  80daa8:	dc000615 	stw	r16,24(sp)
  80daac:	dfc00f15 	stw	ra,60(sp)
  80dab0:	df000e15 	stw	fp,56(sp)
  80dab4:	ddc00d15 	stw	r23,52(sp)
  80dab8:	dd800c15 	stw	r22,48(sp)
  80dabc:	dd000a15 	stw	r20,40(sp)
  80dac0:	dc800815 	stw	r18,32(sp)
  80dac4:	dc400715 	stw	r17,28(sp)
  80dac8:	2817883a 	mov	r11,r5
  80dacc:	d9800415 	stw	r6,16(sp)
  80dad0:	4027883a 	mov	r19,r8
  80dad4:	d9800515 	stw	r6,20(sp)
  80dad8:	2021883a 	mov	r16,r4
  80dadc:	282b883a 	mov	r21,r5
  80dae0:	38002c1e 	bne	r7,zero,80db94 <__umoddi3+0x100>
  80dae4:	2a005636 	bltu	r5,r8,80dc40 <__umoddi3+0x1ac>
  80dae8:	40009a26 	beq	r8,zero,80dd54 <__umoddi3+0x2c0>
  80daec:	00bfffd4 	movui	r2,65535
  80daf0:	14c09236 	bltu	r2,r19,80dd3c <__umoddi3+0x2a8>
  80daf4:	00803fc4 	movi	r2,255
  80daf8:	14c15c36 	bltu	r2,r19,80e06c <__umoddi3+0x5d8>
  80dafc:	000b883a 	mov	r5,zero
  80db00:	0005883a 	mov	r2,zero
  80db04:	9884d83a 	srl	r2,r19,r2
  80db08:	01002074 	movhi	r4,129
  80db0c:	2108e904 	addi	r4,r4,9124
  80db10:	01800804 	movi	r6,32
  80db14:	1105883a 	add	r2,r2,r4
  80db18:	10c00003 	ldbu	r3,0(r2)
  80db1c:	28c7883a 	add	r3,r5,r3
  80db20:	30e5c83a 	sub	r18,r6,r3
  80db24:	9000a41e 	bne	r18,zero,80ddb8 <__umoddi3+0x324>
  80db28:	982ed43a 	srli	r23,r19,16
  80db2c:	acebc83a 	sub	r21,r21,r19
  80db30:	9d3fffcc 	andi	r20,r19,65535
  80db34:	002d883a 	mov	r22,zero
  80db38:	a809883a 	mov	r4,r21
  80db3c:	b80b883a 	mov	r5,r23
  80db40:	080552c0 	call	80552c <__udivsi3>
  80db44:	100b883a 	mov	r5,r2
  80db48:	a009883a 	mov	r4,r20
  80db4c:	080eb4c0 	call	80eb4c <__mulsi3>
  80db50:	a809883a 	mov	r4,r21
  80db54:	b80b883a 	mov	r5,r23
  80db58:	1023883a 	mov	r17,r2
  80db5c:	08055340 	call	805534 <__umodsi3>
  80db60:	1004943a 	slli	r2,r2,16
  80db64:	8006d43a 	srli	r3,r16,16
  80db68:	10c4b03a 	or	r2,r2,r3
  80db6c:	1440032e 	bgeu	r2,r17,80db7c <__umoddi3+0xe8>
  80db70:	14c5883a 	add	r2,r2,r19
  80db74:	14c00136 	bltu	r2,r19,80db7c <__umoddi3+0xe8>
  80db78:	14415836 	bltu	r2,r17,80e0dc <__umoddi3+0x648>
  80db7c:	1463c83a 	sub	r17,r2,r17
  80db80:	8809883a 	mov	r4,r17
  80db84:	b80b883a 	mov	r5,r23
  80db88:	080552c0 	call	80552c <__udivsi3>
  80db8c:	a009883a 	mov	r4,r20
  80db90:	00005306 	br	80dce0 <__umoddi3+0x24c>
  80db94:	380d883a 	mov	r6,r7
  80db98:	29c0132e 	bgeu	r5,r7,80dbe8 <__umoddi3+0x154>
  80db9c:	d9000415 	stw	r4,16(sp)
  80dba0:	d9400515 	stw	r5,20(sp)
  80dba4:	d9400417 	ldw	r5,16(sp)
  80dba8:	5813883a 	mov	r9,r11
  80dbac:	2811883a 	mov	r8,r5
  80dbb0:	4005883a 	mov	r2,r8
  80dbb4:	4807883a 	mov	r3,r9
  80dbb8:	dfc00f17 	ldw	ra,60(sp)
  80dbbc:	df000e17 	ldw	fp,56(sp)
  80dbc0:	ddc00d17 	ldw	r23,52(sp)
  80dbc4:	dd800c17 	ldw	r22,48(sp)
  80dbc8:	dd400b17 	ldw	r21,44(sp)
  80dbcc:	dd000a17 	ldw	r20,40(sp)
  80dbd0:	dcc00917 	ldw	r19,36(sp)
  80dbd4:	dc800817 	ldw	r18,32(sp)
  80dbd8:	dc400717 	ldw	r17,28(sp)
  80dbdc:	dc000617 	ldw	r16,24(sp)
  80dbe0:	dec01004 	addi	sp,sp,64
  80dbe4:	f800283a 	ret
  80dbe8:	00bfffd4 	movui	r2,65535
  80dbec:	11c06636 	bltu	r2,r7,80dd88 <__umoddi3+0x2f4>
  80dbf0:	00803fc4 	movi	r2,255
  80dbf4:	11c12036 	bltu	r2,r7,80e078 <__umoddi3+0x5e4>
  80dbf8:	000b883a 	mov	r5,zero
  80dbfc:	0005883a 	mov	r2,zero
  80dc00:	3084d83a 	srl	r2,r6,r2
  80dc04:	01002074 	movhi	r4,129
  80dc08:	2108e904 	addi	r4,r4,9124
  80dc0c:	01c00804 	movi	r7,32
  80dc10:	1105883a 	add	r2,r2,r4
  80dc14:	10c00003 	ldbu	r3,0(r2)
  80dc18:	28c7883a 	add	r3,r5,r3
  80dc1c:	38e5c83a 	sub	r18,r7,r3
  80dc20:	9000941e 	bne	r18,zero,80de74 <__umoddi3+0x3e0>
  80dc24:	35405e36 	bltu	r6,r21,80dda0 <__umoddi3+0x30c>
  80dc28:	84c05d2e 	bgeu	r16,r19,80dda0 <__umoddi3+0x30c>
  80dc2c:	8011883a 	mov	r8,r16
  80dc30:	a813883a 	mov	r9,r21
  80dc34:	dc000415 	stw	r16,16(sp)
  80dc38:	dd400515 	stw	r21,20(sp)
  80dc3c:	003fdc06 	br	80dbb0 <__umoddi3+0x11c>
  80dc40:	00bfffd4 	movui	r2,65535
  80dc44:	12004a36 	bltu	r2,r8,80dd70 <__umoddi3+0x2dc>
  80dc48:	00803fc4 	movi	r2,255
  80dc4c:	12010d36 	bltu	r2,r8,80e084 <__umoddi3+0x5f0>
  80dc50:	000b883a 	mov	r5,zero
  80dc54:	0005883a 	mov	r2,zero
  80dc58:	9884d83a 	srl	r2,r19,r2
  80dc5c:	01002074 	movhi	r4,129
  80dc60:	2108e904 	addi	r4,r4,9124
  80dc64:	01800804 	movi	r6,32
  80dc68:	1105883a 	add	r2,r2,r4
  80dc6c:	10c00003 	ldbu	r3,0(r2)
  80dc70:	28c7883a 	add	r3,r5,r3
  80dc74:	30c7c83a 	sub	r3,r6,r3
  80dc78:	1800dc1e 	bne	r3,zero,80dfec <__umoddi3+0x558>
  80dc7c:	002d883a 	mov	r22,zero
  80dc80:	982ed43a 	srli	r23,r19,16
  80dc84:	a809883a 	mov	r4,r21
  80dc88:	9cbfffcc 	andi	r18,r19,65535
  80dc8c:	b80b883a 	mov	r5,r23
  80dc90:	080552c0 	call	80552c <__udivsi3>
  80dc94:	100b883a 	mov	r5,r2
  80dc98:	9009883a 	mov	r4,r18
  80dc9c:	080eb4c0 	call	80eb4c <__mulsi3>
  80dca0:	a809883a 	mov	r4,r21
  80dca4:	b80b883a 	mov	r5,r23
  80dca8:	1023883a 	mov	r17,r2
  80dcac:	08055340 	call	805534 <__umodsi3>
  80dcb0:	1004943a 	slli	r2,r2,16
  80dcb4:	8006d43a 	srli	r3,r16,16
  80dcb8:	10c4b03a 	or	r2,r2,r3
  80dcbc:	1440032e 	bgeu	r2,r17,80dccc <__umoddi3+0x238>
  80dcc0:	14c5883a 	add	r2,r2,r19
  80dcc4:	14c00136 	bltu	r2,r19,80dccc <__umoddi3+0x238>
  80dcc8:	14410236 	bltu	r2,r17,80e0d4 <__umoddi3+0x640>
  80dccc:	1463c83a 	sub	r17,r2,r17
  80dcd0:	8809883a 	mov	r4,r17
  80dcd4:	b80b883a 	mov	r5,r23
  80dcd8:	080552c0 	call	80552c <__udivsi3>
  80dcdc:	9009883a 	mov	r4,r18
  80dce0:	100b883a 	mov	r5,r2
  80dce4:	080eb4c0 	call	80eb4c <__mulsi3>
  80dce8:	8809883a 	mov	r4,r17
  80dcec:	b80b883a 	mov	r5,r23
  80dcf0:	102b883a 	mov	r21,r2
  80dcf4:	08055340 	call	805534 <__umodsi3>
  80dcf8:	1004943a 	slli	r2,r2,16
  80dcfc:	80ffffcc 	andi	r3,r16,65535
  80dd00:	10c4b03a 	or	r2,r2,r3
  80dd04:	1540042e 	bgeu	r2,r21,80dd18 <__umoddi3+0x284>
  80dd08:	14c5883a 	add	r2,r2,r19
  80dd0c:	14c00236 	bltu	r2,r19,80dd18 <__umoddi3+0x284>
  80dd10:	1540012e 	bgeu	r2,r21,80dd18 <__umoddi3+0x284>
  80dd14:	14c5883a 	add	r2,r2,r19
  80dd18:	1545c83a 	sub	r2,r2,r21
  80dd1c:	1584d83a 	srl	r2,r2,r22
  80dd20:	0013883a 	mov	r9,zero
  80dd24:	d8800415 	stw	r2,16(sp)
  80dd28:	d8c00417 	ldw	r3,16(sp)
  80dd2c:	0005883a 	mov	r2,zero
  80dd30:	d8800515 	stw	r2,20(sp)
  80dd34:	1811883a 	mov	r8,r3
  80dd38:	003f9d06 	br	80dbb0 <__umoddi3+0x11c>
  80dd3c:	00804034 	movhi	r2,256
  80dd40:	10bfffc4 	addi	r2,r2,-1
  80dd44:	14c0c636 	bltu	r2,r19,80e060 <__umoddi3+0x5cc>
  80dd48:	01400404 	movi	r5,16
  80dd4c:	2805883a 	mov	r2,r5
  80dd50:	003f6c06 	br	80db04 <__umoddi3+0x70>
  80dd54:	01000044 	movi	r4,1
  80dd58:	000b883a 	mov	r5,zero
  80dd5c:	080552c0 	call	80552c <__udivsi3>
  80dd60:	1027883a 	mov	r19,r2
  80dd64:	00bfffd4 	movui	r2,65535
  80dd68:	14fff436 	bltu	r2,r19,80dd3c <__umoddi3+0x2a8>
  80dd6c:	003f6106 	br	80daf4 <__umoddi3+0x60>
  80dd70:	00804034 	movhi	r2,256
  80dd74:	10bfffc4 	addi	r2,r2,-1
  80dd78:	1200c536 	bltu	r2,r8,80e090 <__umoddi3+0x5fc>
  80dd7c:	01400404 	movi	r5,16
  80dd80:	2805883a 	mov	r2,r5
  80dd84:	003fb406 	br	80dc58 <__umoddi3+0x1c4>
  80dd88:	00804034 	movhi	r2,256
  80dd8c:	10bfffc4 	addi	r2,r2,-1
  80dd90:	11c0c236 	bltu	r2,r7,80e09c <__umoddi3+0x608>
  80dd94:	01400404 	movi	r5,16
  80dd98:	2805883a 	mov	r2,r5
  80dd9c:	003f9806 	br	80dc00 <__umoddi3+0x16c>
  80dda0:	84c9c83a 	sub	r4,r16,r19
  80dda4:	8105803a 	cmpltu	r2,r16,r4
  80dda8:	a987c83a 	sub	r3,r21,r6
  80ddac:	18abc83a 	sub	r21,r3,r2
  80ddb0:	2021883a 	mov	r16,r4
  80ddb4:	003f9d06 	br	80dc2c <__umoddi3+0x198>
  80ddb8:	9ca6983a 	sll	r19,r19,r18
  80ddbc:	3485c83a 	sub	r2,r6,r18
  80ddc0:	a8a2d83a 	srl	r17,r21,r2
  80ddc4:	982ed43a 	srli	r23,r19,16
  80ddc8:	ac86983a 	sll	r3,r21,r18
  80ddcc:	8084d83a 	srl	r2,r16,r2
  80ddd0:	8809883a 	mov	r4,r17
  80ddd4:	b80b883a 	mov	r5,r23
  80ddd8:	18b8b03a 	or	fp,r3,r2
  80dddc:	9d3fffcc 	andi	r20,r19,65535
  80dde0:	080552c0 	call	80552c <__udivsi3>
  80dde4:	100b883a 	mov	r5,r2
  80dde8:	a009883a 	mov	r4,r20
  80ddec:	080eb4c0 	call	80eb4c <__mulsi3>
  80ddf0:	8809883a 	mov	r4,r17
  80ddf4:	b80b883a 	mov	r5,r23
  80ddf8:	102b883a 	mov	r21,r2
  80ddfc:	08055340 	call	805534 <__umodsi3>
  80de00:	1004943a 	slli	r2,r2,16
  80de04:	e006d43a 	srli	r3,fp,16
  80de08:	902d883a 	mov	r22,r18
  80de0c:	10c4b03a 	or	r2,r2,r3
  80de10:	1540022e 	bgeu	r2,r21,80de1c <__umoddi3+0x388>
  80de14:	14c5883a 	add	r2,r2,r19
  80de18:	14c0ab2e 	bgeu	r2,r19,80e0c8 <__umoddi3+0x634>
  80de1c:	1563c83a 	sub	r17,r2,r21
  80de20:	8809883a 	mov	r4,r17
  80de24:	b80b883a 	mov	r5,r23
  80de28:	080552c0 	call	80552c <__udivsi3>
  80de2c:	100b883a 	mov	r5,r2
  80de30:	a009883a 	mov	r4,r20
  80de34:	080eb4c0 	call	80eb4c <__mulsi3>
  80de38:	8809883a 	mov	r4,r17
  80de3c:	b80b883a 	mov	r5,r23
  80de40:	102b883a 	mov	r21,r2
  80de44:	08055340 	call	805534 <__umodsi3>
  80de48:	1004943a 	slli	r2,r2,16
  80de4c:	e0ffffcc 	andi	r3,fp,65535
  80de50:	10c4b03a 	or	r2,r2,r3
  80de54:	1540042e 	bgeu	r2,r21,80de68 <__umoddi3+0x3d4>
  80de58:	14c5883a 	add	r2,r2,r19
  80de5c:	14c00236 	bltu	r2,r19,80de68 <__umoddi3+0x3d4>
  80de60:	1540012e 	bgeu	r2,r21,80de68 <__umoddi3+0x3d4>
  80de64:	14c5883a 	add	r2,r2,r19
  80de68:	84a0983a 	sll	r16,r16,r18
  80de6c:	156bc83a 	sub	r21,r2,r21
  80de70:	003f3106 	br	80db38 <__umoddi3+0xa4>
  80de74:	3c8fc83a 	sub	r7,r7,r18
  80de78:	3486983a 	sll	r3,r6,r18
  80de7c:	99c4d83a 	srl	r2,r19,r7
  80de80:	a9e2d83a 	srl	r17,r21,r7
  80de84:	ac8c983a 	sll	r6,r21,r18
  80de88:	18acb03a 	or	r22,r3,r2
  80de8c:	b02ed43a 	srli	r23,r22,16
  80de90:	81c4d83a 	srl	r2,r16,r7
  80de94:	8809883a 	mov	r4,r17
  80de98:	b80b883a 	mov	r5,r23
  80de9c:	308cb03a 	or	r6,r6,r2
  80dea0:	d9c00315 	stw	r7,12(sp)
  80dea4:	d9800215 	stw	r6,8(sp)
  80dea8:	b53fffcc 	andi	r20,r22,65535
  80deac:	080552c0 	call	80552c <__udivsi3>
  80deb0:	100b883a 	mov	r5,r2
  80deb4:	a009883a 	mov	r4,r20
  80deb8:	1039883a 	mov	fp,r2
  80debc:	080eb4c0 	call	80eb4c <__mulsi3>
  80dec0:	8809883a 	mov	r4,r17
  80dec4:	b80b883a 	mov	r5,r23
  80dec8:	102b883a 	mov	r21,r2
  80decc:	08055340 	call	805534 <__umodsi3>
  80ded0:	d9000217 	ldw	r4,8(sp)
  80ded4:	1004943a 	slli	r2,r2,16
  80ded8:	9ca6983a 	sll	r19,r19,r18
  80dedc:	2006d43a 	srli	r3,r4,16
  80dee0:	84a0983a 	sll	r16,r16,r18
  80dee4:	dcc00015 	stw	r19,0(sp)
  80dee8:	10c4b03a 	or	r2,r2,r3
  80deec:	dc000115 	stw	r16,4(sp)
  80def0:	1540032e 	bgeu	r2,r21,80df00 <__umoddi3+0x46c>
  80def4:	1585883a 	add	r2,r2,r22
  80def8:	e73fffc4 	addi	fp,fp,-1
  80defc:	15806e2e 	bgeu	r2,r22,80e0b8 <__umoddi3+0x624>
  80df00:	1563c83a 	sub	r17,r2,r21
  80df04:	8809883a 	mov	r4,r17
  80df08:	b80b883a 	mov	r5,r23
  80df0c:	080552c0 	call	80552c <__udivsi3>
  80df10:	100b883a 	mov	r5,r2
  80df14:	a009883a 	mov	r4,r20
  80df18:	1021883a 	mov	r16,r2
  80df1c:	080eb4c0 	call	80eb4c <__mulsi3>
  80df20:	b80b883a 	mov	r5,r23
  80df24:	8809883a 	mov	r4,r17
  80df28:	1029883a 	mov	r20,r2
  80df2c:	08055340 	call	805534 <__umodsi3>
  80df30:	d9400217 	ldw	r5,8(sp)
  80df34:	1004943a 	slli	r2,r2,16
  80df38:	28ffffcc 	andi	r3,r5,65535
  80df3c:	10c4b03a 	or	r2,r2,r3
  80df40:	1500032e 	bgeu	r2,r20,80df50 <__umoddi3+0x4bc>
  80df44:	1585883a 	add	r2,r2,r22
  80df48:	843fffc4 	addi	r16,r16,-1
  80df4c:	1580562e 	bgeu	r2,r22,80e0a8 <__umoddi3+0x614>
  80df50:	d9800017 	ldw	r6,0(sp)
  80df54:	e022943a 	slli	r17,fp,16
  80df58:	302ed43a 	srli	r23,r6,16
  80df5c:	8462b03a 	or	r17,r16,r17
  80df60:	34ffffcc 	andi	r19,r6,65535
  80df64:	882ad43a 	srli	r21,r17,16
  80df68:	8c7fffcc 	andi	r17,r17,65535
  80df6c:	8809883a 	mov	r4,r17
  80df70:	980b883a 	mov	r5,r19
  80df74:	1521c83a 	sub	r16,r2,r20
  80df78:	080eb4c0 	call	80eb4c <__mulsi3>
  80df7c:	8809883a 	mov	r4,r17
  80df80:	b80b883a 	mov	r5,r23
  80df84:	1029883a 	mov	r20,r2
  80df88:	080eb4c0 	call	80eb4c <__mulsi3>
  80df8c:	980b883a 	mov	r5,r19
  80df90:	a809883a 	mov	r4,r21
  80df94:	1023883a 	mov	r17,r2
  80df98:	080eb4c0 	call	80eb4c <__mulsi3>
  80df9c:	a809883a 	mov	r4,r21
  80dfa0:	b80b883a 	mov	r5,r23
  80dfa4:	1027883a 	mov	r19,r2
  80dfa8:	080eb4c0 	call	80eb4c <__mulsi3>
  80dfac:	100b883a 	mov	r5,r2
  80dfb0:	a004d43a 	srli	r2,r20,16
  80dfb4:	8ce3883a 	add	r17,r17,r19
  80dfb8:	1449883a 	add	r4,r2,r17
  80dfbc:	24c0022e 	bgeu	r4,r19,80dfc8 <__umoddi3+0x534>
  80dfc0:	00800074 	movhi	r2,1
  80dfc4:	288b883a 	add	r5,r5,r2
  80dfc8:	2004d43a 	srli	r2,r4,16
  80dfcc:	2008943a 	slli	r4,r4,16
  80dfd0:	a0ffffcc 	andi	r3,r20,65535
  80dfd4:	288d883a 	add	r6,r5,r2
  80dfd8:	20c9883a 	add	r4,r4,r3
  80dfdc:	81800b36 	bltu	r16,r6,80e00c <__umoddi3+0x578>
  80dfe0:	81804026 	beq	r16,r6,80e0e4 <__umoddi3+0x650>
  80dfe4:	818dc83a 	sub	r6,r16,r6
  80dfe8:	00000f06 	br	80e028 <__umoddi3+0x594>
  80dfec:	30c5c83a 	sub	r2,r6,r3
  80dff0:	182d883a 	mov	r22,r3
  80dff4:	8084d83a 	srl	r2,r16,r2
  80dff8:	a8c6983a 	sll	r3,r21,r3
  80dffc:	9da6983a 	sll	r19,r19,r22
  80e000:	85a0983a 	sll	r16,r16,r22
  80e004:	18aab03a 	or	r21,r3,r2
  80e008:	003f1d06 	br	80dc80 <__umoddi3+0x1ec>
  80e00c:	d8c00017 	ldw	r3,0(sp)
  80e010:	20c5c83a 	sub	r2,r4,r3
  80e014:	2089803a 	cmpltu	r4,r4,r2
  80e018:	3587c83a 	sub	r3,r6,r22
  80e01c:	1907c83a 	sub	r3,r3,r4
  80e020:	80cdc83a 	sub	r6,r16,r3
  80e024:	1009883a 	mov	r4,r2
  80e028:	d9400117 	ldw	r5,4(sp)
  80e02c:	2905c83a 	sub	r2,r5,r4
  80e030:	2887803a 	cmpltu	r3,r5,r2
  80e034:	30c7c83a 	sub	r3,r6,r3
  80e038:	d9800317 	ldw	r6,12(sp)
  80e03c:	1484d83a 	srl	r2,r2,r18
  80e040:	1988983a 	sll	r4,r3,r6
  80e044:	1c86d83a 	srl	r3,r3,r18
  80e048:	2088b03a 	or	r4,r4,r2
  80e04c:	2011883a 	mov	r8,r4
  80e050:	1813883a 	mov	r9,r3
  80e054:	d9000415 	stw	r4,16(sp)
  80e058:	d8c00515 	stw	r3,20(sp)
  80e05c:	003ed406 	br	80dbb0 <__umoddi3+0x11c>
  80e060:	01400604 	movi	r5,24
  80e064:	2805883a 	mov	r2,r5
  80e068:	003ea606 	br	80db04 <__umoddi3+0x70>
  80e06c:	01400204 	movi	r5,8
  80e070:	2805883a 	mov	r2,r5
  80e074:	003ea306 	br	80db04 <__umoddi3+0x70>
  80e078:	01400204 	movi	r5,8
  80e07c:	2805883a 	mov	r2,r5
  80e080:	003edf06 	br	80dc00 <__umoddi3+0x16c>
  80e084:	01400204 	movi	r5,8
  80e088:	2805883a 	mov	r2,r5
  80e08c:	003ef206 	br	80dc58 <__umoddi3+0x1c4>
  80e090:	01400604 	movi	r5,24
  80e094:	2805883a 	mov	r2,r5
  80e098:	003eef06 	br	80dc58 <__umoddi3+0x1c4>
  80e09c:	01400604 	movi	r5,24
  80e0a0:	2805883a 	mov	r2,r5
  80e0a4:	003ed606 	br	80dc00 <__umoddi3+0x16c>
  80e0a8:	153fa92e 	bgeu	r2,r20,80df50 <__umoddi3+0x4bc>
  80e0ac:	843fffc4 	addi	r16,r16,-1
  80e0b0:	1585883a 	add	r2,r2,r22
  80e0b4:	003fa606 	br	80df50 <__umoddi3+0x4bc>
  80e0b8:	157f912e 	bgeu	r2,r21,80df00 <__umoddi3+0x46c>
  80e0bc:	e73fffc4 	addi	fp,fp,-1
  80e0c0:	1585883a 	add	r2,r2,r22
  80e0c4:	003f8e06 	br	80df00 <__umoddi3+0x46c>
  80e0c8:	157f542e 	bgeu	r2,r21,80de1c <__umoddi3+0x388>
  80e0cc:	14c5883a 	add	r2,r2,r19
  80e0d0:	003f5206 	br	80de1c <__umoddi3+0x388>
  80e0d4:	14c5883a 	add	r2,r2,r19
  80e0d8:	003efc06 	br	80dccc <__umoddi3+0x238>
  80e0dc:	14c5883a 	add	r2,r2,r19
  80e0e0:	003ea606 	br	80db7c <__umoddi3+0xe8>
  80e0e4:	d8800117 	ldw	r2,4(sp)
  80e0e8:	113fc836 	bltu	r2,r4,80e00c <__umoddi3+0x578>
  80e0ec:	000d883a 	mov	r6,zero
  80e0f0:	003fcd06 	br	80e028 <__umoddi3+0x594>

0080e0f4 <__muldf3>:
  80e0f4:	deffe004 	addi	sp,sp,-128
  80e0f8:	dc401815 	stw	r17,96(sp)
  80e0fc:	dc400404 	addi	r17,sp,16
  80e100:	2011883a 	mov	r8,r4
  80e104:	2813883a 	mov	r9,r5
  80e108:	dc001715 	stw	r16,92(sp)
  80e10c:	d809883a 	mov	r4,sp
  80e110:	880b883a 	mov	r5,r17
  80e114:	dc000904 	addi	r16,sp,36
  80e118:	dfc01f15 	stw	ra,124(sp)
  80e11c:	da400115 	stw	r9,4(sp)
  80e120:	d9c00315 	stw	r7,12(sp)
  80e124:	da000015 	stw	r8,0(sp)
  80e128:	d9800215 	stw	r6,8(sp)
  80e12c:	ddc01e15 	stw	r23,120(sp)
  80e130:	dd801d15 	stw	r22,116(sp)
  80e134:	dd401c15 	stw	r21,112(sp)
  80e138:	dd001b15 	stw	r20,108(sp)
  80e13c:	dcc01a15 	stw	r19,104(sp)
  80e140:	dc801915 	stw	r18,100(sp)
  80e144:	08058d00 	call	8058d0 <__unpack_d>
  80e148:	d9000204 	addi	r4,sp,8
  80e14c:	800b883a 	mov	r5,r16
  80e150:	08058d00 	call	8058d0 <__unpack_d>
  80e154:	d9000417 	ldw	r4,16(sp)
  80e158:	00800044 	movi	r2,1
  80e15c:	1100102e 	bgeu	r2,r4,80e1a0 <__muldf3+0xac>
  80e160:	d8c00917 	ldw	r3,36(sp)
  80e164:	10c0062e 	bgeu	r2,r3,80e180 <__muldf3+0x8c>
  80e168:	00800104 	movi	r2,4
  80e16c:	20800a26 	beq	r4,r2,80e198 <__muldf3+0xa4>
  80e170:	1880cc26 	beq	r3,r2,80e4a4 <__muldf3+0x3b0>
  80e174:	00800084 	movi	r2,2
  80e178:	20800926 	beq	r4,r2,80e1a0 <__muldf3+0xac>
  80e17c:	1880191e 	bne	r3,r2,80e1e4 <__muldf3+0xf0>
  80e180:	d8c00a17 	ldw	r3,40(sp)
  80e184:	d8800517 	ldw	r2,20(sp)
  80e188:	8009883a 	mov	r4,r16
  80e18c:	10c4c03a 	cmpne	r2,r2,r3
  80e190:	d8800a15 	stw	r2,40(sp)
  80e194:	00000706 	br	80e1b4 <__muldf3+0xc0>
  80e198:	00800084 	movi	r2,2
  80e19c:	1880c326 	beq	r3,r2,80e4ac <__muldf3+0x3b8>
  80e1a0:	d8800517 	ldw	r2,20(sp)
  80e1a4:	d8c00a17 	ldw	r3,40(sp)
  80e1a8:	8809883a 	mov	r4,r17
  80e1ac:	10c4c03a 	cmpne	r2,r2,r3
  80e1b0:	d8800515 	stw	r2,20(sp)
  80e1b4:	08055bc0 	call	8055bc <__pack_d>
  80e1b8:	dfc01f17 	ldw	ra,124(sp)
  80e1bc:	ddc01e17 	ldw	r23,120(sp)
  80e1c0:	dd801d17 	ldw	r22,116(sp)
  80e1c4:	dd401c17 	ldw	r21,112(sp)
  80e1c8:	dd001b17 	ldw	r20,108(sp)
  80e1cc:	dcc01a17 	ldw	r19,104(sp)
  80e1d0:	dc801917 	ldw	r18,100(sp)
  80e1d4:	dc401817 	ldw	r17,96(sp)
  80e1d8:	dc001717 	ldw	r16,92(sp)
  80e1dc:	dec02004 	addi	sp,sp,128
  80e1e0:	f800283a 	ret
  80e1e4:	dd800717 	ldw	r22,28(sp)
  80e1e8:	dc800c17 	ldw	r18,48(sp)
  80e1ec:	002b883a 	mov	r21,zero
  80e1f0:	0023883a 	mov	r17,zero
  80e1f4:	a80b883a 	mov	r5,r21
  80e1f8:	b00d883a 	mov	r6,r22
  80e1fc:	880f883a 	mov	r7,r17
  80e200:	ddc00817 	ldw	r23,32(sp)
  80e204:	dcc00d17 	ldw	r19,52(sp)
  80e208:	9009883a 	mov	r4,r18
  80e20c:	080eb840 	call	80eb84 <__muldi3>
  80e210:	001b883a 	mov	r13,zero
  80e214:	680f883a 	mov	r7,r13
  80e218:	b009883a 	mov	r4,r22
  80e21c:	000b883a 	mov	r5,zero
  80e220:	980d883a 	mov	r6,r19
  80e224:	b82d883a 	mov	r22,r23
  80e228:	002f883a 	mov	r23,zero
  80e22c:	db401615 	stw	r13,88(sp)
  80e230:	d8801315 	stw	r2,76(sp)
  80e234:	d8c01415 	stw	r3,80(sp)
  80e238:	dcc01515 	stw	r19,84(sp)
  80e23c:	080eb840 	call	80eb84 <__muldi3>
  80e240:	b00d883a 	mov	r6,r22
  80e244:	000b883a 	mov	r5,zero
  80e248:	9009883a 	mov	r4,r18
  80e24c:	b80f883a 	mov	r7,r23
  80e250:	1021883a 	mov	r16,r2
  80e254:	1823883a 	mov	r17,r3
  80e258:	080eb840 	call	80eb84 <__muldi3>
  80e25c:	8085883a 	add	r2,r16,r2
  80e260:	140d803a 	cmpltu	r6,r2,r16
  80e264:	88c7883a 	add	r3,r17,r3
  80e268:	30cd883a 	add	r6,r6,r3
  80e26c:	1029883a 	mov	r20,r2
  80e270:	302b883a 	mov	r21,r6
  80e274:	da801317 	ldw	r10,76(sp)
  80e278:	dac01417 	ldw	r11,80(sp)
  80e27c:	db001517 	ldw	r12,84(sp)
  80e280:	db401617 	ldw	r13,88(sp)
  80e284:	3440612e 	bgeu	r6,r17,80e40c <__muldf3+0x318>
  80e288:	0009883a 	mov	r4,zero
  80e28c:	5105883a 	add	r2,r10,r4
  80e290:	128d803a 	cmpltu	r6,r2,r10
  80e294:	5d07883a 	add	r3,r11,r20
  80e298:	30cd883a 	add	r6,r6,r3
  80e29c:	0021883a 	mov	r16,zero
  80e2a0:	04400044 	movi	r17,1
  80e2a4:	1025883a 	mov	r18,r2
  80e2a8:	3027883a 	mov	r19,r6
  80e2ac:	32c06236 	bltu	r6,r11,80e438 <__muldf3+0x344>
  80e2b0:	59807a26 	beq	r11,r6,80e49c <__muldf3+0x3a8>
  80e2b4:	680b883a 	mov	r5,r13
  80e2b8:	b80f883a 	mov	r7,r23
  80e2bc:	6009883a 	mov	r4,r12
  80e2c0:	b00d883a 	mov	r6,r22
  80e2c4:	080eb840 	call	80eb84 <__muldi3>
  80e2c8:	1009883a 	mov	r4,r2
  80e2cc:	000f883a 	mov	r7,zero
  80e2d0:	1545883a 	add	r2,r2,r21
  80e2d4:	1111803a 	cmpltu	r8,r2,r4
  80e2d8:	19c7883a 	add	r3,r3,r7
  80e2dc:	40c7883a 	add	r3,r8,r3
  80e2e0:	88cb883a 	add	r5,r17,r3
  80e2e4:	d8c00617 	ldw	r3,24(sp)
  80e2e8:	8089883a 	add	r4,r16,r2
  80e2ec:	d8800b17 	ldw	r2,44(sp)
  80e2f0:	18c00104 	addi	r3,r3,4
  80e2f4:	240d803a 	cmpltu	r6,r4,r16
  80e2f8:	10c7883a 	add	r3,r2,r3
  80e2fc:	2013883a 	mov	r9,r4
  80e300:	d8800a17 	ldw	r2,40(sp)
  80e304:	d9000517 	ldw	r4,20(sp)
  80e308:	314d883a 	add	r6,r6,r5
  80e30c:	3015883a 	mov	r10,r6
  80e310:	2088c03a 	cmpne	r4,r4,r2
  80e314:	00880034 	movhi	r2,8192
  80e318:	10bfffc4 	addi	r2,r2,-1
  80e31c:	d9000f15 	stw	r4,60(sp)
  80e320:	d8c01015 	stw	r3,64(sp)
  80e324:	1180162e 	bgeu	r2,r6,80e380 <__muldf3+0x28c>
  80e328:	1811883a 	mov	r8,r3
  80e32c:	101f883a 	mov	r15,r2
  80e330:	980497fa 	slli	r2,r19,31
  80e334:	9016d07a 	srli	r11,r18,1
  80e338:	500697fa 	slli	r3,r10,31
  80e33c:	480cd07a 	srli	r6,r9,1
  80e340:	500ed07a 	srli	r7,r10,1
  80e344:	12d6b03a 	or	r11,r2,r11
  80e348:	00800044 	movi	r2,1
  80e34c:	198cb03a 	or	r6,r3,r6
  80e350:	4888703a 	and	r4,r9,r2
  80e354:	9818d07a 	srli	r12,r19,1
  80e358:	001b883a 	mov	r13,zero
  80e35c:	03a00034 	movhi	r14,32768
  80e360:	3013883a 	mov	r9,r6
  80e364:	3815883a 	mov	r10,r7
  80e368:	4091883a 	add	r8,r8,r2
  80e36c:	20000226 	beq	r4,zero,80e378 <__muldf3+0x284>
  80e370:	5b64b03a 	or	r18,r11,r13
  80e374:	63a6b03a 	or	r19,r12,r14
  80e378:	7abfed36 	bltu	r15,r10,80e330 <__muldf3+0x23c>
  80e37c:	da001015 	stw	r8,64(sp)
  80e380:	00840034 	movhi	r2,4096
  80e384:	10bfffc4 	addi	r2,r2,-1
  80e388:	12801436 	bltu	r2,r10,80e3dc <__muldf3+0x2e8>
  80e38c:	da001017 	ldw	r8,64(sp)
  80e390:	101f883a 	mov	r15,r2
  80e394:	4a45883a 	add	r2,r9,r9
  80e398:	124d803a 	cmpltu	r6,r2,r9
  80e39c:	5287883a 	add	r3,r10,r10
  80e3a0:	9497883a 	add	r11,r18,r18
  80e3a4:	5c8f803a 	cmpltu	r7,r11,r18
  80e3a8:	9cd9883a 	add	r12,r19,r19
  80e3ac:	01000044 	movi	r4,1
  80e3b0:	30cd883a 	add	r6,r6,r3
  80e3b4:	3b0f883a 	add	r7,r7,r12
  80e3b8:	423fffc4 	addi	r8,r8,-1
  80e3bc:	1013883a 	mov	r9,r2
  80e3c0:	3015883a 	mov	r10,r6
  80e3c4:	111ab03a 	or	r13,r2,r4
  80e3c8:	98003016 	blt	r19,zero,80e48c <__muldf3+0x398>
  80e3cc:	5825883a 	mov	r18,r11
  80e3d0:	3827883a 	mov	r19,r7
  80e3d4:	7abfef2e 	bgeu	r15,r10,80e394 <__muldf3+0x2a0>
  80e3d8:	da001015 	stw	r8,64(sp)
  80e3dc:	00803fc4 	movi	r2,255
  80e3e0:	488e703a 	and	r7,r9,r2
  80e3e4:	00802004 	movi	r2,128
  80e3e8:	0007883a 	mov	r3,zero
  80e3ec:	0011883a 	mov	r8,zero
  80e3f0:	38801826 	beq	r7,r2,80e454 <__muldf3+0x360>
  80e3f4:	008000c4 	movi	r2,3
  80e3f8:	d9000e04 	addi	r4,sp,56
  80e3fc:	da801215 	stw	r10,72(sp)
  80e400:	d8800e15 	stw	r2,56(sp)
  80e404:	da401115 	stw	r9,68(sp)
  80e408:	003f6a06 	br	80e1b4 <__muldf3+0xc0>
  80e40c:	89802126 	beq	r17,r6,80e494 <__muldf3+0x3a0>
  80e410:	0009883a 	mov	r4,zero
  80e414:	5105883a 	add	r2,r10,r4
  80e418:	128d803a 	cmpltu	r6,r2,r10
  80e41c:	5d07883a 	add	r3,r11,r20
  80e420:	30cd883a 	add	r6,r6,r3
  80e424:	0021883a 	mov	r16,zero
  80e428:	0023883a 	mov	r17,zero
  80e42c:	1025883a 	mov	r18,r2
  80e430:	3027883a 	mov	r19,r6
  80e434:	32ff9e2e 	bgeu	r6,r11,80e2b0 <__muldf3+0x1bc>
  80e438:	00800044 	movi	r2,1
  80e43c:	8089883a 	add	r4,r16,r2
  80e440:	240d803a 	cmpltu	r6,r4,r16
  80e444:	344d883a 	add	r6,r6,r17
  80e448:	2021883a 	mov	r16,r4
  80e44c:	3023883a 	mov	r17,r6
  80e450:	003f9806 	br	80e2b4 <__muldf3+0x1c0>
  80e454:	403fe71e 	bne	r8,zero,80e3f4 <__muldf3+0x300>
  80e458:	01004004 	movi	r4,256
  80e45c:	4904703a 	and	r2,r9,r4
  80e460:	10c4b03a 	or	r2,r2,r3
  80e464:	103fe31e 	bne	r2,zero,80e3f4 <__muldf3+0x300>
  80e468:	94c4b03a 	or	r2,r18,r19
  80e46c:	103fe126 	beq	r2,zero,80e3f4 <__muldf3+0x300>
  80e470:	49c5883a 	add	r2,r9,r7
  80e474:	1251803a 	cmpltu	r8,r2,r9
  80e478:	4291883a 	add	r8,r8,r10
  80e47c:	013fc004 	movi	r4,-256
  80e480:	1112703a 	and	r9,r2,r4
  80e484:	4015883a 	mov	r10,r8
  80e488:	003fda06 	br	80e3f4 <__muldf3+0x300>
  80e48c:	6813883a 	mov	r9,r13
  80e490:	003fce06 	br	80e3cc <__muldf3+0x2d8>
  80e494:	143f7c36 	bltu	r2,r16,80e288 <__muldf3+0x194>
  80e498:	003fdd06 	br	80e410 <__muldf3+0x31c>
  80e49c:	12bf852e 	bgeu	r2,r10,80e2b4 <__muldf3+0x1c0>
  80e4a0:	003fe506 	br	80e438 <__muldf3+0x344>
  80e4a4:	00800084 	movi	r2,2
  80e4a8:	20bf351e 	bne	r4,r2,80e180 <__muldf3+0x8c>
  80e4ac:	01002074 	movhi	r4,129
  80e4b0:	2108e404 	addi	r4,r4,9104
  80e4b4:	003f3f06 	br	80e1b4 <__muldf3+0xc0>

0080e4b8 <__divdf3>:
  80e4b8:	deffed04 	addi	sp,sp,-76
  80e4bc:	dcc01115 	stw	r19,68(sp)
  80e4c0:	dcc00404 	addi	r19,sp,16
  80e4c4:	2011883a 	mov	r8,r4
  80e4c8:	2813883a 	mov	r9,r5
  80e4cc:	dc000e15 	stw	r16,56(sp)
  80e4d0:	d809883a 	mov	r4,sp
  80e4d4:	980b883a 	mov	r5,r19
  80e4d8:	dc000904 	addi	r16,sp,36
  80e4dc:	dfc01215 	stw	ra,72(sp)
  80e4e0:	da400115 	stw	r9,4(sp)
  80e4e4:	d9c00315 	stw	r7,12(sp)
  80e4e8:	da000015 	stw	r8,0(sp)
  80e4ec:	d9800215 	stw	r6,8(sp)
  80e4f0:	dc801015 	stw	r18,64(sp)
  80e4f4:	dc400f15 	stw	r17,60(sp)
  80e4f8:	08058d00 	call	8058d0 <__unpack_d>
  80e4fc:	d9000204 	addi	r4,sp,8
  80e500:	800b883a 	mov	r5,r16
  80e504:	08058d00 	call	8058d0 <__unpack_d>
  80e508:	d9000417 	ldw	r4,16(sp)
  80e50c:	00800044 	movi	r2,1
  80e510:	11000b2e 	bgeu	r2,r4,80e540 <__divdf3+0x88>
  80e514:	d9400917 	ldw	r5,36(sp)
  80e518:	1140762e 	bgeu	r2,r5,80e6f4 <__divdf3+0x23c>
  80e51c:	d8800517 	ldw	r2,20(sp)
  80e520:	d8c00a17 	ldw	r3,40(sp)
  80e524:	01800104 	movi	r6,4
  80e528:	10c4f03a 	xor	r2,r2,r3
  80e52c:	d8800515 	stw	r2,20(sp)
  80e530:	21800226 	beq	r4,r6,80e53c <__divdf3+0x84>
  80e534:	00800084 	movi	r2,2
  80e538:	2080141e 	bne	r4,r2,80e58c <__divdf3+0xd4>
  80e53c:	29000926 	beq	r5,r4,80e564 <__divdf3+0xac>
  80e540:	9809883a 	mov	r4,r19
  80e544:	08055bc0 	call	8055bc <__pack_d>
  80e548:	dfc01217 	ldw	ra,72(sp)
  80e54c:	dcc01117 	ldw	r19,68(sp)
  80e550:	dc801017 	ldw	r18,64(sp)
  80e554:	dc400f17 	ldw	r17,60(sp)
  80e558:	dc000e17 	ldw	r16,56(sp)
  80e55c:	dec01304 	addi	sp,sp,76
  80e560:	f800283a 	ret
  80e564:	01002074 	movhi	r4,129
  80e568:	2108e404 	addi	r4,r4,9104
  80e56c:	08055bc0 	call	8055bc <__pack_d>
  80e570:	dfc01217 	ldw	ra,72(sp)
  80e574:	dcc01117 	ldw	r19,68(sp)
  80e578:	dc801017 	ldw	r18,64(sp)
  80e57c:	dc400f17 	ldw	r17,60(sp)
  80e580:	dc000e17 	ldw	r16,56(sp)
  80e584:	dec01304 	addi	sp,sp,76
  80e588:	f800283a 	ret
  80e58c:	29805b26 	beq	r5,r6,80e6fc <__divdf3+0x244>
  80e590:	28802d26 	beq	r5,r2,80e648 <__divdf3+0x190>
  80e594:	d8c00617 	ldw	r3,24(sp)
  80e598:	d8800b17 	ldw	r2,44(sp)
  80e59c:	d9c00817 	ldw	r7,32(sp)
  80e5a0:	dc400d17 	ldw	r17,52(sp)
  80e5a4:	188bc83a 	sub	r5,r3,r2
  80e5a8:	d9800717 	ldw	r6,28(sp)
  80e5ac:	dc000c17 	ldw	r16,48(sp)
  80e5b0:	d9400615 	stw	r5,24(sp)
  80e5b4:	3c403836 	bltu	r7,r17,80e698 <__divdf3+0x1e0>
  80e5b8:	89c03626 	beq	r17,r7,80e694 <__divdf3+0x1dc>
  80e5bc:	0015883a 	mov	r10,zero
  80e5c0:	001d883a 	mov	r14,zero
  80e5c4:	02c40034 	movhi	r11,4096
  80e5c8:	001f883a 	mov	r15,zero
  80e5cc:	003f883a 	mov	ra,zero
  80e5d0:	04800f44 	movi	r18,61
  80e5d4:	00000f06 	br	80e614 <__divdf3+0x15c>
  80e5d8:	601d883a 	mov	r14,r12
  80e5dc:	681f883a 	mov	r15,r13
  80e5e0:	400d883a 	mov	r6,r8
  80e5e4:	100f883a 	mov	r7,r2
  80e5e8:	3191883a 	add	r8,r6,r6
  80e5ec:	5808d07a 	srli	r4,r11,1
  80e5f0:	4185803a 	cmpltu	r2,r8,r6
  80e5f4:	39d3883a 	add	r9,r7,r7
  80e5f8:	28c6b03a 	or	r3,r5,r3
  80e5fc:	1245883a 	add	r2,r2,r9
  80e600:	1815883a 	mov	r10,r3
  80e604:	2017883a 	mov	r11,r4
  80e608:	400d883a 	mov	r6,r8
  80e60c:	100f883a 	mov	r7,r2
  80e610:	fc801726 	beq	ra,r18,80e670 <__divdf3+0x1b8>
  80e614:	580a97fa 	slli	r5,r11,31
  80e618:	5006d07a 	srli	r3,r10,1
  80e61c:	ffc00044 	addi	ra,ra,1
  80e620:	3c7ff136 	bltu	r7,r17,80e5e8 <__divdf3+0x130>
  80e624:	3411c83a 	sub	r8,r6,r16
  80e628:	3205803a 	cmpltu	r2,r6,r8
  80e62c:	3c53c83a 	sub	r9,r7,r17
  80e630:	7298b03a 	or	r12,r14,r10
  80e634:	7adab03a 	or	r13,r15,r11
  80e638:	4885c83a 	sub	r2,r9,r2
  80e63c:	89ffe61e 	bne	r17,r7,80e5d8 <__divdf3+0x120>
  80e640:	343fe936 	bltu	r6,r16,80e5e8 <__divdf3+0x130>
  80e644:	003fe406 	br	80e5d8 <__divdf3+0x120>
  80e648:	9809883a 	mov	r4,r19
  80e64c:	d9800415 	stw	r6,16(sp)
  80e650:	08055bc0 	call	8055bc <__pack_d>
  80e654:	dfc01217 	ldw	ra,72(sp)
  80e658:	dcc01117 	ldw	r19,68(sp)
  80e65c:	dc801017 	ldw	r18,64(sp)
  80e660:	dc400f17 	ldw	r17,60(sp)
  80e664:	dc000e17 	ldw	r16,56(sp)
  80e668:	dec01304 	addi	sp,sp,76
  80e66c:	f800283a 	ret
  80e670:	00803fc4 	movi	r2,255
  80e674:	7090703a 	and	r8,r14,r2
  80e678:	00802004 	movi	r2,128
  80e67c:	0007883a 	mov	r3,zero
  80e680:	0013883a 	mov	r9,zero
  80e684:	40800d26 	beq	r8,r2,80e6bc <__divdf3+0x204>
  80e688:	dbc00815 	stw	r15,32(sp)
  80e68c:	db800715 	stw	r14,28(sp)
  80e690:	003fab06 	br	80e540 <__divdf3+0x88>
  80e694:	343fc92e 	bgeu	r6,r16,80e5bc <__divdf3+0x104>
  80e698:	3185883a 	add	r2,r6,r6
  80e69c:	1189803a 	cmpltu	r4,r2,r6
  80e6a0:	39c7883a 	add	r3,r7,r7
  80e6a4:	20c9883a 	add	r4,r4,r3
  80e6a8:	297fffc4 	addi	r5,r5,-1
  80e6ac:	100d883a 	mov	r6,r2
  80e6b0:	200f883a 	mov	r7,r4
  80e6b4:	d9400615 	stw	r5,24(sp)
  80e6b8:	003fc006 	br	80e5bc <__divdf3+0x104>
  80e6bc:	483ff21e 	bne	r9,zero,80e688 <__divdf3+0x1d0>
  80e6c0:	01004004 	movi	r4,256
  80e6c4:	7104703a 	and	r2,r14,r4
  80e6c8:	10c4b03a 	or	r2,r2,r3
  80e6cc:	103fee1e 	bne	r2,zero,80e688 <__divdf3+0x1d0>
  80e6d0:	31c4b03a 	or	r2,r6,r7
  80e6d4:	103fec26 	beq	r2,zero,80e688 <__divdf3+0x1d0>
  80e6d8:	7205883a 	add	r2,r14,r8
  80e6dc:	1391803a 	cmpltu	r8,r2,r14
  80e6e0:	43d1883a 	add	r8,r8,r15
  80e6e4:	013fc004 	movi	r4,-256
  80e6e8:	111c703a 	and	r14,r2,r4
  80e6ec:	401f883a 	mov	r15,r8
  80e6f0:	003fe506 	br	80e688 <__divdf3+0x1d0>
  80e6f4:	8009883a 	mov	r4,r16
  80e6f8:	003f9206 	br	80e544 <__divdf3+0x8c>
  80e6fc:	9809883a 	mov	r4,r19
  80e700:	d8000715 	stw	zero,28(sp)
  80e704:	d8000815 	stw	zero,32(sp)
  80e708:	d8000615 	stw	zero,24(sp)
  80e70c:	003f8d06 	br	80e544 <__divdf3+0x8c>

0080e710 <__eqdf2>:
  80e710:	deffef04 	addi	sp,sp,-68
  80e714:	dc400f15 	stw	r17,60(sp)
  80e718:	dc400404 	addi	r17,sp,16
  80e71c:	2005883a 	mov	r2,r4
  80e720:	2807883a 	mov	r3,r5
  80e724:	dc000e15 	stw	r16,56(sp)
  80e728:	d809883a 	mov	r4,sp
  80e72c:	880b883a 	mov	r5,r17
  80e730:	dc000904 	addi	r16,sp,36
  80e734:	d8c00115 	stw	r3,4(sp)
  80e738:	d8800015 	stw	r2,0(sp)
  80e73c:	d9800215 	stw	r6,8(sp)
  80e740:	dfc01015 	stw	ra,64(sp)
  80e744:	d9c00315 	stw	r7,12(sp)
  80e748:	08058d00 	call	8058d0 <__unpack_d>
  80e74c:	d9000204 	addi	r4,sp,8
  80e750:	800b883a 	mov	r5,r16
  80e754:	08058d00 	call	8058d0 <__unpack_d>
  80e758:	d8800417 	ldw	r2,16(sp)
  80e75c:	00c00044 	movi	r3,1
  80e760:	180d883a 	mov	r6,r3
  80e764:	1880062e 	bgeu	r3,r2,80e780 <__eqdf2+0x70>
  80e768:	d8800917 	ldw	r2,36(sp)
  80e76c:	8809883a 	mov	r4,r17
  80e770:	800b883a 	mov	r5,r16
  80e774:	1880022e 	bgeu	r3,r2,80e780 <__eqdf2+0x70>
  80e778:	080eca80 	call	80eca8 <__fpcmp_parts_d>
  80e77c:	100d883a 	mov	r6,r2
  80e780:	3005883a 	mov	r2,r6
  80e784:	dfc01017 	ldw	ra,64(sp)
  80e788:	dc400f17 	ldw	r17,60(sp)
  80e78c:	dc000e17 	ldw	r16,56(sp)
  80e790:	dec01104 	addi	sp,sp,68
  80e794:	f800283a 	ret

0080e798 <__nedf2>:
  80e798:	deffef04 	addi	sp,sp,-68
  80e79c:	dc400f15 	stw	r17,60(sp)
  80e7a0:	dc400404 	addi	r17,sp,16
  80e7a4:	2005883a 	mov	r2,r4
  80e7a8:	2807883a 	mov	r3,r5
  80e7ac:	dc000e15 	stw	r16,56(sp)
  80e7b0:	d809883a 	mov	r4,sp
  80e7b4:	880b883a 	mov	r5,r17
  80e7b8:	dc000904 	addi	r16,sp,36
  80e7bc:	d8c00115 	stw	r3,4(sp)
  80e7c0:	d8800015 	stw	r2,0(sp)
  80e7c4:	d9800215 	stw	r6,8(sp)
  80e7c8:	dfc01015 	stw	ra,64(sp)
  80e7cc:	d9c00315 	stw	r7,12(sp)
  80e7d0:	08058d00 	call	8058d0 <__unpack_d>
  80e7d4:	d9000204 	addi	r4,sp,8
  80e7d8:	800b883a 	mov	r5,r16
  80e7dc:	08058d00 	call	8058d0 <__unpack_d>
  80e7e0:	d8800417 	ldw	r2,16(sp)
  80e7e4:	00c00044 	movi	r3,1
  80e7e8:	180d883a 	mov	r6,r3
  80e7ec:	1880062e 	bgeu	r3,r2,80e808 <__nedf2+0x70>
  80e7f0:	d8800917 	ldw	r2,36(sp)
  80e7f4:	8809883a 	mov	r4,r17
  80e7f8:	800b883a 	mov	r5,r16
  80e7fc:	1880022e 	bgeu	r3,r2,80e808 <__nedf2+0x70>
  80e800:	080eca80 	call	80eca8 <__fpcmp_parts_d>
  80e804:	100d883a 	mov	r6,r2
  80e808:	3005883a 	mov	r2,r6
  80e80c:	dfc01017 	ldw	ra,64(sp)
  80e810:	dc400f17 	ldw	r17,60(sp)
  80e814:	dc000e17 	ldw	r16,56(sp)
  80e818:	dec01104 	addi	sp,sp,68
  80e81c:	f800283a 	ret

0080e820 <__gtdf2>:
  80e820:	deffef04 	addi	sp,sp,-68
  80e824:	dc400f15 	stw	r17,60(sp)
  80e828:	dc400404 	addi	r17,sp,16
  80e82c:	2005883a 	mov	r2,r4
  80e830:	2807883a 	mov	r3,r5
  80e834:	dc000e15 	stw	r16,56(sp)
  80e838:	d809883a 	mov	r4,sp
  80e83c:	880b883a 	mov	r5,r17
  80e840:	dc000904 	addi	r16,sp,36
  80e844:	d8c00115 	stw	r3,4(sp)
  80e848:	d8800015 	stw	r2,0(sp)
  80e84c:	d9800215 	stw	r6,8(sp)
  80e850:	dfc01015 	stw	ra,64(sp)
  80e854:	d9c00315 	stw	r7,12(sp)
  80e858:	08058d00 	call	8058d0 <__unpack_d>
  80e85c:	d9000204 	addi	r4,sp,8
  80e860:	800b883a 	mov	r5,r16
  80e864:	08058d00 	call	8058d0 <__unpack_d>
  80e868:	d8800417 	ldw	r2,16(sp)
  80e86c:	00c00044 	movi	r3,1
  80e870:	01bfffc4 	movi	r6,-1
  80e874:	1880062e 	bgeu	r3,r2,80e890 <__gtdf2+0x70>
  80e878:	d8800917 	ldw	r2,36(sp)
  80e87c:	8809883a 	mov	r4,r17
  80e880:	800b883a 	mov	r5,r16
  80e884:	1880022e 	bgeu	r3,r2,80e890 <__gtdf2+0x70>
  80e888:	080eca80 	call	80eca8 <__fpcmp_parts_d>
  80e88c:	100d883a 	mov	r6,r2
  80e890:	3005883a 	mov	r2,r6
  80e894:	dfc01017 	ldw	ra,64(sp)
  80e898:	dc400f17 	ldw	r17,60(sp)
  80e89c:	dc000e17 	ldw	r16,56(sp)
  80e8a0:	dec01104 	addi	sp,sp,68
  80e8a4:	f800283a 	ret

0080e8a8 <__gedf2>:
  80e8a8:	deffef04 	addi	sp,sp,-68
  80e8ac:	dc400f15 	stw	r17,60(sp)
  80e8b0:	dc400404 	addi	r17,sp,16
  80e8b4:	2005883a 	mov	r2,r4
  80e8b8:	2807883a 	mov	r3,r5
  80e8bc:	dc000e15 	stw	r16,56(sp)
  80e8c0:	d809883a 	mov	r4,sp
  80e8c4:	880b883a 	mov	r5,r17
  80e8c8:	dc000904 	addi	r16,sp,36
  80e8cc:	d8c00115 	stw	r3,4(sp)
  80e8d0:	d8800015 	stw	r2,0(sp)
  80e8d4:	d9800215 	stw	r6,8(sp)
  80e8d8:	dfc01015 	stw	ra,64(sp)
  80e8dc:	d9c00315 	stw	r7,12(sp)
  80e8e0:	08058d00 	call	8058d0 <__unpack_d>
  80e8e4:	d9000204 	addi	r4,sp,8
  80e8e8:	800b883a 	mov	r5,r16
  80e8ec:	08058d00 	call	8058d0 <__unpack_d>
  80e8f0:	d8800417 	ldw	r2,16(sp)
  80e8f4:	00c00044 	movi	r3,1
  80e8f8:	01bfffc4 	movi	r6,-1
  80e8fc:	1880062e 	bgeu	r3,r2,80e918 <__gedf2+0x70>
  80e900:	d8800917 	ldw	r2,36(sp)
  80e904:	8809883a 	mov	r4,r17
  80e908:	800b883a 	mov	r5,r16
  80e90c:	1880022e 	bgeu	r3,r2,80e918 <__gedf2+0x70>
  80e910:	080eca80 	call	80eca8 <__fpcmp_parts_d>
  80e914:	100d883a 	mov	r6,r2
  80e918:	3005883a 	mov	r2,r6
  80e91c:	dfc01017 	ldw	ra,64(sp)
  80e920:	dc400f17 	ldw	r17,60(sp)
  80e924:	dc000e17 	ldw	r16,56(sp)
  80e928:	dec01104 	addi	sp,sp,68
  80e92c:	f800283a 	ret

0080e930 <__ltdf2>:
  80e930:	deffef04 	addi	sp,sp,-68
  80e934:	dc400f15 	stw	r17,60(sp)
  80e938:	dc400404 	addi	r17,sp,16
  80e93c:	2005883a 	mov	r2,r4
  80e940:	2807883a 	mov	r3,r5
  80e944:	dc000e15 	stw	r16,56(sp)
  80e948:	d809883a 	mov	r4,sp
  80e94c:	880b883a 	mov	r5,r17
  80e950:	dc000904 	addi	r16,sp,36
  80e954:	d8c00115 	stw	r3,4(sp)
  80e958:	d8800015 	stw	r2,0(sp)
  80e95c:	d9800215 	stw	r6,8(sp)
  80e960:	dfc01015 	stw	ra,64(sp)
  80e964:	d9c00315 	stw	r7,12(sp)
  80e968:	08058d00 	call	8058d0 <__unpack_d>
  80e96c:	d9000204 	addi	r4,sp,8
  80e970:	800b883a 	mov	r5,r16
  80e974:	08058d00 	call	8058d0 <__unpack_d>
  80e978:	d8800417 	ldw	r2,16(sp)
  80e97c:	00c00044 	movi	r3,1
  80e980:	180d883a 	mov	r6,r3
  80e984:	1880062e 	bgeu	r3,r2,80e9a0 <__ltdf2+0x70>
  80e988:	d8800917 	ldw	r2,36(sp)
  80e98c:	8809883a 	mov	r4,r17
  80e990:	800b883a 	mov	r5,r16
  80e994:	1880022e 	bgeu	r3,r2,80e9a0 <__ltdf2+0x70>
  80e998:	080eca80 	call	80eca8 <__fpcmp_parts_d>
  80e99c:	100d883a 	mov	r6,r2
  80e9a0:	3005883a 	mov	r2,r6
  80e9a4:	dfc01017 	ldw	ra,64(sp)
  80e9a8:	dc400f17 	ldw	r17,60(sp)
  80e9ac:	dc000e17 	ldw	r16,56(sp)
  80e9b0:	dec01104 	addi	sp,sp,68
  80e9b4:	f800283a 	ret

0080e9b8 <__floatunsidf>:
  80e9b8:	defff204 	addi	sp,sp,-56
  80e9bc:	dfc00d15 	stw	ra,52(sp)
  80e9c0:	ddc00c15 	stw	r23,48(sp)
  80e9c4:	dd800b15 	stw	r22,44(sp)
  80e9c8:	dd400a15 	stw	r21,40(sp)
  80e9cc:	dd000915 	stw	r20,36(sp)
  80e9d0:	dcc00815 	stw	r19,32(sp)
  80e9d4:	dc800715 	stw	r18,28(sp)
  80e9d8:	dc400615 	stw	r17,24(sp)
  80e9dc:	dc000515 	stw	r16,20(sp)
  80e9e0:	d8000115 	stw	zero,4(sp)
  80e9e4:	20000f1e 	bne	r4,zero,80ea24 <__floatunsidf+0x6c>
  80e9e8:	00800084 	movi	r2,2
  80e9ec:	d8800015 	stw	r2,0(sp)
  80e9f0:	d809883a 	mov	r4,sp
  80e9f4:	08055bc0 	call	8055bc <__pack_d>
  80e9f8:	dfc00d17 	ldw	ra,52(sp)
  80e9fc:	ddc00c17 	ldw	r23,48(sp)
  80ea00:	dd800b17 	ldw	r22,44(sp)
  80ea04:	dd400a17 	ldw	r21,40(sp)
  80ea08:	dd000917 	ldw	r20,36(sp)
  80ea0c:	dcc00817 	ldw	r19,32(sp)
  80ea10:	dc800717 	ldw	r18,28(sp)
  80ea14:	dc400617 	ldw	r17,24(sp)
  80ea18:	dc000517 	ldw	r16,20(sp)
  80ea1c:	dec00e04 	addi	sp,sp,56
  80ea20:	f800283a 	ret
  80ea24:	008000c4 	movi	r2,3
  80ea28:	00c00f04 	movi	r3,60
  80ea2c:	002f883a 	mov	r23,zero
  80ea30:	202d883a 	mov	r22,r4
  80ea34:	d8800015 	stw	r2,0(sp)
  80ea38:	d8c00215 	stw	r3,8(sp)
  80ea3c:	d9000315 	stw	r4,12(sp)
  80ea40:	ddc00415 	stw	r23,16(sp)
  80ea44:	080553c0 	call	80553c <__clzsi2>
  80ea48:	12400744 	addi	r9,r2,29
  80ea4c:	48000b16 	blt	r9,zero,80ea7c <__floatunsidf+0xc4>
  80ea50:	483fe726 	beq	r9,zero,80e9f0 <__floatunsidf+0x38>
  80ea54:	10bfff44 	addi	r2,r2,-3
  80ea58:	10002e16 	blt	r2,zero,80eb14 <__floatunsidf+0x15c>
  80ea5c:	b0a2983a 	sll	r17,r22,r2
  80ea60:	0021883a 	mov	r16,zero
  80ea64:	d8800217 	ldw	r2,8(sp)
  80ea68:	dc400415 	stw	r17,16(sp)
  80ea6c:	dc000315 	stw	r16,12(sp)
  80ea70:	1245c83a 	sub	r2,r2,r9
  80ea74:	d8800215 	stw	r2,8(sp)
  80ea78:	003fdd06 	br	80e9f0 <__floatunsidf+0x38>
  80ea7c:	0255c83a 	sub	r10,zero,r9
  80ea80:	51bff804 	addi	r6,r10,-32
  80ea84:	30001b16 	blt	r6,zero,80eaf4 <__floatunsidf+0x13c>
  80ea88:	b9a8d83a 	srl	r20,r23,r6
  80ea8c:	002b883a 	mov	r21,zero
  80ea90:	000f883a 	mov	r7,zero
  80ea94:	01000044 	movi	r4,1
  80ea98:	0011883a 	mov	r8,zero
  80ea9c:	30002516 	blt	r6,zero,80eb34 <__floatunsidf+0x17c>
  80eaa0:	21a6983a 	sll	r19,r4,r6
  80eaa4:	0025883a 	mov	r18,zero
  80eaa8:	00bfffc4 	movi	r2,-1
  80eaac:	9089883a 	add	r4,r18,r2
  80eab0:	988b883a 	add	r5,r19,r2
  80eab4:	248d803a 	cmpltu	r6,r4,r18
  80eab8:	314b883a 	add	r5,r6,r5
  80eabc:	b104703a 	and	r2,r22,r4
  80eac0:	b946703a 	and	r3,r23,r5
  80eac4:	10c4b03a 	or	r2,r2,r3
  80eac8:	10000226 	beq	r2,zero,80ead4 <__floatunsidf+0x11c>
  80eacc:	01c00044 	movi	r7,1
  80ead0:	0011883a 	mov	r8,zero
  80ead4:	d9000217 	ldw	r4,8(sp)
  80ead8:	a1c4b03a 	or	r2,r20,r7
  80eadc:	aa06b03a 	or	r3,r21,r8
  80eae0:	2249c83a 	sub	r4,r4,r9
  80eae4:	d8c00415 	stw	r3,16(sp)
  80eae8:	d9000215 	stw	r4,8(sp)
  80eaec:	d8800315 	stw	r2,12(sp)
  80eaf0:	003fbf06 	br	80e9f0 <__floatunsidf+0x38>
  80eaf4:	bdc7883a 	add	r3,r23,r23
  80eaf8:	008007c4 	movi	r2,31
  80eafc:	1285c83a 	sub	r2,r2,r10
  80eb00:	1886983a 	sll	r3,r3,r2
  80eb04:	b2a8d83a 	srl	r20,r22,r10
  80eb08:	baaad83a 	srl	r21,r23,r10
  80eb0c:	1d28b03a 	or	r20,r3,r20
  80eb10:	003fdf06 	br	80ea90 <__floatunsidf+0xd8>
  80eb14:	b006d07a 	srli	r3,r22,1
  80eb18:	008007c4 	movi	r2,31
  80eb1c:	1245c83a 	sub	r2,r2,r9
  80eb20:	1886d83a 	srl	r3,r3,r2
  80eb24:	ba62983a 	sll	r17,r23,r9
  80eb28:	b260983a 	sll	r16,r22,r9
  80eb2c:	1c62b03a 	or	r17,r3,r17
  80eb30:	003fcc06 	br	80ea64 <__floatunsidf+0xac>
  80eb34:	2006d07a 	srli	r3,r4,1
  80eb38:	008007c4 	movi	r2,31
  80eb3c:	1285c83a 	sub	r2,r2,r10
  80eb40:	18a6d83a 	srl	r19,r3,r2
  80eb44:	22a4983a 	sll	r18,r4,r10
  80eb48:	003fd706 	br	80eaa8 <__floatunsidf+0xf0>

0080eb4c <__mulsi3>:
  80eb4c:	20000a26 	beq	r4,zero,80eb78 <__mulsi3+0x2c>
  80eb50:	0007883a 	mov	r3,zero
  80eb54:	2080004c 	andi	r2,r4,1
  80eb58:	1005003a 	cmpeq	r2,r2,zero
  80eb5c:	2008d07a 	srli	r4,r4,1
  80eb60:	1000011e 	bne	r2,zero,80eb68 <__mulsi3+0x1c>
  80eb64:	1947883a 	add	r3,r3,r5
  80eb68:	294b883a 	add	r5,r5,r5
  80eb6c:	203ff91e 	bne	r4,zero,80eb54 <__mulsi3+0x8>
  80eb70:	1805883a 	mov	r2,r3
  80eb74:	f800283a 	ret
  80eb78:	0007883a 	mov	r3,zero
  80eb7c:	1805883a 	mov	r2,r3
  80eb80:	f800283a 	ret

0080eb84 <__muldi3>:
  80eb84:	defff204 	addi	sp,sp,-56
  80eb88:	df000c15 	stw	fp,48(sp)
  80eb8c:	3038d43a 	srli	fp,r6,16
  80eb90:	dd000815 	stw	r20,32(sp)
  80eb94:	dc400515 	stw	r17,20(sp)
  80eb98:	2028d43a 	srli	r20,r4,16
  80eb9c:	247fffcc 	andi	r17,r4,65535
  80eba0:	dc000415 	stw	r16,16(sp)
  80eba4:	343fffcc 	andi	r16,r6,65535
  80eba8:	dcc00715 	stw	r19,28(sp)
  80ebac:	d9000015 	stw	r4,0(sp)
  80ebb0:	2827883a 	mov	r19,r5
  80ebb4:	8809883a 	mov	r4,r17
  80ebb8:	d9400115 	stw	r5,4(sp)
  80ebbc:	800b883a 	mov	r5,r16
  80ebc0:	d9800215 	stw	r6,8(sp)
  80ebc4:	dfc00d15 	stw	ra,52(sp)
  80ebc8:	d9c00315 	stw	r7,12(sp)
  80ebcc:	dd800a15 	stw	r22,40(sp)
  80ebd0:	dd400915 	stw	r21,36(sp)
  80ebd4:	302d883a 	mov	r22,r6
  80ebd8:	ddc00b15 	stw	r23,44(sp)
  80ebdc:	dc800615 	stw	r18,24(sp)
  80ebe0:	080eb4c0 	call	80eb4c <__mulsi3>
  80ebe4:	8809883a 	mov	r4,r17
  80ebe8:	e00b883a 	mov	r5,fp
  80ebec:	102b883a 	mov	r21,r2
  80ebf0:	080eb4c0 	call	80eb4c <__mulsi3>
  80ebf4:	800b883a 	mov	r5,r16
  80ebf8:	a009883a 	mov	r4,r20
  80ebfc:	1023883a 	mov	r17,r2
  80ec00:	080eb4c0 	call	80eb4c <__mulsi3>
  80ec04:	a009883a 	mov	r4,r20
  80ec08:	e00b883a 	mov	r5,fp
  80ec0c:	1021883a 	mov	r16,r2
  80ec10:	080eb4c0 	call	80eb4c <__mulsi3>
  80ec14:	a8ffffcc 	andi	r3,r21,65535
  80ec18:	a82ad43a 	srli	r21,r21,16
  80ec1c:	8c23883a 	add	r17,r17,r16
  80ec20:	1011883a 	mov	r8,r2
  80ec24:	ac6b883a 	add	r21,r21,r17
  80ec28:	a804943a 	slli	r2,r21,16
  80ec2c:	b009883a 	mov	r4,r22
  80ec30:	980b883a 	mov	r5,r19
  80ec34:	10c7883a 	add	r3,r2,r3
  80ec38:	a812d43a 	srli	r9,r21,16
  80ec3c:	180d883a 	mov	r6,r3
  80ec40:	ac00022e 	bgeu	r21,r16,80ec4c <__muldi3+0xc8>
  80ec44:	00800074 	movhi	r2,1
  80ec48:	4091883a 	add	r8,r8,r2
  80ec4c:	4267883a 	add	r19,r8,r9
  80ec50:	302d883a 	mov	r22,r6
  80ec54:	080eb4c0 	call	80eb4c <__mulsi3>
  80ec58:	d9400317 	ldw	r5,12(sp)
  80ec5c:	d9000017 	ldw	r4,0(sp)
  80ec60:	1023883a 	mov	r17,r2
  80ec64:	080eb4c0 	call	80eb4c <__mulsi3>
  80ec68:	14cb883a 	add	r5,r2,r19
  80ec6c:	894b883a 	add	r5,r17,r5
  80ec70:	b005883a 	mov	r2,r22
  80ec74:	2807883a 	mov	r3,r5
  80ec78:	dfc00d17 	ldw	ra,52(sp)
  80ec7c:	df000c17 	ldw	fp,48(sp)
  80ec80:	ddc00b17 	ldw	r23,44(sp)
  80ec84:	dd800a17 	ldw	r22,40(sp)
  80ec88:	dd400917 	ldw	r21,36(sp)
  80ec8c:	dd000817 	ldw	r20,32(sp)
  80ec90:	dcc00717 	ldw	r19,28(sp)
  80ec94:	dc800617 	ldw	r18,24(sp)
  80ec98:	dc400517 	ldw	r17,20(sp)
  80ec9c:	dc000417 	ldw	r16,16(sp)
  80eca0:	dec00e04 	addi	sp,sp,56
  80eca4:	f800283a 	ret

0080eca8 <__fpcmp_parts_d>:
  80eca8:	21800017 	ldw	r6,0(r4)
  80ecac:	00c00044 	movi	r3,1
  80ecb0:	19800a2e 	bgeu	r3,r6,80ecdc <__fpcmp_parts_d+0x34>
  80ecb4:	28800017 	ldw	r2,0(r5)
  80ecb8:	1880082e 	bgeu	r3,r2,80ecdc <__fpcmp_parts_d+0x34>
  80ecbc:	00c00104 	movi	r3,4
  80ecc0:	30c02626 	beq	r6,r3,80ed5c <__fpcmp_parts_d+0xb4>
  80ecc4:	10c02226 	beq	r2,r3,80ed50 <__fpcmp_parts_d+0xa8>
  80ecc8:	00c00084 	movi	r3,2
  80eccc:	30c00526 	beq	r6,r3,80ece4 <__fpcmp_parts_d+0x3c>
  80ecd0:	10c0071e 	bne	r2,r3,80ecf0 <__fpcmp_parts_d+0x48>
  80ecd4:	20800117 	ldw	r2,4(r4)
  80ecd8:	1000091e 	bne	r2,zero,80ed00 <__fpcmp_parts_d+0x58>
  80ecdc:	00800044 	movi	r2,1
  80ece0:	f800283a 	ret
  80ece4:	10c01a1e 	bne	r2,r3,80ed50 <__fpcmp_parts_d+0xa8>
  80ece8:	0005883a 	mov	r2,zero
  80ecec:	f800283a 	ret
  80ecf0:	22000117 	ldw	r8,4(r4)
  80ecf4:	28800117 	ldw	r2,4(r5)
  80ecf8:	40800326 	beq	r8,r2,80ed08 <__fpcmp_parts_d+0x60>
  80ecfc:	403ff726 	beq	r8,zero,80ecdc <__fpcmp_parts_d+0x34>
  80ed00:	00bfffc4 	movi	r2,-1
  80ed04:	f800283a 	ret
  80ed08:	20c00217 	ldw	r3,8(r4)
  80ed0c:	28800217 	ldw	r2,8(r5)
  80ed10:	10fffa16 	blt	r2,r3,80ecfc <__fpcmp_parts_d+0x54>
  80ed14:	18800916 	blt	r3,r2,80ed3c <__fpcmp_parts_d+0x94>
  80ed18:	21c00417 	ldw	r7,16(r4)
  80ed1c:	28c00417 	ldw	r3,16(r5)
  80ed20:	21800317 	ldw	r6,12(r4)
  80ed24:	28800317 	ldw	r2,12(r5)
  80ed28:	19fff436 	bltu	r3,r7,80ecfc <__fpcmp_parts_d+0x54>
  80ed2c:	38c00526 	beq	r7,r3,80ed44 <__fpcmp_parts_d+0x9c>
  80ed30:	38c00236 	bltu	r7,r3,80ed3c <__fpcmp_parts_d+0x94>
  80ed34:	19ffec1e 	bne	r3,r7,80ece8 <__fpcmp_parts_d+0x40>
  80ed38:	30bfeb2e 	bgeu	r6,r2,80ece8 <__fpcmp_parts_d+0x40>
  80ed3c:	403fe71e 	bne	r8,zero,80ecdc <__fpcmp_parts_d+0x34>
  80ed40:	003fef06 	br	80ed00 <__fpcmp_parts_d+0x58>
  80ed44:	11bffa2e 	bgeu	r2,r6,80ed30 <__fpcmp_parts_d+0x88>
  80ed48:	403fe426 	beq	r8,zero,80ecdc <__fpcmp_parts_d+0x34>
  80ed4c:	003fec06 	br	80ed00 <__fpcmp_parts_d+0x58>
  80ed50:	28800117 	ldw	r2,4(r5)
  80ed54:	103fe11e 	bne	r2,zero,80ecdc <__fpcmp_parts_d+0x34>
  80ed58:	003fe906 	br	80ed00 <__fpcmp_parts_d+0x58>
  80ed5c:	11bfdd1e 	bne	r2,r6,80ecd4 <__fpcmp_parts_d+0x2c>
  80ed60:	28c00117 	ldw	r3,4(r5)
  80ed64:	20800117 	ldw	r2,4(r4)
  80ed68:	1885c83a 	sub	r2,r3,r2
  80ed6c:	f800283a 	ret

0080ed70 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80ed70:	defff804 	addi	sp,sp,-32
  80ed74:	dfc00715 	stw	ra,28(sp)
  80ed78:	df000615 	stw	fp,24(sp)
  80ed7c:	df000604 	addi	fp,sp,24
  80ed80:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80ed84:	e0bffc17 	ldw	r2,-16(fp)
  80ed88:	1004803a 	cmplt	r2,r2,zero
  80ed8c:	1000091e 	bne	r2,zero,80edb4 <close+0x44>
  80ed90:	e13ffc17 	ldw	r4,-16(fp)
  80ed94:	01400304 	movi	r5,12
  80ed98:	080eb4c0 	call	80eb4c <__mulsi3>
  80ed9c:	1007883a 	mov	r3,r2
  80eda0:	00802074 	movhi	r2,129
  80eda4:	108d1a04 	addi	r2,r2,13416
  80eda8:	1887883a 	add	r3,r3,r2
  80edac:	e0ffff15 	stw	r3,-4(fp)
  80edb0:	00000106 	br	80edb8 <close+0x48>
  80edb4:	e03fff15 	stw	zero,-4(fp)
  80edb8:	e0bfff17 	ldw	r2,-4(fp)
  80edbc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80edc0:	e0bffb17 	ldw	r2,-20(fp)
  80edc4:	1005003a 	cmpeq	r2,r2,zero
  80edc8:	10001d1e 	bne	r2,zero,80ee40 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80edcc:	e0bffb17 	ldw	r2,-20(fp)
  80edd0:	10800017 	ldw	r2,0(r2)
  80edd4:	10800417 	ldw	r2,16(r2)
  80edd8:	1005003a 	cmpeq	r2,r2,zero
  80eddc:	1000071e 	bne	r2,zero,80edfc <close+0x8c>
  80ede0:	e0bffb17 	ldw	r2,-20(fp)
  80ede4:	10800017 	ldw	r2,0(r2)
  80ede8:	10800417 	ldw	r2,16(r2)
  80edec:	e13ffb17 	ldw	r4,-20(fp)
  80edf0:	103ee83a 	callr	r2
  80edf4:	e0bffe15 	stw	r2,-8(fp)
  80edf8:	00000106 	br	80ee00 <close+0x90>
  80edfc:	e03ffe15 	stw	zero,-8(fp)
  80ee00:	e0bffe17 	ldw	r2,-8(fp)
  80ee04:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80ee08:	e13ffc17 	ldw	r4,-16(fp)
  80ee0c:	080f9340 	call	80f934 <alt_release_fd>
    if (rval < 0)
  80ee10:	e0bffa17 	ldw	r2,-24(fp)
  80ee14:	1004403a 	cmpge	r2,r2,zero
  80ee18:	1000071e 	bne	r2,zero,80ee38 <close+0xc8>
    {
      ALT_ERRNO = -rval;
  80ee1c:	080ee700 	call	80ee70 <alt_get_errno>
  80ee20:	e0fffa17 	ldw	r3,-24(fp)
  80ee24:	00c7c83a 	sub	r3,zero,r3
  80ee28:	10c00015 	stw	r3,0(r2)
      return -1;
  80ee2c:	00bfffc4 	movi	r2,-1
  80ee30:	e0bffd15 	stw	r2,-12(fp)
  80ee34:	00000806 	br	80ee58 <close+0xe8>
    }
    return 0;
  80ee38:	e03ffd15 	stw	zero,-12(fp)
  80ee3c:	00000606 	br	80ee58 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ee40:	080ee700 	call	80ee70 <alt_get_errno>
  80ee44:	1007883a 	mov	r3,r2
  80ee48:	00801444 	movi	r2,81
  80ee4c:	18800015 	stw	r2,0(r3)
    return -1;
  80ee50:	00bfffc4 	movi	r2,-1
  80ee54:	e0bffd15 	stw	r2,-12(fp)
  80ee58:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80ee5c:	e037883a 	mov	sp,fp
  80ee60:	dfc00117 	ldw	ra,4(sp)
  80ee64:	df000017 	ldw	fp,0(sp)
  80ee68:	dec00204 	addi	sp,sp,8
  80ee6c:	f800283a 	ret

0080ee70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ee70:	defffd04 	addi	sp,sp,-12
  80ee74:	dfc00215 	stw	ra,8(sp)
  80ee78:	df000115 	stw	fp,4(sp)
  80ee7c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ee80:	00802074 	movhi	r2,129
  80ee84:	1091bb04 	addi	r2,r2,18156
  80ee88:	10800017 	ldw	r2,0(r2)
  80ee8c:	1005003a 	cmpeq	r2,r2,zero
  80ee90:	1000061e 	bne	r2,zero,80eeac <alt_get_errno+0x3c>
  80ee94:	00802074 	movhi	r2,129
  80ee98:	1091bb04 	addi	r2,r2,18156
  80ee9c:	10800017 	ldw	r2,0(r2)
  80eea0:	103ee83a 	callr	r2
  80eea4:	e0bfff15 	stw	r2,-4(fp)
  80eea8:	00000306 	br	80eeb8 <alt_get_errno+0x48>
  80eeac:	00802074 	movhi	r2,129
  80eeb0:	1091d004 	addi	r2,r2,18240
  80eeb4:	e0bfff15 	stw	r2,-4(fp)
  80eeb8:	e0bfff17 	ldw	r2,-4(fp)
}
  80eebc:	e037883a 	mov	sp,fp
  80eec0:	dfc00117 	ldw	ra,4(sp)
  80eec4:	df000017 	ldw	fp,0(sp)
  80eec8:	dec00204 	addi	sp,sp,8
  80eecc:	f800283a 	ret

0080eed0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80eed0:	defffc04 	addi	sp,sp,-16
  80eed4:	df000315 	stw	fp,12(sp)
  80eed8:	df000304 	addi	fp,sp,12
  80eedc:	e13ffd15 	stw	r4,-12(fp)
  80eee0:	e17ffe15 	stw	r5,-8(fp)
  80eee4:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80eee8:	e0bfff17 	ldw	r2,-4(fp)
}
  80eeec:	e037883a 	mov	sp,fp
  80eef0:	df000017 	ldw	fp,0(sp)
  80eef4:	dec00104 	addi	sp,sp,4
  80eef8:	f800283a 	ret

0080eefc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80eefc:	defff904 	addi	sp,sp,-28
  80ef00:	dfc00615 	stw	ra,24(sp)
  80ef04:	df000515 	stw	fp,20(sp)
  80ef08:	df000504 	addi	fp,sp,20
  80ef0c:	e13ffc15 	stw	r4,-16(fp)
  80ef10:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ef14:	e0bffc17 	ldw	r2,-16(fp)
  80ef18:	1004803a 	cmplt	r2,r2,zero
  80ef1c:	1000091e 	bne	r2,zero,80ef44 <fstat+0x48>
  80ef20:	e13ffc17 	ldw	r4,-16(fp)
  80ef24:	01400304 	movi	r5,12
  80ef28:	080eb4c0 	call	80eb4c <__mulsi3>
  80ef2c:	1007883a 	mov	r3,r2
  80ef30:	00802074 	movhi	r2,129
  80ef34:	108d1a04 	addi	r2,r2,13416
  80ef38:	1887883a 	add	r3,r3,r2
  80ef3c:	e0ffff15 	stw	r3,-4(fp)
  80ef40:	00000106 	br	80ef48 <fstat+0x4c>
  80ef44:	e03fff15 	stw	zero,-4(fp)
  80ef48:	e0bfff17 	ldw	r2,-4(fp)
  80ef4c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80ef50:	e0bffb17 	ldw	r2,-20(fp)
  80ef54:	1005003a 	cmpeq	r2,r2,zero
  80ef58:	1000121e 	bne	r2,zero,80efa4 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80ef5c:	e0bffb17 	ldw	r2,-20(fp)
  80ef60:	10800017 	ldw	r2,0(r2)
  80ef64:	10800817 	ldw	r2,32(r2)
  80ef68:	1005003a 	cmpeq	r2,r2,zero
  80ef6c:	1000081e 	bne	r2,zero,80ef90 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  80ef70:	e0bffb17 	ldw	r2,-20(fp)
  80ef74:	10800017 	ldw	r2,0(r2)
  80ef78:	10800817 	ldw	r2,32(r2)
  80ef7c:	e13ffb17 	ldw	r4,-20(fp)
  80ef80:	e17ffd17 	ldw	r5,-12(fp)
  80ef84:	103ee83a 	callr	r2
  80ef88:	e0bffe15 	stw	r2,-8(fp)
  80ef8c:	00000b06 	br	80efbc <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80ef90:	e0fffd17 	ldw	r3,-12(fp)
  80ef94:	00880004 	movi	r2,8192
  80ef98:	18800115 	stw	r2,4(r3)
      return 0;
  80ef9c:	e03ffe15 	stw	zero,-8(fp)
  80efa0:	00000606 	br	80efbc <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80efa4:	080efd40 	call	80efd4 <alt_get_errno>
  80efa8:	1007883a 	mov	r3,r2
  80efac:	00801444 	movi	r2,81
  80efb0:	18800015 	stw	r2,0(r3)
    return -1;
  80efb4:	00bfffc4 	movi	r2,-1
  80efb8:	e0bffe15 	stw	r2,-8(fp)
  80efbc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80efc0:	e037883a 	mov	sp,fp
  80efc4:	dfc00117 	ldw	ra,4(sp)
  80efc8:	df000017 	ldw	fp,0(sp)
  80efcc:	dec00204 	addi	sp,sp,8
  80efd0:	f800283a 	ret

0080efd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80efd4:	defffd04 	addi	sp,sp,-12
  80efd8:	dfc00215 	stw	ra,8(sp)
  80efdc:	df000115 	stw	fp,4(sp)
  80efe0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80efe4:	00802074 	movhi	r2,129
  80efe8:	1091bb04 	addi	r2,r2,18156
  80efec:	10800017 	ldw	r2,0(r2)
  80eff0:	1005003a 	cmpeq	r2,r2,zero
  80eff4:	1000061e 	bne	r2,zero,80f010 <alt_get_errno+0x3c>
  80eff8:	00802074 	movhi	r2,129
  80effc:	1091bb04 	addi	r2,r2,18156
  80f000:	10800017 	ldw	r2,0(r2)
  80f004:	103ee83a 	callr	r2
  80f008:	e0bfff15 	stw	r2,-4(fp)
  80f00c:	00000306 	br	80f01c <alt_get_errno+0x48>
  80f010:	00802074 	movhi	r2,129
  80f014:	1091d004 	addi	r2,r2,18240
  80f018:	e0bfff15 	stw	r2,-4(fp)
  80f01c:	e0bfff17 	ldw	r2,-4(fp)
}
  80f020:	e037883a 	mov	sp,fp
  80f024:	dfc00117 	ldw	ra,4(sp)
  80f028:	df000017 	ldw	fp,0(sp)
  80f02c:	dec00204 	addi	sp,sp,8
  80f030:	f800283a 	ret

0080f034 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80f034:	deffef04 	addi	sp,sp,-68
  80f038:	df001015 	stw	fp,64(sp)
  80f03c:	df001004 	addi	fp,sp,64
  80f040:	e13ffc15 	stw	r4,-16(fp)
  80f044:	e17ffd15 	stw	r5,-12(fp)
  80f048:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  80f04c:	00bffa84 	movi	r2,-22
  80f050:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80f054:	e0bffc17 	ldw	r2,-16(fp)
  80f058:	10800828 	cmpgeui	r2,r2,32
  80f05c:	1000601e 	bne	r2,zero,80f1e0 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f060:	0005303a 	rdctl	r2,status
  80f064:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f068:	e0fff917 	ldw	r3,-28(fp)
  80f06c:	00bfff84 	movi	r2,-2
  80f070:	1884703a 	and	r2,r3,r2
  80f074:	1001703a 	wrctl	status,r2
  
  return context;
  80f078:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80f07c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  80f080:	e0bffc17 	ldw	r2,-16(fp)
  80f084:	00c02074 	movhi	r3,129
  80f088:	18d1ea04 	addi	r3,r3,18344
  80f08c:	100490fa 	slli	r2,r2,3
  80f090:	10c7883a 	add	r3,r2,r3
  80f094:	e0bffe17 	ldw	r2,-8(fp)
  80f098:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  80f09c:	e0bffc17 	ldw	r2,-16(fp)
  80f0a0:	00c02074 	movhi	r3,129
  80f0a4:	18d1ea04 	addi	r3,r3,18344
  80f0a8:	100490fa 	slli	r2,r2,3
  80f0ac:	10c5883a 	add	r2,r2,r3
  80f0b0:	10c00104 	addi	r3,r2,4
  80f0b4:	e0bffd17 	ldw	r2,-12(fp)
  80f0b8:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80f0bc:	e0bffe17 	ldw	r2,-8(fp)
  80f0c0:	1005003a 	cmpeq	r2,r2,zero
  80f0c4:	1000201e 	bne	r2,zero,80f148 <alt_irq_register+0x114>
  80f0c8:	e0bffc17 	ldw	r2,-16(fp)
  80f0cc:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f0d0:	0005303a 	rdctl	r2,status
  80f0d4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f0d8:	e0fff617 	ldw	r3,-40(fp)
  80f0dc:	00bfff84 	movi	r2,-2
  80f0e0:	1884703a 	and	r2,r3,r2
  80f0e4:	1001703a 	wrctl	status,r2
  
  return context;
  80f0e8:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80f0ec:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80f0f0:	e0fff717 	ldw	r3,-36(fp)
  80f0f4:	00800044 	movi	r2,1
  80f0f8:	10c4983a 	sll	r2,r2,r3
  80f0fc:	1007883a 	mov	r3,r2
  80f100:	00802074 	movhi	r2,129
  80f104:	1091d104 	addi	r2,r2,18244
  80f108:	10800017 	ldw	r2,0(r2)
  80f10c:	1886b03a 	or	r3,r3,r2
  80f110:	00802074 	movhi	r2,129
  80f114:	1091d104 	addi	r2,r2,18244
  80f118:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80f11c:	00802074 	movhi	r2,129
  80f120:	1091d104 	addi	r2,r2,18244
  80f124:	10800017 	ldw	r2,0(r2)
  80f128:	100170fa 	wrctl	ienable,r2
  80f12c:	e0bff817 	ldw	r2,-32(fp)
  80f130:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f134:	e0bff517 	ldw	r2,-44(fp)
  80f138:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80f13c:	0005883a 	mov	r2,zero
  80f140:	e0bfff15 	stw	r2,-4(fp)
  80f144:	00002006 	br	80f1c8 <alt_irq_register+0x194>
  80f148:	e0bffc17 	ldw	r2,-16(fp)
  80f14c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f150:	0005303a 	rdctl	r2,status
  80f154:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f158:	e0fff217 	ldw	r3,-56(fp)
  80f15c:	00bfff84 	movi	r2,-2
  80f160:	1884703a 	and	r2,r3,r2
  80f164:	1001703a 	wrctl	status,r2
  
  return context;
  80f168:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80f16c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  80f170:	e0fff317 	ldw	r3,-52(fp)
  80f174:	00800044 	movi	r2,1
  80f178:	10c4983a 	sll	r2,r2,r3
  80f17c:	0084303a 	nor	r2,zero,r2
  80f180:	1007883a 	mov	r3,r2
  80f184:	00802074 	movhi	r2,129
  80f188:	1091d104 	addi	r2,r2,18244
  80f18c:	10800017 	ldw	r2,0(r2)
  80f190:	1886703a 	and	r3,r3,r2
  80f194:	00802074 	movhi	r2,129
  80f198:	1091d104 	addi	r2,r2,18244
  80f19c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80f1a0:	00802074 	movhi	r2,129
  80f1a4:	1091d104 	addi	r2,r2,18244
  80f1a8:	10800017 	ldw	r2,0(r2)
  80f1ac:	100170fa 	wrctl	ienable,r2
  80f1b0:	e0bff417 	ldw	r2,-48(fp)
  80f1b4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f1b8:	e0bff117 	ldw	r2,-60(fp)
  80f1bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80f1c0:	0005883a 	mov	r2,zero
  80f1c4:	e0bfff15 	stw	r2,-4(fp)
  80f1c8:	e0bfff17 	ldw	r2,-4(fp)
  80f1cc:	e0bffb15 	stw	r2,-20(fp)
  80f1d0:	e0bffa17 	ldw	r2,-24(fp)
  80f1d4:	e0bff015 	stw	r2,-64(fp)
  80f1d8:	e0bff017 	ldw	r2,-64(fp)
  80f1dc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80f1e0:	e0bffb17 	ldw	r2,-20(fp)
}
  80f1e4:	e037883a 	mov	sp,fp
  80f1e8:	df000017 	ldw	fp,0(sp)
  80f1ec:	dec00104 	addi	sp,sp,4
  80f1f0:	f800283a 	ret

0080f1f4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80f1f4:	deffeb04 	addi	sp,sp,-84
  80f1f8:	dfc01415 	stw	ra,80(sp)
  80f1fc:	df001315 	stw	fp,76(sp)
  80f200:	df001304 	addi	fp,sp,76
  80f204:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f208:	e0bffd17 	ldw	r2,-12(fp)
  80f20c:	1004803a 	cmplt	r2,r2,zero
  80f210:	1000091e 	bne	r2,zero,80f238 <isatty+0x44>
  80f214:	e13ffd17 	ldw	r4,-12(fp)
  80f218:	01400304 	movi	r5,12
  80f21c:	080eb4c0 	call	80eb4c <__mulsi3>
  80f220:	1007883a 	mov	r3,r2
  80f224:	00802074 	movhi	r2,129
  80f228:	108d1a04 	addi	r2,r2,13416
  80f22c:	1887883a 	add	r3,r3,r2
  80f230:	e0ffff15 	stw	r3,-4(fp)
  80f234:	00000106 	br	80f23c <isatty+0x48>
  80f238:	e03fff15 	stw	zero,-4(fp)
  80f23c:	e0bfff17 	ldw	r2,-4(fp)
  80f240:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80f244:	e0bfed17 	ldw	r2,-76(fp)
  80f248:	1005003a 	cmpeq	r2,r2,zero
  80f24c:	10000f1e 	bne	r2,zero,80f28c <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80f250:	e0bfed17 	ldw	r2,-76(fp)
  80f254:	10800017 	ldw	r2,0(r2)
  80f258:	10800817 	ldw	r2,32(r2)
  80f25c:	1004c03a 	cmpne	r2,r2,zero
  80f260:	1000031e 	bne	r2,zero,80f270 <isatty+0x7c>
    {
      return 1;
  80f264:	00800044 	movi	r2,1
  80f268:	e0bffe15 	stw	r2,-8(fp)
  80f26c:	00000c06 	br	80f2a0 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80f270:	e17fee04 	addi	r5,fp,-72
  80f274:	e13ffd17 	ldw	r4,-12(fp)
  80f278:	080eefc0 	call	80eefc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80f27c:	e0bfef17 	ldw	r2,-68(fp)
  80f280:	10880020 	cmpeqi	r2,r2,8192
  80f284:	e0bffe15 	stw	r2,-8(fp)
  80f288:	00000506 	br	80f2a0 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80f28c:	080f2b80 	call	80f2b8 <alt_get_errno>
  80f290:	1007883a 	mov	r3,r2
  80f294:	00801444 	movi	r2,81
  80f298:	18800015 	stw	r2,0(r3)
    return 0;
  80f29c:	e03ffe15 	stw	zero,-8(fp)
  80f2a0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80f2a4:	e037883a 	mov	sp,fp
  80f2a8:	dfc00117 	ldw	ra,4(sp)
  80f2ac:	df000017 	ldw	fp,0(sp)
  80f2b0:	dec00204 	addi	sp,sp,8
  80f2b4:	f800283a 	ret

0080f2b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f2b8:	defffd04 	addi	sp,sp,-12
  80f2bc:	dfc00215 	stw	ra,8(sp)
  80f2c0:	df000115 	stw	fp,4(sp)
  80f2c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80f2c8:	00802074 	movhi	r2,129
  80f2cc:	1091bb04 	addi	r2,r2,18156
  80f2d0:	10800017 	ldw	r2,0(r2)
  80f2d4:	1005003a 	cmpeq	r2,r2,zero
  80f2d8:	1000061e 	bne	r2,zero,80f2f4 <alt_get_errno+0x3c>
  80f2dc:	00802074 	movhi	r2,129
  80f2e0:	1091bb04 	addi	r2,r2,18156
  80f2e4:	10800017 	ldw	r2,0(r2)
  80f2e8:	103ee83a 	callr	r2
  80f2ec:	e0bfff15 	stw	r2,-4(fp)
  80f2f0:	00000306 	br	80f300 <alt_get_errno+0x48>
  80f2f4:	00802074 	movhi	r2,129
  80f2f8:	1091d004 	addi	r2,r2,18240
  80f2fc:	e0bfff15 	stw	r2,-4(fp)
  80f300:	e0bfff17 	ldw	r2,-4(fp)
}
  80f304:	e037883a 	mov	sp,fp
  80f308:	dfc00117 	ldw	ra,4(sp)
  80f30c:	df000017 	ldw	fp,0(sp)
  80f310:	dec00204 	addi	sp,sp,8
  80f314:	f800283a 	ret

0080f318 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80f318:	defff804 	addi	sp,sp,-32
  80f31c:	dfc00715 	stw	ra,28(sp)
  80f320:	df000615 	stw	fp,24(sp)
  80f324:	df000604 	addi	fp,sp,24
  80f328:	e13ffc15 	stw	r4,-16(fp)
  80f32c:	e17ffd15 	stw	r5,-12(fp)
  80f330:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80f334:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f338:	e0bffc17 	ldw	r2,-16(fp)
  80f33c:	1004803a 	cmplt	r2,r2,zero
  80f340:	1000091e 	bne	r2,zero,80f368 <lseek+0x50>
  80f344:	e13ffc17 	ldw	r4,-16(fp)
  80f348:	01400304 	movi	r5,12
  80f34c:	080eb4c0 	call	80eb4c <__mulsi3>
  80f350:	1007883a 	mov	r3,r2
  80f354:	00802074 	movhi	r2,129
  80f358:	108d1a04 	addi	r2,r2,13416
  80f35c:	1887883a 	add	r3,r3,r2
  80f360:	e0ffff15 	stw	r3,-4(fp)
  80f364:	00000106 	br	80f36c <lseek+0x54>
  80f368:	e03fff15 	stw	zero,-4(fp)
  80f36c:	e0bfff17 	ldw	r2,-4(fp)
  80f370:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80f374:	e0bffb17 	ldw	r2,-20(fp)
  80f378:	1005003a 	cmpeq	r2,r2,zero
  80f37c:	1000111e 	bne	r2,zero,80f3c4 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80f380:	e0bffb17 	ldw	r2,-20(fp)
  80f384:	10800017 	ldw	r2,0(r2)
  80f388:	10800717 	ldw	r2,28(r2)
  80f38c:	1005003a 	cmpeq	r2,r2,zero
  80f390:	1000091e 	bne	r2,zero,80f3b8 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80f394:	e0bffb17 	ldw	r2,-20(fp)
  80f398:	10800017 	ldw	r2,0(r2)
  80f39c:	10800717 	ldw	r2,28(r2)
  80f3a0:	e13ffb17 	ldw	r4,-20(fp)
  80f3a4:	e17ffd17 	ldw	r5,-12(fp)
  80f3a8:	e1bffe17 	ldw	r6,-8(fp)
  80f3ac:	103ee83a 	callr	r2
  80f3b0:	e0bffa15 	stw	r2,-24(fp)
  80f3b4:	00000506 	br	80f3cc <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80f3b8:	00bfde84 	movi	r2,-134
  80f3bc:	e0bffa15 	stw	r2,-24(fp)
  80f3c0:	00000206 	br	80f3cc <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  80f3c4:	00bfebc4 	movi	r2,-81
  80f3c8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80f3cc:	e0bffa17 	ldw	r2,-24(fp)
  80f3d0:	1004403a 	cmpge	r2,r2,zero
  80f3d4:	1000071e 	bne	r2,zero,80f3f4 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  80f3d8:	080f40c0 	call	80f40c <alt_get_errno>
  80f3dc:	1007883a 	mov	r3,r2
  80f3e0:	e0bffa17 	ldw	r2,-24(fp)
  80f3e4:	0085c83a 	sub	r2,zero,r2
  80f3e8:	18800015 	stw	r2,0(r3)
    rc = -1;
  80f3ec:	00bfffc4 	movi	r2,-1
  80f3f0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80f3f4:	e0bffa17 	ldw	r2,-24(fp)
}
  80f3f8:	e037883a 	mov	sp,fp
  80f3fc:	dfc00117 	ldw	ra,4(sp)
  80f400:	df000017 	ldw	fp,0(sp)
  80f404:	dec00204 	addi	sp,sp,8
  80f408:	f800283a 	ret

0080f40c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f40c:	defffd04 	addi	sp,sp,-12
  80f410:	dfc00215 	stw	ra,8(sp)
  80f414:	df000115 	stw	fp,4(sp)
  80f418:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80f41c:	00802074 	movhi	r2,129
  80f420:	1091bb04 	addi	r2,r2,18156
  80f424:	10800017 	ldw	r2,0(r2)
  80f428:	1005003a 	cmpeq	r2,r2,zero
  80f42c:	1000061e 	bne	r2,zero,80f448 <alt_get_errno+0x3c>
  80f430:	00802074 	movhi	r2,129
  80f434:	1091bb04 	addi	r2,r2,18156
  80f438:	10800017 	ldw	r2,0(r2)
  80f43c:	103ee83a 	callr	r2
  80f440:	e0bfff15 	stw	r2,-4(fp)
  80f444:	00000306 	br	80f454 <alt_get_errno+0x48>
  80f448:	00802074 	movhi	r2,129
  80f44c:	1091d004 	addi	r2,r2,18240
  80f450:	e0bfff15 	stw	r2,-4(fp)
  80f454:	e0bfff17 	ldw	r2,-4(fp)
}
  80f458:	e037883a 	mov	sp,fp
  80f45c:	dfc00117 	ldw	ra,4(sp)
  80f460:	df000017 	ldw	fp,0(sp)
  80f464:	dec00204 	addi	sp,sp,8
  80f468:	f800283a 	ret

0080f46c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80f46c:	defffd04 	addi	sp,sp,-12
  80f470:	dfc00215 	stw	ra,8(sp)
  80f474:	df000115 	stw	fp,4(sp)
  80f478:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80f47c:	0009883a 	mov	r4,zero
  80f480:	080fc1c0 	call	80fc1c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80f484:	080fc500 	call	80fc50 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80f488:	01002074 	movhi	r4,129
  80f48c:	210a4b04 	addi	r4,r4,10540
  80f490:	01402074 	movhi	r5,129
  80f494:	294a4b04 	addi	r5,r5,10540
  80f498:	01802074 	movhi	r6,129
  80f49c:	318a4b04 	addi	r6,r6,10540
  80f4a0:	08112300 	call	811230 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80f4a4:	0810ffc0 	call	810ffc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80f4a8:	01002074 	movhi	r4,129
  80f4ac:	21041804 	addi	r4,r4,4192
  80f4b0:	08119400 	call	811940 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80f4b4:	d1202817 	ldw	r4,-32608(gp)
  80f4b8:	d1602917 	ldw	r5,-32604(gp)
  80f4bc:	d1a02a17 	ldw	r6,-32600(gp)
  80f4c0:	08037140 	call	803714 <main>
  80f4c4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80f4c8:	01000044 	movi	r4,1
  80f4cc:	080ed700 	call	80ed70 <close>
  exit (result);
  80f4d0:	e13fff17 	ldw	r4,-4(fp)
  80f4d4:	08119540 	call	811954 <exit>

0080f4d8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80f4d8:	defffe04 	addi	sp,sp,-8
  80f4dc:	df000115 	stw	fp,4(sp)
  80f4e0:	df000104 	addi	fp,sp,4
  80f4e4:	e13fff15 	stw	r4,-4(fp)
}
  80f4e8:	e037883a 	mov	sp,fp
  80f4ec:	df000017 	ldw	fp,0(sp)
  80f4f0:	dec00104 	addi	sp,sp,4
  80f4f4:	f800283a 	ret

0080f4f8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80f4f8:	defffe04 	addi	sp,sp,-8
  80f4fc:	df000115 	stw	fp,4(sp)
  80f500:	df000104 	addi	fp,sp,4
  80f504:	e13fff15 	stw	r4,-4(fp)
}
  80f508:	e037883a 	mov	sp,fp
  80f50c:	df000017 	ldw	fp,0(sp)
  80f510:	dec00104 	addi	sp,sp,4
  80f514:	f800283a 	ret

0080f518 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  80f518:	defff204 	addi	sp,sp,-56
  80f51c:	dfc00a15 	stw	ra,40(sp)
  80f520:	df000915 	stw	fp,36(sp)
  80f524:	df000904 	addi	fp,sp,36
  80f528:	e1400215 	stw	r5,8(fp)
  80f52c:	e1800315 	stw	r6,12(fp)
  80f530:	e1c00415 	stw	r7,16(fp)
  80f534:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
  80f538:	e0800204 	addi	r2,fp,8
  80f53c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
  80f540:	e0bfff17 	ldw	r2,-4(fp)
  80f544:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
  80f548:	00007806 	br	80f72c <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  80f54c:	e0bffc07 	ldb	r2,-16(fp)
  80f550:	10800960 	cmpeqi	r2,r2,37
  80f554:	1000031e 	bne	r2,zero,80f564 <alt_printf+0x4c>
        {
            alt_putchar(c);
  80f558:	e13ffc07 	ldb	r4,-16(fp)
  80f55c:	080f7700 	call	80f770 <alt_putchar>
  80f560:	00007206 	br	80f72c <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  80f564:	e0bffd17 	ldw	r2,-12(fp)
  80f568:	10800003 	ldbu	r2,0(r2)
  80f56c:	e0bffc05 	stb	r2,-16(fp)
  80f570:	e0bffc07 	ldb	r2,-16(fp)
  80f574:	1004c03a 	cmpne	r2,r2,zero
  80f578:	1007883a 	mov	r3,r2
  80f57c:	e0bffd17 	ldw	r2,-12(fp)
  80f580:	10800044 	addi	r2,r2,1
  80f584:	e0bffd15 	stw	r2,-12(fp)
  80f588:	18803fcc 	andi	r2,r3,255
  80f58c:	1005003a 	cmpeq	r2,r2,zero
  80f590:	1000721e 	bne	r2,zero,80f75c <alt_printf+0x244>
            {
                if (c == '%')
  80f594:	e0bffc07 	ldb	r2,-16(fp)
  80f598:	10800958 	cmpnei	r2,r2,37
  80f59c:	1000031e 	bne	r2,zero,80f5ac <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  80f5a0:	e13ffc07 	ldb	r4,-16(fp)
  80f5a4:	080f7700 	call	80f770 <alt_putchar>
  80f5a8:	00006006 	br	80f72c <alt_printf+0x214>
                } 
                else if (c == 'c')
  80f5ac:	e0bffc07 	ldb	r2,-16(fp)
  80f5b0:	108018d8 	cmpnei	r2,r2,99
  80f5b4:	1000091e 	bne	r2,zero,80f5dc <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
  80f5b8:	e0fffe17 	ldw	r3,-8(fp)
  80f5bc:	18800104 	addi	r2,r3,4
  80f5c0:	e0bffe15 	stw	r2,-8(fp)
  80f5c4:	1805883a 	mov	r2,r3
  80f5c8:	10800017 	ldw	r2,0(r2)
  80f5cc:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
  80f5d0:	e13ffb17 	ldw	r4,-20(fp)
  80f5d4:	080f7700 	call	80f770 <alt_putchar>
  80f5d8:	00005406 	br	80f72c <alt_printf+0x214>
                }
                else if (c == 'x')
  80f5dc:	e0bffc07 	ldb	r2,-16(fp)
  80f5e0:	10801e18 	cmpnei	r2,r2,120
  80f5e4:	1000371e 	bne	r2,zero,80f6c4 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  80f5e8:	e0fffe17 	ldw	r3,-8(fp)
  80f5ec:	18800104 	addi	r2,r3,4
  80f5f0:	e0bffe15 	stw	r2,-8(fp)
  80f5f4:	1805883a 	mov	r2,r3
  80f5f8:	10800017 	ldw	r2,0(r2)
  80f5fc:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  80f600:	e0bffa17 	ldw	r2,-24(fp)
  80f604:	1004c03a 	cmpne	r2,r2,zero
  80f608:	1000031e 	bne	r2,zero,80f618 <alt_printf+0x100>
                    {
                        alt_putchar('0');
  80f60c:	01000c04 	movi	r4,48
  80f610:	080f7700 	call	80f770 <alt_putchar>
                        continue;
  80f614:	00004506 	br	80f72c <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
  80f618:	00800704 	movi	r2,28
  80f61c:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
  80f620:	00000306 	br	80f630 <alt_printf+0x118>
                        digit_shift -= 4;
  80f624:	e0bff817 	ldw	r2,-32(fp)
  80f628:	10bfff04 	addi	r2,r2,-4
  80f62c:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  80f630:	00c003c4 	movi	r3,15
  80f634:	e0bff817 	ldw	r2,-32(fp)
  80f638:	1884983a 	sll	r2,r3,r2
  80f63c:	1007883a 	mov	r3,r2
  80f640:	e0bffa17 	ldw	r2,-24(fp)
  80f644:	1884703a 	and	r2,r3,r2
  80f648:	1005003a 	cmpeq	r2,r2,zero
  80f64c:	103ff51e 	bne	r2,zero,80f624 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  80f650:	00001806 	br	80f6b4 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  80f654:	00c003c4 	movi	r3,15
  80f658:	e0bff817 	ldw	r2,-32(fp)
  80f65c:	1884983a 	sll	r2,r3,r2
  80f660:	1007883a 	mov	r3,r2
  80f664:	e0bffa17 	ldw	r2,-24(fp)
  80f668:	1886703a 	and	r3,r3,r2
  80f66c:	e0bff817 	ldw	r2,-32(fp)
  80f670:	1884d83a 	srl	r2,r3,r2
  80f674:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
  80f678:	e0bff917 	ldw	r2,-28(fp)
  80f67c:	108002a8 	cmpgeui	r2,r2,10
  80f680:	1000041e 	bne	r2,zero,80f694 <alt_printf+0x17c>
                            c = '0' + digit;
  80f684:	e0bff917 	ldw	r2,-28(fp)
  80f688:	10800c04 	addi	r2,r2,48
  80f68c:	e0bffc05 	stb	r2,-16(fp)
  80f690:	00000306 	br	80f6a0 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
  80f694:	e0bff917 	ldw	r2,-28(fp)
  80f698:	108015c4 	addi	r2,r2,87
  80f69c:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
  80f6a0:	e13ffc07 	ldb	r4,-16(fp)
  80f6a4:	080f7700 	call	80f770 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  80f6a8:	e0bff817 	ldw	r2,-32(fp)
  80f6ac:	10bfff04 	addi	r2,r2,-4
  80f6b0:	e0bff815 	stw	r2,-32(fp)
  80f6b4:	e0bff817 	ldw	r2,-32(fp)
  80f6b8:	1004403a 	cmpge	r2,r2,zero
  80f6bc:	103fe51e 	bne	r2,zero,80f654 <alt_printf+0x13c>
  80f6c0:	00001a06 	br	80f72c <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  80f6c4:	e0bffc07 	ldb	r2,-16(fp)
  80f6c8:	10801cd8 	cmpnei	r2,r2,115
  80f6cc:	1000171e 	bne	r2,zero,80f72c <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  80f6d0:	e0fffe17 	ldw	r3,-8(fp)
  80f6d4:	18800104 	addi	r2,r3,4
  80f6d8:	e0bffe15 	stw	r2,-8(fp)
  80f6dc:	1805883a 	mov	r2,r3
  80f6e0:	10800017 	ldw	r2,0(r2)
  80f6e4:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
  80f6e8:	00000906 	br	80f710 <alt_printf+0x1f8>
                      alt_putchar(*s++);
  80f6ec:	e0bff717 	ldw	r2,-36(fp)
  80f6f0:	10800003 	ldbu	r2,0(r2)
  80f6f4:	11003fcc 	andi	r4,r2,255
  80f6f8:	2100201c 	xori	r4,r4,128
  80f6fc:	213fe004 	addi	r4,r4,-128
  80f700:	e0bff717 	ldw	r2,-36(fp)
  80f704:	10800044 	addi	r2,r2,1
  80f708:	e0bff715 	stw	r2,-36(fp)
  80f70c:	080f7700 	call	80f770 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  80f710:	e0bff717 	ldw	r2,-36(fp)
  80f714:	10800003 	ldbu	r2,0(r2)
  80f718:	10803fcc 	andi	r2,r2,255
  80f71c:	1080201c 	xori	r2,r2,128
  80f720:	10bfe004 	addi	r2,r2,-128
  80f724:	1004c03a 	cmpne	r2,r2,zero
  80f728:	103ff01e 	bne	r2,zero,80f6ec <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  80f72c:	e0bffd17 	ldw	r2,-12(fp)
  80f730:	10800003 	ldbu	r2,0(r2)
  80f734:	e0bffc05 	stb	r2,-16(fp)
  80f738:	e0bffc07 	ldb	r2,-16(fp)
  80f73c:	1004c03a 	cmpne	r2,r2,zero
  80f740:	1007883a 	mov	r3,r2
  80f744:	e0bffd17 	ldw	r2,-12(fp)
  80f748:	10800044 	addi	r2,r2,1
  80f74c:	e0bffd15 	stw	r2,-12(fp)
  80f750:	18803fcc 	andi	r2,r3,255
  80f754:	1004c03a 	cmpne	r2,r2,zero
  80f758:	103f7c1e 	bne	r2,zero,80f54c <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
  80f75c:	e037883a 	mov	sp,fp
  80f760:	dfc00117 	ldw	ra,4(sp)
  80f764:	df000017 	ldw	fp,0(sp)
  80f768:	dec00504 	addi	sp,sp,20
  80f76c:	f800283a 	ret

0080f770 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  80f770:	defffd04 	addi	sp,sp,-12
  80f774:	dfc00215 	stw	ra,8(sp)
  80f778:	df000115 	stw	fp,4(sp)
  80f77c:	df000104 	addi	fp,sp,4
  80f780:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
  80f784:	00802074 	movhi	r2,129
  80f788:	1091b004 	addi	r2,r2,18112
  80f78c:	10800017 	ldw	r2,0(r2)
  80f790:	11400217 	ldw	r5,8(r2)
  80f794:	e13fff17 	ldw	r4,-4(fp)
  80f798:	080c36c0 	call	80c36c <putc>
#endif
}
  80f79c:	e037883a 	mov	sp,fp
  80f7a0:	dfc00117 	ldw	ra,4(sp)
  80f7a4:	df000017 	ldw	fp,0(sp)
  80f7a8:	dec00204 	addi	sp,sp,8
  80f7ac:	f800283a 	ret

0080f7b0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80f7b0:	defff704 	addi	sp,sp,-36
  80f7b4:	dfc00815 	stw	ra,32(sp)
  80f7b8:	df000715 	stw	fp,28(sp)
  80f7bc:	df000704 	addi	fp,sp,28
  80f7c0:	e13ffb15 	stw	r4,-20(fp)
  80f7c4:	e17ffc15 	stw	r5,-16(fp)
  80f7c8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f7cc:	e0bffb17 	ldw	r2,-20(fp)
  80f7d0:	1004803a 	cmplt	r2,r2,zero
  80f7d4:	1000091e 	bne	r2,zero,80f7fc <read+0x4c>
  80f7d8:	e13ffb17 	ldw	r4,-20(fp)
  80f7dc:	01400304 	movi	r5,12
  80f7e0:	080eb4c0 	call	80eb4c <__mulsi3>
  80f7e4:	1007883a 	mov	r3,r2
  80f7e8:	00802074 	movhi	r2,129
  80f7ec:	108d1a04 	addi	r2,r2,13416
  80f7f0:	1887883a 	add	r3,r3,r2
  80f7f4:	e0ffff15 	stw	r3,-4(fp)
  80f7f8:	00000106 	br	80f800 <read+0x50>
  80f7fc:	e03fff15 	stw	zero,-4(fp)
  80f800:	e0bfff17 	ldw	r2,-4(fp)
  80f804:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80f808:	e0bffa17 	ldw	r2,-24(fp)
  80f80c:	1005003a 	cmpeq	r2,r2,zero
  80f810:	1000241e 	bne	r2,zero,80f8a4 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80f814:	e0bffa17 	ldw	r2,-24(fp)
  80f818:	10800217 	ldw	r2,8(r2)
  80f81c:	108000cc 	andi	r2,r2,3
  80f820:	10800060 	cmpeqi	r2,r2,1
  80f824:	10001a1e 	bne	r2,zero,80f890 <read+0xe0>
  80f828:	e0bffa17 	ldw	r2,-24(fp)
  80f82c:	10800017 	ldw	r2,0(r2)
  80f830:	10800517 	ldw	r2,20(r2)
  80f834:	1005003a 	cmpeq	r2,r2,zero
  80f838:	1000151e 	bne	r2,zero,80f890 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80f83c:	e0bffa17 	ldw	r2,-24(fp)
  80f840:	10800017 	ldw	r2,0(r2)
  80f844:	10800517 	ldw	r2,20(r2)
  80f848:	e17ffc17 	ldw	r5,-16(fp)
  80f84c:	e1bffd17 	ldw	r6,-12(fp)
  80f850:	e13ffa17 	ldw	r4,-24(fp)
  80f854:	103ee83a 	callr	r2
  80f858:	e0bff915 	stw	r2,-28(fp)
  80f85c:	e0bff917 	ldw	r2,-28(fp)
  80f860:	1004403a 	cmpge	r2,r2,zero
  80f864:	1000071e 	bne	r2,zero,80f884 <read+0xd4>
        {
          ALT_ERRNO = -rval;
  80f868:	080f8d40 	call	80f8d4 <alt_get_errno>
  80f86c:	e0fff917 	ldw	r3,-28(fp)
  80f870:	00c7c83a 	sub	r3,zero,r3
  80f874:	10c00015 	stw	r3,0(r2)
          return -1;
  80f878:	00bfffc4 	movi	r2,-1
  80f87c:	e0bffe15 	stw	r2,-8(fp)
  80f880:	00000e06 	br	80f8bc <read+0x10c>
        }
        return rval;
  80f884:	e0bff917 	ldw	r2,-28(fp)
  80f888:	e0bffe15 	stw	r2,-8(fp)
  80f88c:	00000b06 	br	80f8bc <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80f890:	080f8d40 	call	80f8d4 <alt_get_errno>
  80f894:	1007883a 	mov	r3,r2
  80f898:	00800344 	movi	r2,13
  80f89c:	18800015 	stw	r2,0(r3)
  80f8a0:	00000406 	br	80f8b4 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80f8a4:	080f8d40 	call	80f8d4 <alt_get_errno>
  80f8a8:	1007883a 	mov	r3,r2
  80f8ac:	00801444 	movi	r2,81
  80f8b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80f8b4:	00bfffc4 	movi	r2,-1
  80f8b8:	e0bffe15 	stw	r2,-8(fp)
  80f8bc:	e0bffe17 	ldw	r2,-8(fp)
}
  80f8c0:	e037883a 	mov	sp,fp
  80f8c4:	dfc00117 	ldw	ra,4(sp)
  80f8c8:	df000017 	ldw	fp,0(sp)
  80f8cc:	dec00204 	addi	sp,sp,8
  80f8d0:	f800283a 	ret

0080f8d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f8d4:	defffd04 	addi	sp,sp,-12
  80f8d8:	dfc00215 	stw	ra,8(sp)
  80f8dc:	df000115 	stw	fp,4(sp)
  80f8e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80f8e4:	00802074 	movhi	r2,129
  80f8e8:	1091bb04 	addi	r2,r2,18156
  80f8ec:	10800017 	ldw	r2,0(r2)
  80f8f0:	1005003a 	cmpeq	r2,r2,zero
  80f8f4:	1000061e 	bne	r2,zero,80f910 <alt_get_errno+0x3c>
  80f8f8:	00802074 	movhi	r2,129
  80f8fc:	1091bb04 	addi	r2,r2,18156
  80f900:	10800017 	ldw	r2,0(r2)
  80f904:	103ee83a 	callr	r2
  80f908:	e0bfff15 	stw	r2,-4(fp)
  80f90c:	00000306 	br	80f91c <alt_get_errno+0x48>
  80f910:	00802074 	movhi	r2,129
  80f914:	1091d004 	addi	r2,r2,18240
  80f918:	e0bfff15 	stw	r2,-4(fp)
  80f91c:	e0bfff17 	ldw	r2,-4(fp)
}
  80f920:	e037883a 	mov	sp,fp
  80f924:	dfc00117 	ldw	ra,4(sp)
  80f928:	df000017 	ldw	fp,0(sp)
  80f92c:	dec00204 	addi	sp,sp,8
  80f930:	f800283a 	ret

0080f934 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80f934:	defffc04 	addi	sp,sp,-16
  80f938:	dfc00315 	stw	ra,12(sp)
  80f93c:	df000215 	stw	fp,8(sp)
  80f940:	dc000115 	stw	r16,4(sp)
  80f944:	df000104 	addi	fp,sp,4
  80f948:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80f94c:	e0bfff17 	ldw	r2,-4(fp)
  80f950:	108000d0 	cmplti	r2,r2,3
  80f954:	10000f1e 	bne	r2,zero,80f994 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  80f958:	e13fff17 	ldw	r4,-4(fp)
  80f95c:	04002074 	movhi	r16,129
  80f960:	840d1a04 	addi	r16,r16,13416
  80f964:	01400304 	movi	r5,12
  80f968:	080eb4c0 	call	80eb4c <__mulsi3>
  80f96c:	1405883a 	add	r2,r2,r16
  80f970:	10800204 	addi	r2,r2,8
  80f974:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80f978:	e13fff17 	ldw	r4,-4(fp)
  80f97c:	04002074 	movhi	r16,129
  80f980:	840d1a04 	addi	r16,r16,13416
  80f984:	01400304 	movi	r5,12
  80f988:	080eb4c0 	call	80eb4c <__mulsi3>
  80f98c:	1405883a 	add	r2,r2,r16
  80f990:	10000015 	stw	zero,0(r2)
  }
}
  80f994:	e037883a 	mov	sp,fp
  80f998:	dfc00217 	ldw	ra,8(sp)
  80f99c:	df000117 	ldw	fp,4(sp)
  80f9a0:	dc000017 	ldw	r16,0(sp)
  80f9a4:	dec00304 	addi	sp,sp,12
  80f9a8:	f800283a 	ret

0080f9ac <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80f9ac:	defff804 	addi	sp,sp,-32
  80f9b0:	df000715 	stw	fp,28(sp)
  80f9b4:	df000704 	addi	fp,sp,28
  80f9b8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f9bc:	0005303a 	rdctl	r2,status
  80f9c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f9c4:	e0fffb17 	ldw	r3,-20(fp)
  80f9c8:	00bfff84 	movi	r2,-2
  80f9cc:	1884703a 	and	r2,r3,r2
  80f9d0:	1001703a 	wrctl	status,r2
  
  return context;
  80f9d4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80f9d8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80f9dc:	d0a01317 	ldw	r2,-32692(gp)
  80f9e0:	10c000c4 	addi	r3,r2,3
  80f9e4:	00bfff04 	movi	r2,-4
  80f9e8:	1884703a 	and	r2,r3,r2
  80f9ec:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80f9f0:	d0e01317 	ldw	r3,-32692(gp)
  80f9f4:	e0bffe17 	ldw	r2,-8(fp)
  80f9f8:	1887883a 	add	r3,r3,r2
  80f9fc:	00804034 	movhi	r2,256
  80fa00:	10800004 	addi	r2,r2,0
  80fa04:	10c0072e 	bgeu	r2,r3,80fa24 <sbrk+0x78>
  80fa08:	e0bffd17 	ldw	r2,-12(fp)
  80fa0c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fa10:	e0bffa17 	ldw	r2,-24(fp)
  80fa14:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80fa18:	00bfffc4 	movi	r2,-1
  80fa1c:	e0bfff15 	stw	r2,-4(fp)
  80fa20:	00000c06 	br	80fa54 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80fa24:	d0a01317 	ldw	r2,-32692(gp)
  80fa28:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80fa2c:	d0e01317 	ldw	r3,-32692(gp)
  80fa30:	e0bffe17 	ldw	r2,-8(fp)
  80fa34:	1885883a 	add	r2,r3,r2
  80fa38:	d0a01315 	stw	r2,-32692(gp)
  80fa3c:	e0bffd17 	ldw	r2,-12(fp)
  80fa40:	e0bff915 	stw	r2,-28(fp)
  80fa44:	e0bff917 	ldw	r2,-28(fp)
  80fa48:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80fa4c:	e0bffc17 	ldw	r2,-16(fp)
  80fa50:	e0bfff15 	stw	r2,-4(fp)
  80fa54:	e0bfff17 	ldw	r2,-4(fp)
} 
  80fa58:	e037883a 	mov	sp,fp
  80fa5c:	df000017 	ldw	fp,0(sp)
  80fa60:	dec00104 	addi	sp,sp,4
  80fa64:	f800283a 	ret

0080fa68 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80fa68:	defffd04 	addi	sp,sp,-12
  80fa6c:	dfc00215 	stw	ra,8(sp)
  80fa70:	df000115 	stw	fp,4(sp)
  80fa74:	df000104 	addi	fp,sp,4
  80fa78:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80fa7c:	e13fff17 	ldw	r4,-4(fp)
  80fa80:	0810d8c0 	call	810d8c <alt_busy_sleep>
}
  80fa84:	e037883a 	mov	sp,fp
  80fa88:	dfc00117 	ldw	ra,4(sp)
  80fa8c:	df000017 	ldw	fp,0(sp)
  80fa90:	dec00204 	addi	sp,sp,8
  80fa94:	f800283a 	ret

0080fa98 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80fa98:	defff704 	addi	sp,sp,-36
  80fa9c:	dfc00815 	stw	ra,32(sp)
  80faa0:	df000715 	stw	fp,28(sp)
  80faa4:	df000704 	addi	fp,sp,28
  80faa8:	e13ffb15 	stw	r4,-20(fp)
  80faac:	e17ffc15 	stw	r5,-16(fp)
  80fab0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fab4:	e0bffb17 	ldw	r2,-20(fp)
  80fab8:	1004803a 	cmplt	r2,r2,zero
  80fabc:	1000091e 	bne	r2,zero,80fae4 <write+0x4c>
  80fac0:	e13ffb17 	ldw	r4,-20(fp)
  80fac4:	01400304 	movi	r5,12
  80fac8:	080eb4c0 	call	80eb4c <__mulsi3>
  80facc:	1007883a 	mov	r3,r2
  80fad0:	00802074 	movhi	r2,129
  80fad4:	108d1a04 	addi	r2,r2,13416
  80fad8:	1887883a 	add	r3,r3,r2
  80fadc:	e0ffff15 	stw	r3,-4(fp)
  80fae0:	00000106 	br	80fae8 <write+0x50>
  80fae4:	e03fff15 	stw	zero,-4(fp)
  80fae8:	e0bfff17 	ldw	r2,-4(fp)
  80faec:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80faf0:	e0bffa17 	ldw	r2,-24(fp)
  80faf4:	1005003a 	cmpeq	r2,r2,zero
  80faf8:	1000241e 	bne	r2,zero,80fb8c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80fafc:	e0bffa17 	ldw	r2,-24(fp)
  80fb00:	10800217 	ldw	r2,8(r2)
  80fb04:	108000cc 	andi	r2,r2,3
  80fb08:	1005003a 	cmpeq	r2,r2,zero
  80fb0c:	10001a1e 	bne	r2,zero,80fb78 <write+0xe0>
  80fb10:	e0bffa17 	ldw	r2,-24(fp)
  80fb14:	10800017 	ldw	r2,0(r2)
  80fb18:	10800617 	ldw	r2,24(r2)
  80fb1c:	1005003a 	cmpeq	r2,r2,zero
  80fb20:	1000151e 	bne	r2,zero,80fb78 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80fb24:	e0bffa17 	ldw	r2,-24(fp)
  80fb28:	10800017 	ldw	r2,0(r2)
  80fb2c:	10800617 	ldw	r2,24(r2)
  80fb30:	e17ffc17 	ldw	r5,-16(fp)
  80fb34:	e1bffd17 	ldw	r6,-12(fp)
  80fb38:	e13ffa17 	ldw	r4,-24(fp)
  80fb3c:	103ee83a 	callr	r2
  80fb40:	e0bff915 	stw	r2,-28(fp)
  80fb44:	e0bff917 	ldw	r2,-28(fp)
  80fb48:	1004403a 	cmpge	r2,r2,zero
  80fb4c:	1000071e 	bne	r2,zero,80fb6c <write+0xd4>
      {
        ALT_ERRNO = -rval;
  80fb50:	080fbbc0 	call	80fbbc <alt_get_errno>
  80fb54:	e0fff917 	ldw	r3,-28(fp)
  80fb58:	00c7c83a 	sub	r3,zero,r3
  80fb5c:	10c00015 	stw	r3,0(r2)
        return -1;
  80fb60:	00bfffc4 	movi	r2,-1
  80fb64:	e0bffe15 	stw	r2,-8(fp)
  80fb68:	00000e06 	br	80fba4 <write+0x10c>
      }
      return rval;
  80fb6c:	e0bff917 	ldw	r2,-28(fp)
  80fb70:	e0bffe15 	stw	r2,-8(fp)
  80fb74:	00000b06 	br	80fba4 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80fb78:	080fbbc0 	call	80fbbc <alt_get_errno>
  80fb7c:	1007883a 	mov	r3,r2
  80fb80:	00800344 	movi	r2,13
  80fb84:	18800015 	stw	r2,0(r3)
  80fb88:	00000406 	br	80fb9c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80fb8c:	080fbbc0 	call	80fbbc <alt_get_errno>
  80fb90:	1007883a 	mov	r3,r2
  80fb94:	00801444 	movi	r2,81
  80fb98:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80fb9c:	00bfffc4 	movi	r2,-1
  80fba0:	e0bffe15 	stw	r2,-8(fp)
  80fba4:	e0bffe17 	ldw	r2,-8(fp)
}
  80fba8:	e037883a 	mov	sp,fp
  80fbac:	dfc00117 	ldw	ra,4(sp)
  80fbb0:	df000017 	ldw	fp,0(sp)
  80fbb4:	dec00204 	addi	sp,sp,8
  80fbb8:	f800283a 	ret

0080fbbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fbbc:	defffd04 	addi	sp,sp,-12
  80fbc0:	dfc00215 	stw	ra,8(sp)
  80fbc4:	df000115 	stw	fp,4(sp)
  80fbc8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80fbcc:	00802074 	movhi	r2,129
  80fbd0:	1091bb04 	addi	r2,r2,18156
  80fbd4:	10800017 	ldw	r2,0(r2)
  80fbd8:	1005003a 	cmpeq	r2,r2,zero
  80fbdc:	1000061e 	bne	r2,zero,80fbf8 <alt_get_errno+0x3c>
  80fbe0:	00802074 	movhi	r2,129
  80fbe4:	1091bb04 	addi	r2,r2,18156
  80fbe8:	10800017 	ldw	r2,0(r2)
  80fbec:	103ee83a 	callr	r2
  80fbf0:	e0bfff15 	stw	r2,-4(fp)
  80fbf4:	00000306 	br	80fc04 <alt_get_errno+0x48>
  80fbf8:	00802074 	movhi	r2,129
  80fbfc:	1091d004 	addi	r2,r2,18240
  80fc00:	e0bfff15 	stw	r2,-4(fp)
  80fc04:	e0bfff17 	ldw	r2,-4(fp)
}
  80fc08:	e037883a 	mov	sp,fp
  80fc0c:	dfc00117 	ldw	ra,4(sp)
  80fc10:	df000017 	ldw	fp,0(sp)
  80fc14:	dec00204 	addi	sp,sp,8
  80fc18:	f800283a 	ret

0080fc1c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80fc1c:	defffd04 	addi	sp,sp,-12
  80fc20:	dfc00215 	stw	ra,8(sp)
  80fc24:	df000115 	stw	fp,4(sp)
  80fc28:	df000104 	addi	fp,sp,4
  80fc2c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  80fc30:	08117300 	call	811730 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80fc34:	00800044 	movi	r2,1
  80fc38:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80fc3c:	e037883a 	mov	sp,fp
  80fc40:	dfc00117 	ldw	ra,4(sp)
  80fc44:	df000017 	ldw	fp,0(sp)
  80fc48:	dec00204 	addi	sp,sp,8
  80fc4c:	f800283a 	ret

0080fc50 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80fc50:	defffe04 	addi	sp,sp,-8
  80fc54:	dfc00115 	stw	ra,4(sp)
  80fc58:	df000015 	stw	fp,0(sp)
  80fc5c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80fc60:	01006474 	movhi	r4,401
  80fc64:	21240004 	addi	r4,r4,-28672
  80fc68:	000b883a 	mov	r5,zero
  80fc6c:	000d883a 	mov	r6,zero
  80fc70:	01c0fa04 	movi	r7,1000
  80fc74:	08108180 	call	810818 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80fc78:	01002074 	movhi	r4,129
  80fc7c:	210d8404 	addi	r4,r4,13840
  80fc80:	000b883a 	mov	r5,zero
  80fc84:	01800044 	movi	r6,1
  80fc88:	080fe440 	call	80fe44 <altera_avalon_jtag_uart_init>
  80fc8c:	01002074 	movhi	r4,129
  80fc90:	210d7a04 	addi	r4,r4,13800
  80fc94:	080fcc40 	call	80fcc4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
  80fc98:	01002074 	movhi	r4,129
  80fc9c:	21119204 	addi	r4,r4,17992
  80fca0:	080fcc40 	call	80fcc4 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB_0, usb_0);
  80fca4:	01002074 	movhi	r4,129
  80fca8:	21119d04 	addi	r4,r4,18036
  80fcac:	080fcc40 	call	80fcc4 <alt_dev_reg>
}
  80fcb0:	e037883a 	mov	sp,fp
  80fcb4:	dfc00117 	ldw	ra,4(sp)
  80fcb8:	df000017 	ldw	fp,0(sp)
  80fcbc:	dec00204 	addi	sp,sp,8
  80fcc0:	f800283a 	ret

0080fcc4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80fcc4:	defffd04 	addi	sp,sp,-12
  80fcc8:	dfc00215 	stw	ra,8(sp)
  80fccc:	df000115 	stw	fp,4(sp)
  80fcd0:	df000104 	addi	fp,sp,4
  80fcd4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80fcd8:	e13fff17 	ldw	r4,-4(fp)
  80fcdc:	01402074 	movhi	r5,129
  80fce0:	2951b804 	addi	r5,r5,18144
  80fce4:	0810ee80 	call	810ee8 <alt_dev_llist_insert>
}
  80fce8:	e037883a 	mov	sp,fp
  80fcec:	dfc00117 	ldw	ra,4(sp)
  80fcf0:	df000017 	ldw	fp,0(sp)
  80fcf4:	dec00204 	addi	sp,sp,8
  80fcf8:	f800283a 	ret

0080fcfc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80fcfc:	defffa04 	addi	sp,sp,-24
  80fd00:	dfc00515 	stw	ra,20(sp)
  80fd04:	df000415 	stw	fp,16(sp)
  80fd08:	df000404 	addi	fp,sp,16
  80fd0c:	e13ffd15 	stw	r4,-12(fp)
  80fd10:	e17ffe15 	stw	r5,-8(fp)
  80fd14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80fd18:	e0bffd17 	ldw	r2,-12(fp)
  80fd1c:	10800017 	ldw	r2,0(r2)
  80fd20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80fd24:	e0bffc17 	ldw	r2,-16(fp)
  80fd28:	11000a04 	addi	r4,r2,40
  80fd2c:	e0bffd17 	ldw	r2,-12(fp)
  80fd30:	11c00217 	ldw	r7,8(r2)
  80fd34:	e17ffe17 	ldw	r5,-8(fp)
  80fd38:	e1bfff17 	ldw	r6,-4(fp)
  80fd3c:	08103400 	call	810340 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80fd40:	e037883a 	mov	sp,fp
  80fd44:	dfc00117 	ldw	ra,4(sp)
  80fd48:	df000017 	ldw	fp,0(sp)
  80fd4c:	dec00204 	addi	sp,sp,8
  80fd50:	f800283a 	ret

0080fd54 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80fd54:	defffa04 	addi	sp,sp,-24
  80fd58:	dfc00515 	stw	ra,20(sp)
  80fd5c:	df000415 	stw	fp,16(sp)
  80fd60:	df000404 	addi	fp,sp,16
  80fd64:	e13ffd15 	stw	r4,-12(fp)
  80fd68:	e17ffe15 	stw	r5,-8(fp)
  80fd6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80fd70:	e0bffd17 	ldw	r2,-12(fp)
  80fd74:	10800017 	ldw	r2,0(r2)
  80fd78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80fd7c:	e0bffc17 	ldw	r2,-16(fp)
  80fd80:	11000a04 	addi	r4,r2,40
  80fd84:	e0bffd17 	ldw	r2,-12(fp)
  80fd88:	11c00217 	ldw	r7,8(r2)
  80fd8c:	e17ffe17 	ldw	r5,-8(fp)
  80fd90:	e1bfff17 	ldw	r6,-4(fp)
  80fd94:	08105640 	call	810564 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80fd98:	e037883a 	mov	sp,fp
  80fd9c:	dfc00117 	ldw	ra,4(sp)
  80fda0:	df000017 	ldw	fp,0(sp)
  80fda4:	dec00204 	addi	sp,sp,8
  80fda8:	f800283a 	ret

0080fdac <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80fdac:	defffc04 	addi	sp,sp,-16
  80fdb0:	dfc00315 	stw	ra,12(sp)
  80fdb4:	df000215 	stw	fp,8(sp)
  80fdb8:	df000204 	addi	fp,sp,8
  80fdbc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80fdc0:	e0bfff17 	ldw	r2,-4(fp)
  80fdc4:	10800017 	ldw	r2,0(r2)
  80fdc8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80fdcc:	e0bffe17 	ldw	r2,-8(fp)
  80fdd0:	11000a04 	addi	r4,r2,40
  80fdd4:	e0bfff17 	ldw	r2,-4(fp)
  80fdd8:	11400217 	ldw	r5,8(r2)
  80fddc:	08101d80 	call	8101d8 <altera_avalon_jtag_uart_close>
}
  80fde0:	e037883a 	mov	sp,fp
  80fde4:	dfc00117 	ldw	ra,4(sp)
  80fde8:	df000017 	ldw	fp,0(sp)
  80fdec:	dec00204 	addi	sp,sp,8
  80fdf0:	f800283a 	ret

0080fdf4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80fdf4:	defffa04 	addi	sp,sp,-24
  80fdf8:	dfc00515 	stw	ra,20(sp)
  80fdfc:	df000415 	stw	fp,16(sp)
  80fe00:	df000404 	addi	fp,sp,16
  80fe04:	e13ffd15 	stw	r4,-12(fp)
  80fe08:	e17ffe15 	stw	r5,-8(fp)
  80fe0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80fe10:	e0bffd17 	ldw	r2,-12(fp)
  80fe14:	10800017 	ldw	r2,0(r2)
  80fe18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80fe1c:	e0bffc17 	ldw	r2,-16(fp)
  80fe20:	11000a04 	addi	r4,r2,40
  80fe24:	e17ffe17 	ldw	r5,-8(fp)
  80fe28:	e1bfff17 	ldw	r6,-4(fp)
  80fe2c:	081024c0 	call	81024c <altera_avalon_jtag_uart_ioctl>
}
  80fe30:	e037883a 	mov	sp,fp
  80fe34:	dfc00117 	ldw	ra,4(sp)
  80fe38:	df000017 	ldw	fp,0(sp)
  80fe3c:	dec00204 	addi	sp,sp,8
  80fe40:	f800283a 	ret

0080fe44 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80fe44:	defffb04 	addi	sp,sp,-20
  80fe48:	dfc00415 	stw	ra,16(sp)
  80fe4c:	df000315 	stw	fp,12(sp)
  80fe50:	df000304 	addi	fp,sp,12
  80fe54:	e13ffd15 	stw	r4,-12(fp)
  80fe58:	e17ffe15 	stw	r5,-8(fp)
  80fe5c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80fe60:	e0fffd17 	ldw	r3,-12(fp)
  80fe64:	00800044 	movi	r2,1
  80fe68:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80fe6c:	e0bffd17 	ldw	r2,-12(fp)
  80fe70:	10800017 	ldw	r2,0(r2)
  80fe74:	11000104 	addi	r4,r2,4
  80fe78:	e0bffd17 	ldw	r2,-12(fp)
  80fe7c:	10800817 	ldw	r2,32(r2)
  80fe80:	1007883a 	mov	r3,r2
  80fe84:	2005883a 	mov	r2,r4
  80fe88:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  80fe8c:	e13fff17 	ldw	r4,-4(fp)
  80fe90:	e17ffd17 	ldw	r5,-12(fp)
  80fe94:	01802074 	movhi	r6,129
  80fe98:	31bfbf04 	addi	r6,r6,-260
  80fe9c:	080f0340 	call	80f034 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80fea0:	e0bffd17 	ldw	r2,-12(fp)
  80fea4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80fea8:	e0bffd17 	ldw	r2,-12(fp)
  80feac:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80feb0:	00802074 	movhi	r2,129
  80feb4:	1091d504 	addi	r2,r2,18260
  80feb8:	10800017 	ldw	r2,0(r2)
  80febc:	100b883a 	mov	r5,r2
  80fec0:	01802074 	movhi	r6,129
  80fec4:	31804a04 	addi	r6,r6,296
  80fec8:	e1fffd17 	ldw	r7,-12(fp)
  80fecc:	0810c380 	call	810c38 <alt_alarm_start>
  80fed0:	1004403a 	cmpge	r2,r2,zero
  80fed4:	1000041e 	bne	r2,zero,80fee8 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80fed8:	e0fffd17 	ldw	r3,-12(fp)
  80fedc:	00a00034 	movhi	r2,32768
  80fee0:	10bfffc4 	addi	r2,r2,-1
  80fee4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80fee8:	e037883a 	mov	sp,fp
  80feec:	dfc00117 	ldw	ra,4(sp)
  80fef0:	df000017 	ldw	fp,0(sp)
  80fef4:	dec00204 	addi	sp,sp,8
  80fef8:	f800283a 	ret

0080fefc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80fefc:	defff704 	addi	sp,sp,-36
  80ff00:	df000815 	stw	fp,32(sp)
  80ff04:	df000804 	addi	fp,sp,32
  80ff08:	e13ffe15 	stw	r4,-8(fp)
  80ff0c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80ff10:	e0bffe17 	ldw	r2,-8(fp)
  80ff14:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  80ff18:	e0bffd17 	ldw	r2,-12(fp)
  80ff1c:	10800017 	ldw	r2,0(r2)
  80ff20:	e0bffc15 	stw	r2,-16(fp)
  80ff24:	00000006 	br	80ff28 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ff28:	e0bffc17 	ldw	r2,-16(fp)
  80ff2c:	10800104 	addi	r2,r2,4
  80ff30:	10800037 	ldwio	r2,0(r2)
  80ff34:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80ff38:	e0bffb17 	ldw	r2,-20(fp)
  80ff3c:	1080c00c 	andi	r2,r2,768
  80ff40:	1005003a 	cmpeq	r2,r2,zero
  80ff44:	1000741e 	bne	r2,zero,810118 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80ff48:	e0bffb17 	ldw	r2,-20(fp)
  80ff4c:	1080400c 	andi	r2,r2,256
  80ff50:	1005003a 	cmpeq	r2,r2,zero
  80ff54:	1000351e 	bne	r2,zero,81002c <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80ff58:	00800074 	movhi	r2,1
  80ff5c:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ff60:	e0bffd17 	ldw	r2,-12(fp)
  80ff64:	10800a17 	ldw	r2,40(r2)
  80ff68:	10800044 	addi	r2,r2,1
  80ff6c:	1081ffcc 	andi	r2,r2,2047
  80ff70:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  80ff74:	e0bffd17 	ldw	r2,-12(fp)
  80ff78:	10c00b17 	ldw	r3,44(r2)
  80ff7c:	e0bff917 	ldw	r2,-28(fp)
  80ff80:	18801626 	beq	r3,r2,80ffdc <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80ff84:	e0bffc17 	ldw	r2,-16(fp)
  80ff88:	10800037 	ldwio	r2,0(r2)
  80ff8c:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80ff90:	e0bffa17 	ldw	r2,-24(fp)
  80ff94:	10a0000c 	andi	r2,r2,32768
  80ff98:	1005003a 	cmpeq	r2,r2,zero
  80ff9c:	10000f1e 	bne	r2,zero,80ffdc <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80ffa0:	e0bffd17 	ldw	r2,-12(fp)
  80ffa4:	10c00a17 	ldw	r3,40(r2)
  80ffa8:	e0bffa17 	ldw	r2,-24(fp)
  80ffac:	1009883a 	mov	r4,r2
  80ffb0:	e0bffd17 	ldw	r2,-12(fp)
  80ffb4:	1885883a 	add	r2,r3,r2
  80ffb8:	10800e04 	addi	r2,r2,56
  80ffbc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ffc0:	e0bffd17 	ldw	r2,-12(fp)
  80ffc4:	10800a17 	ldw	r2,40(r2)
  80ffc8:	10800044 	addi	r2,r2,1
  80ffcc:	10c1ffcc 	andi	r3,r2,2047
  80ffd0:	e0bffd17 	ldw	r2,-12(fp)
  80ffd4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80ffd8:	003fe106 	br	80ff60 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80ffdc:	e0bffa17 	ldw	r2,-24(fp)
  80ffe0:	10bfffec 	andhi	r2,r2,65535
  80ffe4:	1005003a 	cmpeq	r2,r2,zero
  80ffe8:	1000101e 	bne	r2,zero,81002c <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ffec:	e0bffd17 	ldw	r2,-12(fp)
  80fff0:	10c00817 	ldw	r3,32(r2)
  80fff4:	00bfff84 	movi	r2,-2
  80fff8:	1886703a 	and	r3,r3,r2
  80fffc:	e0bffd17 	ldw	r2,-12(fp)
  810000:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  810004:	e0bffc17 	ldw	r2,-16(fp)
  810008:	11000104 	addi	r4,r2,4
  81000c:	e0bffd17 	ldw	r2,-12(fp)
  810010:	10800817 	ldw	r2,32(r2)
  810014:	1007883a 	mov	r3,r2
  810018:	2005883a 	mov	r2,r4
  81001c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810020:	e0bffc17 	ldw	r2,-16(fp)
  810024:	10800104 	addi	r2,r2,4
  810028:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  81002c:	e0bffb17 	ldw	r2,-20(fp)
  810030:	1080800c 	andi	r2,r2,512
  810034:	1005003a 	cmpeq	r2,r2,zero
  810038:	103fbb1e 	bne	r2,zero,80ff28 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  81003c:	e0bffb17 	ldw	r2,-20(fp)
  810040:	10bfffec 	andhi	r2,r2,65535
  810044:	1004d43a 	srli	r2,r2,16
  810048:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  81004c:	00001506 	br	8100a4 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  810050:	e13ffc17 	ldw	r4,-16(fp)
  810054:	e0bffd17 	ldw	r2,-12(fp)
  810058:	10c00d17 	ldw	r3,52(r2)
  81005c:	e0bffd17 	ldw	r2,-12(fp)
  810060:	1885883a 	add	r2,r3,r2
  810064:	10820e04 	addi	r2,r2,2104
  810068:	10800003 	ldbu	r2,0(r2)
  81006c:	10c03fcc 	andi	r3,r2,255
  810070:	18c0201c 	xori	r3,r3,128
  810074:	18ffe004 	addi	r3,r3,-128
  810078:	2005883a 	mov	r2,r4
  81007c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810080:	e0bffd17 	ldw	r2,-12(fp)
  810084:	10800d17 	ldw	r2,52(r2)
  810088:	10800044 	addi	r2,r2,1
  81008c:	10c1ffcc 	andi	r3,r2,2047
  810090:	e0bffd17 	ldw	r2,-12(fp)
  810094:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  810098:	e0bff817 	ldw	r2,-32(fp)
  81009c:	10bfffc4 	addi	r2,r2,-1
  8100a0:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8100a4:	e0bff817 	ldw	r2,-32(fp)
  8100a8:	1005003a 	cmpeq	r2,r2,zero
  8100ac:	1000051e 	bne	r2,zero,8100c4 <altera_avalon_jtag_uart_irq+0x1c8>
  8100b0:	e0bffd17 	ldw	r2,-12(fp)
  8100b4:	10c00d17 	ldw	r3,52(r2)
  8100b8:	e0bffd17 	ldw	r2,-12(fp)
  8100bc:	10800c17 	ldw	r2,48(r2)
  8100c0:	18bfe31e 	bne	r3,r2,810050 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8100c4:	e0bff817 	ldw	r2,-32(fp)
  8100c8:	1005003a 	cmpeq	r2,r2,zero
  8100cc:	103f961e 	bne	r2,zero,80ff28 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8100d0:	e0bffd17 	ldw	r2,-12(fp)
  8100d4:	10c00817 	ldw	r3,32(r2)
  8100d8:	00bfff44 	movi	r2,-3
  8100dc:	1886703a 	and	r3,r3,r2
  8100e0:	e0bffd17 	ldw	r2,-12(fp)
  8100e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8100e8:	e0bffd17 	ldw	r2,-12(fp)
  8100ec:	10800017 	ldw	r2,0(r2)
  8100f0:	11000104 	addi	r4,r2,4
  8100f4:	e0bffd17 	ldw	r2,-12(fp)
  8100f8:	10800817 	ldw	r2,32(r2)
  8100fc:	1007883a 	mov	r3,r2
  810100:	2005883a 	mov	r2,r4
  810104:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810108:	e0bffc17 	ldw	r2,-16(fp)
  81010c:	10800104 	addi	r2,r2,4
  810110:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  810114:	003f8406 	br	80ff28 <altera_avalon_jtag_uart_irq+0x2c>
}
  810118:	e037883a 	mov	sp,fp
  81011c:	df000017 	ldw	fp,0(sp)
  810120:	dec00104 	addi	sp,sp,4
  810124:	f800283a 	ret

00810128 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  810128:	defffc04 	addi	sp,sp,-16
  81012c:	df000315 	stw	fp,12(sp)
  810130:	df000304 	addi	fp,sp,12
  810134:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  810138:	e0bfff17 	ldw	r2,-4(fp)
  81013c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  810140:	e0bffe17 	ldw	r2,-8(fp)
  810144:	10800017 	ldw	r2,0(r2)
  810148:	10800104 	addi	r2,r2,4
  81014c:	10800037 	ldwio	r2,0(r2)
  810150:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  810154:	e0bffd17 	ldw	r2,-12(fp)
  810158:	1081000c 	andi	r2,r2,1024
  81015c:	1005003a 	cmpeq	r2,r2,zero
  810160:	10000c1e 	bne	r2,zero,810194 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  810164:	e0bffe17 	ldw	r2,-8(fp)
  810168:	10800017 	ldw	r2,0(r2)
  81016c:	11000104 	addi	r4,r2,4
  810170:	e0bffe17 	ldw	r2,-8(fp)
  810174:	10800817 	ldw	r2,32(r2)
  810178:	10810014 	ori	r2,r2,1024
  81017c:	1007883a 	mov	r3,r2
  810180:	2005883a 	mov	r2,r4
  810184:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  810188:	e0bffe17 	ldw	r2,-8(fp)
  81018c:	10000915 	stw	zero,36(r2)
  810190:	00000a06 	br	8101bc <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  810194:	e0bffe17 	ldw	r2,-8(fp)
  810198:	10c00917 	ldw	r3,36(r2)
  81019c:	00a00034 	movhi	r2,32768
  8101a0:	10bfff04 	addi	r2,r2,-4
  8101a4:	10c00536 	bltu	r2,r3,8101bc <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  8101a8:	e0bffe17 	ldw	r2,-8(fp)
  8101ac:	10800917 	ldw	r2,36(r2)
  8101b0:	10c00044 	addi	r3,r2,1
  8101b4:	e0bffe17 	ldw	r2,-8(fp)
  8101b8:	10c00915 	stw	r3,36(r2)
  8101bc:	00802074 	movhi	r2,129
  8101c0:	1091d504 	addi	r2,r2,18260
  8101c4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  8101c8:	e037883a 	mov	sp,fp
  8101cc:	df000017 	ldw	fp,0(sp)
  8101d0:	dec00104 	addi	sp,sp,4
  8101d4:	f800283a 	ret

008101d8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  8101d8:	defffc04 	addi	sp,sp,-16
  8101dc:	df000315 	stw	fp,12(sp)
  8101e0:	df000304 	addi	fp,sp,12
  8101e4:	e13ffd15 	stw	r4,-12(fp)
  8101e8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8101ec:	00000706 	br	81020c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  8101f0:	e0bffe17 	ldw	r2,-8(fp)
  8101f4:	1090000c 	andi	r2,r2,16384
  8101f8:	1005003a 	cmpeq	r2,r2,zero
  8101fc:	1000031e 	bne	r2,zero,81020c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  810200:	00bffd44 	movi	r2,-11
  810204:	e0bfff15 	stw	r2,-4(fp)
  810208:	00000b06 	br	810238 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81020c:	e0bffd17 	ldw	r2,-12(fp)
  810210:	10c00d17 	ldw	r3,52(r2)
  810214:	e0bffd17 	ldw	r2,-12(fp)
  810218:	10800c17 	ldw	r2,48(r2)
  81021c:	18800526 	beq	r3,r2,810234 <altera_avalon_jtag_uart_close+0x5c>
  810220:	e0bffd17 	ldw	r2,-12(fp)
  810224:	10c00917 	ldw	r3,36(r2)
  810228:	e0bffd17 	ldw	r2,-12(fp)
  81022c:	10800117 	ldw	r2,4(r2)
  810230:	18bfef36 	bltu	r3,r2,8101f0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  810234:	e03fff15 	stw	zero,-4(fp)
  810238:	e0bfff17 	ldw	r2,-4(fp)
}
  81023c:	e037883a 	mov	sp,fp
  810240:	df000017 	ldw	fp,0(sp)
  810244:	dec00104 	addi	sp,sp,4
  810248:	f800283a 	ret

0081024c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  81024c:	defff804 	addi	sp,sp,-32
  810250:	df000715 	stw	fp,28(sp)
  810254:	df000704 	addi	fp,sp,28
  810258:	e13ffb15 	stw	r4,-20(fp)
  81025c:	e17ffc15 	stw	r5,-16(fp)
  810260:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  810264:	00bff9c4 	movi	r2,-25
  810268:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  81026c:	e0bffc17 	ldw	r2,-16(fp)
  810270:	e0bfff15 	stw	r2,-4(fp)
  810274:	e0ffff17 	ldw	r3,-4(fp)
  810278:	189a8060 	cmpeqi	r2,r3,27137
  81027c:	1000041e 	bne	r2,zero,810290 <altera_avalon_jtag_uart_ioctl+0x44>
  810280:	e0ffff17 	ldw	r3,-4(fp)
  810284:	189a80a0 	cmpeqi	r2,r3,27138
  810288:	10001b1e 	bne	r2,zero,8102f8 <altera_avalon_jtag_uart_ioctl+0xac>
  81028c:	00002706 	br	81032c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  810290:	e0bffb17 	ldw	r2,-20(fp)
  810294:	10c00117 	ldw	r3,4(r2)
  810298:	00a00034 	movhi	r2,32768
  81029c:	10bfffc4 	addi	r2,r2,-1
  8102a0:	18802226 	beq	r3,r2,81032c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  8102a4:	e0bffd17 	ldw	r2,-12(fp)
  8102a8:	10800017 	ldw	r2,0(r2)
  8102ac:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  8102b0:	e0bff917 	ldw	r2,-28(fp)
  8102b4:	10800090 	cmplti	r2,r2,2
  8102b8:	1000071e 	bne	r2,zero,8102d8 <altera_avalon_jtag_uart_ioctl+0x8c>
  8102bc:	e0fff917 	ldw	r3,-28(fp)
  8102c0:	00a00034 	movhi	r2,32768
  8102c4:	10bfffc4 	addi	r2,r2,-1
  8102c8:	18800326 	beq	r3,r2,8102d8 <altera_avalon_jtag_uart_ioctl+0x8c>
  8102cc:	e0bff917 	ldw	r2,-28(fp)
  8102d0:	e0bffe15 	stw	r2,-8(fp)
  8102d4:	00000306 	br	8102e4 <altera_avalon_jtag_uart_ioctl+0x98>
  8102d8:	00e00034 	movhi	r3,32768
  8102dc:	18ffff84 	addi	r3,r3,-2
  8102e0:	e0fffe15 	stw	r3,-8(fp)
  8102e4:	e0bffb17 	ldw	r2,-20(fp)
  8102e8:	e0fffe17 	ldw	r3,-8(fp)
  8102ec:	10c00115 	stw	r3,4(r2)
      rc = 0;
  8102f0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  8102f4:	00000d06 	br	81032c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  8102f8:	e0bffb17 	ldw	r2,-20(fp)
  8102fc:	10c00117 	ldw	r3,4(r2)
  810300:	00a00034 	movhi	r2,32768
  810304:	10bfffc4 	addi	r2,r2,-1
  810308:	18800826 	beq	r3,r2,81032c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  81030c:	e13ffd17 	ldw	r4,-12(fp)
  810310:	e0bffb17 	ldw	r2,-20(fp)
  810314:	10c00917 	ldw	r3,36(r2)
  810318:	e0bffb17 	ldw	r2,-20(fp)
  81031c:	10800117 	ldw	r2,4(r2)
  810320:	1885803a 	cmpltu	r2,r3,r2
  810324:	20800015 	stw	r2,0(r4)
      rc = 0;
  810328:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  81032c:	e0bffa17 	ldw	r2,-24(fp)
}
  810330:	e037883a 	mov	sp,fp
  810334:	df000017 	ldw	fp,0(sp)
  810338:	dec00104 	addi	sp,sp,4
  81033c:	f800283a 	ret

00810340 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  810340:	defff204 	addi	sp,sp,-56
  810344:	dfc00d15 	stw	ra,52(sp)
  810348:	df000c15 	stw	fp,48(sp)
  81034c:	df000c04 	addi	fp,sp,48
  810350:	e13ffb15 	stw	r4,-20(fp)
  810354:	e17ffc15 	stw	r5,-16(fp)
  810358:	e1bffd15 	stw	r6,-12(fp)
  81035c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  810360:	e0bffc17 	ldw	r2,-16(fp)
  810364:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  810368:	00004806 	br	81048c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  81036c:	e0bffb17 	ldw	r2,-20(fp)
  810370:	10800a17 	ldw	r2,40(r2)
  810374:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  810378:	e0bffb17 	ldw	r2,-20(fp)
  81037c:	10800b17 	ldw	r2,44(r2)
  810380:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  810384:	e0fff717 	ldw	r3,-36(fp)
  810388:	e0bff617 	ldw	r2,-40(fp)
  81038c:	18800536 	bltu	r3,r2,8103a4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  810390:	e0bff717 	ldw	r2,-36(fp)
  810394:	e0fff617 	ldw	r3,-40(fp)
  810398:	10c5c83a 	sub	r2,r2,r3
  81039c:	e0bff815 	stw	r2,-32(fp)
  8103a0:	00000406 	br	8103b4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8103a4:	00820004 	movi	r2,2048
  8103a8:	e0fff617 	ldw	r3,-40(fp)
  8103ac:	10c5c83a 	sub	r2,r2,r3
  8103b0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  8103b4:	e0bff817 	ldw	r2,-32(fp)
  8103b8:	1005003a 	cmpeq	r2,r2,zero
  8103bc:	10001f1e 	bne	r2,zero,81043c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  8103c0:	e0fffd17 	ldw	r3,-12(fp)
  8103c4:	e0bff817 	ldw	r2,-32(fp)
  8103c8:	1880022e 	bgeu	r3,r2,8103d4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  8103cc:	e0bffd17 	ldw	r2,-12(fp)
  8103d0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  8103d4:	e0bffb17 	ldw	r2,-20(fp)
  8103d8:	10c00e04 	addi	r3,r2,56
  8103dc:	e0bff617 	ldw	r2,-40(fp)
  8103e0:	1887883a 	add	r3,r3,r2
  8103e4:	e0bffa17 	ldw	r2,-24(fp)
  8103e8:	1009883a 	mov	r4,r2
  8103ec:	180b883a 	mov	r5,r3
  8103f0:	e1bff817 	ldw	r6,-32(fp)
  8103f4:	080b0c80 	call	80b0c8 <memcpy>
      ptr   += n;
  8103f8:	e0fff817 	ldw	r3,-32(fp)
  8103fc:	e0bffa17 	ldw	r2,-24(fp)
  810400:	10c5883a 	add	r2,r2,r3
  810404:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  810408:	e0fffd17 	ldw	r3,-12(fp)
  81040c:	e0bff817 	ldw	r2,-32(fp)
  810410:	1885c83a 	sub	r2,r3,r2
  810414:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810418:	e0fff617 	ldw	r3,-40(fp)
  81041c:	e0bff817 	ldw	r2,-32(fp)
  810420:	1885883a 	add	r2,r3,r2
  810424:	10c1ffcc 	andi	r3,r2,2047
  810428:	e0bffb17 	ldw	r2,-20(fp)
  81042c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  810430:	e0bffd17 	ldw	r2,-12(fp)
  810434:	10800048 	cmpgei	r2,r2,1
  810438:	103fcc1e 	bne	r2,zero,81036c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  81043c:	e0fffa17 	ldw	r3,-24(fp)
  810440:	e0bffc17 	ldw	r2,-16(fp)
  810444:	1880141e 	bne	r3,r2,810498 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  810448:	e0bffe17 	ldw	r2,-8(fp)
  81044c:	1090000c 	andi	r2,r2,16384
  810450:	1004c03a 	cmpne	r2,r2,zero
  810454:	1000101e 	bne	r2,zero,810498 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  810458:	e0bffb17 	ldw	r2,-20(fp)
  81045c:	10c00a17 	ldw	r3,40(r2)
  810460:	e0bff717 	ldw	r2,-36(fp)
  810464:	1880051e 	bne	r3,r2,81047c <altera_avalon_jtag_uart_read+0x13c>
  810468:	e0bffb17 	ldw	r2,-20(fp)
  81046c:	10c00917 	ldw	r3,36(r2)
  810470:	e0bffb17 	ldw	r2,-20(fp)
  810474:	10800117 	ldw	r2,4(r2)
  810478:	18bff736 	bltu	r3,r2,810458 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  81047c:	e0bffb17 	ldw	r2,-20(fp)
  810480:	10c00a17 	ldw	r3,40(r2)
  810484:	e0bff717 	ldw	r2,-36(fp)
  810488:	18800326 	beq	r3,r2,810498 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  81048c:	e0bffd17 	ldw	r2,-12(fp)
  810490:	10800048 	cmpgei	r2,r2,1
  810494:	103fb51e 	bne	r2,zero,81036c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  810498:	e0fffa17 	ldw	r3,-24(fp)
  81049c:	e0bffc17 	ldw	r2,-16(fp)
  8104a0:	18801926 	beq	r3,r2,810508 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8104a4:	0005303a 	rdctl	r2,status
  8104a8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8104ac:	e0fff517 	ldw	r3,-44(fp)
  8104b0:	00bfff84 	movi	r2,-2
  8104b4:	1884703a 	and	r2,r3,r2
  8104b8:	1001703a 	wrctl	status,r2
  
  return context;
  8104bc:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8104c0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8104c4:	e0bffb17 	ldw	r2,-20(fp)
  8104c8:	10800817 	ldw	r2,32(r2)
  8104cc:	10c00054 	ori	r3,r2,1
  8104d0:	e0bffb17 	ldw	r2,-20(fp)
  8104d4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8104d8:	e0bffb17 	ldw	r2,-20(fp)
  8104dc:	10800017 	ldw	r2,0(r2)
  8104e0:	11000104 	addi	r4,r2,4
  8104e4:	e0bffb17 	ldw	r2,-20(fp)
  8104e8:	10800817 	ldw	r2,32(r2)
  8104ec:	1007883a 	mov	r3,r2
  8104f0:	2005883a 	mov	r2,r4
  8104f4:	10c00035 	stwio	r3,0(r2)
  8104f8:	e0bff917 	ldw	r2,-28(fp)
  8104fc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810500:	e0bff417 	ldw	r2,-48(fp)
  810504:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  810508:	e0fffa17 	ldw	r3,-24(fp)
  81050c:	e0bffc17 	ldw	r2,-16(fp)
  810510:	18800526 	beq	r3,r2,810528 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  810514:	e0fffa17 	ldw	r3,-24(fp)
  810518:	e0bffc17 	ldw	r2,-16(fp)
  81051c:	1887c83a 	sub	r3,r3,r2
  810520:	e0ffff15 	stw	r3,-4(fp)
  810524:	00000906 	br	81054c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  810528:	e0bffe17 	ldw	r2,-8(fp)
  81052c:	1090000c 	andi	r2,r2,16384
  810530:	1005003a 	cmpeq	r2,r2,zero
  810534:	1000031e 	bne	r2,zero,810544 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  810538:	00bffd44 	movi	r2,-11
  81053c:	e0bfff15 	stw	r2,-4(fp)
  810540:	00000206 	br	81054c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  810544:	00bffec4 	movi	r2,-5
  810548:	e0bfff15 	stw	r2,-4(fp)
  81054c:	e0bfff17 	ldw	r2,-4(fp)
}
  810550:	e037883a 	mov	sp,fp
  810554:	dfc00117 	ldw	ra,4(sp)
  810558:	df000017 	ldw	fp,0(sp)
  81055c:	dec00204 	addi	sp,sp,8
  810560:	f800283a 	ret

00810564 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  810564:	defff204 	addi	sp,sp,-56
  810568:	dfc00d15 	stw	ra,52(sp)
  81056c:	df000c15 	stw	fp,48(sp)
  810570:	df000c04 	addi	fp,sp,48
  810574:	e13ffb15 	stw	r4,-20(fp)
  810578:	e17ffc15 	stw	r5,-16(fp)
  81057c:	e1bffd15 	stw	r6,-12(fp)
  810580:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  810584:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  810588:	e0bffc17 	ldw	r2,-16(fp)
  81058c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  810590:	00003a06 	br	81067c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  810594:	e0bffb17 	ldw	r2,-20(fp)
  810598:	10800c17 	ldw	r2,48(r2)
  81059c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  8105a0:	e0bffb17 	ldw	r2,-20(fp)
  8105a4:	10800d17 	ldw	r2,52(r2)
  8105a8:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  8105ac:	e0fffa17 	ldw	r3,-24(fp)
  8105b0:	e0bff917 	ldw	r2,-28(fp)
  8105b4:	1880062e 	bgeu	r3,r2,8105d0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8105b8:	e0fff917 	ldw	r3,-28(fp)
  8105bc:	e0bffa17 	ldw	r2,-24(fp)
  8105c0:	1885c83a 	sub	r2,r3,r2
  8105c4:	10bfffc4 	addi	r2,r2,-1
  8105c8:	e0bff815 	stw	r2,-32(fp)
  8105cc:	00000c06 	br	810600 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  8105d0:	e0bff917 	ldw	r2,-28(fp)
  8105d4:	1005003a 	cmpeq	r2,r2,zero
  8105d8:	1000051e 	bne	r2,zero,8105f0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8105dc:	00820004 	movi	r2,2048
  8105e0:	e0fffa17 	ldw	r3,-24(fp)
  8105e4:	10c5c83a 	sub	r2,r2,r3
  8105e8:	e0bff815 	stw	r2,-32(fp)
  8105ec:	00000406 	br	810600 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8105f0:	0081ffc4 	movi	r2,2047
  8105f4:	e0fffa17 	ldw	r3,-24(fp)
  8105f8:	10c5c83a 	sub	r2,r2,r3
  8105fc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  810600:	e0bff817 	ldw	r2,-32(fp)
  810604:	1005003a 	cmpeq	r2,r2,zero
  810608:	10001f1e 	bne	r2,zero,810688 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  81060c:	e0fffd17 	ldw	r3,-12(fp)
  810610:	e0bff817 	ldw	r2,-32(fp)
  810614:	1880022e 	bgeu	r3,r2,810620 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  810618:	e0bffd17 	ldw	r2,-12(fp)
  81061c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  810620:	e0bffb17 	ldw	r2,-20(fp)
  810624:	10c20e04 	addi	r3,r2,2104
  810628:	e0bffa17 	ldw	r2,-24(fp)
  81062c:	1885883a 	add	r2,r3,r2
  810630:	e0fffc17 	ldw	r3,-16(fp)
  810634:	1009883a 	mov	r4,r2
  810638:	180b883a 	mov	r5,r3
  81063c:	e1bff817 	ldw	r6,-32(fp)
  810640:	080b0c80 	call	80b0c8 <memcpy>
      ptr   += n;
  810644:	e0fff817 	ldw	r3,-32(fp)
  810648:	e0bffc17 	ldw	r2,-16(fp)
  81064c:	10c5883a 	add	r2,r2,r3
  810650:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  810654:	e0fffd17 	ldw	r3,-12(fp)
  810658:	e0bff817 	ldw	r2,-32(fp)
  81065c:	1885c83a 	sub	r2,r3,r2
  810660:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810664:	e0fffa17 	ldw	r3,-24(fp)
  810668:	e0bff817 	ldw	r2,-32(fp)
  81066c:	1885883a 	add	r2,r3,r2
  810670:	10c1ffcc 	andi	r3,r2,2047
  810674:	e0bffb17 	ldw	r2,-20(fp)
  810678:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  81067c:	e0bffd17 	ldw	r2,-12(fp)
  810680:	10800048 	cmpgei	r2,r2,1
  810684:	103fc31e 	bne	r2,zero,810594 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810688:	0005303a 	rdctl	r2,status
  81068c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810690:	e0fff517 	ldw	r3,-44(fp)
  810694:	00bfff84 	movi	r2,-2
  810698:	1884703a 	and	r2,r3,r2
  81069c:	1001703a 	wrctl	status,r2
  
  return context;
  8106a0:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8106a4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8106a8:	e0bffb17 	ldw	r2,-20(fp)
  8106ac:	10800817 	ldw	r2,32(r2)
  8106b0:	10c00094 	ori	r3,r2,2
  8106b4:	e0bffb17 	ldw	r2,-20(fp)
  8106b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8106bc:	e0bffb17 	ldw	r2,-20(fp)
  8106c0:	10800017 	ldw	r2,0(r2)
  8106c4:	11000104 	addi	r4,r2,4
  8106c8:	e0bffb17 	ldw	r2,-20(fp)
  8106cc:	10800817 	ldw	r2,32(r2)
  8106d0:	1007883a 	mov	r3,r2
  8106d4:	2005883a 	mov	r2,r4
  8106d8:	10c00035 	stwio	r3,0(r2)
  8106dc:	e0bff717 	ldw	r2,-36(fp)
  8106e0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8106e4:	e0bff417 	ldw	r2,-48(fp)
  8106e8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8106ec:	e0bffd17 	ldw	r2,-12(fp)
  8106f0:	10800050 	cmplti	r2,r2,1
  8106f4:	1000111e 	bne	r2,zero,81073c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  8106f8:	e0bffe17 	ldw	r2,-8(fp)
  8106fc:	1090000c 	andi	r2,r2,16384
  810700:	1004c03a 	cmpne	r2,r2,zero
  810704:	1000101e 	bne	r2,zero,810748 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  810708:	e0bffb17 	ldw	r2,-20(fp)
  81070c:	10c00d17 	ldw	r3,52(r2)
  810710:	e0bff917 	ldw	r2,-28(fp)
  810714:	1880051e 	bne	r3,r2,81072c <altera_avalon_jtag_uart_write+0x1c8>
  810718:	e0bffb17 	ldw	r2,-20(fp)
  81071c:	10c00917 	ldw	r3,36(r2)
  810720:	e0bffb17 	ldw	r2,-20(fp)
  810724:	10800117 	ldw	r2,4(r2)
  810728:	18bff736 	bltu	r3,r2,810708 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  81072c:	e0bffb17 	ldw	r2,-20(fp)
  810730:	10c00d17 	ldw	r3,52(r2)
  810734:	e0bff917 	ldw	r2,-28(fp)
  810738:	18800326 	beq	r3,r2,810748 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  81073c:	e0bffd17 	ldw	r2,-12(fp)
  810740:	10800048 	cmpgei	r2,r2,1
  810744:	103fcd1e 	bne	r2,zero,81067c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  810748:	e0fffc17 	ldw	r3,-16(fp)
  81074c:	e0bff617 	ldw	r2,-40(fp)
  810750:	18800526 	beq	r3,r2,810768 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  810754:	e0fffc17 	ldw	r3,-16(fp)
  810758:	e0bff617 	ldw	r2,-40(fp)
  81075c:	1887c83a 	sub	r3,r3,r2
  810760:	e0ffff15 	stw	r3,-4(fp)
  810764:	00000906 	br	81078c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  810768:	e0bffe17 	ldw	r2,-8(fp)
  81076c:	1090000c 	andi	r2,r2,16384
  810770:	1005003a 	cmpeq	r2,r2,zero
  810774:	1000031e 	bne	r2,zero,810784 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  810778:	00bffd44 	movi	r2,-11
  81077c:	e0bfff15 	stw	r2,-4(fp)
  810780:	00000206 	br	81078c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  810784:	00bffec4 	movi	r2,-5
  810788:	e0bfff15 	stw	r2,-4(fp)
  81078c:	e0bfff17 	ldw	r2,-4(fp)
}
  810790:	e037883a 	mov	sp,fp
  810794:	dfc00117 	ldw	ra,4(sp)
  810798:	df000017 	ldw	fp,0(sp)
  81079c:	dec00204 	addi	sp,sp,8
  8107a0:	f800283a 	ret

008107a4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8107a4:	defff904 	addi	sp,sp,-28
  8107a8:	dfc00615 	stw	ra,24(sp)
  8107ac:	df000515 	stw	fp,20(sp)
  8107b0:	df000504 	addi	fp,sp,20
  8107b4:	e13ffe15 	stw	r4,-8(fp)
  8107b8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8107bc:	e0bffe17 	ldw	r2,-8(fp)
  8107c0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8107c4:	e0bffe17 	ldw	r2,-8(fp)
  8107c8:	10800104 	addi	r2,r2,4
  8107cc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8107d0:	0005303a 	rdctl	r2,status
  8107d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8107d8:	e0fffc17 	ldw	r3,-16(fp)
  8107dc:	00bfff84 	movi	r2,-2
  8107e0:	1884703a 	and	r2,r3,r2
  8107e4:	1001703a 	wrctl	status,r2
  
  return context;
  8107e8:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8107ec:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
  8107f0:	08116240 	call	811624 <alt_tick>
  8107f4:	e0bffd17 	ldw	r2,-12(fp)
  8107f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8107fc:	e0bffb17 	ldw	r2,-20(fp)
  810800:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  810804:	e037883a 	mov	sp,fp
  810808:	dfc00117 	ldw	ra,4(sp)
  81080c:	df000017 	ldw	fp,0(sp)
  810810:	dec00204 	addi	sp,sp,8
  810814:	f800283a 	ret

00810818 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  810818:	defff904 	addi	sp,sp,-28
  81081c:	dfc00615 	stw	ra,24(sp)
  810820:	df000515 	stw	fp,20(sp)
  810824:	df000504 	addi	fp,sp,20
  810828:	e13ffc15 	stw	r4,-16(fp)
  81082c:	e17ffd15 	stw	r5,-12(fp)
  810830:	e1bffe15 	stw	r6,-8(fp)
  810834:	e1ffff15 	stw	r7,-4(fp)
  810838:	e0bfff17 	ldw	r2,-4(fp)
  81083c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  810840:	00802074 	movhi	r2,129
  810844:	1091d504 	addi	r2,r2,18260
  810848:	10800017 	ldw	r2,0(r2)
  81084c:	1004c03a 	cmpne	r2,r2,zero
  810850:	1000041e 	bne	r2,zero,810864 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  810854:	00c02074 	movhi	r3,129
  810858:	18d1d504 	addi	r3,r3,18260
  81085c:	e0bffb17 	ldw	r2,-20(fp)
  810860:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  810864:	e0bffc17 	ldw	r2,-16(fp)
  810868:	10800104 	addi	r2,r2,4
  81086c:	1007883a 	mov	r3,r2
  810870:	008001c4 	movi	r2,7
  810874:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  810878:	e13ffe17 	ldw	r4,-8(fp)
  81087c:	e17ffc17 	ldw	r5,-16(fp)
  810880:	01802074 	movhi	r6,129
  810884:	3181e904 	addi	r6,r6,1956
  810888:	080f0340 	call	80f034 <alt_irq_register>
#endif  
}
  81088c:	e037883a 	mov	sp,fp
  810890:	dfc00117 	ldw	ra,4(sp)
  810894:	df000017 	ldw	fp,0(sp)
  810898:	dec00204 	addi	sp,sp,8
  81089c:	f800283a 	ret

008108a0 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
  8108a0:	defffd04 	addi	sp,sp,-12
  8108a4:	df000215 	stw	fp,8(sp)
  8108a8:	df000204 	addi	fp,sp,8
  8108ac:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  8108b0:	e0bfff17 	ldw	r2,-4(fp)
  8108b4:	10800a17 	ldw	r2,40(r2)
  8108b8:	10800104 	addi	r2,r2,4
  8108bc:	10800037 	ldwio	r2,0(r2)
  8108c0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
  8108c4:	e0bffe17 	ldw	r2,-8(fp)
  8108c8:	10800054 	ori	r2,r2,1
  8108cc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
  8108d0:	e0bfff17 	ldw	r2,-4(fp)
  8108d4:	10800a17 	ldw	r2,40(r2)
  8108d8:	10800104 	addi	r2,r2,4
  8108dc:	e0fffe17 	ldw	r3,-8(fp)
  8108e0:	10c00035 	stwio	r3,0(r2)
}
  8108e4:	e037883a 	mov	sp,fp
  8108e8:	df000017 	ldw	fp,0(sp)
  8108ec:	dec00104 	addi	sp,sp,4
  8108f0:	f800283a 	ret

008108f4 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
  8108f4:	defffd04 	addi	sp,sp,-12
  8108f8:	df000215 	stw	fp,8(sp)
  8108fc:	df000204 	addi	fp,sp,8
  810900:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  810904:	e0bfff17 	ldw	r2,-4(fp)
  810908:	10800a17 	ldw	r2,40(r2)
  81090c:	10800104 	addi	r2,r2,4
  810910:	10800037 	ldwio	r2,0(r2)
  810914:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
  810918:	e0fffe17 	ldw	r3,-8(fp)
  81091c:	00bfff84 	movi	r2,-2
  810920:	1884703a 	and	r2,r3,r2
  810924:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
  810928:	e0bfff17 	ldw	r2,-4(fp)
  81092c:	10800a17 	ldw	r2,40(r2)
  810930:	10800104 	addi	r2,r2,4
  810934:	e0fffe17 	ldw	r3,-8(fp)
  810938:	10c00035 	stwio	r3,0(r2)
}
  81093c:	e037883a 	mov	sp,fp
  810940:	df000017 	ldw	fp,0(sp)
  810944:	dec00104 	addi	sp,sp,4
  810948:	f800283a 	ret

0081094c <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
  81094c:	defffd04 	addi	sp,sp,-12
  810950:	df000215 	stw	fp,8(sp)
  810954:	df000204 	addi	fp,sp,8
  810958:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
  81095c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
  810960:	e0bfff17 	ldw	r2,-4(fp)
  810964:	10800a17 	ldw	r2,40(r2)
  810968:	10800084 	addi	r2,r2,2
  81096c:	1080002b 	ldhuio	r2,0(r2)
  810970:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
  810974:	e0bffe0b 	ldhu	r2,-8(fp)
}
  810978:	e037883a 	mov	sp,fp
  81097c:	df000017 	ldw	fp,0(sp)
  810980:	dec00104 	addi	sp,sp,4
  810984:	f800283a 	ret

00810988 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
  810988:	defffd04 	addi	sp,sp,-12
  81098c:	df000215 	stw	fp,8(sp)
  810990:	df000204 	addi	fp,sp,8
  810994:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
  810998:	e0bfff17 	ldw	r2,-4(fp)
  81099c:	10800a17 	ldw	r2,40(r2)
  8109a0:	10800104 	addi	r2,r2,4
  8109a4:	10800037 	ldwio	r2,0(r2)
  8109a8:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
  8109ac:	e0bffe17 	ldw	r2,-8(fp)
  8109b0:	10bfffec 	andhi	r2,r2,65535
  8109b4:	1004d43a 	srli	r2,r2,16
}
  8109b8:	e037883a 	mov	sp,fp
  8109bc:	df000017 	ldw	fp,0(sp)
  8109c0:	dec00104 	addi	sp,sp,4
  8109c4:	f800283a 	ret

008109c8 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
  8109c8:	defffc04 	addi	sp,sp,-16
  8109cc:	df000315 	stw	fp,12(sp)
  8109d0:	df000304 	addi	fp,sp,12
  8109d4:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
  8109d8:	e0bffe17 	ldw	r2,-8(fp)
  8109dc:	1080800c 	andi	r2,r2,512
  8109e0:	1004d27a 	srli	r2,r2,9
  8109e4:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
  8109e8:	e0bffd17 	ldw	r2,-12(fp)
  8109ec:	1005003a 	cmpeq	r2,r2,zero
  8109f0:	1000031e 	bne	r2,zero,810a00 <alt_up_rs232_check_parity+0x38>
  8109f4:	00bfffc4 	movi	r2,-1
  8109f8:	e0bfff15 	stw	r2,-4(fp)
  8109fc:	00000106 	br	810a04 <alt_up_rs232_check_parity+0x3c>
  810a00:	e03fff15 	stw	zero,-4(fp)
  810a04:	e0bfff17 	ldw	r2,-4(fp)
}
  810a08:	e037883a 	mov	sp,fp
  810a0c:	df000017 	ldw	fp,0(sp)
  810a10:	dec00104 	addi	sp,sp,4
  810a14:	f800283a 	ret

00810a18 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
  810a18:	defffc04 	addi	sp,sp,-16
  810a1c:	df000315 	stw	fp,12(sp)
  810a20:	df000304 	addi	fp,sp,12
  810a24:	e13ffe15 	stw	r4,-8(fp)
  810a28:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  810a2c:	e0bffe17 	ldw	r2,-8(fp)
  810a30:	10800a17 	ldw	r2,40(r2)
  810a34:	10800037 	ldwio	r2,0(r2)
  810a38:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
  810a3c:	e0bffe17 	ldw	r2,-8(fp)
  810a40:	10800a17 	ldw	r2,40(r2)
  810a44:	e0ffff03 	ldbu	r3,-4(fp)
  810a48:	10c00035 	stwio	r3,0(r2)
	return 0;
  810a4c:	0005883a 	mov	r2,zero
}
  810a50:	e037883a 	mov	sp,fp
  810a54:	df000017 	ldw	fp,0(sp)
  810a58:	dec00104 	addi	sp,sp,4
  810a5c:	f800283a 	ret

00810a60 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
  810a60:	defffa04 	addi	sp,sp,-24
  810a64:	dfc00515 	stw	ra,20(sp)
  810a68:	df000415 	stw	fp,16(sp)
  810a6c:	df000404 	addi	fp,sp,16
  810a70:	e13ffd15 	stw	r4,-12(fp)
  810a74:	e17ffe15 	stw	r5,-8(fp)
  810a78:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
  810a7c:	e0bffd17 	ldw	r2,-12(fp)
  810a80:	10800a17 	ldw	r2,40(r2)
  810a84:	10800037 	ldwio	r2,0(r2)
  810a88:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
  810a8c:	e0bffc17 	ldw	r2,-16(fp)
  810a90:	1007883a 	mov	r3,r2
  810a94:	e0bffe17 	ldw	r2,-8(fp)
  810a98:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
  810a9c:	e13ffc17 	ldw	r4,-16(fp)
  810aa0:	08109c80 	call	8109c8 <alt_up_rs232_check_parity>
  810aa4:	1007883a 	mov	r3,r2
  810aa8:	e0bfff17 	ldw	r2,-4(fp)
  810aac:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
  810ab0:	e0bffc17 	ldw	r2,-16(fp)
  810ab4:	10a0000c 	andi	r2,r2,32768
  810ab8:	1004d3fa 	srli	r2,r2,15
  810abc:	10bfffc4 	addi	r2,r2,-1
}
  810ac0:	e037883a 	mov	sp,fp
  810ac4:	dfc00117 	ldw	ra,4(sp)
  810ac8:	df000017 	ldw	fp,0(sp)
  810acc:	dec00204 	addi	sp,sp,8
  810ad0:	f800283a 	ret

00810ad4 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
  810ad4:	defff804 	addi	sp,sp,-32
  810ad8:	dfc00715 	stw	ra,28(sp)
  810adc:	df000615 	stw	fp,24(sp)
  810ae0:	df000604 	addi	fp,sp,24
  810ae4:	e13ffd15 	stw	r4,-12(fp)
  810ae8:	e17ffe15 	stw	r5,-8(fp)
  810aec:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
  810af0:	e0bffd17 	ldw	r2,-12(fp)
  810af4:	10800017 	ldw	r2,0(r2)
  810af8:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
  810afc:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
  810b00:	00000c06 	br	810b34 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
  810b04:	e17ffe17 	ldw	r5,-8(fp)
  810b08:	e0bffe17 	ldw	r2,-8(fp)
  810b0c:	10800044 	addi	r2,r2,1
  810b10:	e0bffe15 	stw	r2,-8(fp)
  810b14:	e1bffc04 	addi	r6,fp,-16
  810b18:	e13ffb17 	ldw	r4,-20(fp)
  810b1c:	0810a600 	call	810a60 <alt_up_rs232_read_data>
  810b20:	1004c03a 	cmpne	r2,r2,zero
  810b24:	1000091e 	bne	r2,zero,810b4c <alt_up_rs232_read_fd+0x78>
			count++;
  810b28:	e0bffa17 	ldw	r2,-24(fp)
  810b2c:	10800044 	addi	r2,r2,1
  810b30:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
  810b34:	e0bfff17 	ldw	r2,-4(fp)
  810b38:	10bfffc4 	addi	r2,r2,-1
  810b3c:	e0bfff15 	stw	r2,-4(fp)
  810b40:	e0bfff17 	ldw	r2,-4(fp)
  810b44:	10bfffd8 	cmpnei	r2,r2,-1
  810b48:	103fee1e 	bne	r2,zero,810b04 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
  810b4c:	e0bffa17 	ldw	r2,-24(fp)
}
  810b50:	e037883a 	mov	sp,fp
  810b54:	dfc00117 	ldw	ra,4(sp)
  810b58:	df000017 	ldw	fp,0(sp)
  810b5c:	dec00204 	addi	sp,sp,8
  810b60:	f800283a 	ret

00810b64 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
  810b64:	defff904 	addi	sp,sp,-28
  810b68:	dfc00615 	stw	ra,24(sp)
  810b6c:	df000515 	stw	fp,20(sp)
  810b70:	df000504 	addi	fp,sp,20
  810b74:	e13ffd15 	stw	r4,-12(fp)
  810b78:	e17ffe15 	stw	r5,-8(fp)
  810b7c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
  810b80:	e0bffd17 	ldw	r2,-12(fp)
  810b84:	10800017 	ldw	r2,0(r2)
  810b88:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
  810b8c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
  810b90:	00000d06 	br	810bc8 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
  810b94:	e0bffe17 	ldw	r2,-8(fp)
  810b98:	10800003 	ldbu	r2,0(r2)
  810b9c:	11403fcc 	andi	r5,r2,255
  810ba0:	e13ffc17 	ldw	r4,-16(fp)
  810ba4:	0810a180 	call	810a18 <alt_up_rs232_write_data>
  810ba8:	1004c03a 	cmpne	r2,r2,zero
  810bac:	10000c1e 	bne	r2,zero,810be0 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
  810bb0:	e0bffb17 	ldw	r2,-20(fp)
  810bb4:	10800044 	addi	r2,r2,1
  810bb8:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
  810bbc:	e0bffe17 	ldw	r2,-8(fp)
  810bc0:	10800044 	addi	r2,r2,1
  810bc4:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
  810bc8:	e0bfff17 	ldw	r2,-4(fp)
  810bcc:	10bfffc4 	addi	r2,r2,-1
  810bd0:	e0bfff15 	stw	r2,-4(fp)
  810bd4:	e0bfff17 	ldw	r2,-4(fp)
  810bd8:	10bfffd8 	cmpnei	r2,r2,-1
  810bdc:	103fed1e 	bne	r2,zero,810b94 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
  810be0:	e0bffb17 	ldw	r2,-20(fp)
}
  810be4:	e037883a 	mov	sp,fp
  810be8:	dfc00117 	ldw	ra,4(sp)
  810bec:	df000017 	ldw	fp,0(sp)
  810bf0:	dec00204 	addi	sp,sp,8
  810bf4:	f800283a 	ret

00810bf8 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
  810bf8:	defffc04 	addi	sp,sp,-16
  810bfc:	dfc00315 	stw	ra,12(sp)
  810c00:	df000215 	stw	fp,8(sp)
  810c04:	df000204 	addi	fp,sp,8
  810c08:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
  810c0c:	e13fff17 	ldw	r4,-4(fp)
  810c10:	01402074 	movhi	r5,129
  810c14:	2951b804 	addi	r5,r5,18144
  810c18:	08110c40 	call	8110c4 <alt_find_dev>
  810c1c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  810c20:	e0bffe17 	ldw	r2,-8(fp)
}
  810c24:	e037883a 	mov	sp,fp
  810c28:	dfc00117 	ldw	ra,4(sp)
  810c2c:	df000017 	ldw	fp,0(sp)
  810c30:	dec00204 	addi	sp,sp,8
  810c34:	f800283a 	ret

00810c38 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  810c38:	defff404 	addi	sp,sp,-48
  810c3c:	df000b15 	stw	fp,44(sp)
  810c40:	df000b04 	addi	fp,sp,44
  810c44:	e13ffb15 	stw	r4,-20(fp)
  810c48:	e17ffc15 	stw	r5,-16(fp)
  810c4c:	e1bffd15 	stw	r6,-12(fp)
  810c50:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  810c54:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  810c58:	00802074 	movhi	r2,129
  810c5c:	1091d504 	addi	r2,r2,18260
  810c60:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  810c64:	1005003a 	cmpeq	r2,r2,zero
  810c68:	1000411e 	bne	r2,zero,810d70 <alt_alarm_start+0x138>
  {
    if (alarm)
  810c6c:	e0bffb17 	ldw	r2,-20(fp)
  810c70:	1005003a 	cmpeq	r2,r2,zero
  810c74:	10003b1e 	bne	r2,zero,810d64 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  810c78:	e0fffb17 	ldw	r3,-20(fp)
  810c7c:	e0bffd17 	ldw	r2,-12(fp)
  810c80:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  810c84:	e0fffb17 	ldw	r3,-20(fp)
  810c88:	e0bffe17 	ldw	r2,-8(fp)
  810c8c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810c90:	0005303a 	rdctl	r2,status
  810c94:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810c98:	e0fff817 	ldw	r3,-32(fp)
  810c9c:	00bfff84 	movi	r2,-2
  810ca0:	1884703a 	and	r2,r3,r2
  810ca4:	1001703a 	wrctl	status,r2
  
  return context;
  810ca8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  810cac:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  810cb0:	00802074 	movhi	r2,129
  810cb4:	1091d604 	addi	r2,r2,18264
  810cb8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  810cbc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  810cc0:	e0fffc17 	ldw	r3,-16(fp)
  810cc4:	e0bff917 	ldw	r2,-28(fp)
  810cc8:	1885883a 	add	r2,r3,r2
  810ccc:	10c00044 	addi	r3,r2,1
  810cd0:	e0bffb17 	ldw	r2,-20(fp)
  810cd4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  810cd8:	e0bffb17 	ldw	r2,-20(fp)
  810cdc:	10c00217 	ldw	r3,8(r2)
  810ce0:	e0bff917 	ldw	r2,-28(fp)
  810ce4:	1880042e 	bgeu	r3,r2,810cf8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  810ce8:	e0fffb17 	ldw	r3,-20(fp)
  810cec:	00800044 	movi	r2,1
  810cf0:	18800405 	stb	r2,16(r3)
  810cf4:	00000206 	br	810d00 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  810cf8:	e0bffb17 	ldw	r2,-20(fp)
  810cfc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  810d00:	e0fffb17 	ldw	r3,-20(fp)
  810d04:	00802074 	movhi	r2,129
  810d08:	1091be04 	addi	r2,r2,18168
  810d0c:	e0bff615 	stw	r2,-40(fp)
  810d10:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810d14:	e0fff717 	ldw	r3,-36(fp)
  810d18:	e0bff617 	ldw	r2,-40(fp)
  810d1c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  810d20:	e0bff617 	ldw	r2,-40(fp)
  810d24:	10c00017 	ldw	r3,0(r2)
  810d28:	e0bff717 	ldw	r2,-36(fp)
  810d2c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  810d30:	e0bff617 	ldw	r2,-40(fp)
  810d34:	10c00017 	ldw	r3,0(r2)
  810d38:	e0bff717 	ldw	r2,-36(fp)
  810d3c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  810d40:	e0fff617 	ldw	r3,-40(fp)
  810d44:	e0bff717 	ldw	r2,-36(fp)
  810d48:	18800015 	stw	r2,0(r3)
  810d4c:	e0bffa17 	ldw	r2,-24(fp)
  810d50:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810d54:	e0bff517 	ldw	r2,-44(fp)
  810d58:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  810d5c:	e03fff15 	stw	zero,-4(fp)
  810d60:	00000506 	br	810d78 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  810d64:	00bffa84 	movi	r2,-22
  810d68:	e0bfff15 	stw	r2,-4(fp)
  810d6c:	00000206 	br	810d78 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  810d70:	00bfde84 	movi	r2,-134
  810d74:	e0bfff15 	stw	r2,-4(fp)
  810d78:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  810d7c:	e037883a 	mov	sp,fp
  810d80:	df000017 	ldw	fp,0(sp)
  810d84:	dec00104 	addi	sp,sp,4
  810d88:	f800283a 	ret

00810d8c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  810d8c:	defffa04 	addi	sp,sp,-24
  810d90:	dfc00515 	stw	ra,20(sp)
  810d94:	df000415 	stw	fp,16(sp)
  810d98:	df000404 	addi	fp,sp,16
  810d9c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
  810da0:	00800244 	movi	r2,9
  810da4:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  810da8:	e13ffc17 	ldw	r4,-16(fp)
  810dac:	014003f4 	movhi	r5,15
  810db0:	29509004 	addi	r5,r5,16960
  810db4:	080eb4c0 	call	80eb4c <__mulsi3>
  810db8:	100b883a 	mov	r5,r2
  810dbc:	0100bef4 	movhi	r4,763
  810dc0:	213c2004 	addi	r4,r4,-3968
  810dc4:	080552c0 	call	80552c <__udivsi3>
  810dc8:	100b883a 	mov	r5,r2
  810dcc:	01200034 	movhi	r4,32768
  810dd0:	213fffc4 	addi	r4,r4,-1
  810dd4:	080552c0 	call	80552c <__udivsi3>
  810dd8:	100b883a 	mov	r5,r2
  810ddc:	e13fff17 	ldw	r4,-4(fp)
  810de0:	080552c0 	call	80552c <__udivsi3>
  810de4:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  810de8:	e0bffd17 	ldw	r2,-12(fp)
  810dec:	1005003a 	cmpeq	r2,r2,zero
  810df0:	10002a1e 	bne	r2,zero,810e9c <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
  810df4:	e03ffe15 	stw	zero,-8(fp)
  810df8:	00001706 	br	810e58 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  810dfc:	00a00034 	movhi	r2,32768
  810e00:	10bfffc4 	addi	r2,r2,-1
  810e04:	10bfffc4 	addi	r2,r2,-1
  810e08:	103ffe1e 	bne	r2,zero,810e04 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  810e0c:	e13ffc17 	ldw	r4,-16(fp)
  810e10:	014003f4 	movhi	r5,15
  810e14:	29509004 	addi	r5,r5,16960
  810e18:	080eb4c0 	call	80eb4c <__mulsi3>
  810e1c:	100b883a 	mov	r5,r2
  810e20:	0100bef4 	movhi	r4,763
  810e24:	213c2004 	addi	r4,r4,-3968
  810e28:	080552c0 	call	80552c <__udivsi3>
  810e2c:	100b883a 	mov	r5,r2
  810e30:	01200034 	movhi	r4,32768
  810e34:	213fffc4 	addi	r4,r4,-1
  810e38:	080552c0 	call	80552c <__udivsi3>
  810e3c:	1007883a 	mov	r3,r2
  810e40:	e0bfff17 	ldw	r2,-4(fp)
  810e44:	10c5c83a 	sub	r2,r2,r3
  810e48:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  810e4c:	e0bffe17 	ldw	r2,-8(fp)
  810e50:	10800044 	addi	r2,r2,1
  810e54:	e0bffe15 	stw	r2,-8(fp)
  810e58:	e0fffe17 	ldw	r3,-8(fp)
  810e5c:	e0bffd17 	ldw	r2,-12(fp)
  810e60:	18bfe616 	blt	r3,r2,810dfc <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  810e64:	e13ffc17 	ldw	r4,-16(fp)
  810e68:	014003f4 	movhi	r5,15
  810e6c:	29509004 	addi	r5,r5,16960
  810e70:	080eb4c0 	call	80eb4c <__mulsi3>
  810e74:	100b883a 	mov	r5,r2
  810e78:	0100bef4 	movhi	r4,763
  810e7c:	213c2004 	addi	r4,r4,-3968
  810e80:	080552c0 	call	80552c <__udivsi3>
  810e84:	1009883a 	mov	r4,r2
  810e88:	e17fff17 	ldw	r5,-4(fp)
  810e8c:	080eb4c0 	call	80eb4c <__mulsi3>
  810e90:	10bfffc4 	addi	r2,r2,-1
  810e94:	103ffe1e 	bne	r2,zero,810e90 <alt_busy_sleep+0x104>
  810e98:	00000d06 	br	810ed0 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  810e9c:	e13ffc17 	ldw	r4,-16(fp)
  810ea0:	014003f4 	movhi	r5,15
  810ea4:	29509004 	addi	r5,r5,16960
  810ea8:	080eb4c0 	call	80eb4c <__mulsi3>
  810eac:	100b883a 	mov	r5,r2
  810eb0:	0100bef4 	movhi	r4,763
  810eb4:	213c2004 	addi	r4,r4,-3968
  810eb8:	080552c0 	call	80552c <__udivsi3>
  810ebc:	1009883a 	mov	r4,r2
  810ec0:	e17fff17 	ldw	r5,-4(fp)
  810ec4:	080eb4c0 	call	80eb4c <__mulsi3>
  810ec8:	10bfffc4 	addi	r2,r2,-1
  810ecc:	00bffe16 	blt	zero,r2,810ec8 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  810ed0:	0005883a 	mov	r2,zero
}
  810ed4:	e037883a 	mov	sp,fp
  810ed8:	dfc00117 	ldw	ra,4(sp)
  810edc:	df000017 	ldw	fp,0(sp)
  810ee0:	dec00204 	addi	sp,sp,8
  810ee4:	f800283a 	ret

00810ee8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  810ee8:	defff904 	addi	sp,sp,-28
  810eec:	dfc00615 	stw	ra,24(sp)
  810ef0:	df000515 	stw	fp,20(sp)
  810ef4:	df000504 	addi	fp,sp,20
  810ef8:	e13ffd15 	stw	r4,-12(fp)
  810efc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  810f00:	e0bffd17 	ldw	r2,-12(fp)
  810f04:	1005003a 	cmpeq	r2,r2,zero
  810f08:	1000041e 	bne	r2,zero,810f1c <alt_dev_llist_insert+0x34>
  810f0c:	e0bffd17 	ldw	r2,-12(fp)
  810f10:	10800217 	ldw	r2,8(r2)
  810f14:	1004c03a 	cmpne	r2,r2,zero
  810f18:	1000071e 	bne	r2,zero,810f38 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  810f1c:	0810f9c0 	call	810f9c <alt_get_errno>
  810f20:	1007883a 	mov	r3,r2
  810f24:	00800584 	movi	r2,22
  810f28:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  810f2c:	00bffa84 	movi	r2,-22
  810f30:	e0bfff15 	stw	r2,-4(fp)
  810f34:	00001306 	br	810f84 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  810f38:	e0fffd17 	ldw	r3,-12(fp)
  810f3c:	e0bffe17 	ldw	r2,-8(fp)
  810f40:	e0bffb15 	stw	r2,-20(fp)
  810f44:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810f48:	e0fffc17 	ldw	r3,-16(fp)
  810f4c:	e0bffb17 	ldw	r2,-20(fp)
  810f50:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  810f54:	e0bffb17 	ldw	r2,-20(fp)
  810f58:	10c00017 	ldw	r3,0(r2)
  810f5c:	e0bffc17 	ldw	r2,-16(fp)
  810f60:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  810f64:	e0bffb17 	ldw	r2,-20(fp)
  810f68:	10c00017 	ldw	r3,0(r2)
  810f6c:	e0bffc17 	ldw	r2,-16(fp)
  810f70:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  810f74:	e0fffb17 	ldw	r3,-20(fp)
  810f78:	e0bffc17 	ldw	r2,-16(fp)
  810f7c:	18800015 	stw	r2,0(r3)

  return 0;  
  810f80:	e03fff15 	stw	zero,-4(fp)
  810f84:	e0bfff17 	ldw	r2,-4(fp)
}
  810f88:	e037883a 	mov	sp,fp
  810f8c:	dfc00117 	ldw	ra,4(sp)
  810f90:	df000017 	ldw	fp,0(sp)
  810f94:	dec00204 	addi	sp,sp,8
  810f98:	f800283a 	ret

00810f9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810f9c:	defffd04 	addi	sp,sp,-12
  810fa0:	dfc00215 	stw	ra,8(sp)
  810fa4:	df000115 	stw	fp,4(sp)
  810fa8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  810fac:	00802074 	movhi	r2,129
  810fb0:	1091bb04 	addi	r2,r2,18156
  810fb4:	10800017 	ldw	r2,0(r2)
  810fb8:	1005003a 	cmpeq	r2,r2,zero
  810fbc:	1000061e 	bne	r2,zero,810fd8 <alt_get_errno+0x3c>
  810fc0:	00802074 	movhi	r2,129
  810fc4:	1091bb04 	addi	r2,r2,18156
  810fc8:	10800017 	ldw	r2,0(r2)
  810fcc:	103ee83a 	callr	r2
  810fd0:	e0bfff15 	stw	r2,-4(fp)
  810fd4:	00000306 	br	810fe4 <alt_get_errno+0x48>
  810fd8:	00802074 	movhi	r2,129
  810fdc:	1091d004 	addi	r2,r2,18240
  810fe0:	e0bfff15 	stw	r2,-4(fp)
  810fe4:	e0bfff17 	ldw	r2,-4(fp)
}
  810fe8:	e037883a 	mov	sp,fp
  810fec:	dfc00117 	ldw	ra,4(sp)
  810ff0:	df000017 	ldw	fp,0(sp)
  810ff4:	dec00204 	addi	sp,sp,8
  810ff8:	f800283a 	ret

00810ffc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  810ffc:	defffd04 	addi	sp,sp,-12
  811000:	dfc00215 	stw	ra,8(sp)
  811004:	df000115 	stw	fp,4(sp)
  811008:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81100c:	00bfff04 	movi	r2,-4
  811010:	00c02074 	movhi	r3,129
  811014:	18c75304 	addi	r3,r3,7500
  811018:	1885883a 	add	r2,r3,r2
  81101c:	e0bfff15 	stw	r2,-4(fp)
  811020:	00000606 	br	81103c <_do_ctors+0x40>
        (*ctor) (); 
  811024:	e0bfff17 	ldw	r2,-4(fp)
  811028:	10800017 	ldw	r2,0(r2)
  81102c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  811030:	e0bfff17 	ldw	r2,-4(fp)
  811034:	10bfff04 	addi	r2,r2,-4
  811038:	e0bfff15 	stw	r2,-4(fp)
  81103c:	e0ffff17 	ldw	r3,-4(fp)
  811040:	00802074 	movhi	r2,129
  811044:	10875204 	addi	r2,r2,7496
  811048:	18bff62e 	bgeu	r3,r2,811024 <_do_ctors+0x28>
        (*ctor) (); 
}
  81104c:	e037883a 	mov	sp,fp
  811050:	dfc00117 	ldw	ra,4(sp)
  811054:	df000017 	ldw	fp,0(sp)
  811058:	dec00204 	addi	sp,sp,8
  81105c:	f800283a 	ret

00811060 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  811060:	defffd04 	addi	sp,sp,-12
  811064:	dfc00215 	stw	ra,8(sp)
  811068:	df000115 	stw	fp,4(sp)
  81106c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  811070:	00bfff04 	movi	r2,-4
  811074:	00c02074 	movhi	r3,129
  811078:	18c75304 	addi	r3,r3,7500
  81107c:	1885883a 	add	r2,r3,r2
  811080:	e0bfff15 	stw	r2,-4(fp)
  811084:	00000606 	br	8110a0 <_do_dtors+0x40>
        (*dtor) (); 
  811088:	e0bfff17 	ldw	r2,-4(fp)
  81108c:	10800017 	ldw	r2,0(r2)
  811090:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  811094:	e0bfff17 	ldw	r2,-4(fp)
  811098:	10bfff04 	addi	r2,r2,-4
  81109c:	e0bfff15 	stw	r2,-4(fp)
  8110a0:	e0ffff17 	ldw	r3,-4(fp)
  8110a4:	00802074 	movhi	r2,129
  8110a8:	10875304 	addi	r2,r2,7500
  8110ac:	18bff62e 	bgeu	r3,r2,811088 <_do_dtors+0x28>
        (*dtor) (); 
}
  8110b0:	e037883a 	mov	sp,fp
  8110b4:	dfc00117 	ldw	ra,4(sp)
  8110b8:	df000017 	ldw	fp,0(sp)
  8110bc:	dec00204 	addi	sp,sp,8
  8110c0:	f800283a 	ret

008110c4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8110c4:	defff904 	addi	sp,sp,-28
  8110c8:	dfc00615 	stw	ra,24(sp)
  8110cc:	df000515 	stw	fp,20(sp)
  8110d0:	df000504 	addi	fp,sp,20
  8110d4:	e13ffd15 	stw	r4,-12(fp)
  8110d8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8110dc:	e0bffe17 	ldw	r2,-8(fp)
  8110e0:	10800017 	ldw	r2,0(r2)
  8110e4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8110e8:	e13ffd17 	ldw	r4,-12(fp)
  8110ec:	0805b700 	call	805b70 <strlen>
  8110f0:	10800044 	addi	r2,r2,1
  8110f4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8110f8:	00000d06 	br	811130 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8110fc:	e0bffc17 	ldw	r2,-16(fp)
  811100:	11000217 	ldw	r4,8(r2)
  811104:	e1bffb17 	ldw	r6,-20(fp)
  811108:	e17ffd17 	ldw	r5,-12(fp)
  81110c:	081198c0 	call	81198c <memcmp>
  811110:	1004c03a 	cmpne	r2,r2,zero
  811114:	1000031e 	bne	r2,zero,811124 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  811118:	e0bffc17 	ldw	r2,-16(fp)
  81111c:	e0bfff15 	stw	r2,-4(fp)
  811120:	00000706 	br	811140 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  811124:	e0bffc17 	ldw	r2,-16(fp)
  811128:	10800017 	ldw	r2,0(r2)
  81112c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  811130:	e0fffe17 	ldw	r3,-8(fp)
  811134:	e0bffc17 	ldw	r2,-16(fp)
  811138:	10fff01e 	bne	r2,r3,8110fc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  81113c:	e03fff15 	stw	zero,-4(fp)
  811140:	e0bfff17 	ldw	r2,-4(fp)
}
  811144:	e037883a 	mov	sp,fp
  811148:	dfc00117 	ldw	ra,4(sp)
  81114c:	df000017 	ldw	fp,0(sp)
  811150:	dec00204 	addi	sp,sp,8
  811154:	f800283a 	ret

00811158 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  811158:	defff804 	addi	sp,sp,-32
  81115c:	dfc00715 	stw	ra,28(sp)
  811160:	df000615 	stw	fp,24(sp)
  811164:	dc000515 	stw	r16,20(sp)
  811168:	df000504 	addi	fp,sp,20
  81116c:	e13ffc15 	stw	r4,-16(fp)
  811170:	e17ffd15 	stw	r5,-12(fp)
  811174:	e1bffe15 	stw	r6,-8(fp)
  811178:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  81117c:	e13ffd17 	ldw	r4,-12(fp)
  811180:	e17ffe17 	ldw	r5,-8(fp)
  811184:	e1bfff17 	ldw	r6,-4(fp)
  811188:	08113a00 	call	8113a0 <open>
  81118c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  811190:	e0bffb17 	ldw	r2,-20(fp)
  811194:	1004803a 	cmplt	r2,r2,zero
  811198:	10001f1e 	bne	r2,zero,811218 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  81119c:	e13ffb17 	ldw	r4,-20(fp)
  8111a0:	04002074 	movhi	r16,129
  8111a4:	840d1a04 	addi	r16,r16,13416
  8111a8:	01400304 	movi	r5,12
  8111ac:	080eb4c0 	call	80eb4c <__mulsi3>
  8111b0:	1405883a 	add	r2,r2,r16
  8111b4:	10c00017 	ldw	r3,0(r2)
  8111b8:	e0bffc17 	ldw	r2,-16(fp)
  8111bc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  8111c0:	e13ffb17 	ldw	r4,-20(fp)
  8111c4:	04002074 	movhi	r16,129
  8111c8:	840d1a04 	addi	r16,r16,13416
  8111cc:	01400304 	movi	r5,12
  8111d0:	080eb4c0 	call	80eb4c <__mulsi3>
  8111d4:	1405883a 	add	r2,r2,r16
  8111d8:	10800104 	addi	r2,r2,4
  8111dc:	10c00017 	ldw	r3,0(r2)
  8111e0:	e0bffc17 	ldw	r2,-16(fp)
  8111e4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8111e8:	e13ffb17 	ldw	r4,-20(fp)
  8111ec:	04002074 	movhi	r16,129
  8111f0:	840d1a04 	addi	r16,r16,13416
  8111f4:	01400304 	movi	r5,12
  8111f8:	080eb4c0 	call	80eb4c <__mulsi3>
  8111fc:	1405883a 	add	r2,r2,r16
  811200:	10800204 	addi	r2,r2,8
  811204:	10c00017 	ldw	r3,0(r2)
  811208:	e0bffc17 	ldw	r2,-16(fp)
  81120c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  811210:	e13ffb17 	ldw	r4,-20(fp)
  811214:	080f9340 	call	80f934 <alt_release_fd>
  }
} 
  811218:	e037883a 	mov	sp,fp
  81121c:	dfc00217 	ldw	ra,8(sp)
  811220:	df000117 	ldw	fp,4(sp)
  811224:	dc000017 	ldw	r16,0(sp)
  811228:	dec00304 	addi	sp,sp,12
  81122c:	f800283a 	ret

00811230 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  811230:	defffb04 	addi	sp,sp,-20
  811234:	dfc00415 	stw	ra,16(sp)
  811238:	df000315 	stw	fp,12(sp)
  81123c:	df000304 	addi	fp,sp,12
  811240:	e13ffd15 	stw	r4,-12(fp)
  811244:	e17ffe15 	stw	r5,-8(fp)
  811248:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81124c:	01002074 	movhi	r4,129
  811250:	210d1d04 	addi	r4,r4,13428
  811254:	e17ffd17 	ldw	r5,-12(fp)
  811258:	01800044 	movi	r6,1
  81125c:	01c07fc4 	movi	r7,511
  811260:	08111580 	call	811158 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  811264:	01002074 	movhi	r4,129
  811268:	210d1a04 	addi	r4,r4,13416
  81126c:	e17ffe17 	ldw	r5,-8(fp)
  811270:	000d883a 	mov	r6,zero
  811274:	01c07fc4 	movi	r7,511
  811278:	08111580 	call	811158 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81127c:	01002074 	movhi	r4,129
  811280:	210d2004 	addi	r4,r4,13440
  811284:	e17fff17 	ldw	r5,-4(fp)
  811288:	01800044 	movi	r6,1
  81128c:	01c07fc4 	movi	r7,511
  811290:	08111580 	call	811158 <alt_open_fd>
}  
  811294:	e037883a 	mov	sp,fp
  811298:	dfc00117 	ldw	ra,4(sp)
  81129c:	df000017 	ldw	fp,0(sp)
  8112a0:	dec00204 	addi	sp,sp,8
  8112a4:	f800283a 	ret

008112a8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8112a8:	defffa04 	addi	sp,sp,-24
  8112ac:	dfc00515 	stw	ra,20(sp)
  8112b0:	df000415 	stw	fp,16(sp)
  8112b4:	dc000315 	stw	r16,12(sp)
  8112b8:	df000304 	addi	fp,sp,12
  8112bc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8112c0:	e0bffe17 	ldw	r2,-8(fp)
  8112c4:	10800217 	ldw	r2,8(r2)
  8112c8:	10d00034 	orhi	r3,r2,16384
  8112cc:	e0bffe17 	ldw	r2,-8(fp)
  8112d0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8112d4:	e03ffd15 	stw	zero,-12(fp)
  8112d8:	00002306 	br	811368 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8112dc:	e13ffd17 	ldw	r4,-12(fp)
  8112e0:	04002074 	movhi	r16,129
  8112e4:	840d1a04 	addi	r16,r16,13416
  8112e8:	01400304 	movi	r5,12
  8112ec:	080eb4c0 	call	80eb4c <__mulsi3>
  8112f0:	1405883a 	add	r2,r2,r16
  8112f4:	10c00017 	ldw	r3,0(r2)
  8112f8:	e0bffe17 	ldw	r2,-8(fp)
  8112fc:	10800017 	ldw	r2,0(r2)
  811300:	1880161e 	bne	r3,r2,81135c <alt_file_locked+0xb4>
  811304:	e13ffd17 	ldw	r4,-12(fp)
  811308:	04002074 	movhi	r16,129
  81130c:	840d1a04 	addi	r16,r16,13416
  811310:	01400304 	movi	r5,12
  811314:	080eb4c0 	call	80eb4c <__mulsi3>
  811318:	1405883a 	add	r2,r2,r16
  81131c:	10800204 	addi	r2,r2,8
  811320:	10800017 	ldw	r2,0(r2)
  811324:	1004403a 	cmpge	r2,r2,zero
  811328:	10000c1e 	bne	r2,zero,81135c <alt_file_locked+0xb4>
  81132c:	e13ffd17 	ldw	r4,-12(fp)
  811330:	01400304 	movi	r5,12
  811334:	080eb4c0 	call	80eb4c <__mulsi3>
  811338:	1007883a 	mov	r3,r2
  81133c:	00802074 	movhi	r2,129
  811340:	108d1a04 	addi	r2,r2,13416
  811344:	1887883a 	add	r3,r3,r2
  811348:	e0bffe17 	ldw	r2,-8(fp)
  81134c:	18800326 	beq	r3,r2,81135c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  811350:	00bffcc4 	movi	r2,-13
  811354:	e0bfff15 	stw	r2,-4(fp)
  811358:	00000a06 	br	811384 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81135c:	e0bffd17 	ldw	r2,-12(fp)
  811360:	10800044 	addi	r2,r2,1
  811364:	e0bffd15 	stw	r2,-12(fp)
  811368:	00802074 	movhi	r2,129
  81136c:	1091ba04 	addi	r2,r2,18152
  811370:	10800017 	ldw	r2,0(r2)
  811374:	1007883a 	mov	r3,r2
  811378:	e0bffd17 	ldw	r2,-12(fp)
  81137c:	18bfd72e 	bgeu	r3,r2,8112dc <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  811380:	e03fff15 	stw	zero,-4(fp)
  811384:	e0bfff17 	ldw	r2,-4(fp)
}
  811388:	e037883a 	mov	sp,fp
  81138c:	dfc00217 	ldw	ra,8(sp)
  811390:	df000117 	ldw	fp,4(sp)
  811394:	dc000017 	ldw	r16,0(sp)
  811398:	dec00304 	addi	sp,sp,12
  81139c:	f800283a 	ret

008113a0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8113a0:	defff404 	addi	sp,sp,-48
  8113a4:	dfc00b15 	stw	ra,44(sp)
  8113a8:	df000a15 	stw	fp,40(sp)
  8113ac:	df000a04 	addi	fp,sp,40
  8113b0:	e13ffb15 	stw	r4,-20(fp)
  8113b4:	e17ffc15 	stw	r5,-16(fp)
  8113b8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8113bc:	00bfffc4 	movi	r2,-1
  8113c0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  8113c4:	00bffb44 	movi	r2,-19
  8113c8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  8113cc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8113d0:	e13ffb17 	ldw	r4,-20(fp)
  8113d4:	01402074 	movhi	r5,129
  8113d8:	2951b804 	addi	r5,r5,18144
  8113dc:	08110c40 	call	8110c4 <alt_find_dev>
  8113e0:	e0bffa15 	stw	r2,-24(fp)
  8113e4:	e0bffa17 	ldw	r2,-24(fp)
  8113e8:	1004c03a 	cmpne	r2,r2,zero
  8113ec:	1000051e 	bne	r2,zero,811404 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8113f0:	e13ffb17 	ldw	r4,-20(fp)
  8113f4:	08117500 	call	811750 <alt_find_file>
  8113f8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  8113fc:	00800044 	movi	r2,1
  811400:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  811404:	e0bffa17 	ldw	r2,-24(fp)
  811408:	1005003a 	cmpeq	r2,r2,zero
  81140c:	1000311e 	bne	r2,zero,8114d4 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  811410:	e13ffa17 	ldw	r4,-24(fp)
  811414:	08118700 	call	811870 <alt_get_fd>
  811418:	e0bff815 	stw	r2,-32(fp)
  81141c:	e0bff817 	ldw	r2,-32(fp)
  811420:	1004403a 	cmpge	r2,r2,zero
  811424:	1000031e 	bne	r2,zero,811434 <open+0x94>
    {
      status = index;
  811428:	e0bff817 	ldw	r2,-32(fp)
  81142c:	e0bff715 	stw	r2,-36(fp)
  811430:	00002a06 	br	8114dc <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  811434:	e13ff817 	ldw	r4,-32(fp)
  811438:	01400304 	movi	r5,12
  81143c:	080eb4c0 	call	80eb4c <__mulsi3>
  811440:	1007883a 	mov	r3,r2
  811444:	00802074 	movhi	r2,129
  811448:	108d1a04 	addi	r2,r2,13416
  81144c:	1885883a 	add	r2,r3,r2
  811450:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  811454:	e0fffc17 	ldw	r3,-16(fp)
  811458:	00900034 	movhi	r2,16384
  81145c:	10bfffc4 	addi	r2,r2,-1
  811460:	1886703a 	and	r3,r3,r2
  811464:	e0bff917 	ldw	r2,-28(fp)
  811468:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81146c:	e0bff617 	ldw	r2,-40(fp)
  811470:	1004c03a 	cmpne	r2,r2,zero
  811474:	1000061e 	bne	r2,zero,811490 <open+0xf0>
  811478:	e13ff917 	ldw	r4,-28(fp)
  81147c:	08112a80 	call	8112a8 <alt_file_locked>
  811480:	e0bff715 	stw	r2,-36(fp)
  811484:	e0bff717 	ldw	r2,-36(fp)
  811488:	1004803a 	cmplt	r2,r2,zero
  81148c:	1000131e 	bne	r2,zero,8114dc <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  811490:	e0bffa17 	ldw	r2,-24(fp)
  811494:	10800317 	ldw	r2,12(r2)
  811498:	1005003a 	cmpeq	r2,r2,zero
  81149c:	1000091e 	bne	r2,zero,8114c4 <open+0x124>
  8114a0:	e0bffa17 	ldw	r2,-24(fp)
  8114a4:	10800317 	ldw	r2,12(r2)
  8114a8:	e13ff917 	ldw	r4,-28(fp)
  8114ac:	e17ffb17 	ldw	r5,-20(fp)
  8114b0:	e1bffc17 	ldw	r6,-16(fp)
  8114b4:	e1fffd17 	ldw	r7,-12(fp)
  8114b8:	103ee83a 	callr	r2
  8114bc:	e0bfff15 	stw	r2,-4(fp)
  8114c0:	00000106 	br	8114c8 <open+0x128>
  8114c4:	e03fff15 	stw	zero,-4(fp)
  8114c8:	e0bfff17 	ldw	r2,-4(fp)
  8114cc:	e0bff715 	stw	r2,-36(fp)
  8114d0:	00000206 	br	8114dc <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8114d4:	00bffb44 	movi	r2,-19
  8114d8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8114dc:	e0bff717 	ldw	r2,-36(fp)
  8114e0:	1004403a 	cmpge	r2,r2,zero
  8114e4:	1000091e 	bne	r2,zero,81150c <open+0x16c>
  {
    alt_release_fd (index);  
  8114e8:	e13ff817 	ldw	r4,-32(fp)
  8114ec:	080f9340 	call	80f934 <alt_release_fd>
    ALT_ERRNO = -status;
  8114f0:	081152c0 	call	81152c <alt_get_errno>
  8114f4:	e0fff717 	ldw	r3,-36(fp)
  8114f8:	00c7c83a 	sub	r3,zero,r3
  8114fc:	10c00015 	stw	r3,0(r2)
    return -1;
  811500:	00bfffc4 	movi	r2,-1
  811504:	e0bffe15 	stw	r2,-8(fp)
  811508:	00000206 	br	811514 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  81150c:	e0bff817 	ldw	r2,-32(fp)
  811510:	e0bffe15 	stw	r2,-8(fp)
  811514:	e0bffe17 	ldw	r2,-8(fp)
}
  811518:	e037883a 	mov	sp,fp
  81151c:	dfc00117 	ldw	ra,4(sp)
  811520:	df000017 	ldw	fp,0(sp)
  811524:	dec00204 	addi	sp,sp,8
  811528:	f800283a 	ret

0081152c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81152c:	defffd04 	addi	sp,sp,-12
  811530:	dfc00215 	stw	ra,8(sp)
  811534:	df000115 	stw	fp,4(sp)
  811538:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81153c:	00802074 	movhi	r2,129
  811540:	1091bb04 	addi	r2,r2,18156
  811544:	10800017 	ldw	r2,0(r2)
  811548:	1005003a 	cmpeq	r2,r2,zero
  81154c:	1000061e 	bne	r2,zero,811568 <alt_get_errno+0x3c>
  811550:	00802074 	movhi	r2,129
  811554:	1091bb04 	addi	r2,r2,18156
  811558:	10800017 	ldw	r2,0(r2)
  81155c:	103ee83a 	callr	r2
  811560:	e0bfff15 	stw	r2,-4(fp)
  811564:	00000306 	br	811574 <alt_get_errno+0x48>
  811568:	00802074 	movhi	r2,129
  81156c:	1091d004 	addi	r2,r2,18240
  811570:	e0bfff15 	stw	r2,-4(fp)
  811574:	e0bfff17 	ldw	r2,-4(fp)
}
  811578:	e037883a 	mov	sp,fp
  81157c:	dfc00117 	ldw	ra,4(sp)
  811580:	df000017 	ldw	fp,0(sp)
  811584:	dec00204 	addi	sp,sp,8
  811588:	f800283a 	ret

0081158c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  81158c:	defffa04 	addi	sp,sp,-24
  811590:	df000515 	stw	fp,20(sp)
  811594:	df000504 	addi	fp,sp,20
  811598:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81159c:	0005303a 	rdctl	r2,status
  8115a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8115a4:	e0fffd17 	ldw	r3,-12(fp)
  8115a8:	00bfff84 	movi	r2,-2
  8115ac:	1884703a 	and	r2,r3,r2
  8115b0:	1001703a 	wrctl	status,r2
  
  return context;
  8115b4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8115b8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  8115bc:	e0bfff17 	ldw	r2,-4(fp)
  8115c0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8115c4:	e0bffc17 	ldw	r2,-16(fp)
  8115c8:	10c00017 	ldw	r3,0(r2)
  8115cc:	e0bffc17 	ldw	r2,-16(fp)
  8115d0:	10800117 	ldw	r2,4(r2)
  8115d4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  8115d8:	e0bffc17 	ldw	r2,-16(fp)
  8115dc:	10c00117 	ldw	r3,4(r2)
  8115e0:	e0bffc17 	ldw	r2,-16(fp)
  8115e4:	10800017 	ldw	r2,0(r2)
  8115e8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8115ec:	e0fffc17 	ldw	r3,-16(fp)
  8115f0:	e0bffc17 	ldw	r2,-16(fp)
  8115f4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  8115f8:	e0fffc17 	ldw	r3,-16(fp)
  8115fc:	e0bffc17 	ldw	r2,-16(fp)
  811600:	18800015 	stw	r2,0(r3)
  811604:	e0bffe17 	ldw	r2,-8(fp)
  811608:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81160c:	e0bffb17 	ldw	r2,-20(fp)
  811610:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  811614:	e037883a 	mov	sp,fp
  811618:	df000017 	ldw	fp,0(sp)
  81161c:	dec00104 	addi	sp,sp,4
  811620:	f800283a 	ret

00811624 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  811624:	defffb04 	addi	sp,sp,-20
  811628:	dfc00415 	stw	ra,16(sp)
  81162c:	df000315 	stw	fp,12(sp)
  811630:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  811634:	d0a01417 	ldw	r2,-32688(gp)
  811638:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  81163c:	d0a02c17 	ldw	r2,-32592(gp)
  811640:	10800044 	addi	r2,r2,1
  811644:	d0a02c15 	stw	r2,-32592(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811648:	00003106 	br	811710 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  81164c:	e0bffe17 	ldw	r2,-8(fp)
  811650:	10800017 	ldw	r2,0(r2)
  811654:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  811658:	e0bffe17 	ldw	r2,-8(fp)
  81165c:	10800403 	ldbu	r2,16(r2)
  811660:	10803fcc 	andi	r2,r2,255
  811664:	1005003a 	cmpeq	r2,r2,zero
  811668:	1000051e 	bne	r2,zero,811680 <alt_tick+0x5c>
  81166c:	d0a02c17 	ldw	r2,-32592(gp)
  811670:	1004c03a 	cmpne	r2,r2,zero
  811674:	1000021e 	bne	r2,zero,811680 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  811678:	e0bffe17 	ldw	r2,-8(fp)
  81167c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  811680:	e0bffe17 	ldw	r2,-8(fp)
  811684:	10c00217 	ldw	r3,8(r2)
  811688:	d0a02c17 	ldw	r2,-32592(gp)
  81168c:	10c01e36 	bltu	r2,r3,811708 <alt_tick+0xe4>
  811690:	e0bffe17 	ldw	r2,-8(fp)
  811694:	10800403 	ldbu	r2,16(r2)
  811698:	10803fcc 	andi	r2,r2,255
  81169c:	1004c03a 	cmpne	r2,r2,zero
  8116a0:	1000191e 	bne	r2,zero,811708 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  8116a4:	e0bffe17 	ldw	r2,-8(fp)
  8116a8:	10c00317 	ldw	r3,12(r2)
  8116ac:	e0bffe17 	ldw	r2,-8(fp)
  8116b0:	11000517 	ldw	r4,20(r2)
  8116b4:	183ee83a 	callr	r3
  8116b8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8116bc:	e0bffd17 	ldw	r2,-12(fp)
  8116c0:	1004c03a 	cmpne	r2,r2,zero
  8116c4:	1000031e 	bne	r2,zero,8116d4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  8116c8:	e13ffe17 	ldw	r4,-8(fp)
  8116cc:	081158c0 	call	81158c <alt_alarm_stop>
  8116d0:	00000d06 	br	811708 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  8116d4:	e0bffe17 	ldw	r2,-8(fp)
  8116d8:	10c00217 	ldw	r3,8(r2)
  8116dc:	e0bffd17 	ldw	r2,-12(fp)
  8116e0:	1887883a 	add	r3,r3,r2
  8116e4:	e0bffe17 	ldw	r2,-8(fp)
  8116e8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8116ec:	e0bffe17 	ldw	r2,-8(fp)
  8116f0:	10c00217 	ldw	r3,8(r2)
  8116f4:	d0a02c17 	ldw	r2,-32592(gp)
  8116f8:	1880032e 	bgeu	r3,r2,811708 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  8116fc:	e0fffe17 	ldw	r3,-8(fp)
  811700:	00800044 	movi	r2,1
  811704:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  811708:	e0bfff17 	ldw	r2,-4(fp)
  81170c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811710:	d0e01404 	addi	r3,gp,-32688
  811714:	e0bffe17 	ldw	r2,-8(fp)
  811718:	10ffcc1e 	bne	r2,r3,81164c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  81171c:	e037883a 	mov	sp,fp
  811720:	dfc00117 	ldw	ra,4(sp)
  811724:	df000017 	ldw	fp,0(sp)
  811728:	dec00204 	addi	sp,sp,8
  81172c:	f800283a 	ret

00811730 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  811730:	deffff04 	addi	sp,sp,-4
  811734:	df000015 	stw	fp,0(sp)
  811738:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81173c:	000170fa 	wrctl	ienable,zero
}
  811740:	e037883a 	mov	sp,fp
  811744:	df000017 	ldw	fp,0(sp)
  811748:	dec00104 	addi	sp,sp,4
  81174c:	f800283a 	ret

00811750 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  811750:	defffa04 	addi	sp,sp,-24
  811754:	dfc00515 	stw	ra,20(sp)
  811758:	df000415 	stw	fp,16(sp)
  81175c:	df000404 	addi	fp,sp,16
  811760:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  811764:	00802074 	movhi	r2,129
  811768:	1091b604 	addi	r2,r2,18136
  81176c:	10800017 	ldw	r2,0(r2)
  811770:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  811774:	00003306 	br	811844 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  811778:	e0bffd17 	ldw	r2,-12(fp)
  81177c:	11000217 	ldw	r4,8(r2)
  811780:	0805b700 	call	805b70 <strlen>
  811784:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  811788:	e0bffd17 	ldw	r2,-12(fp)
  81178c:	10c00217 	ldw	r3,8(r2)
  811790:	e0bffc17 	ldw	r2,-16(fp)
  811794:	1885883a 	add	r2,r3,r2
  811798:	10bfffc4 	addi	r2,r2,-1
  81179c:	10800003 	ldbu	r2,0(r2)
  8117a0:	10803fcc 	andi	r2,r2,255
  8117a4:	1080201c 	xori	r2,r2,128
  8117a8:	10bfe004 	addi	r2,r2,-128
  8117ac:	10800bd8 	cmpnei	r2,r2,47
  8117b0:	1000031e 	bne	r2,zero,8117c0 <alt_find_file+0x70>
    {
      len -= 1;
  8117b4:	e0bffc17 	ldw	r2,-16(fp)
  8117b8:	10bfffc4 	addi	r2,r2,-1
  8117bc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8117c0:	e0bffc17 	ldw	r2,-16(fp)
  8117c4:	1007883a 	mov	r3,r2
  8117c8:	e0bffe17 	ldw	r2,-8(fp)
  8117cc:	1885883a 	add	r2,r3,r2
  8117d0:	10800003 	ldbu	r2,0(r2)
  8117d4:	10803fcc 	andi	r2,r2,255
  8117d8:	1080201c 	xori	r2,r2,128
  8117dc:	10bfe004 	addi	r2,r2,-128
  8117e0:	10800be0 	cmpeqi	r2,r2,47
  8117e4:	10000a1e 	bne	r2,zero,811810 <alt_find_file+0xc0>
  8117e8:	e0bffc17 	ldw	r2,-16(fp)
  8117ec:	1007883a 	mov	r3,r2
  8117f0:	e0bffe17 	ldw	r2,-8(fp)
  8117f4:	1885883a 	add	r2,r3,r2
  8117f8:	10800003 	ldbu	r2,0(r2)
  8117fc:	10803fcc 	andi	r2,r2,255
  811800:	1080201c 	xori	r2,r2,128
  811804:	10bfe004 	addi	r2,r2,-128
  811808:	1004c03a 	cmpne	r2,r2,zero
  81180c:	10000a1e 	bne	r2,zero,811838 <alt_find_file+0xe8>
  811810:	e0bffd17 	ldw	r2,-12(fp)
  811814:	11000217 	ldw	r4,8(r2)
  811818:	e1bffc17 	ldw	r6,-16(fp)
  81181c:	e17ffe17 	ldw	r5,-8(fp)
  811820:	081198c0 	call	81198c <memcmp>
  811824:	1004c03a 	cmpne	r2,r2,zero
  811828:	1000031e 	bne	r2,zero,811838 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  81182c:	e0bffd17 	ldw	r2,-12(fp)
  811830:	e0bfff15 	stw	r2,-4(fp)
  811834:	00000806 	br	811858 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  811838:	e0bffd17 	ldw	r2,-12(fp)
  81183c:	10800017 	ldw	r2,0(r2)
  811840:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  811844:	00c02074 	movhi	r3,129
  811848:	18d1b604 	addi	r3,r3,18136
  81184c:	e0bffd17 	ldw	r2,-12(fp)
  811850:	10ffc91e 	bne	r2,r3,811778 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  811854:	e03fff15 	stw	zero,-4(fp)
  811858:	e0bfff17 	ldw	r2,-4(fp)
}
  81185c:	e037883a 	mov	sp,fp
  811860:	dfc00117 	ldw	ra,4(sp)
  811864:	df000017 	ldw	fp,0(sp)
  811868:	dec00204 	addi	sp,sp,8
  81186c:	f800283a 	ret

00811870 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  811870:	defffa04 	addi	sp,sp,-24
  811874:	dfc00515 	stw	ra,20(sp)
  811878:	df000415 	stw	fp,16(sp)
  81187c:	dc000315 	stw	r16,12(sp)
  811880:	df000304 	addi	fp,sp,12
  811884:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  811888:	00bffa04 	movi	r2,-24
  81188c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  811890:	e03ffe15 	stw	zero,-8(fp)
  811894:	00002006 	br	811918 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
  811898:	e13ffe17 	ldw	r4,-8(fp)
  81189c:	04002074 	movhi	r16,129
  8118a0:	840d1a04 	addi	r16,r16,13416
  8118a4:	01400304 	movi	r5,12
  8118a8:	080eb4c0 	call	80eb4c <__mulsi3>
  8118ac:	1405883a 	add	r2,r2,r16
  8118b0:	10800017 	ldw	r2,0(r2)
  8118b4:	1004c03a 	cmpne	r2,r2,zero
  8118b8:	1000141e 	bne	r2,zero,81190c <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
  8118bc:	e13ffe17 	ldw	r4,-8(fp)
  8118c0:	04002074 	movhi	r16,129
  8118c4:	840d1a04 	addi	r16,r16,13416
  8118c8:	01400304 	movi	r5,12
  8118cc:	080eb4c0 	call	80eb4c <__mulsi3>
  8118d0:	1407883a 	add	r3,r2,r16
  8118d4:	e0bfff17 	ldw	r2,-4(fp)
  8118d8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  8118dc:	00802074 	movhi	r2,129
  8118e0:	1091ba04 	addi	r2,r2,18152
  8118e4:	10c00017 	ldw	r3,0(r2)
  8118e8:	e0bffe17 	ldw	r2,-8(fp)
  8118ec:	1880040e 	bge	r3,r2,811900 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
  8118f0:	00c02074 	movhi	r3,129
  8118f4:	18d1ba04 	addi	r3,r3,18152
  8118f8:	e0bffe17 	ldw	r2,-8(fp)
  8118fc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  811900:	e0bffe17 	ldw	r2,-8(fp)
  811904:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  811908:	00000606 	br	811924 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81190c:	e0bffe17 	ldw	r2,-8(fp)
  811910:	10800044 	addi	r2,r2,1
  811914:	e0bffe15 	stw	r2,-8(fp)
  811918:	e0bffe17 	ldw	r2,-8(fp)
  81191c:	10800810 	cmplti	r2,r2,32
  811920:	103fdd1e 	bne	r2,zero,811898 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  811924:	e0bffd17 	ldw	r2,-12(fp)
}
  811928:	e037883a 	mov	sp,fp
  81192c:	dfc00217 	ldw	ra,8(sp)
  811930:	df000117 	ldw	fp,4(sp)
  811934:	dc000017 	ldw	r16,0(sp)
  811938:	dec00304 	addi	sp,sp,12
  81193c:	f800283a 	ret

00811940 <atexit>:
  811940:	200b883a 	mov	r5,r4
  811944:	000d883a 	mov	r6,zero
  811948:	0009883a 	mov	r4,zero
  81194c:	000f883a 	mov	r7,zero
  811950:	0811a001 	jmpi	811a00 <__register_exitproc>

00811954 <exit>:
  811954:	defffe04 	addi	sp,sp,-8
  811958:	000b883a 	mov	r5,zero
  81195c:	dc000015 	stw	r16,0(sp)
  811960:	dfc00115 	stw	ra,4(sp)
  811964:	2021883a 	mov	r16,r4
  811968:	0811b380 	call	811b38 <__call_exitprocs>
  81196c:	00802074 	movhi	r2,129
  811970:	1091b104 	addi	r2,r2,18116
  811974:	11000017 	ldw	r4,0(r2)
  811978:	20800f17 	ldw	r2,60(r4)
  81197c:	10000126 	beq	r2,zero,811984 <exit+0x30>
  811980:	103ee83a 	callr	r2
  811984:	8009883a 	mov	r4,r16
  811988:	0811d280 	call	811d28 <_exit>

0081198c <memcmp>:
  81198c:	00c000c4 	movi	r3,3
  811990:	1980032e 	bgeu	r3,r6,8119a0 <memcmp+0x14>
  811994:	2144b03a 	or	r2,r4,r5
  811998:	10c4703a 	and	r2,r2,r3
  81199c:	10000f26 	beq	r2,zero,8119dc <memcmp+0x50>
  8119a0:	31ffffc4 	addi	r7,r6,-1
  8119a4:	3000061e 	bne	r6,zero,8119c0 <memcmp+0x34>
  8119a8:	00000a06 	br	8119d4 <memcmp+0x48>
  8119ac:	39ffffc4 	addi	r7,r7,-1
  8119b0:	00bfffc4 	movi	r2,-1
  8119b4:	21000044 	addi	r4,r4,1
  8119b8:	29400044 	addi	r5,r5,1
  8119bc:	38800526 	beq	r7,r2,8119d4 <memcmp+0x48>
  8119c0:	20c00003 	ldbu	r3,0(r4)
  8119c4:	28800003 	ldbu	r2,0(r5)
  8119c8:	18bff826 	beq	r3,r2,8119ac <memcmp+0x20>
  8119cc:	1885c83a 	sub	r2,r3,r2
  8119d0:	f800283a 	ret
  8119d4:	0005883a 	mov	r2,zero
  8119d8:	f800283a 	ret
  8119dc:	180f883a 	mov	r7,r3
  8119e0:	20c00017 	ldw	r3,0(r4)
  8119e4:	28800017 	ldw	r2,0(r5)
  8119e8:	18bfed1e 	bne	r3,r2,8119a0 <memcmp+0x14>
  8119ec:	31bfff04 	addi	r6,r6,-4
  8119f0:	21000104 	addi	r4,r4,4
  8119f4:	29400104 	addi	r5,r5,4
  8119f8:	39bff936 	bltu	r7,r6,8119e0 <memcmp+0x54>
  8119fc:	003fe806 	br	8119a0 <memcmp+0x14>

00811a00 <__register_exitproc>:
  811a00:	defffa04 	addi	sp,sp,-24
  811a04:	00802074 	movhi	r2,129
  811a08:	1091b104 	addi	r2,r2,18116
  811a0c:	dc000015 	stw	r16,0(sp)
  811a10:	14000017 	ldw	r16,0(r2)
  811a14:	dd000415 	stw	r20,16(sp)
  811a18:	2829883a 	mov	r20,r5
  811a1c:	81405217 	ldw	r5,328(r16)
  811a20:	dcc00315 	stw	r19,12(sp)
  811a24:	dc800215 	stw	r18,8(sp)
  811a28:	dc400115 	stw	r17,4(sp)
  811a2c:	dfc00515 	stw	ra,20(sp)
  811a30:	2023883a 	mov	r17,r4
  811a34:	3027883a 	mov	r19,r6
  811a38:	3825883a 	mov	r18,r7
  811a3c:	28002526 	beq	r5,zero,811ad4 <__register_exitproc+0xd4>
  811a40:	29000117 	ldw	r4,4(r5)
  811a44:	008007c4 	movi	r2,31
  811a48:	11002716 	blt	r2,r4,811ae8 <__register_exitproc+0xe8>
  811a4c:	8800101e 	bne	r17,zero,811a90 <__register_exitproc+0x90>
  811a50:	2105883a 	add	r2,r4,r4
  811a54:	1085883a 	add	r2,r2,r2
  811a58:	20c00044 	addi	r3,r4,1
  811a5c:	1145883a 	add	r2,r2,r5
  811a60:	0009883a 	mov	r4,zero
  811a64:	15000215 	stw	r20,8(r2)
  811a68:	28c00115 	stw	r3,4(r5)
  811a6c:	2005883a 	mov	r2,r4
  811a70:	dfc00517 	ldw	ra,20(sp)
  811a74:	dd000417 	ldw	r20,16(sp)
  811a78:	dcc00317 	ldw	r19,12(sp)
  811a7c:	dc800217 	ldw	r18,8(sp)
  811a80:	dc400117 	ldw	r17,4(sp)
  811a84:	dc000017 	ldw	r16,0(sp)
  811a88:	dec00604 	addi	sp,sp,24
  811a8c:	f800283a 	ret
  811a90:	29802204 	addi	r6,r5,136
  811a94:	00800044 	movi	r2,1
  811a98:	110e983a 	sll	r7,r2,r4
  811a9c:	30c04017 	ldw	r3,256(r6)
  811aa0:	2105883a 	add	r2,r4,r4
  811aa4:	1085883a 	add	r2,r2,r2
  811aa8:	1185883a 	add	r2,r2,r6
  811aac:	19c6b03a 	or	r3,r3,r7
  811ab0:	14802015 	stw	r18,128(r2)
  811ab4:	14c00015 	stw	r19,0(r2)
  811ab8:	00800084 	movi	r2,2
  811abc:	30c04015 	stw	r3,256(r6)
  811ac0:	88bfe31e 	bne	r17,r2,811a50 <__register_exitproc+0x50>
  811ac4:	30804117 	ldw	r2,260(r6)
  811ac8:	11c4b03a 	or	r2,r2,r7
  811acc:	30804115 	stw	r2,260(r6)
  811ad0:	003fdf06 	br	811a50 <__register_exitproc+0x50>
  811ad4:	00802074 	movhi	r2,129
  811ad8:	10922a04 	addi	r2,r2,18600
  811adc:	100b883a 	mov	r5,r2
  811ae0:	80805215 	stw	r2,328(r16)
  811ae4:	003fd606 	br	811a40 <__register_exitproc+0x40>
  811ae8:	00800034 	movhi	r2,0
  811aec:	10800004 	addi	r2,r2,0
  811af0:	1000021e 	bne	r2,zero,811afc <__register_exitproc+0xfc>
  811af4:	013fffc4 	movi	r4,-1
  811af8:	003fdc06 	br	811a6c <__register_exitproc+0x6c>
  811afc:	01006404 	movi	r4,400
  811b00:	103ee83a 	callr	r2
  811b04:	1007883a 	mov	r3,r2
  811b08:	103ffa26 	beq	r2,zero,811af4 <__register_exitproc+0xf4>
  811b0c:	80805217 	ldw	r2,328(r16)
  811b10:	180b883a 	mov	r5,r3
  811b14:	18000115 	stw	zero,4(r3)
  811b18:	18800015 	stw	r2,0(r3)
  811b1c:	80c05215 	stw	r3,328(r16)
  811b20:	18006215 	stw	zero,392(r3)
  811b24:	18006315 	stw	zero,396(r3)
  811b28:	0009883a 	mov	r4,zero
  811b2c:	883fc826 	beq	r17,zero,811a50 <__register_exitproc+0x50>
  811b30:	003fd706 	br	811a90 <__register_exitproc+0x90>

00811b34 <register_fini>:
  811b34:	f800283a 	ret

00811b38 <__call_exitprocs>:
  811b38:	00802074 	movhi	r2,129
  811b3c:	1091b104 	addi	r2,r2,18116
  811b40:	10800017 	ldw	r2,0(r2)
  811b44:	defff304 	addi	sp,sp,-52
  811b48:	df000b15 	stw	fp,44(sp)
  811b4c:	d8800115 	stw	r2,4(sp)
  811b50:	00800034 	movhi	r2,0
  811b54:	10800004 	addi	r2,r2,0
  811b58:	1005003a 	cmpeq	r2,r2,zero
  811b5c:	d8800215 	stw	r2,8(sp)
  811b60:	d8800117 	ldw	r2,4(sp)
  811b64:	dd400815 	stw	r21,32(sp)
  811b68:	dd000715 	stw	r20,28(sp)
  811b6c:	10805204 	addi	r2,r2,328
  811b70:	dfc00c15 	stw	ra,48(sp)
  811b74:	ddc00a15 	stw	r23,40(sp)
  811b78:	dd800915 	stw	r22,36(sp)
  811b7c:	dcc00615 	stw	r19,24(sp)
  811b80:	dc800515 	stw	r18,20(sp)
  811b84:	dc400415 	stw	r17,16(sp)
  811b88:	dc000315 	stw	r16,12(sp)
  811b8c:	282b883a 	mov	r21,r5
  811b90:	2039883a 	mov	fp,r4
  811b94:	d8800015 	stw	r2,0(sp)
  811b98:	2829003a 	cmpeq	r20,r5,zero
  811b9c:	d8800117 	ldw	r2,4(sp)
  811ba0:	14405217 	ldw	r17,328(r2)
  811ba4:	88001026 	beq	r17,zero,811be8 <__call_exitprocs+0xb0>
  811ba8:	ddc00017 	ldw	r23,0(sp)
  811bac:	88800117 	ldw	r2,4(r17)
  811bb0:	8c802204 	addi	r18,r17,136
  811bb4:	143fffc4 	addi	r16,r2,-1
  811bb8:	80000916 	blt	r16,zero,811be0 <__call_exitprocs+0xa8>
  811bbc:	05bfffc4 	movi	r22,-1
  811bc0:	a000151e 	bne	r20,zero,811c18 <__call_exitprocs+0xe0>
  811bc4:	8409883a 	add	r4,r16,r16
  811bc8:	2105883a 	add	r2,r4,r4
  811bcc:	1485883a 	add	r2,r2,r18
  811bd0:	10c02017 	ldw	r3,128(r2)
  811bd4:	a8c01126 	beq	r21,r3,811c1c <__call_exitprocs+0xe4>
  811bd8:	843fffc4 	addi	r16,r16,-1
  811bdc:	85bff81e 	bne	r16,r22,811bc0 <__call_exitprocs+0x88>
  811be0:	d8800217 	ldw	r2,8(sp)
  811be4:	10003126 	beq	r2,zero,811cac <__call_exitprocs+0x174>
  811be8:	dfc00c17 	ldw	ra,48(sp)
  811bec:	df000b17 	ldw	fp,44(sp)
  811bf0:	ddc00a17 	ldw	r23,40(sp)
  811bf4:	dd800917 	ldw	r22,36(sp)
  811bf8:	dd400817 	ldw	r21,32(sp)
  811bfc:	dd000717 	ldw	r20,28(sp)
  811c00:	dcc00617 	ldw	r19,24(sp)
  811c04:	dc800517 	ldw	r18,20(sp)
  811c08:	dc400417 	ldw	r17,16(sp)
  811c0c:	dc000317 	ldw	r16,12(sp)
  811c10:	dec00d04 	addi	sp,sp,52
  811c14:	f800283a 	ret
  811c18:	8409883a 	add	r4,r16,r16
  811c1c:	88c00117 	ldw	r3,4(r17)
  811c20:	2105883a 	add	r2,r4,r4
  811c24:	1445883a 	add	r2,r2,r17
  811c28:	18ffffc4 	addi	r3,r3,-1
  811c2c:	11800217 	ldw	r6,8(r2)
  811c30:	1c001526 	beq	r3,r16,811c88 <__call_exitprocs+0x150>
  811c34:	10000215 	stw	zero,8(r2)
  811c38:	303fe726 	beq	r6,zero,811bd8 <__call_exitprocs+0xa0>
  811c3c:	00c00044 	movi	r3,1
  811c40:	1c06983a 	sll	r3,r3,r16
  811c44:	90804017 	ldw	r2,256(r18)
  811c48:	8cc00117 	ldw	r19,4(r17)
  811c4c:	1884703a 	and	r2,r3,r2
  811c50:	10001426 	beq	r2,zero,811ca4 <__call_exitprocs+0x16c>
  811c54:	90804117 	ldw	r2,260(r18)
  811c58:	1884703a 	and	r2,r3,r2
  811c5c:	10000c1e 	bne	r2,zero,811c90 <__call_exitprocs+0x158>
  811c60:	2105883a 	add	r2,r4,r4
  811c64:	1485883a 	add	r2,r2,r18
  811c68:	11400017 	ldw	r5,0(r2)
  811c6c:	e009883a 	mov	r4,fp
  811c70:	303ee83a 	callr	r6
  811c74:	88800117 	ldw	r2,4(r17)
  811c78:	98bfc81e 	bne	r19,r2,811b9c <__call_exitprocs+0x64>
  811c7c:	b8800017 	ldw	r2,0(r23)
  811c80:	147fd526 	beq	r2,r17,811bd8 <__call_exitprocs+0xa0>
  811c84:	003fc506 	br	811b9c <__call_exitprocs+0x64>
  811c88:	8c000115 	stw	r16,4(r17)
  811c8c:	003fea06 	br	811c38 <__call_exitprocs+0x100>
  811c90:	2105883a 	add	r2,r4,r4
  811c94:	1485883a 	add	r2,r2,r18
  811c98:	11000017 	ldw	r4,0(r2)
  811c9c:	303ee83a 	callr	r6
  811ca0:	003ff406 	br	811c74 <__call_exitprocs+0x13c>
  811ca4:	303ee83a 	callr	r6
  811ca8:	003ff206 	br	811c74 <__call_exitprocs+0x13c>
  811cac:	88800117 	ldw	r2,4(r17)
  811cb0:	1000081e 	bne	r2,zero,811cd4 <__call_exitprocs+0x19c>
  811cb4:	89000017 	ldw	r4,0(r17)
  811cb8:	20000726 	beq	r4,zero,811cd8 <__call_exitprocs+0x1a0>
  811cbc:	b9000015 	stw	r4,0(r23)
  811cc0:	8809883a 	mov	r4,r17
  811cc4:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  811cc8:	bc400017 	ldw	r17,0(r23)
  811ccc:	883fb71e 	bne	r17,zero,811bac <__call_exitprocs+0x74>
  811cd0:	003fc506 	br	811be8 <__call_exitprocs+0xb0>
  811cd4:	89000017 	ldw	r4,0(r17)
  811cd8:	882f883a 	mov	r23,r17
  811cdc:	2023883a 	mov	r17,r4
  811ce0:	883fb21e 	bne	r17,zero,811bac <__call_exitprocs+0x74>
  811ce4:	003fc006 	br	811be8 <__call_exitprocs+0xb0>

00811ce8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  811ce8:	defffd04 	addi	sp,sp,-12
  811cec:	df000215 	stw	fp,8(sp)
  811cf0:	df000204 	addi	fp,sp,8
  811cf4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  811cf8:	e0bfff17 	ldw	r2,-4(fp)
  811cfc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  811d00:	e0bffe17 	ldw	r2,-8(fp)
  811d04:	1005003a 	cmpeq	r2,r2,zero
  811d08:	1000021e 	bne	r2,zero,811d14 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  811d0c:	002af070 	cmpltui	zero,zero,43969
  811d10:	00000106 	br	811d18 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  811d14:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  811d18:	e037883a 	mov	sp,fp
  811d1c:	df000017 	ldw	fp,0(sp)
  811d20:	dec00104 	addi	sp,sp,4
  811d24:	f800283a 	ret

00811d28 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  811d28:	defffd04 	addi	sp,sp,-12
  811d2c:	dfc00215 	stw	ra,8(sp)
  811d30:	df000115 	stw	fp,4(sp)
  811d34:	df000104 	addi	fp,sp,4
  811d38:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  811d3c:	e13fff17 	ldw	r4,-4(fp)
  811d40:	0811ce80 	call	811ce8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  811d44:	003fff06 	br	811d44 <_exit+0x1c>
  811d48:	00811b34 	movhi	r2,1132
